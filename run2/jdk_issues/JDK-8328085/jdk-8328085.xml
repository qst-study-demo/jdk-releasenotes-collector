<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Sat Sep 27 09:38:48 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8328085] C2: Use after free in PhaseChaitin::Register_Allocate()</title>
                <link>https://bugs.openjdk.org/browse/JDK-8328085</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>We have seen the assertion  &lt;br/&gt;
assert(idx &amp;lt; _maxlrg) failed: oob&lt;br/&gt;
in vmTestbase/vm/mlvm/indy/func/java/verifyStackTrace/INDIFY_Test.java&lt;br/&gt;
2 times in last months on AIX ppc64,  now also on Windows x86_64 .&lt;br/&gt;
&lt;br/&gt;
#  Internal Error (/priv/jenkins/client-home/workspace/openjdk-22u-aix_ppc64-dbg/jdk/src/hotspot/share/opto/chaitin.hpp:295), pid=8192474, tid=4805&lt;br/&gt;
#  assert(idx &amp;lt; _maxlrg) failed: oob&lt;br/&gt;
#&lt;br/&gt;
&lt;br/&gt;
Stack: [0x0000000125550000,0x000000012594d888],  sp=0x0000000125949ed0,  free space=4071k&lt;br/&gt;
No context given, using current context.&lt;br/&gt;
Native frame:&lt;br/&gt;
iar:  0x0900000003ede16c libjvm.so::AixNativeCallstack::print_callstack_for_context(outputStream*, ucontext_t const*, bool, char*, unsigned long)+0x4cc  (C++ uses_alloca saves_cr saves_lr stores_bc gpr_saved:18 fixedparms:5 parmsonstk:1)&lt;br/&gt;
lr:   0x09000000039bc9b4 libjvm.so::fdStream::write(char const*, unsigned long)+0x44  (C++ uses_alloca saves_lr stores_bc gpr_saved:4 fixedparms:3 parmsonstk:1)&lt;br/&gt;
sp:   0x0000000125949190 (base - 0x46F8) &lt;br/&gt;
rtoc: 0x08001000a03da400 &lt;br/&gt;
|---stackaddr----|   |----lrsave------|:   &amp;lt;function name&amp;gt;&lt;br/&gt;
0x0000000125949580 - 0x0900000003eddc2c libjvm.so::os::Aix::platform_print_native_stack(outputStream*, void const*, char*, int, unsigned char*&amp;amp;)+0x24  (C++ uses_alloca saves_lr stores_bc gpr_saved:1 fixedparms:5 parmsonstk:1)&lt;br/&gt;
0x0000000125949600 - 0x09000000039cd348 libjvm.so::VMError::report(outputStream*, bool)+0x1c0c  (C++ fp_present uses_alloca saves_cr saves_lr stores_bc gpr_saved:18 fixedparms:2 parmsonstk:1)&lt;br/&gt;
0x0000000125949ee0 - 0x09000000039bbdc8 libjvm.so::VMError::report_and_die(int, char const*, char const*, char*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x7cc  (C++ uses_alloca saves_lr stores_bc gpr_saved:18 fixedparms:8 parmsonstk:1)&lt;br/&gt;
0x000000012594a0d0 - 0x09000000039bb5b0 libjvm.so::VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, char*)+0x58  (C++ uses_alloca saves_lr stores_bc gpr_saved:2 fixedparms:7 parmsonstk:1)&lt;br/&gt;
0x000000012594a170 - 0x09000000039bb290 libjvm.so::report_vm_error(char const*, int, char const*, char const*, ...)+0x8c  (C++ uses_alloca saves_lr stores_bc gpr_saved:5 fixedparms:4 parmsonstk:1)&lt;br/&gt;
0x000000012594a210 - 0x09000000047807ec libjvm.so::PhaseChaitin::Register_Allocate()+0x10a0  (C++ fp_present uses_alloca saves_lr stores_bc gpr_saved:18 fixedparms:1 parmsonstk:1)&lt;br/&gt;
0x000000012594a5c0 - 0x090000000475fc64 libjvm.so::Compile::Code_Gen()+0x21c  (C++ uses_alloca saves_lr stores_bc gpr_saved:6 fixedparms:1 parmsonstk:1)&lt;br/&gt;
0x000000012594b200 - 0x09000000047dd12c libjvm.so::Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x16c4  (C++ fp_present uses_alloca saves_cr saves_lr stores_bc gpr_saved:18 fixedparms:6 parmsonstk:1)&lt;br/&gt;
0x000000012594be70 - 0x09000000049ec7a8 libjvm.so::C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x25c  (C++ uses_alloca saves_cr saves_lr stores_bc gpr_saved:18 fixedparms:6 parmsonstk:1)&lt;br/&gt;
0x000000012594ca90 - 0x0900000003cffb44 libjvm.so::CompileBroker::invoke_compiler_on_method(CompileTask*)+0xcb4  (C++ fp_present uses_alloca saves_cr saves_lr stores_bc gpr_saved:18 fixedparms:1 parmsonstk:1)&lt;br/&gt;
0x000000012594d210 - 0x0900000003cf0264 libjvm.so::CompileBroker::compiler_thread_loop()+0x4c0  (C++ fp_present uses_alloca saves_cr saves_lr stores_bc gpr_saved:18 parmsonstk:1)&lt;br/&gt;
0x000000012594d460 - 0x0900000003cefd24 libjvm.so::CompilerThread::thread_entry(JavaThread*, JavaThread*)+0x58  (C++ uses_alloca saves_lr stores_bc gpr_saved:1 fixedparms:2 parmsonstk:1)&lt;br/&gt;
0x000000012594d4e0 - 0x0900000003b8ef84 libjvm.so::JavaThread::thread_main_inner()+0x1f8  (C++ uses_alloca saves_lr stores_bc gpr_saved:4 fixedparms:1 parmsonstk:1)&lt;br/&gt;
0x000000012594d5b0 - 0x0900000003b8d06c libjvm.so::JavaThread::run()+0x214  (C++ uses_alloca saves_lr stores_bc gpr_saved:5 fixedparms:1 parmsonstk:1)&lt;br/&gt;
0x000000012594d650 - 0x0900000003abb85c libjvm.so::Thread::call_run()+0x128  (C++ uses_alloca saves_lr stores_bc gpr_saved:3 fixedparms:1 parmsonstk:1)&lt;br/&gt;
0x000000012594d6e0 - 0x0900000003abad50 libjvm.so::thread_native_entry(Thread*)+0x194  (C++ uses_alloca saves_lr stores_bc gpr_saved:9 fixedparms:1 parmsonstk:1)&lt;br/&gt;
0x000000012594d7a0 - 0x090000000056204c libpthreads.a::_pthread_body+0xec  (C saves_lr stores_bc gpr_saved:1 fixedparms:1 )&lt;br/&gt;
0x000000012594d820 - 0x0000000000000000 &lt;br/&gt;
*** end of backchain ***&lt;br/&gt;
&lt;br/&gt;
*UPDATE 2024-10-04*&lt;br/&gt;
&lt;br/&gt;
Several crash logs show the  badResourceValue pattern (abababab r7 below). That indicates a use-after-free issue with memory allocated from the ResourceArea similar to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8336095&quot; title=&quot;Use-after-free in Superword leads to memory corruption&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8336095&quot;&gt;&lt;strike&gt;JDK-8336095&lt;/strike&gt;&lt;/a&gt;.&lt;br/&gt;
&lt;br/&gt;
pc =0x00007fffa8a3ed70  lr =0x00007fffa8a545b4  ctr=0x00007fffaaef89b0  &lt;br/&gt;
r0 =0x00007fffa8a545b4  r1 =0x00007ffe2a9faf00  r2 =0x00007fffaa8b0f00  &lt;br/&gt;
r3 =0x00007fffaa1e0448  r4 =0x0000000000000127  r5 =0x00007fffaa1e0428  &lt;br/&gt;
r6 =0x00007fffaa1e0400  r7 =0x00000000abababab  r8 =0x0000000000000058  &lt;br/&gt;
r9 =0x00007ffe2a9fb0c0  r10=0x00007fffaae50000  r11=0x00007fffa9a599a0  &lt;br/&gt;
r12=0x00007fffaaef89b0  r13=0x00007ffe2aa068e0  r14=0x0000000000000003  &lt;br/&gt;
r15=0x0000000000000010  r16=0x0000000000000000  r17=0x00007fffaa964bb0  &lt;br/&gt;
r18=0x00007ffe2a9fb638  r19=0x00007ffe2a9fb080  r20=0x00007fffaa1e22f0  &lt;br/&gt;
r21=0x00007ffe2a9fb4f0  r22=0x0000000000000001  r23=0x00007ffe2a9fb010  &lt;br/&gt;
r24=0x00007ffe2a9fb088  r25=0x00007fffaa93ff20  r26=0x0000000000000000  &lt;br/&gt;
r27=0x000000000000002f  r28=0x00007fffaa932170  r29=0x00007ffe2a9fb048  &lt;br/&gt;
r30=0x00007ffe2a9fb4c8  r31=0x00007ffe2a9faf00  &lt;br/&gt;
&lt;br/&gt;
*UPDATE 2024-11-04*&lt;br/&gt;
&lt;br/&gt;
Several crash logs have messages similar to&lt;br/&gt;
&lt;br/&gt;
#  assert(idx &amp;lt; _maxlrg) failed: oob: index 2880154539 not smaller than 131&lt;br/&gt;
&lt;br/&gt;
The index 2880154539 in hexadecimal format is abababab. This means that badResourceValue isn&amp;#39;t just coincidentally near data used by the program but abababab is actually data used by the program (as variable `idx`). That is a strong indication for a use-after-free bug.&lt;br/&gt;
</description>
                <environment></environment>
        <key id="5124091">JDK-8328085</key>
            <summary>C2: Use after free in PhaseChaitin::Register_Allocate()</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="rrich">Richard Reingruber</assignee>
                                    <reporter username="mbaesken">Matthias Baesken</reporter>
                        <labels>
                            <label>c2</label>
                            <label>c2-regalloc</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>oracle-triage-23</label>
                    </labels>
                <created>Wed, 13 Mar 2024 06:15:54 -0700</created>
                <updated>Wed, 3 Sep 2025 13:40:06 -0700</updated>
                            <resolved>Wed, 20 Nov 2024 23:08:35 -0800</resolved>
                                    <version>7</version>
                    <version>8</version>
                    <version>11</version>
                    <version>17</version>
                    <version>21</version>
                    <version>22</version>
                    <version>23</version>
                    <version>24</version>
                                    <fixVersion>24</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>8</watches>
                                                                                                                <comments>
                            <comment id="14737846" author="roboduke" created="Mon, 13 Jan 2025 06:18:34 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/3197&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/3197&lt;/a&gt;&lt;br/&gt;
Date: 2025-01-09 14:37:36 +0000</comment>
                            <comment id="14737842" author="rrich" created="Mon, 13 Jan 2025 06:08:31 -0800"  >Fix request (17u)&lt;br/&gt;
&lt;br/&gt;
I would like to backport the fix because we had 2 crashes with the same symptoms now also in our 17u-dev testing on ppc64le.&lt;br/&gt;
&lt;br/&gt;
The backport is clean.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;d consider the risk medium. There could be scenarios with higher memory usage in c2 register allocation.&lt;br/&gt;
DaCapo tests were ok (see pull request).&lt;br/&gt;
&lt;br/&gt;
The fix passed our CI testing: JTReg tests: tier1-4 of hotspot and jdk. All of Langtools and jaxp. JCK, SPECjvm2008, SPECjbb2015, Renaissance Suite, and SAP specific tests.&lt;br/&gt;
Testing was done with fastdebug builds on the main platforms and also on Linux/PPC64le and AIX. </comment>
                            <comment id="14731633" author="roboduke" created="Thu, 12 Dec 2024 11:45:54 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/1217&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/1217&lt;/a&gt;&lt;br/&gt;
Date: 2024-12-10 08:47:30 +0000</comment>
                            <comment id="14731632" author="rrich" created="Thu, 12 Dec 2024 11:41:39 -0800"  >Fix request (21u)&lt;br/&gt;
&lt;br/&gt;
I would like to do the backport because we see crashes on ppc64 because of the use-after-free.&lt;br/&gt;
&lt;br/&gt;
The backport is clean (according to the bot).&lt;br/&gt;
Doing it I actually had to resolve a minimal contextual conflict because the TracePhase constructor was changed.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;d consider the risk medium. There could be scenarios with higher memory usage in c2 register allocation.&lt;br/&gt;
DaCapo tests were ok (see pull request).&lt;br/&gt;
&lt;br/&gt;
The fix passed our CI testing: JTReg tests: tier1-4 of hotspot and jdk. All of Langtools and jaxp. JCK, SPECjvm2008, SPECjbb2015, Renaissance Suite, and SAP specific tests.&lt;br/&gt;
Testing was done with fastdebug builds on the main platforms and also on Linux/PPC64le and AIX.&lt;br/&gt;
</comment>
                            <comment id="14724786" author="dukebot" created="Wed, 20 Nov 2024 23:08:34 -0800"  >Changeset: 93aa7e2f&lt;br/&gt;
Branch: master&lt;br/&gt;
Author:    Richard Reingruber &amp;lt;&lt;a href=&apos;mailto:rrich@openjdk.org&apos;&gt;rrich@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-11-21 06:57:09 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/93aa7e2fcf87c4dc62de4ea71be543ee677b11be&quot;&gt;https://git.openjdk.org/jdk/commit/93aa7e2fcf87c4dc62de4ea71be543ee677b11be&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14724152" author="rrich" created="Wed, 20 Nov 2024 02:22:30 -0800"  >[~thartmann] I&amp;#39;ve create &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8344609&quot; title=&quot;Check ResourceMark nesting when allocating a GrowableArray on an alternative ResourceArea&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8344609&quot;&gt;&lt;strike&gt;JDK-8344609&lt;/strike&gt;&lt;/a&gt;&lt;br/&gt;
The nesting check fails running test/hotspot/jtreg/applications/ctw/modules/java_desktop.java with the draft-pr: &lt;a href=&quot;https://github.com/openjdk/jdk/pull/22269&quot;&gt;https://github.com/openjdk/jdk/pull/22269&lt;/a&gt;&lt;br/&gt;
But only on ppc not on x86_64.</comment>
                            <comment id="14724151" author="thartmann" created="Wed, 20 Nov 2024 02:20:11 -0800"  >Okay, thanks for confirming!</comment>
                            <comment id="14723805" author="rrich" created="Tue, 19 Nov 2024 07:44:20 -0800"  >&amp;gt; So this is a regression from &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8068881&quot; title=&quot;SIGBUS in C2 compiled method weblogic.wsee.jaxws.framework.jaxrpc.EnvironmentFactory$SimulatedWsdlDefinitions.&amp;lt;init&amp;gt;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8068881&quot;&gt;&lt;strike&gt;JDK-8068881&lt;/strike&gt;&lt;/a&gt;, correct?&lt;br/&gt;
&lt;br/&gt;
Yes, I think so. Pretty old bug, if true.&lt;br/&gt;
We&amp;#39;ve seen this also in 21 but not in older releases. Crashes happen mostly with applications/ctw/modules/java_desktop.java. Can&amp;#39;t find a crash on another platform than ppc.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; &amp;gt; I think the nesting check can be generalized for arbitrary ResourceAreas (will create a RFE).&lt;br/&gt;
&amp;gt;&lt;br/&gt;
&amp;gt; Did you create an RFE yet? &lt;br/&gt;
&lt;br/&gt;
Not yet. I started experimenting a little bit. Will create an RFE later.</comment>
                            <comment id="14723800" author="thartmann" created="Tue, 19 Nov 2024 07:23:39 -0800"  >So this is a regression from &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8068881&quot; title=&quot;SIGBUS in C2 compiled method weblogic.wsee.jaxws.framework.jaxrpc.EnvironmentFactory$SimulatedWsdlDefinitions.&amp;lt;init&amp;gt;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8068881&quot;&gt;&lt;strike&gt;JDK-8068881&lt;/strike&gt;&lt;/a&gt;, correct?&lt;br/&gt;
&lt;br/&gt;
&amp;gt; I think the nesting check can be generalized for arbitrary ResourceAreas (will create a RFE).&lt;br/&gt;
&lt;br/&gt;
Did you create an RFE yet?</comment>
                            <comment id="14723798" author="thartmann" created="Tue, 19 Nov 2024 07:20:23 -0800"  >&amp;gt; [~thartmann] have you maybe seen crashes with the badResourceValue pattern recently?&lt;br/&gt;
&lt;br/&gt;
Sorry [~rrich], I missed your message. No, that doesn&amp;#39;t ring a bell.</comment>
                            <comment id="14723667" author="roboduke" created="Tue, 19 Nov 2024 00:20:00 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/22200&quot;&gt;https://git.openjdk.org/jdk/pull/22200&lt;/a&gt;&lt;br/&gt;
Date: 2024-11-18 10:53:41 +0000</comment>
                            <comment id="14723086" author="rrich" created="Mon, 18 Nov 2024 02:14:12 -0800"  >The issues are most likely caused by the ResourceMark in PhaseChaitin::merge_multidefs.&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/b9c6ce900b512adfcaccd2341be3eb0003a28b87/src/hotspot/share/opto/postaloc.cpp#L405&quot;&gt;https://github.com/openjdk/jdk/blob/b9c6ce900b512adfcaccd2341be3eb0003a28b87/src/hotspot/share/opto/postaloc.cpp#L405&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
The ResourceMark frees memory allocated when expanding the growable array PhaseChaitin::_lrg_map::_names in the callee PhaseChaitin::possibly_merge_multidef.&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/b9c6ce900b512adfcaccd2341be3eb0003a28b87/src/hotspot/share/opto/postaloc.cpp#L457&quot;&gt;https://github.com/openjdk/jdk/blob/b9c6ce900b512adfcaccd2341be3eb0003a28b87/src/hotspot/share/opto/postaloc.cpp#L457&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
The freed memory is accessed in the caller PhaseChaitin::Register_Allocate.&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/b9c6ce900b512adfcaccd2341be3eb0003a28b87/src/hotspot/share/opto/chaitin.cpp#L691&quot;&gt;https://github.com/openjdk/jdk/blob/b9c6ce900b512adfcaccd2341be3eb0003a28b87/src/hotspot/share/opto/chaitin.cpp#L691&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
I was able to reproduce the issue reliably running test/hotspot/jtreg/applications/ctw/modules/java_desktop.java on ppc64le but not on x86_64.&lt;br/&gt;
For that I replaced the ChunkPool with an allocator that mmaps Chunks to increasing addresses and unmaps when ResourceMarks are popped.&lt;br/&gt;
The issue didn&amp;#39;t reproduce without the ResourceMark in merge_multidefs.&lt;br/&gt;
&lt;br/&gt;
Sidemark: GrowableArrayNestingCheck does not fail because an Arena is explicitly passed to the GrowableArray constructor.&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/b9c6ce900b512adfcaccd2341be3eb0003a28b87/src/hotspot/share/opto/chaitin.hpp#L378&quot;&gt;https://github.com/openjdk/jdk/blob/b9c6ce900b512adfcaccd2341be3eb0003a28b87/src/hotspot/share/opto/chaitin.hpp#L378&lt;/a&gt;&lt;br/&gt;
even though it is the current thread&amp;#39;s ResourceArea&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/b9c6ce900b512adfcaccd2341be3eb0003a28b87/src/hotspot/share/opto/chaitin.cpp#L212&quot;&gt;https://github.com/openjdk/jdk/blob/b9c6ce900b512adfcaccd2341be3eb0003a28b87/src/hotspot/share/opto/chaitin.cpp#L212&lt;/a&gt;&lt;br/&gt;
The nesting check is only performed if the GrowableArray allocates from the current thread&amp;#39;s ResourceArea.&lt;br/&gt;
&lt;br/&gt;
The nesting check fails if the GrowableArray constructor for the ResourceArea is used.&lt;br/&gt;
&lt;br/&gt;
I think the nesting check can be generalized for arbitrary ResourceAreas (will create a RFE).</comment>
                            <comment id="14720266" author="mbaesken" created="Fri, 8 Nov 2024 00:28:50 -0800"  >&amp;gt; This happend today in our jdk21u-dev tests. Did we backport a bad change?&lt;br/&gt;
&lt;br/&gt;
The issue was observed before a few times in jdk21 (for example in September 2024 on Linux ppc64le, and in July 2024 on AIX) so it is not new. However it occurs more often in jdk24 (maybe because we run tests there more often, maybe because the coding is different in 24).</comment>
                            <comment id="14720245" author="goetz" created="Thu, 7 Nov 2024 23:10:47 -0800"  >This happend today in our jdk21u-dev tests. Did we backport a bad change?&lt;br/&gt;
&lt;br/&gt;
applications/ctw/modules/java_desktop.java&lt;br/&gt;
linuxppc64le</comment>
                            <comment id="14710244" author="rrich" created="Fri, 4 Oct 2024 00:28:35 -0700"  >[~thartmann] have you maybe seen crashes with the badResourceValue pattern recently?</comment>
                            <comment id="14710242" author="mbaesken" created="Fri, 4 Oct 2024 00:14:28 -0700"  >The issue is mostly ( ~ 80% - 90% of cases) triggered by the applications/ctw/modules  tests like&lt;br/&gt;
applications/ctw/modules/java_management.java&lt;br/&gt;
applications/ctw/modules/jdk_internal_le.java&lt;br/&gt;
applications/ctw/modules/java_xml.java&lt;br/&gt;
applications/ctw/modules/java_desktop.java&lt;br/&gt;
Is there anything special in those tests, that they can trigger this assertion ?&lt;br/&gt;
Additionally , 15 of the now 35  observations are since since 10th September (jdk24 , except 2 times jdk21) , so the issue shows up much more in recent weeks. </comment>
                            <comment id="14710136" author="mdoerr" created="Thu, 3 Oct 2024 12:53:42 -0700"  >Crash happens while accessing corrupted resource area storage &amp;quot;_lrg_map.live_range_id(n)&amp;quot; in &lt;a href=&quot;https://github.com/openjdk/jdk/blob/6f459aff453679ee89fd80bb325737d76288e4d2/src/hotspot/share/opto/chaitin.cpp#L780&quot;&gt;https://github.com/openjdk/jdk/blob/6f459aff453679ee89fd80bb325737d76288e4d2/src/hotspot/share/opto/chaitin.cpp#L780&lt;/a&gt;&lt;br/&gt;
The crash has been observed 34 times. Mostly on PPC, but 2x on Windows x86_64. The first occurrence was on 2024-01-15.</comment>
                            <comment id="14702147" author="mbaesken" created="Mon, 2 Sep 2024 00:54:04 -0700"  >Since start of June 2024, we had 10 ocurrances of this issue,  2 on Windows x86_64, 4 on AIX, 4 on Linux ppc64le.&lt;br/&gt;
applications/ctw/modules/java_desktop.java  test seems to trigger it rather often (but not always).&lt;br/&gt;
&lt;br/&gt;
Last one on Linux ppc64le:&lt;br/&gt;
&lt;br/&gt;
#  Internal Error (/priv/jenkins/client-home/workspace/openjdk-jdk-dev-linux_ppc64le-dbg/jdk/src/hotspot/share/opto/chaitin.hpp:295), pid=25351, tid=25379&lt;br/&gt;
#  assert(idx &amp;lt; _maxlrg) failed: oob: index 2880154539 not smaller than 840&lt;br/&gt;
&lt;br/&gt;
Current thread (0x00007fff885cc490):  JavaThread &amp;quot;C2 CompilerThread0&amp;quot; daemon [_thread_in_native, id=25379, stack(0x00007fff59720000,0x00007fff59b20000) (4096K)]&lt;br/&gt;
&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C2:78051 9416    b  4       com.sun.java.swing.plaf.gtk.GTKColorType::&amp;lt;clinit&amp;gt; (88 bytes)&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00007fff59720000,0x00007fff59b20000],  sp=0x00007fff59b1b0e0,  free space=4076k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x838190]  PhaseIFG::lrgs(unsigned int) const [clone .part.0]+0x50  (chaitin.hpp:295)&lt;br/&gt;
V  [libjvm.so+0x84d9d4]  PhaseChaitin::lrgs(unsigned int) const+0x64  (chaitin.hpp:493)&lt;br/&gt;
V  [libjvm.so+0x84c930]  PhaseChaitin::Register_Allocate()+0xc80  (chaitin.cpp:658)&lt;br/&gt;
V  [libjvm.so+0x9f8474]  Compile::Code_Gen()+0x354  (compile.cpp:2966)&lt;br/&gt;
V  [libjvm.so+0x9fb3e0]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1a40  (compile.cpp:885)&lt;br/&gt;
V  [libjvm.so+0x7ae354]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1c4  (c2compiler.cpp:142)&lt;br/&gt;
V  [libjvm.so+0xa0c564]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xd34  (compileBroker.cpp:2303)&lt;br/&gt;
V  [libjvm.so+0xa0d218]  CompileBroker::compiler_thread_loop()+0x608  (compileBroker.cpp:1961)&lt;br/&gt;
V  [libjvm.so+0xa349c4]  CompilerThread::thread_entry(JavaThread*, JavaThread*)+0x54  (compilerThread.cpp:65)&lt;br/&gt;
V  [libjvm.so+0x102a990]  JavaThread::thread_main_inner()+0x140  (javaThread.cpp:758)&lt;br/&gt;
V  [libjvm.so+0x1bce530]  Thread::call_run()+0xe0  (thread.cpp:225)&lt;br/&gt;
V  [libjvm.so+0x16ca54c]  thread_native_entry(Thread*)+0x18c  (os_linux.cpp:858)&lt;br/&gt;
C  [libpthread.so.0+0xaa68]  start_thread+0x108&lt;br/&gt;
Registers:&lt;br/&gt;
pc =0x00007fff8d298190  lr =0x00007fff8d2ad9d4  ctr=0x00007fff8f4f7740  &lt;br/&gt;
r0 =0x00007fff8d2ad9d4  r1 =0x00007fff59b1b0e0  r2 =0x00007fff8f100e00  &lt;br/&gt;
r3 =0x00007fff8ea36798  r4 =0x0000000000000127  r5 =0x00007fff8ea36778  &lt;br/&gt;
r6 =0x00007fff8ea36750  r7 =0x00000000abababab  r8 =0x0000000000000058  &lt;br/&gt;
r9 =0x00007fff59b1b2a0  r10=0x00007fff8f470000  r11=0x00007fff8e2b17c0  &lt;br/&gt;
r12=0x00007fff8f4f7740  r13=0x00007fff59b268f0  r14=0x0000000000000003  &lt;br/&gt;
r15=0x0000000000000010  r16=0x00007fff59b1b7d8  r17=0x00007fff8ea38700  &lt;br/&gt;
r18=0x00007fff59b1b818  r19=0x00007fff59b1b260  r20=0x00007fff8ea38638  &lt;br/&gt;
r21=0x00007fff59b1b6d0  r22=0x0000000000000001  r23=0x00007fff59b1b1f0  &lt;br/&gt;
r24=0x00007fff59b1b268  r25=0x00007fff8f18f7b0  r26=0x0000000000000000  &lt;br/&gt;
r27=0x000000000000001f  r28=0x00007fff8f1819d0  r29=0x00007fff59b1b228  &lt;br/&gt;
r30=0x00007fff59b1b6a8  r31=0x00007fff59b1b0e0 &lt;br/&gt;
</comment>
                            <comment id="14693656" author="mbaesken" created="Tue, 30 Jul 2024 00:48:30 -0700"  >We observed it today in jdk21 on AIX  (fastdebug) in the test :&lt;br/&gt;
applications/ctw/modules/jdk_internal_le.java&lt;br/&gt;
&lt;br/&gt;
#  Internal Error (/priv/jenkins/client-home/workspace/openjdk-21u-dev-aix_ppc64-dbg/jdk/src/hotspot/share/opto/chaitin.hpp:295), pid=8519960, tid=3599&lt;br/&gt;
#  assert(idx &amp;lt; _maxlrg) failed: oob: index 4294967295 not smaller than 228&lt;br/&gt;
&lt;br/&gt;
Stack: [0x0000000113fb0000,0x00000001143ad788],  sp=0x00000001143a9e00,  free space=4071k&lt;br/&gt;
No context given, using current context.&lt;br/&gt;
Native frame:&lt;br/&gt;
iar:  0x090000001bd328fc libjvm.so::AixNativeCallstack::print_callstack_for_context(outputStream*, ucontext_t const*, bool, char*, unsigned long)+0x4d4  (C++ uses_alloca saves_cr saves_lr stores_bc gpr_saved:18 fixedparms:5 parmsonstk:1)&lt;br/&gt;
lr:   0x090000001b3c59b4 libjvm.so::fdStream::write(char const*, unsigned long)+0x44  (C++ uses_alloca saves_lr stores_bc gpr_saved:4 fixedparms:3 parmsonstk:1)&lt;br/&gt;
sp:   0x00000001143a90c0 (base - 0x46C8) &lt;br/&gt;
rtoc: 0x08001000a03e1790 &lt;br/&gt;
|---stackaddr----|   |----lrsave------|:   &amp;lt;function name&amp;gt;&lt;br/&gt;
0x00000001143a94b0 - 0x090000001bd323b4 libjvm.so::os::Aix::platform_print_native_stack(outputStream*, void const*, char*, int, unsigned char*&amp;amp;)+0x24  (C++ uses_alloca saves_lr stores_bc gpr_saved:1 fixedparms:5 parmsonstk:1)&lt;br/&gt;
0x00000001143a9530 - 0x090000001b3d2b14 libjvm.so::VMError::report(outputStream*, bool)+0x1b98  (C++ fp_present uses_alloca saves_cr saves_lr stores_bc gpr_saved:18 fixedparms:2 parmsonstk:1)&lt;br/&gt;
0x00000001143a9e10 - 0x090000001b3c4dc8 libjvm.so::VMError::report_and_die(int, char const*, char const*, char*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x7cc  (C++ uses_alloca saves_lr stores_bc gpr_saved:18 fixedparms:8 parmsonstk:1)&lt;br/&gt;
0x00000001143aa000 - 0x090000001b3c45b0 libjvm.so::VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, char*)+0x58  (C++ uses_alloca saves_lr stores_bc gpr_saved:2 fixedparms:7 parmsonstk:1)&lt;br/&gt;
0x00000001143aa0a0 - 0x090000001b3c4290 libjvm.so::report_vm_error(char const*, int, char const*, char const*, ...)+0x8c  (C++ uses_alloca saves_lr stores_bc gpr_saved:5 fixedparms:4 parmsonstk:1)&lt;br/&gt;
0x00000001143aa140 - 0x090000001c18298c libjvm.so::PhaseChaitin::Register_Allocate()+0x1040  (C++ fp_present uses_alloca saves_lr stores_bc gpr_saved:18 fixedparms:1 parmsonstk:1)&lt;br/&gt;
0x00000001143aa4e0 - 0x090000001c161c70 libjvm.so::Compile::Code_Gen()+0x22c  (C++ uses_alloca saves_lr stores_bc gpr_saved:6 fixedparms:1 parmsonstk:1)&lt;br/&gt;
0x00000001143ab120 - 0x090000001c1e0760 libjvm.so::Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x17fc  (C++ fp_present uses_alloca saves_cr saves_lr stores_bc gpr_saved:18 fixedparms:6 parmsonstk:1)&lt;br/&gt;
0x00000001143abd90 - 0x090000001c3f0f64 libjvm.so::C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1e0  (C++ uses_alloca saves_cr saves_lr stores_bc gpr_saved:18 fixedparms:6 parmsonstk:1)&lt;br/&gt;
0x00000001143ac990 - 0x090000001b7013d0 libjvm.so::CompileBroker::invoke_compiler_on_method(CompileTask*)+0xcf4  (C++ fp_present uses_alloca saves_cr saves_lr stores_bc gpr_saved:18 fixedparms:1 parmsonstk:1)&lt;br/&gt;
0x00000001143ad110 - 0x090000001b6f1ad0 libjvm.so::CompileBroker::compiler_thread_loop()+0x3f0  (C++ fp_present uses_alloca saves_cr saves_lr stores_bc gpr_saved:18 parmsonstk:1)&lt;br/&gt;
0x00000001143ad360 - 0x090000001b6f1660 libjvm.so::CompilerThread::thread_entry(JavaThread*, JavaThread*)+0x58  (C++ uses_alloca saves_lr stores_bc gpr_saved:1 fixedparms:2 parmsonstk:1)&lt;br/&gt;
0x00000001143ad3e0 - 0x090000001b597140 libjvm.so::JavaThread::thread_main_inner()+0x1f8  (C++ uses_alloca saves_lr stores_bc gpr_saved:4 fixedparms:1 parmsonstk:1)&lt;br/&gt;
0x00000001143ad4b0 - 0x090000001b595284 libjvm.so::JavaThread::run()+0x21c  (C++ uses_alloca saves_lr stores_bc gpr_saved:5 fixedparms:1 parmsonstk:1)&lt;br/&gt;
0x00000001143ad550 - 0x090000001b4c24c8 libjvm.so::Thread::call_run()+0x128  (C++ uses_alloca saves_lr stores_bc gpr_saved:3 fixedparms:1 parmsonstk:1)&lt;br/&gt;
0x00000001143ad5e0 - 0x090000001b4c19f8 libjvm.so::thread_native_entry(Thread*)+0x194  (C++ uses_alloca saves_lr stores_bc gpr_saved:9 fixedparms:1 parmsonstk:1)&lt;br/&gt;
0x00000001143ad6a0 - 0x0900000000089214 libpthreads.a::&amp;lt;nameless function&amp;gt;+?  (ASM tocless )</comment>
                            <comment id="14683561" author="mbaesken" created="Thu, 20 Jun 2024 23:58:49 -0700"  >Hi [~thartmann] we observed it recently also on Windows x64 (fastdebug binaries).&lt;br/&gt;
So it seems that this occurs only more often on the ppc platforms.&lt;br/&gt;
&lt;br/&gt;
#  Internal Error (c:\workspace\openjdk-jdk-dev-windows_x86_64-dbg\jdk\src\hotspot\share\opto/chaitin.hpp:295), pid=9308, tid=39600&lt;br/&gt;
#  assert(idx &amp;lt; _maxlrg) failed: oob: index 963 not smaller than 806&lt;br/&gt;
&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C2:62348 8445       4       java.util.TimSort::binarySort (223 bytes)&lt;br/&gt;
&lt;br/&gt;
Stack: [0x000000be50800000,0x000000be50900000]&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [jvm.dll+0xc9ae31]  os::win32::platform_print_native_stack+0x101  (os_windows_x86.cpp:235)&lt;br/&gt;
V  [jvm.dll+0x10136d1]  VMError::report+0x1491  (vmError.cpp:1011)&lt;br/&gt;
V  [jvm.dll+0x1015c33]  VMError::report_and_die+0x633  (vmError.cpp:1846)&lt;br/&gt;
V  [jvm.dll+0x1016334]  VMError::report_and_die+0x64  (vmError.cpp:1611)&lt;br/&gt;
V  [jvm.dll+0x5616ab]  report_vm_error+0x5b  (debug.cpp:193)&lt;br/&gt;
V  [jvm.dll+0x78b734]  PhaseChaitin::compute_initial_block_pressure+0x274  (ifg.cpp:533)&lt;br/&gt;
V  [jvm.dll+0x7897d8]  PhaseChaitin::build_ifg_physical+0x298  (ifg.cpp:872)&lt;br/&gt;
V  [jvm.dll+0x430068]  PhaseChaitin::Register_Allocate+0x7e8  (chaitin.cpp:578)&lt;br/&gt;
V  [jvm.dll+0x4eb13f]  Compile::Code_Gen+0x25f  (compile.cpp:2968)&lt;br/&gt;
V  [jvm.dll+0x4e9c2b]  Compile::Compile+0x12cb  (compile.cpp:886)&lt;br/&gt;
V  [jvm.dll+0x3f645e]  C2Compiler::compile_method+0x17e  (c2compiler.cpp:145)&lt;br/&gt;
V  [jvm.dll+0x5066ef]  CompileBroker::invoke_compiler_on_method+0x92f  (compileBroker.cpp:2306)&lt;br/&gt;
V  [jvm.dll+0x503d21]  CompileBroker::compiler_thread_loop+0x391  (compileBroker.cpp:1962)&lt;br/&gt;
V  [jvm.dll+0x8088c9]  JavaThread::thread_main_inner+0x279  (javaThread.cpp:760)&lt;br/&gt;
V  [jvm.dll+0xf74938]  Thread::call_run+0x1c8  (thread.cpp:230)&lt;br/&gt;
V  [jvm.dll+0xc99476]  thread_native_entry+0xd6  (os_windows.cpp:553)&lt;br/&gt;
C  [ucrtbase.dll+0x2268a]  (no source info available)&lt;br/&gt;
C  [KERNEL32.DLL+0x17ac4]  (no source info available)&lt;br/&gt;
C  [ntdll.dll+0x5a4e1]  (no source info available)</comment>
                            <comment id="14682469" author="mbaesken" created="Tue, 18 Jun 2024 00:25:08 -0700"  >One more from AIX  (jdk24) , test triggering the issue was applications/ctw/modules/java_desktop.java  :&lt;br/&gt;
------------------------------------------------------------------------------------------------------------------------------------------------&lt;br/&gt;
#  Internal Error (/priv/jenkins/client-home/workspace/openjdk-jdk-dev-aix_ppc64-dbg/jdk/src/hotspot/share/opto/chaitin.hpp:295), pid=11731392, tid=3599&lt;br/&gt;
#  assert(idx &amp;lt; _maxlrg) failed: oob: index 2880154539 not smaller than 845&lt;br/&gt;
#&lt;br/&gt;
&lt;br/&gt;
---------------  T H R E A D  ---------------&lt;br/&gt;
&lt;br/&gt;
Current thread (0x00000001153aa0b0):  JavaThread &amp;quot;C2 CompilerThread0&amp;quot; daemon [_thread_in_native, id=3599, stack(0x00000001153b0000,0x00000001157ad888) (4086K)]&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C2:68639 9517    b  4       com.sun.java.swing.plaf.gtk.GTKColorType::&amp;lt;clinit&amp;gt; (88 bytes)&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00000001153b0000,0x00000001157ad888],  sp=0x00000001157a9d60,  free space=4071k&lt;br/&gt;
No context given, using current context.&lt;br/&gt;
Native frame:&lt;br/&gt;
iar:  0x090000001e07116c libjvm.so::AixNativeCallstack::print_callstack_for_context(outputStream*, ucontext_t const*, bool, char*, unsigned long)+0x4cc  (C++ uses_alloca saves_cr saves_lr stores_bc gpr_saved:18 fixedparms:5 parmsonstk:1)&lt;br/&gt;
lr:   0x090000001ddf1bec libjvm.so::fdStream::write(char const*, unsigned long)+0x44  (C++ uses_alloca saves_lr stores_bc gpr_saved:4 fixedparms:3 parmsonstk:1)&lt;br/&gt;
sp:   0x00000001157a9020 (base - 0x4868) &lt;br/&gt;
rtoc: 0x08001000a03d8290 &lt;br/&gt;
|---stackaddr----|   |----lrsave------|:   &amp;lt;function name&amp;gt;&lt;br/&gt;
0x00000001157a9410 - 0x090000001e070c2c libjvm.so::os::Aix::platform_print_native_stack(outputStream*, void const*, char*, int, unsigned char*&amp;amp;)+0x24  (C++ uses_alloca saves_lr stores_bc gpr_saved:1 fixedparms:5 parmsonstk:1)&lt;br/&gt;
0x00000001157a9490 - 0x090000001de063cc libjvm.so::VMError::report(outputStream*, bool)+0x1c0c  (C++ fp_present uses_alloca saves_cr saves_lr stores_bc gpr_saved:18 fixedparms:2 parmsonstk:1)&lt;br/&gt;
0x00000001157a9d70 - 0x090000001ddf0eb0 libjvm.so::VMError::report_and_die(int, char const*, char const*, char*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x72c  (C++ uses_alloca saves_lr stores_bc gpr_saved:18 fixedparms:8 parmsonstk:1)&lt;br/&gt;
0x00000001157a9f80 - 0x090000001ddf0738 libjvm.so::VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, char*)+0x58  (C++ uses_alloca saves_lr stores_bc gpr_saved:2 fixedparms:7 parmsonstk:1)&lt;br/&gt;
0x00000001157aa020 - 0x090000001ddf0418 libjvm.so::report_vm_error(char const*, int, char const*, char const*, ...)+0x8c  (C++ uses_alloca saves_lr stores_bc gpr_saved:5 fixedparms:4 parmsonstk:1)&lt;br/&gt;
0x00000001157aa0c0 - 0x090000001eb9d4c4 libjvm.so::PhaseChaitin::Register_Allocate()+0x10a8  (C++ fp_present uses_alloca saves_lr stores_bc gpr_saved:18 fixedparms:1 parmsonstk:1)&lt;br/&gt;
0x00000001157aa470 - 0x090000001eb7c880 libjvm.so::Compile::Code_Gen()+0x22c  (C++ uses_alloca saves_lr stores_bc gpr_saved:6 fixedparms:1 parmsonstk:1)&lt;br/&gt;
0x00000001157ab0b0 - 0x090000001ebfa9a0 libjvm.so::Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x169c  (C++ fp_present uses_alloca saves_cr saves_lr stores_bc gpr_saved:18 fixedparms:6 parmsonstk:1)&lt;br/&gt;
0x00000001157abd30 - 0x090000001ee1ae84 libjvm.so::C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x25c  (C++ uses_alloca saves_cr saves_lr stores_bc gpr_saved:18 fixedparms:6 parmsonstk:1)&lt;br/&gt;
0x00000001157aca70 - 0x090000001e14f0bc libjvm.so::CompileBroker::invoke_compiler_on_method(CompileTask*)+0xcf4  (C++ fp_present uses_alloca saves_cr saves_lr stores_bc gpr_saved:18 fixedparms:1 parmsonstk:1)&lt;br/&gt;
0x00000001157ad200 - 0x090000001e123d00 libjvm.so::CompileBroker::compiler_thread_loop()+0x4c0  (C++ fp_present uses_alloca saves_cr saves_lr stores_bc gpr_saved:18 parmsonstk:1)&lt;br/&gt;
0x00000001157ad450 - 0x090000001e1237c0 libjvm.so::CompilerThread::thread_entry(JavaThread*, JavaThread*)+0x58  (C++ uses_alloca saves_lr stores_bc gpr_saved:1 fixedparms:2 parmsonstk:1)&lt;br/&gt;
0x00000001157ad4d0 - 0x090000001e061fc4 libjvm.so::JavaThread::thread_main_inner()+0x1f8  (C++ uses_alloca saves_lr stores_bc gpr_saved:4 fixedparms:1 parmsonstk:1)&lt;br/&gt;
0x00000001157ad5a0 - 0x090000001e06009c libjvm.so::JavaThread::run()+0x214  (C++ uses_alloca saves_lr stores_bc gpr_saved:5 fixedparms:1 parmsonstk:1)&lt;br/&gt;
0x00000001157ad640 - 0x090000001df0e804 libjvm.so::Thread::call_run()+0x128  (C++ uses_alloca saves_lr stores_bc gpr_saved:3 fixedparms:1 parmsonstk:1)&lt;br/&gt;
0x00000001157ad6d0 - 0x090000001df0dd64 libjvm.so::thread_native_entry(Thread*)+0x214  (C++ uses_alloca saves_lr stores_bc gpr_saved:10 fixedparms:1 parmsonstk:1)&lt;br/&gt;
0x00000001157ad7a0 - 0x090000000056204c libpthreads.a::_pthread_body+0xec  (C saves_lr stores_bc gpr_saved:1 fixedparms:1 )&lt;br/&gt;
0x00000001157ad820 - 0x0000000000000000 &lt;br/&gt;
*** end of backchain ***&lt;br/&gt;
-----------------------</comment>
                            <comment id="14666906" author="mdoerr" created="Mon, 22 Apr 2024 04:04:47 -0700"  >Enhancing the assertion (&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8328165&quot; title=&quot;improve assert(idx &amp;lt; _maxlrg) failed: oob&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8328165&quot;&gt;&lt;strike&gt;JDK-8328165&lt;/strike&gt;&lt;/a&gt;) showed that idx == 0xFFFFFFFF or 0xABABABAB have occurred. Problem has been observed for the first time on 2024-01-15 in JDK22. Occurrences in these tests:&lt;br/&gt;
vmTestbase/vm/mlvm/indy/func/java/verifyStackTrace/INDIFY_Test.java&lt;br/&gt;
vmTestbase/vm/mlvm/hiddenloader/stress/oome/metaspace/Test.java&lt;br/&gt;
vmTestbase/vm/mlvm/hiddenloader/func/findByName/Test.java&lt;br/&gt;
applications/ctw/modules/java_desktop.java&lt;br/&gt;
applications/ctw/modules/jdk_internal_le.java&lt;br/&gt;
tools/javac/varargs/warning/Warn4.java&lt;br/&gt;
Only on PPC64 so far, but that may possibly be a coincidence.</comment>
                            <comment id="14657694" author="mbaesken" created="Fri, 15 Mar 2024 04:09:28 -0700"  >2 more times the issue occurred but this time on Linux ppc64le :&lt;br/&gt;
test vmTestbase/vm/mlvm/hiddenloader/stress/oome/metaspace/Test.java  (jdk22u)&lt;br/&gt;
&lt;br/&gt;
#  Internal Error (/priv/jenkins/client-home/workspace/openjdk-22u-linux_ppc64le-dbg/jdk/src/hotspot/share/opto/chaitin.hpp:295), pid=2383725, tid=3241070&lt;br/&gt;
#  assert(idx &amp;lt; _maxlrg) failed: oob&lt;br/&gt;
&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C2:943922 9557       4       com.sun.tools.javac.comp.Check::checkMethod (555 bytes)&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00007fff52600000,0x00007fff52a00000],  sp=0x00007fff529fb080,  free space=4076k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x8730cc]  PhaseIFG::lrgs(unsigned int) const+0x7c  (chaitin.hpp:295)&lt;br/&gt;
V  [libjvm.so+0x871d70]  PhaseChaitin::Register_Allocate()+0xc80  (chaitin.hpp:493)&lt;br/&gt;
V  [libjvm.so+0xa1f5e4]  Compile::Code_Gen()+0x354  (compile.cpp:2969)&lt;br/&gt;
V  [libjvm.so+0xa2215c]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1a8c  (compile.cpp:890)&lt;br/&gt;
V  [libjvm.so+0x7d07d8]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1e8  (c2compiler.cpp:134)&lt;br/&gt;
V  [libjvm.so+0xa331a4]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xd34  (compileBroker.cpp:2305)&lt;br/&gt;
V  [libjvm.so+0xa33ed8]  CompileBroker::compiler_thread_loop()+0x6a8  (compileBroker.cpp:1964)&lt;br/&gt;
V  [libjvm.so+0xa61b64]  CompilerThread::thread_entry(JavaThread*, JavaThread*)+0x54  (compilerThread.cpp:68)&lt;br/&gt;
V  [libjvm.so+0x10684ac]  JavaThread::thread_main_inner()+0x14c  (javaThread.cpp:721)&lt;br/&gt;
V  [libjvm.so+0x1bc14b0]  Thread::call_run()+0xe0  (thread.cpp:221)&lt;br/&gt;
V  [libjvm.so+0x16e178c]  thread_native_entry(Thread*)+0x18c  (os_linux.cpp:814)&lt;br/&gt;
C  [libc.so.6+0xaa130]  start_thread+0x170&lt;br/&gt;
&lt;br/&gt;
test vmTestbase/vm/mlvm/hiddenloader/func/findByName/Test.java  (jdk23)&lt;br/&gt;
&lt;br/&gt;
#  Internal Error (/priv/jenkins/client-home/workspace/openjdk-jdk-linux_ppc64le-dbg/jdk/src/hotspot/share/opto/chaitin.hpp:295), pid=32524, tid=43244&lt;br/&gt;
#  assert(idx &amp;lt; _maxlrg) failed: oob&lt;br/&gt;
&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C2:969585 8971       4       com.sun.tools.javac.comp.Check::checkMethod (555 bytes)&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00007ffedcac0000,0x00007ffedcec0000],  sp=0x00007ffedcebb120,  free space=4076k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x86c01c]  PhaseIFG::lrgs(unsigned int) const+0x7c  (chaitin.hpp:295)&lt;br/&gt;
V  [libjvm.so+0x86acc0]  PhaseChaitin::Register_Allocate()+0xc80  (chaitin.hpp:493)&lt;br/&gt;
V  [libjvm.so+0xa1bc14]  Compile::Code_Gen()+0x354  (compile.cpp:2984)&lt;br/&gt;
V  [libjvm.so+0xa1e820]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1a80  (compile.cpp:894)&lt;br/&gt;
V  [libjvm.so+0x7d4434]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1c4  (c2compiler.cpp:142)&lt;br/&gt;
V  [libjvm.so+0xa2fb24]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xd44  (compileBroker.cpp:2310)&lt;br/&gt;
V  [libjvm.so+0xa30878]  CompileBroker::compiler_thread_loop()+0x6a8  (compileBroker.cpp:1969)&lt;br/&gt;
V  [libjvm.so+0xa5d1e4]  CompilerThread::thread_entry(JavaThread*, JavaThread*)+0x54  (compilerThread.cpp:68)&lt;br/&gt;
V  [libjvm.so+0x1065f3c]  JavaThread::thread_main_inner()+0x14c  (javaThread.cpp:721)&lt;br/&gt;
V  [libjvm.so+0x1bd0f70]  Thread::call_run()+0xe0  (thread.cpp:221)&lt;br/&gt;
V  [libjvm.so+0x16e898c]  thread_native_entry(Thread*)+0x18c  (os_linux.cpp:864)&lt;br/&gt;
C  [libpthread.so.0+0x9748]  start_thread+0xf8&lt;br/&gt;
</comment>
                            <comment id="14657334" author="mbaesken" created="Thu, 14 Mar 2024 01:12:46 -0700"  >Hi [~thartmann] we are not sure if this is really  ppc64-only / oraclejdk-na .  Could be that it is just more likely to occur on this platform. &lt;br/&gt;
Btw.  we only saw it on AIX (big endian ppc64), so far never on ppc64 little endian .</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5146397">JDK-8346332</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5147948">JDK-8347643</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5168457">JDK-8365612</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5168575">JDK-8365713</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10002">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                                        </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="4762154">JDK-8068881</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5133909">JDK-8336095</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5124208">JDK-8328165</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5144357">JDK-8344609</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5134957">JDK-8337015</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="109817" name="hs_err_pid9308.log" size="89662" author="rrich" created="Fri, 21 Jun 2024 04:07:33 -0700"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17024"><![CDATA[ppc]]></customfieldvalue>
    <customfieldvalue key="19000"><![CDATA[x86_64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i35fhf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17357"><![CDATA[b26]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>