<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Sat Sep 27 09:15:32 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8338449] ubsan: division by zero in sharedRuntimeTrans.cpp</title>
                <link>https://bugs.openjdk.org/browse/JDK-8338449</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>When running with ubsan enabled binaries on Linux ppc64le, these  divisions by zero are detected.&lt;br/&gt;
&lt;br/&gt;
test&lt;br/&gt;
java/lang/Math/Log10Tests.java: Tests for {Math, StrictMath}.log10&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
----------stderr:(4/324)----------&lt;br/&gt;
/jdk/src/hotspot/share/runtime/sharedRuntimeTrans.cpp:219:27: runtime error: division by zero&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#0 0x7fffa7e14abc in SharedRuntime::dlog10(double) (/build_ubsan/images/jdk/lib/server/libjvm.so+0x69f4abc)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#1 0x7fff8b8fc8e8  (&amp;lt;unknown module&amp;gt;)&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
test&lt;br/&gt;
java/lang/Math/LogTests.java: Tests for {Math, StrictMath}.log&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
/jdk/src/hotspot/share/runtime/sharedRuntimeTrans.cpp:125:27: runtime error: division by zero&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#0 0x7fff887f48bc in __ieee754_log(double) (/build_ubsan/images/jdk/lib/server/libjvm.so+0x69f48bc)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#1 0x7fff6b8fc768  (&amp;lt;unknown module&amp;gt;)&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
test&lt;br/&gt;
java/lang/Math/PowTests.java: Tests for {Math, StrictMath}.pow&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
/jdk/src/hotspot/share/runtime/sharedRuntimeTrans.cpp:508:23: runtime error: division by zero&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#0 0x7fff92fd61f0 in SharedRuntime::dpow(double, double) (/build_ubsan/images/jdk/lib/server/libjvm.so+0x69f61f0)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;#1 0x7fff7701c8ec  (&amp;lt;unknown module&amp;gt;)&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
Might be that these divisions are desired so we could consider excluding the code from ubsan checks.&lt;br/&gt;
For some reason I do not see the failures on Linux x86_64 when running those tests .</description>
                <environment></environment>
        <key id="5136859">JDK-8338449</key>
            <summary>ubsan: division by zero in sharedRuntimeTrans.cpp</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="mbaesken">Matthias Baesken</assignee>
                                    <reporter username="mbaesken">Matthias Baesken</reporter>
                        <labels>
                            <label>cleanup</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>oracle-triage-24</label>
                            <label>starter</label>
                            <label>ubsan</label>
                    </labels>
                <created>Thu, 15 Aug 2024 06:36:17 -0700</created>
                <updated>Mon, 10 Mar 2025 04:32:25 -0700</updated>
                            <resolved>Wed, 23 Oct 2024 00:10:09 -0700</resolved>
                                    <version>8</version>
                    <version>11</version>
                    <version>17</version>
                    <version>21</version>
                    <version>24</version>
                                    <fixVersion>24</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                                                                <comments>
                            <comment id="14735501" author="mbaesken" created="Thu, 2 Jan 2025 00:37:29 -0800"  >Yeah sure we need another issue for this. I created &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8346931&quot; title=&quot;Replace divisions by zero in sharedRuntimeTrans.cpp&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8346931&quot;&gt;&lt;strike&gt;JDK-8346931&lt;/strike&gt;&lt;/a&gt; .  Thanks for the hint,  using std::numeric_limits looks more clean, the current solutions looks a bit like a &amp;quot;hack&amp;quot; .</comment>
                            <comment id="14735426" author="kbarrett" created="Mon, 30 Dec 2024 18:13:29 -0800"  >[~mbaesken] Sorry, no idea why that&amp;#39;s not working for clang.  Though I wonder if this code could be changed to use `std::numeric_limits&amp;lt;double&amp;gt;::infinity()` and `std::numeric_limits&amp;lt;double&amp;gt;::quiet_NaN()` rather than &amp;quot;constructing&amp;quot; them?  But this should probably be discussed in some new issue rather than in the comments of this resolved issue.&lt;br/&gt;
</comment>
                            <comment id="14729255" author="mbaesken" created="Fri, 6 Dec 2024 06:42:30 -0800"  >Unfortunately when build  on macOS aarch64 with ubsan enabled,  and running   jtreg tests java/lang/Math/Log10Tests, I still get the &amp;#39;division by zero&amp;#39; warning/error :&lt;br/&gt;
&lt;br/&gt;
jdk/src/hotspot/share/runtime/sharedRuntimeTrans.cpp:228:27: runtime error: division by zero&lt;br/&gt;
UndefinedBehaviorSanitizer:DEADLYSIGNAL&lt;br/&gt;
&lt;br/&gt;
This was seen when using Xcode 13.1 . Seems the&lt;br/&gt;
ATTRIBUTE_NO_UBSAN&lt;br/&gt;
static double __ieee754_log10(double x) {&lt;br/&gt;
&lt;br/&gt;
for this function does not work with clang/XCode , the error is still reported.&lt;br/&gt;
&lt;br/&gt;
[~kbarrett]  [~ihse]  any idea why it works nicely on Linux, but fails with clang on macOS aarch ?&lt;br/&gt;
The attribute should be there on both platforms.</comment>
                            <comment id="14721539" author="mbaesken" created="Wed, 13 Nov 2024 07:48:11 -0800"  >jdk21u-dev backport request&lt;br/&gt;
I would like to have the patch in jdk21u-dev as well, because the issue is present there too. The backport is almost clean (needs one static added to a function afterwards it is clean) and low risk.</comment>
                            <comment id="14721492" author="roboduke" created="Wed, 13 Nov 2024 05:45:01 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/1150&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/1150&lt;/a&gt;&lt;br/&gt;
Date: 2024-11-13 13:37:49 +0000</comment>
                            <comment id="14716058" author="dukebot" created="Wed, 23 Oct 2024 00:10:08 -0700"  >Changeset: 37cfaa8d&lt;br/&gt;
Branch: master&lt;br/&gt;
Author:    Matthias Baesken &amp;lt;&lt;a href=&apos;mailto:mbaesken@openjdk.org&apos;&gt;mbaesken@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-10-23 07:08:07 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/37cfaa8deb4cc15864bb6dc2c8a87fc97cff2f0d&quot;&gt;https://git.openjdk.org/jdk/commit/37cfaa8deb4cc15864bb6dc2c8a87fc97cff2f0d&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14712657" author="roboduke" created="Mon, 14 Oct 2024 07:14:26 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/21500&quot;&gt;https://git.openjdk.org/jdk/pull/21500&lt;/a&gt;&lt;br/&gt;
Date: 2024-10-14 14:08:05 +0000</comment>
                            <comment id="14699610" author="thartmann" created="Tue, 20 Aug 2024 22:36:27 -0700"  >ILW = Undefined behavior in some math stubs, never observed, no known workaround = MLH = P4</comment>
                            <comment id="14699609" author="thartmann" created="Tue, 20 Aug 2024 22:32:48 -0700"  >The intrinsics can also be disabled via -XX:DisableIntrinsic=_dlog10,_dpow,... which will trigger the slow path. So x86 is affected as well.</comment>
                            <comment id="14698668" author="mbaesken" created="Thu, 15 Aug 2024 23:17:42 -0700"  >&amp;gt; The code computes (x-x)/zero which is defined to be NaN &lt;br/&gt;
Is there some special/good reason to &amp;quot;compute&amp;quot; NaN instead of using what&amp;#39;s available in C++  &lt;a href=&quot;https://en.cppreference.com/w/cpp/numeric/math/nan&quot;&gt;https://en.cppreference.com/w/cpp/numeric/math/nan&lt;/a&gt;  or &lt;a href=&quot;https://en.cppreference.com/w/cpp/types/numeric_limits/quiet_NaN&quot;&gt;https://en.cppreference.com/w/cpp/types/numeric_limits/quiet_NaN&lt;/a&gt; ?&lt;br/&gt;
&lt;br/&gt;
&amp;gt; The UBSan check is not hit on platforms which have an assembler implementation like StubGenerator::generate_libmLog10()&lt;br/&gt;
&lt;br/&gt;
I see this only on x86_64 / x86_32, so all other platforms currently would run into the UB ?</comment>
                            <comment id="14698596" author="mdoerr" created="Thu, 15 Aug 2024 14:49:58 -0700"  >The code computes (x-x)/zero which is defined to be NaN by IEEE 754, but it&amp;#39;s undefined behavior in C++.&lt;br/&gt;
The UBSan check is not hit on platforms which have an assembler implementation like StubGenerator::generate_libmLog10().</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5144140">JDK-8344409</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5152358">JDK-8351490</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5147129">JDK-8346931</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i37ki3:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17415"><![CDATA[b22]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>