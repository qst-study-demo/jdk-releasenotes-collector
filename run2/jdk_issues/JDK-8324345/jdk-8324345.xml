<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Sat Sep 27 10:19:10 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8324345] Stack overflow during C2 compilation when splitting memory phi</title>
                <link>https://bugs.openjdk.org/browse/JDK-8324345</link>
                <project id="10100" key="JDK">JDK</project>
                    <description># Failure analysis&lt;br/&gt;
&lt;br/&gt;
ConnectionGraph::find_inst_mem contains recursive calls that can lead to a native C++ stack overflow in some cases.&lt;br/&gt;
&lt;br/&gt;
# Original description&lt;br/&gt;
&lt;br/&gt;
The C2 crashes without hs_err generation. &lt;br/&gt;
&lt;br/&gt;
[Thread debugging using libthread_db enabled]&lt;br/&gt;
Using host libthread_db library &amp;quot;/lib/x86_64-linux-gnu/libthread_db.so.1&amp;quot;.&lt;br/&gt;
Core was generated by `/home/lmesnik/ws/jdk-jck/build/linux-x64/images/jdk/bin/java --enable-preview -&amp;#39;.&lt;br/&gt;
Program terminated with signal SIGSEGV, Segmentation fault.&lt;br/&gt;
#0  0x00007fd8678a4e74 in PhiNode::verify_adr_type (this=this@entry=0x7fd7daf45928, recursive=recursive@entry=true) at /home/lmesnik/ws/jdk-jck/open/src/hotspot/share/opto/cfgnode.cpp:1188&lt;br/&gt;
1188	  if (VMError::is_error_reported())  return;  // muzzle asserts when debugging an error&lt;br/&gt;
[Current thread is 1 (Thread 0x7fd84496d640 (LWP 605955))]&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
With instrumentation mentioned in comments:&lt;br/&gt;
&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
# Internal Error (/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9922/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/bb2a42a8-b515-4ca4-871f-d848b5f874f4/runs/4c895d9f-7833-4a7a-bd1d-cca0ad6bce55/workspace/open/src/hotspot/share/opto/cfgnode.cpp:1162), pid=947068, tid=947140&lt;br/&gt;
# assert(count &amp;lt; 1000) failed: Stack overflow&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (23.0) (fastdebug build 23-internal-2024-01-23-1116378.tobias.hartmann.jdk3)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 23-internal-2024-01-23-1116378.tobias.hartmann.jdk3, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V [libjvm.so+0x881018] check_for_stack_overflow() [clone .part.0]+0x28&lt;br/&gt;
#&lt;br/&gt;
&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C2:62927 8732 b javax.swing.plaf.basic.BasicLookAndFeel::initComponentDefaults (14883 bytes)&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00007f34df8ff000,0x00007f34df9ff000], sp=0x00007f34df9c7b80, free space=802k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V [libjvm.so+0x881018] check_for_stack_overflow() [clone .part.0]+0x28 (cfgnode.cpp:1162)&lt;br/&gt;
V [libjvm.so+0x886150] PhiNode::slice_memory(TypePtr const*) const+0x0&lt;br/&gt;
V [libjvm.so+0x894636] PhiNode::adr_type() const+0x16&lt;br/&gt;
V [libjvm.so+0x138b6be] MergeMemNode::memory_at(unsigned int) const+0x2de&lt;br/&gt;
V [libjvm.so+0xbb58c7] ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&amp;lt;PhiNode*&amp;gt;&amp;amp;)+0x327&lt;br/&gt;
V [libjvm.so+0xbb6508] ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&amp;lt;PhiNode*&amp;gt;&amp;amp;)+0x1e8&lt;br/&gt;
V [libjvm.so+0xbb5fb9] ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&amp;lt;PhiNode*&amp;gt;&amp;amp;)+0xa19&lt;br/&gt;
V [libjvm.so+0xbb6508] ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&amp;lt;PhiNode*&amp;gt;&amp;amp;)+0x1e8&lt;br/&gt;
V [libjvm.so+0xbb5fb9] ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&amp;lt;PhiNode*&amp;gt;&amp;amp;)+0xa19&lt;br/&gt;
V [libjvm.so+0xbb592b] ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&amp;lt;PhiNode*&amp;gt;&amp;amp;)+0x38b&lt;br/&gt;
V [libjvm.so+0xbb6508] ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&amp;lt;PhiNode*&amp;gt;&amp;amp;)+0x1e8&lt;br/&gt;
V [libjvm.so+0xbb5fb9] ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&amp;lt;PhiNode*&amp;gt;&amp;amp;)+0xa19&lt;br/&gt;
V [libjvm.so+0xbb6508] ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&amp;lt;PhiNode*&amp;gt;&amp;amp;)+0x1e8&lt;br/&gt;
V [libjvm.so+0xbb5fb9] ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&amp;lt;PhiNode*&amp;gt;&amp;amp;)+0xa19&lt;br/&gt;
V [libjvm.so+0xbb6508] ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&amp;lt;PhiNode*&amp;gt;&amp;amp;)+0x1e8&lt;br/&gt;
V [libjvm.so+0xbb5fb9] ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&amp;lt;PhiNode*&amp;gt;&amp;amp;)+0xa19&lt;br/&gt;
V [libjvm.so+0xbb592b] ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&amp;lt;PhiNode*&amp;gt;&amp;amp;)+0x38b&lt;br/&gt;
V [libjvm.so+0xbb6508] ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&amp;lt;PhiNode*&amp;gt;&amp;amp;)+0x1e8</description>
                <environment></environment>
        <key id="5119627">JDK-8324345</key>
            <summary>Stack overflow during C2 compilation when splitting memory phi</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dlunden">Daniel Lunden</assignee>
                                    <reporter username="lmesnik">Leonid Mesnik</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>c2</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>oracle-triage-23</label>
                    </labels>
                <created>Mon, 22 Jan 2024 16:29:20 -0800</created>
                <updated>Fri, 9 May 2025 20:27:27 -0700</updated>
                            <resolved>Wed, 31 Jul 2024 09:16:39 -0700</resolved>
                                    <version>17</version>
                    <version>21</version>
                    <version>22</version>
                    <version>23</version>
                                    <fixVersion>24</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>9</watches>
                                                                                                                <comments>
                            <comment id="14772683" author="roboduke" created="Tue, 22 Apr 2025 12:39:37 -0700"  >[jdk21u-fix-request] Approval Request from Satyen Subramaniam&lt;br/&gt;
for backport. Fix addresses cases where ConnectionGraph::find_inst_mem contains recursive calls that leads to a native C++ stack overflow.&lt;br/&gt;
&lt;br/&gt;
Risk: Medium. Tip change was merged in July 2024, but touches compilation logic. Adds test to help mitigate risk.&lt;br/&gt;
&lt;br/&gt;
Testing:&lt;br/&gt;
* GHA Sanity Checks&lt;br/&gt;
* Tier 1 and 2 tests locally</comment>
                            <comment id="14772642" author="roboduke" created="Tue, 22 Apr 2025 10:02:37 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/1692&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/1692&lt;/a&gt;&lt;br/&gt;
Date: 2025-04-22 16:55:51 +0000</comment>
                            <comment id="14694281" author="dukebot" created="Wed, 31 Jul 2024 09:16:28 -0700"  >Changeset: fdb4350f&lt;br/&gt;
Branch: master&lt;br/&gt;
Author:    Daniel Lund&amp;#xE9;n &amp;lt;&lt;a href=&apos;mailto:dlunden@openjdk.org&apos;&gt;dlunden@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-07-31 16:05:42 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/fdb4350fcecef1915cdbc27ece24153a1b6c884d&quot;&gt;https://git.openjdk.org/jdk/commit/fdb4350fcecef1915cdbc27ece24153a1b6c884d&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14690996" author="roboduke" created="Thu, 18 Jul 2024 08:30:09 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/20238&quot;&gt;https://git.openjdk.org/jdk/pull/20238&lt;/a&gt;&lt;br/&gt;
Date: 2024-07-18 15:24:33 +0000</comment>
                            <comment id="14689859" author="kvn" created="Mon, 15 Jul 2024 09:36:13 -0700"  >[~dlunden] Thank you for verifying that it will converge.&lt;br/&gt;
&lt;br/&gt;
&amp;gt; I&amp;#39;ll add a recursion depth limit and make a PR. Let me know if you have additional comments or want me to investigate more.&lt;br/&gt;
&lt;br/&gt;
Good plan.</comment>
                            <comment id="14689851" author="JIRAUSER21007" created="Mon, 15 Jul 2024 09:25:29 -0700"  >The find_inst_mem method and split_memory_phi do not revisit nodes (checked experimentally and through source code review). Consequently, we are not splitting the same phi and will also converge (bounded by the number of nodes).&lt;br/&gt;
&lt;br/&gt;
The particular problematic case in this issue is compiling the method javax.swing.plaf.basic.BasicLookAndFeel::initComponentDefaults. It is a large method with ~95000 ideal graph nodes at the time of escape analysis, and find_inst_mem has to walk through very long chains of nodes with lots of phis, leading to the recursion-induced stack overflow.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;ll add a recursion depth limit and make a PR. Let me know if you have additional comments or want me to investigate more.&lt;br/&gt;
</comment>
                            <comment id="14689823" author="JIRAUSER21007" created="Mon, 15 Jul 2024 08:16:26 -0700"  >Reproduces with the simple attached test case (Test.java).</comment>
                            <comment id="14688641" author="kvn" created="Wed, 10 Jul 2024 08:20:24 -0700"  >Good plan. &lt;br/&gt;
&lt;br/&gt;
&amp;quot;If we do not care about getting a potentially worse result from EA&amp;quot;. This is corner case which is vary rare in production.&lt;br/&gt;
Run performance testing after fix to make sure it does not affect our regular benchmarks.&lt;br/&gt;
&lt;br/&gt;
Note, we already have other bailouts from EA. There is time limit to abort EA if it takes too long: `EscapeAnalysisTimeout`. And we limit number of iterations we go over ConnectionGraph: `GRAPH_BUILD_ITER_LIMIT`&lt;br/&gt;
</comment>
                            <comment id="14688603" author="JIRAUSER21007" created="Wed, 10 Jul 2024 06:45:47 -0700"  >Not yet, but working on it.</comment>
                            <comment id="14688577" author="thartmann" created="Wed, 10 Jul 2024 05:33:13 -0700"  >Sounds good. Did you manage to extract a regression test for this?</comment>
                            <comment id="14688567" author="JIRAUSER21007" created="Wed, 10 Jul 2024 05:08:54 -0700"  >If we do not care about getting a potentially worse result from EA, bailing out based on recursion depth sounds like a much cleaner solution compared to the manual rewrite.&lt;br/&gt;
&lt;br/&gt;
Based on [~kvn]&amp;#39;s questions and comments, I will&lt;br/&gt;
1. check that we are not splitting the same Phi over and over again,&lt;br/&gt;
2. check that the process converges given unlimited stack space, and&lt;br/&gt;
3. add a reasonable EA bailout based on recursion depth (if still needed after 1 and 2).&lt;br/&gt;
&lt;br/&gt;
Thanks!&lt;br/&gt;
</comment>
                            <comment id="14688354" author="kvn" created="Tue, 9 Jul 2024 10:59:39 -0700"  >First, question: do we cycling through the same memory subgraph and splitting the same Phi over and over again?&lt;br/&gt;
If it is the case we should catch and fix it. There should be already check to catch this.&lt;br/&gt;
&lt;br/&gt;
Second, if it is not the same Phi does the process converge if we have unlimited stack or memory?&lt;br/&gt;
If this is the case we can simply bailout from EA by checking depth of recursion, for example.&lt;br/&gt;
&lt;br/&gt;
It is normal to bailout from EA if it consume too much resources.&lt;br/&gt;
&lt;br/&gt;
I don&amp;#39;t think we need to convert this from recursion to manual stack.</comment>
                            <comment id="14688340" author="JIRAUSER21007" created="Tue, 9 Jul 2024 10:20:47 -0700"  >After &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8331185&quot; title=&quot;Enable compiler memory limits in debug builds&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8331185&quot;&gt;&lt;strike&gt;JDK-8331185&lt;/strike&gt;&lt;/a&gt;, my rewrite also crashes on debug builds with &amp;quot;Hit MemLimit (limit: 1073741824 now: 1073773536)&amp;quot;. However, it does now generate an hs_err file since it is no longer a native C++ stack overflow. It should also run fine in release builds (but use a lot of memory). It is also possible to avoid the crash on debug builds with -XX:CompileCommand=MemLimit,*.*,0.&lt;br/&gt;
&lt;br/&gt;
[~kvn] [~thartmann] Any recommendations on how to proceed? I&amp;#39;m leaning towards going ahead and creating a PR with my rewrite above. We should also perhaps set -XX:CompileCommand=MemLimit,*.*,0 for debug build tests that potentially fail due to this issue.&lt;br/&gt;
</comment>
                            <comment id="14677437" author="JIRAUSER21007" created="Thu, 30 May 2024 01:03:16 -0700"  >I&amp;#39;ve had a look at this now, and see no other (straightforward) alternative to rewriting the recursion with a manual stack. Here is a first attempt that seems to work fine (the issue no longer appears and there are no GHA failures): &lt;a href=&quot;https://github.com/openjdk/jdk/compare/master...dlunde:jdk:stack-overflow-phi-8324345&quot;&gt;https://github.com/openjdk/jdk/compare/master...dlunde:jdk:stack-overflow-phi-8324345&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
Granted, it it less readable. But perhaps it is necessary.</comment>
                            <comment id="14676652" author="thartmann" created="Tue, 28 May 2024 00:47:49 -0700"  >Targeting to JDK 24 for now since it&amp;#39;s an old issue. Feel free to re-target to JDK 23 if the fix is ready in time.</comment>
                            <comment id="14649486" author="kvn" created="Wed, 14 Feb 2024 15:01:06 -0800"  >Please, discuss ideas here before start implementing it. As Xin Liu commented in &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8276219&quot; title=&quot;C2: ConnectionGraph::find_inst_mem() should not be recursive&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8276219&quot;&gt;&lt;strike&gt;JDK-8276219&lt;/strike&gt;&lt;/a&gt;, it is not simple problem.</comment>
                            <comment id="14647928" author="thartmann" created="Fri, 9 Feb 2024 04:31:53 -0800"  >This came up before, see &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8276219&quot; title=&quot;C2: ConnectionGraph::find_inst_mem() should not be recursive&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8276219&quot;&gt;&lt;strike&gt;JDK-8276219&lt;/strike&gt;&lt;/a&gt; and the linked bugs.</comment>
                            <comment id="14643092" author="thartmann" created="Tue, 23 Jan 2024 07:19:05 -0800"  >ILW = Stack overflow in C2 verification code, with JCK test and -Xcomp; only affects debug builds, no workaround but disable compilation of affected method = HLM = P3</comment>
                            <comment id="14643090" author="thartmann" created="Tue, 23 Jan 2024 07:17:27 -0800"  >I can reproduce this with JDK 21u as well, so this is not a recent regression.</comment>
                            <comment id="14642903" author="thartmann" created="Tue, 23 Jan 2024 04:12:33 -0800"  >I added some code to the problematic method to assert if the native stack is growing over 1000 frames (see overflow_check.patch) and it&amp;#39;s indeed a stack overflow:&lt;br/&gt;
&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9922/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/bb2a42a8-b515-4ca4-871f-d848b5f874f4/runs/4c895d9f-7833-4a7a-bd1d-cca0ad6bce55/workspace/open/src/hotspot/share/opto/cfgnode.cpp:1162), pid=947068, tid=947140&lt;br/&gt;
#  assert(count &amp;lt; 1000) failed: Stack overflow&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (23.0) (fastdebug build 23-internal-2024-01-23-1116378.tobias.hartmann.jdk3)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 23-internal-2024-01-23-1116378.tobias.hartmann.jdk3, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0x881018]  check_for_stack_overflow() [clone .part.0]+0x28&lt;br/&gt;
#&lt;br/&gt;
&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C2:62927 8732    b        javax.swing.plaf.basic.BasicLookAndFeel::initComponentDefaults (14883 bytes)&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00007f34df8ff000,0x00007f34df9ff000],  sp=0x00007f34df9c7b80,  free space=802k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x881018]  check_for_stack_overflow() [clone .part.0]+0x28  (cfgnode.cpp:1162)&lt;br/&gt;
V  [libjvm.so+0x886150]  PhiNode::slice_memory(TypePtr const*) const+0x0&lt;br/&gt;
V  [libjvm.so+0x894636]  PhiNode::adr_type() const+0x16&lt;br/&gt;
V  [libjvm.so+0x138b6be]  MergeMemNode::memory_at(unsigned int) const+0x2de&lt;br/&gt;
V  [libjvm.so+0xbb58c7]  ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&amp;lt;PhiNode*&amp;gt;&amp;amp;)+0x327&lt;br/&gt;
V  [libjvm.so+0xbb6508]  ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&amp;lt;PhiNode*&amp;gt;&amp;amp;)+0x1e8&lt;br/&gt;
V  [libjvm.so+0xbb5fb9]  ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&amp;lt;PhiNode*&amp;gt;&amp;amp;)+0xa19&lt;br/&gt;
V  [libjvm.so+0xbb6508]  ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&amp;lt;PhiNode*&amp;gt;&amp;amp;)+0x1e8&lt;br/&gt;
V  [libjvm.so+0xbb5fb9]  ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&amp;lt;PhiNode*&amp;gt;&amp;amp;)+0xa19&lt;br/&gt;
V  [libjvm.so+0xbb592b]  ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&amp;lt;PhiNode*&amp;gt;&amp;amp;)+0x38b&lt;br/&gt;
V  [libjvm.so+0xbb6508]  ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&amp;lt;PhiNode*&amp;gt;&amp;amp;)+0x1e8&lt;br/&gt;
V  [libjvm.so+0xbb5fb9]  ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&amp;lt;PhiNode*&amp;gt;&amp;amp;)+0xa19&lt;br/&gt;
V  [libjvm.so+0xbb6508]  ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&amp;lt;PhiNode*&amp;gt;&amp;amp;)+0x1e8&lt;br/&gt;
V  [libjvm.so+0xbb5fb9]  ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&amp;lt;PhiNode*&amp;gt;&amp;amp;)+0xa19&lt;br/&gt;
V  [libjvm.so+0xbb6508]  ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&amp;lt;PhiNode*&amp;gt;&amp;amp;)+0x1e8&lt;br/&gt;
V  [libjvm.so+0xbb5fb9]  ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&amp;lt;PhiNode*&amp;gt;&amp;amp;)+0xa19&lt;br/&gt;
V  [libjvm.so+0xbb592b]  ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&amp;lt;PhiNode*&amp;gt;&amp;amp;)+0x38b&lt;br/&gt;
V  [libjvm.so+0xbb6508]  ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&amp;lt;PhiNode*&amp;gt;&amp;amp;)+0x1e8&lt;br/&gt;
[...]&lt;br/&gt;
&lt;br/&gt;
Unfortunately, replay compilation does not reproduce the issue.</comment>
                            <comment id="14642716" author="thartmann" created="Mon, 22 Jan 2024 23:26:28 -0800"  >We need to double-check why no hs_err file is generated. I suspect that it&amp;#39;s a stack overflow in C++ code (the failing method is recursive) and we can&amp;#39;t recover from that to generate the file.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5158326">JDK-8356676</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10002">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                                        </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5136122">JDK-8337821</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5061532">JDK-8276219</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="110084" name="Test.java" size="428" author="dlunden" created="Mon, 15 Jul 2024 08:15:58 -0700"/>
                            <attachment id="107979" name="coredump.stack" size="1290824" author="lmesnik" created="Mon, 22 Jan 2024 16:29:50 -0800"/>
                            <attachment id="107984" name="hs_err_pid947068.log" size="99580" author="thartmann" created="Tue, 23 Jan 2024 04:20:09 -0800"/>
                            <attachment id="107987" name="overflow_check.patch" size="1322" author="thartmann" created="Tue, 23 Jan 2024 06:09:15 -0800"/>
                            <attachment id="107985" name="replay_pid947068.log" size="465549" author="thartmann" created="Tue, 23 Jan 2024 04:20:09 -0800"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i34omj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17336"><![CDATA[b09]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>