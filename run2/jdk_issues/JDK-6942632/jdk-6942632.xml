<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Sat Sep 27 08:51:36 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-6942632] Hotspot should be able to use more than 64 logical processors on Windows</title>
                <link>https://bugs.openjdk.org/browse/JDK-6942632</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>Windows 7 and Windows Server 2008 R2 implement &amp;quot;processor groups&amp;quot; that, with some complication, allow a single process to use more than 64 hardware threads.  This mechanism is distinct from the NUMA mode facility, which focuses on allocating threads to NUMA domains, e.g., a single multi-core socket.  Without support for processor groups, a single jvm instance can&amp;#39;t use more than 64 hw threads.&lt;br/&gt;
&lt;br/&gt;
See&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd405503(VS.85).aspx&quot;&gt;http://msdn.microsoft.com/en-us/library/dd405503(VS.85).aspx&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
and&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/dd405503(VS.85).aspx&quot;&gt;http://msdn.microsoft.com/en-us/library/dd405503(VS.85).aspx&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
and, for NUMA&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;http://msdn.microsoft.com/en-us/library/aa363804(v=VS.85).aspx&quot;&gt;http://msdn.microsoft.com/en-us/library/aa363804(v=VS.85).aspx&lt;/a&gt;&lt;br/&gt;
Linxux and Solaris have no such limitation.&lt;br/&gt;
</description>
                <environment></environment>
        <key id="4596324">JDK-6942632</key>
            <summary>Hotspot should be able to use more than 64 logical processors on Windows</summary>
                <type id="7" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14707&amp;avatarType=issuetype">Enhancement</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="swesonga">Saint Wesonga</assignee>
                                    <reporter username="phh">Paul Hohensee</reporter>
                        <labels>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>performance</label>
                    </labels>
                <created>Fri, 9 Apr 2010 11:31:56 -0700</created>
                <updated>Tue, 5 Aug 2025 23:42:23 -0700</updated>
                            <resolved>Thu, 6 Jun 2024 04:58:43 -0700</resolved>
                                    <version>7</version>
                    <version>11</version>
                    <version>17</version>
                    <version>21</version>
                                    <fixVersion>23</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                                                                <comments>
                            <comment id="14708331" author="sgehwolf" created="Fri, 27 Sep 2024 01:48:59 -0700"  >[~swesonga] Does this need a follow-up in OpenJDK 21u? &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8340383&quot; title=&quot;VM issues warning failure to find kernel32.dll on Windows nanoserver&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8340383&quot;&gt;&lt;strike&gt;JDK-8340383&lt;/strike&gt;&lt;/a&gt;</comment>
                            <comment id="14700816" author="JIRAUSER21019" created="Mon, 26 Aug 2024 23:13:37 -0700"  >Requesting backport to jdk21u. OpenJDK LTS builds do not currenly support enabling the use of more than 64 logical processors on Windows. This backport request aims to enable this feature for jdk21u only. The risk of this change is minimized by only enabling this feature when requested by the UseAllWindowsProcessorGroups product flag (which is off by default). Automated tier1 and tier2 tests (and tests newly introduced in the change) pass on Windows 11/Server 2022 (where the new behavior is supported). Also manually verified correctness of backport on Windows ARM-based Ampere machine with 160 processors and Intel x64 platform with 96 processors, as well as Intel and ARM platforms with &amp;lt;64 processors.</comment>
                            <comment id="14693837" author="roboduke" created="Tue, 30 Jul 2024 12:11:29 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/881&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/881&lt;/a&gt;&lt;br/&gt;
Date: 2024-07-30 19:05:36 +0000</comment>
                            <comment id="14679476" author="dukebot" created="Thu, 6 Jun 2024 04:58:42 -0700"  >Changeset: f15d423f&lt;br/&gt;
Author:    Saint Wesonga &amp;lt;&lt;a href=&apos;mailto:saint.wesonga@microsoft.com&apos;&gt;saint.wesonga@microsoft.com&lt;/a&gt;&amp;gt;&lt;br/&gt;
Committer: David Holmes &amp;lt;&lt;a href=&apos;mailto:dholmes@openjdk.org&apos;&gt;dholmes@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-06-06 11:55:43 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/f15d423fb5451c7c8f2d1007235ebf8aa79a403e&quot;&gt;https://git.openjdk.org/jdk/commit/f15d423fb5451c7c8f2d1007235ebf8aa79a403e&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14643830" author="roboduke" created="Thu, 25 Jan 2024 11:12:23 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/17576&quot;&gt;https://git.openjdk.org/jdk/pull/17576&lt;/a&gt;&lt;br/&gt;
Date: 2024-01-25 19:07:09 +0000</comment>
                            <comment id="14643651" author="JIRAUSER21019" created="Wed, 24 Jan 2024 22:21:10 -0800"  >Starting with Windows 11 and Windows Server 2022, applications are no longer constrained by default to a single processor group. Instead, processes and their threads have processor affinities that by default span all processors in the system, across multiple groups on machines with more than 64 processors. This is in contrast to previous operating system versions where the processor group affinity APIs needed to be used to assign each thread a specific processor group. See &lt;a href=&quot;https://learn.microsoft.com/en-us/windows/win32/procthread/processor-groups#behavior-starting-with-windows-11-and-windows-server-2022&quot;&gt;https://learn.microsoft.com/en-us/windows/win32/procthread/processor-groups#behavior-starting-with-windows-11-and-windows-server-2022&lt;/a&gt;</comment>
                            <comment id="14084984" author="gtriantafill" created="Mon, 15 May 2017 11:48:35 -0700"  >Per David Holmes&amp;#39; comment, closing as WNF.</comment>
                            <comment id="14048570" author="dholmes" created="Tue, 7 Feb 2017 22:21:12 -0800"  >From the MS whitepaper:&lt;br/&gt;
&lt;br/&gt;
&amp;quot;The reason for initially limiting all threads to a single group is that 64 processors is more than adequate for the typical application. An application that requires the use of multiple groups so that it can run on more than 64 processors must intentionally determine where to run its threads. The application is responsible for setting thread affinities to the desired groups.&amp;quot;&lt;br/&gt;
&lt;br/&gt;
It is hard to see how the JVM can make any decisions about whether to use more than one group on a system. That would seem to be a choice to be made by the application deployer/executor. But even if the association with multiple groups is done externally the JVM then has no real criteria for deciding what threads should run where. It has no idea how many threads will be used by an application nor their execution characteristics. A simple round-robin scheme could be implemented but could easily become out-of-balance due to the unknown load applied by each thread.&lt;br/&gt;
&lt;br/&gt;
As this has not been seen to be an issue (indeed the tendency is to run multiple Windows VMs on big hardware) I am considering closing this as simply &amp;#39;will not fix&amp;quot;.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5140118">JDK-8341054</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5136440">JDK-8338082</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10400">
                    <name>CSR</name>
                                            <outwardlinks description="csr for">
                                        <issuelink>
            <issuekey id="5122662">JDK-8326890</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5167591">JDK-8364803</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5139368">JDK-8340383</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17008"><![CDATA[generic]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10001" key="com.atlassian.jira.plugin.system.customfieldtypes:datetime">
                        <customfieldname>Imported</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 25 Sep 2012 11:39:54 -0700</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10002" key="com.atlassian.jira.plugin.system.customfieldtypes:datetime">
                        <customfieldname>Indexed</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>Tue, 25 Sep 2012 02:24:01 -0700</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17006"><![CDATA[windows_7]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0igtz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>107704</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17357"><![CDATA[b26]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>