<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Sat Sep 27 10:54:13 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8349637] Integer.numberOfLeadingZeros outputs incorrectly in certain cases</title>
                <link>https://bugs.openjdk.org/browse/JDK-8349637</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>ADDITIONAL SYSTEM INFORMATION :&lt;br/&gt;
Windows 11 [Version 10.0.26100.2894]&lt;br/&gt;
JDK 21.0.6, 23.0.2, 24-ea+35, 25-ea+8&lt;br/&gt;
&lt;br/&gt;
A DESCRIPTION OF THE PROBLEM :&lt;br/&gt;
Use numberOfLeadingZeros inside a short loop.&lt;br/&gt;
Use arrays for input, output, or both.&lt;br/&gt;
Access arrays sequentially.&lt;br/&gt;
Do not use branching statements such as if statements within the loop.&lt;br/&gt;
A certain number of loops (hundreds of thousands of times?).&lt;br/&gt;
Under these conditions, it may return a number that is 1 less at the boundary where the value changes.&lt;br/&gt;
Could the Intrinsic of Integer.numberOfLeadingZeros be causing the problem?&lt;br/&gt;
&lt;br/&gt;
0x01FFFFFF: expected=7, actual=6&lt;br/&gt;
0x03FFFFFE-0x03FFFFFF: expected=6, actual=5&lt;br/&gt;
0x07FFFFFC-0x07FFFFFF: expected=5, actual=4&lt;br/&gt;
0x0FFFFFF8-0x0FFFFFFF: expected=4, actual=3&lt;br/&gt;
0x1FFFFFF0-0x1FFFFFFF: expected=3, actual=2&lt;br/&gt;
0x3FFFFFE0-0x3FFFFFFF: expected=2, actual=1&lt;br/&gt;
&lt;br/&gt;
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :&lt;br/&gt;
var out = new int[0x2000004];&lt;br/&gt;
for (int i = 0; i &amp;lt; out.length; i++)&lt;br/&gt;
	out[i] = Integer.numberOfLeadingZeros(i);&lt;br/&gt;
System.out.println(out[0x1FFFFFF]);&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
---------- BEGIN SOURCE ----------&lt;br/&gt;
public class Main {&lt;br/&gt;
	public static void main(String[] args) {&lt;br/&gt;
		arrayOutput(0x01000000, 0x02000004);&lt;br/&gt;
		arrayOutput(0x03000000, 0x04000004);&lt;br/&gt;
		arrayOutput(0x07000000, 0x08000004);&lt;br/&gt;
		arrayOutput(0x0F000000, 0x10000004);&lt;br/&gt;
		arrayOutput(0x1F000000, 0x20000004);&lt;br/&gt;
		arrayOutput(0x3F000000, 0x40000004);&lt;br/&gt;
		System.out.println();&lt;br/&gt;
&lt;br/&gt;
		for (int loop = 0; loop &amp;lt; 5; loop++) {&lt;br/&gt;
			arrayInput(0x200000);&lt;br/&gt;
		}&lt;br/&gt;
	}&lt;br/&gt;
&lt;br/&gt;
	static void arrayOutput(int from, int to) {&lt;br/&gt;
		var output = new int[to - from];&lt;br/&gt;
		for (int i = from; i &amp;lt; to; i++) {&lt;br/&gt;
			output[i - from] = Integer.numberOfLeadingZeros(i);&lt;br/&gt;
		}&lt;br/&gt;
&lt;br/&gt;
		for (int i = from; i &amp;lt; to; i++) {&lt;br/&gt;
			int nlz = Integer.numberOfLeadingZeros(i);&lt;br/&gt;
			if (nlz != output[i - from]) {&lt;br/&gt;
				System.out.printf(&amp;quot;0x%08X: expected=%d actual=%d%n&amp;quot;, i, nlz, output[i - from]);&lt;br/&gt;
			}&lt;br/&gt;
		}&lt;br/&gt;
	}&lt;br/&gt;
&lt;br/&gt;
	static void arrayInput(int size) {&lt;br/&gt;
		int expected = 0;&lt;br/&gt;
		for (int i = 0; i &amp;lt; size; i++)&lt;br/&gt;
			expected += Integer.numberOfLeadingZeros(-1 &amp;gt;&amp;gt;&amp;gt; i);&lt;br/&gt;
&lt;br/&gt;
		var input = new int[size];&lt;br/&gt;
		java.util.Arrays.setAll(input, i -&amp;gt; -1 &amp;gt;&amp;gt;&amp;gt; i);&lt;br/&gt;
		int actual = 0;&lt;br/&gt;
		for (int i = 0; i &amp;lt; size; i++)&lt;br/&gt;
			actual += Integer.numberOfLeadingZeros(input[i]);&lt;br/&gt;
&lt;br/&gt;
		System.out.printf(&amp;quot;expected=%d, actual=%d%n&amp;quot;, expected, actual);&lt;br/&gt;
	}&lt;br/&gt;
}&lt;br/&gt;
---------- END SOURCE ----------&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment></environment>
        <key id="5150156">JDK-8349637</key>
            <summary>Integer.numberOfLeadingZeros outputs incorrectly in certain cases</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="2" iconUrl="https://bugs.openjdk.org/images/jbsImages/p2.png">P2</priority>
                        <status id="6" iconUrl="https://bugs.openjdk.org/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="jkarthikeyan">Jasmine Karthikeyan</assignee>
                                    <reporter username="webbuggrp">Webbug Group</reporter>
                        <labels>
                            <label>25-ea</label>
                            <label>amazon-interest</label>
                            <label>dcsaw</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>jdk24u-fix-SQE-ok-next</label>
                            <label>jdk24u-fix-request</label>
                            <label>jdk24u-fix-yes</label>
                            <label>oracle-triage-25</label>
                            <label>regression</label>
                            <label>reproducer-yes</label>
                            <label>webbug</label>
                    </labels>
                <created>Thu, 6 Feb 2025 13:30:25 -0800</created>
                <updated>Wed, 23 Jul 2025 12:14:06 -0700</updated>
                            <resolved>Sun, 2 Mar 2025 21:21:59 -0800</resolved>
                                    <version>19</version>
                    <version>21</version>
                    <version>24</version>
                    <version>25</version>
                                    <fixVersion>25</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>22</watches>
                                                                                                                                                            <comments>
                            <comment id="14768212" author="roboduke" created="Tue, 8 Apr 2025 09:50:58 -0700"  >[jdk21u-fix-request] Approval Request from Paul Hohensee&lt;br/&gt;
Backport for parity with Oracle 21.0.8. 24u fix request applies:&lt;br/&gt;
&lt;br/&gt;
Fixes an incorrect result of Integer.numberOfLeadingZeros. Fix is low risk (two lines) and there is a workaround (disable the intrinsic). Applies cleanly and was tested in JDK 25 for several days in the CI.&lt;br/&gt;
&lt;br/&gt;
More detail:&lt;br/&gt;
&lt;br/&gt;
Clean except for copyright in TestNumberOfContinuousZeros.java. Passes tier2 and the modified test. Low risk: algorithmically, it&amp;#39;s zero risk, vis&lt;br/&gt;
&lt;br/&gt;
The algorithm works by converting the argument to a double and using the resulting exponent as the basis for the number of leading zeros in the argument: the exponent reflects the number of leading zeros because the fraction equals the argument shifted left until the highest set bit is implied by the fraction. The bug was that if the 2nd-to-highest bit is also set, the exponent may be off by one due to rounding up. The fix is to unconditionally clear the 2nd-to-highest argument bit by andn&amp;#39;ing the argument-shifted-right-by-1 with itself. andn is 1 iff the left is 0 and the right is 1, so the result is guaranteed to keep the high bit set because a zero is shifted into that position in the argument-shifted-right-by-1. It&amp;#39;s also guaranteed to clear the 2nd-to-highest bit because the highest set bit in the argument-shifted-left-by-1 will be the left argument of the andn, so guaranteed to clear the 2nd-to-highest bit since the result of andn is always zero if its left argument is 1.</comment>
                            <comment id="14766787" author="roboduke" created="Thu, 3 Apr 2025 06:46:12 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/1584&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/1584&lt;/a&gt;&lt;br/&gt;
Date: 2025-04-03 13:37:04 +0000</comment>
                            <comment id="14758755" author="roboduke" created="Fri, 7 Mar 2025 03:26:13 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk24u/pull/118&quot;&gt;https://git.openjdk.org/jdk24u/pull/118&lt;/a&gt;&lt;br/&gt;
Date: 2025-03-07 11:20:59 +0000</comment>
                            <comment id="14758754" author="thartmann" created="Fri, 7 Mar 2025 03:24:59 -0800"  >Fix Request (JDK 24u):&lt;br/&gt;
Fixes an incorrect result of Integer.numberOfLeadingZeros. Fix is low risk (two lines) and there is a workaround (disable the intrinsic). Applies cleanly and was tested in JDK 25 for several days in the CI.</comment>
                            <comment id="14757368" author="dukebot" created="Sun, 2 Mar 2025 21:21:58 -0800"  >Changeset: 3657e92e&lt;br/&gt;
Branch: master&lt;br/&gt;
Author:    Jasmine Karthikeyan &amp;lt;&lt;a href=&apos;mailto:jkarthikeyan@openjdk.org&apos;&gt;jkarthikeyan@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2025-03-03 05:18:55 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/3657e92ead1e678942fcb272e77c3867eb5aa13e&quot;&gt;https://git.openjdk.org/jdk/commit/3657e92ead1e678942fcb272e77c3867eb5aa13e&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14754216" author="thartmann" created="Sun, 16 Feb 2025 22:41:32 -0800"  >ILW = Incorrect result of Integer.numberOfLeadingZeros (regression in JDK 19), with large values and when used in a loop and C2&amp;#39;s autovectorizer can optimize it, -XX:+UnlockDiagnosticVMOptions -XX:DisableIntrinsic=_numberOfLeadingZeros_i = HMM = P2</comment>
                            <comment id="14752266" author="JIRAUSER20725" created="Thu, 13 Feb 2025 12:12:34 -0800"  >I believe the vectorized output code for Long.numberOfLeadingZeros doesn&amp;#39;t suffer from this issue because it uses a different approach to calculate the leading zeros, without relying on floating point semantics. Instead it calculates the the leading zeros more directly using a lookup table to find the zeros in each 4-bit segment, and then combining them. This implementation is shared with the versions for short and byte as well.</comment>
                            <comment id="14751800" author="psandoz" created="Thu, 13 Feb 2025 09:44:59 -0800"  >We need to double check the intrinsic of Long.numberOfLeadingZeros to see if it has the same issue. More broadly check the enhancement for Integer/Long leading/trailing that was originally worked on the panama repo related to this issue &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8284459&quot;&gt;https://bugs.openjdk.org/browse/JDK-8284459&lt;/a&gt;</comment>
                            <comment id="14751254" author="roboduke" created="Tue, 11 Feb 2025 21:52:13 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/23579&quot;&gt;https://git.openjdk.org/jdk/pull/23579&lt;/a&gt;&lt;br/&gt;
Date: 2025-02-12 05:47:52 +0000</comment>
                            <comment id="14751197" author="JIRAUSER20725" created="Tue, 11 Feb 2025 17:10:11 -0800"  >I had a look at this, and I believe the issue is due to a bug in the x86 implementation of CountLeadingZerosV for avx2 integers. In C2_MacroAssembler::vector_count_leading_zeros_int_avx, we convert the int value to a float, to calculate the leading zeros based on the float exponent. However, in the case where 2 int values have the same float representation we end up rounding up in some cases, leading to wrong bit calculation in some cases. This is most clearly seen in the case of 0x01FFFFFF, as (float)0x01FFFFFF == (float)0x02000000). I&amp;#39;ve added a reduced reproducer.</comment>
                            <comment id="14751094" author="jpai" created="Tue, 11 Feb 2025 10:13:15 -0800"  >I had some time and access to a Windows system, so I looked into this today. JDK 19 b25 build, which Andrew narrowed this down to, has several changes &lt;a href=&quot;https://bugs.openjdk.org/issues/?jql=project%20%3D%20JDK%20AND%20fixVersion%20%3D%20%2219%22%20AND%20%22Resolved%20In%20Build%22%20%3D%20b25&quot;&gt;https://bugs.openjdk.org/issues/?jql=project%20%3D%20JDK%20AND%20fixVersion%20%3D%20%2219%22%20AND%20%22Resolved%20In%20Build%22%20%3D%20b25&lt;/a&gt;. But out of those changes, only a few appear remotely related and that&amp;#39;s a good thing. I started by checking out (&amp;quot;git checkout -b &amp;lt;foo&amp;gt; &amp;lt;specific commit&amp;gt;&amp;quot;) from a few select integrated issues from that list and then running the attached reproducer against that built JDK.&lt;br/&gt;
&lt;br/&gt;
It turns out that something in the change that went into &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8284960&quot;&gt;https://bugs.openjdk.org/browse/JDK-8284960&lt;/a&gt; is what&amp;#39;s causing this issue. If I exclude that integrated commit from the JDK 19 source workspace and build a JDK, then the issue is no longer reproducible against that JDK.&lt;br/&gt;
&lt;br/&gt;
Given this, I&amp;#39;ll change the &amp;quot;Caused by&amp;quot; link to point to this issue and also change the component from hotspot -&amp;gt; runtime to hotspot -&amp;gt; compiler (to match the component/sub-component of &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8284960&quot; title=&quot;Integration of JEP 426: Vector API (Fourth Incubator)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8284960&quot;&gt;&lt;strike&gt;JDK-8284960&lt;/strike&gt;&lt;/a&gt;)</comment>
                            <comment id="14750219" author="jpai" created="Fri, 7 Feb 2025 02:38:03 -0800"  >As far as I can see, there are several other changes that were part of JDK 19 b25 &lt;a href=&quot;https://bugs.openjdk.org/issues/?jql=project%20%3D%20JDK%20AND%20fixVersion%20%3D%20%2219%22%20AND%20%22Resolved%20In%20Build%22%20%3D%20b25&quot;&gt;https://bugs.openjdk.org/issues/?jql=project%20%3D%20JDK%20AND%20fixVersion%20%3D%20%2219%22%20AND%20%22Resolved%20In%20Build%22%20%3D%20b25&lt;/a&gt;</comment>
                            <comment id="14750209" author="tongwan" created="Fri, 7 Feb 2025 02:03:14 -0800"  >I found the the problem was introduced in JDK 19 b25 and &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8287384&quot; title=&quot;Speed up jdk.test.lib.util.ForceGC&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8287384&quot;&gt;&lt;strike&gt;JDK-8287384&lt;/strike&gt;&lt;/a&gt; is the only issue fixed in that build.</comment>
                            <comment id="14750183" author="jpai" created="Fri, 7 Feb 2025 00:30:09 -0800"  >Hello Andrew [~tongwan], this issue is linked to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8287384&quot;&gt;https://bugs.openjdk.org/browse/JDK-8287384&lt;/a&gt; but that issue is just a test library related change and doesn&amp;#39;t appear related to this. Did you mean to link this to some other issue?</comment>
                            <comment id="14750170" author="tongwan" created="Thu, 6 Feb 2025 23:28:35 -0800"  >The observations on Windows 11:&lt;br/&gt;
JDK 8, 11, and 17: Passed.&lt;br/&gt;
JDK 19+24: Passed.&lt;br/&gt;
JDK 19+25: Failed, incorrect values observed&lt;br/&gt;
JDK 21, 23, 24, and 25: Failed.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5155769">JDK-8354528</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5152329">JDK-8351461</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5152421">JDK-8351551</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10600">
                    <name>Causes</name>
                                                                <inwardlinks description="caused by">
                                        <issuelink>
            <issuekey id="5072746">JDK-8284960</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5153530">JDK-8352512</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5151134">JDK-8350468</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5150816">JDK-8350177</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="113250" name="Main.java" size="1406" author="tongwan" created="Thu, 6 Feb 2025 23:26:30 -0800"/>
                            <attachment id="113315" name="Reduced.java" size="838" author="jkarthikeyan" created="Tue, 11 Feb 2025 16:55:19 -0800"/>
                    </attachments>
                <subtasks>
                                              <subtask id="5151088">JDK-8350430</subtask>
                                                              <subtask id="5151089">JDK-8350431</subtask>
                                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17008"><![CDATA[generic]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10003" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Introduced In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17695"><![CDATA[b25]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10004" key="com.atlassian.jira.plugin.system.customfieldtypes:version">
                        <customfieldname>Introduced In Version</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue id="22020">19</customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17010"><![CDATA[generic]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i39rcj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17339"><![CDATA[b13]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10100" key="com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons">
                        <customfieldname>Verification</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17000"><![CDATA[Verified]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>