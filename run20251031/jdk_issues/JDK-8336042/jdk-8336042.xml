<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Sat Sep 27 10:28:18 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8336042] Caller/callee param size mismatch in deoptimization causes crash</title>
                <link>https://bugs.openjdk.org/browse/JDK-8336042</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>For interpreter frames, the caller contains the locals.  Some platforms also align the callee frame, so they compute locals in layout_activation relative to the caller last_sp and not the callee sender_sp.  When calling certain MethodHandle.linkTo* methods, the interpreter pushes 1 extra trailing arg for the MemberName, which is removed before calling the callee taret method.  However, the interpreter takes the snapshot of last_sp before popping the trailing arg, and the return entry point pops the number of args represented by the resolved method in the constant pool.  This is a synthetic method whose signature includes the MemberName.  The deoptimization code in vframeArray::unpack_to_stack has logic to check has_member_arg() on the resolved target method and make the proper adjustments.  However, the adjustment is missing for the oldest/bottom deoptimized frame, causing the computation of the callee locals based on the caller last_sp to be off by one, allowing the last local to overwrite the bottom of the callee frame (on aarch64 this is the return pc).&lt;br/&gt;
&lt;br/&gt;
Instead of the correct logic for the is_bottom frame, there is code that sets caller_was_method_handle based on if the invoke is invokedynamic or invokehandle.  This code dates back to ricochet frames when there could be an arbitrary mismatch between the arg count of the caller&amp;#39;s invoke and the callee.  However, this code fails to take into account all cases of calls to has_member_arg() MH linkTo* intrinsics.&lt;br/&gt;
&lt;br/&gt;
In addition, the last_frame_adjust() logic is also broken.  The adjustment can be done when not needed, and the same caller frame can be adjusted multiple times (every time the callee is deoptimized), resulting in unbounded frame/stack size growth.</description>
                <environment></environment>
        <key id="5133850">JDK-8336042</key>
            <summary>Caller/callee param size mismatch in deoptimization causes crash</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dlong">Dean Long</assignee>
                                    <reporter username="dlong">Dean Long</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>deopt</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>jdk24u-fix-SQE-ok-next</label>
                            <label>jdk24u-fix-request</label>
                            <label>jdk24u-fix-yes</label>
                            <label>oracle-triage-24</label>
                    </labels>
                <created>Tue, 9 Jul 2024 19:11:35 -0700</created>
                <updated>Mon, 23 Jun 2025 02:00:38 -0700</updated>
                            <resolved>Tue, 4 Mar 2025 15:12:55 -0800</resolved>
                                    <version>8</version>
                    <version>11</version>
                    <version>17</version>
                    <version>18</version>
                    <version>21</version>
                    <version>23</version>
                    <version>24</version>
                    <version>25</version>
                                    <fixVersion>25</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>8</watches>
                                                                                                                <comments>
                            <comment id="14766374" author="roboduke" created="Wed, 2 Apr 2025 09:19:58 -0700"  >[jdk21u-fix-request] Approval Request from Paul Hohensee&lt;br/&gt;
Backport for parity with Oracle 21.0.8. Passes tier2 and the new test. Low risk, clean, adds asserts and a minor refactoring to isolate the fix.</comment>
                            <comment id="14766327" author="roboduke" created="Wed, 2 Apr 2025 07:33:56 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/1573&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/1573&lt;/a&gt;&lt;br/&gt;
Date: 2025-04-02 14:24:43 +0000</comment>
                            <comment id="14763474" author="roboduke" created="Mon, 24 Mar 2025 11:52:40 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk24u/pull/156&quot;&gt;https://git.openjdk.org/jdk24u/pull/156&lt;/a&gt;&lt;br/&gt;
Date: 2025-03-24 18:45:45 +0000</comment>
                            <comment id="14763473" author="thartmann" created="Mon, 24 Mar 2025 11:46:30 -0700"  >Fix Request (JDK 24u)&lt;br/&gt;
This fix solves an issue leading to a crash during deoptimization. The fix is medium risk but was already thoroughly tested in Oracle JDK 21u and JDK 25. The fix was put into mainline 4 Mar 2025 and was reviewed by Patricio Chilano Mateo, Richard Reingruber, Vladimir Ivanov and Tom Rodriguez. The backport applies cleanly to JDK 24u.</comment>
                            <comment id="14760425" author="thartmann" created="Thu, 13 Mar 2025 01:03:26 -0700"  >Sounds good, I&amp;#39;ll take care of that.</comment>
                            <comment id="14760424" author="ffarquet" created="Thu, 13 Mar 2025 00:49:23 -0700"  >Indeed, a backport to JDK21 would be welcome.</comment>
                            <comment id="14760272" author="never" created="Wed, 12 Mar 2025 11:48:37 -0700"  >A backport to at least 21 might be a good idea but I think for most of our purposes getting it fixed in master is sufficient.  [~ffarquet] Does that seem right to you Francois?</comment>
                            <comment id="14758043" author="dukebot" created="Tue, 4 Mar 2025 15:12:53 -0800"  >Changeset: 20ea218c&lt;br/&gt;
Branch: master&lt;br/&gt;
Author:    Dean Long &amp;lt;&lt;a href=&apos;mailto:dlong@openjdk.org&apos;&gt;dlong@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2025-03-04 23:10:52 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/20ea218ce52f79704445acfe2d4a3dc9d04e86d2&quot;&gt;https://git.openjdk.org/jdk/commit/20ea218ce52f79704445acfe2d4a3dc9d04e86d2&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14757597" author="dlong" created="Mon, 3 Mar 2025 10:36:33 -0800"  >[~thartmann], it does seem a little on the risky side for proactive backports, but we might consider limited backports as needed, like to fix JDK-8333309 with Graal if they still need to benchmark older releases.</comment>
                            <comment id="14757387" author="thartmann" created="Sun, 2 Mar 2025 22:50:22 -0800"  >[~dlong] should this fix be backported or is it too risky?</comment>
                            <comment id="14751198" author="roboduke" created="Tue, 11 Feb 2025 17:17:53 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/23557&quot;&gt;https://git.openjdk.org/jdk/pull/23557&lt;/a&gt;&lt;br/&gt;
Date: 2025-02-11 07:59:01 +0000</comment>
                            <comment id="14737177" author="dlong" created="Thu, 9 Jan 2025 19:41:08 -0800"  >While investigating this issue, other potential problems came to light:&lt;br/&gt;
&lt;br/&gt;
For invokedynamic/invokehandle, we may need to know if an appendix needs to be added.  But this information is not available in the signature from the constant pool.  It is only available after the invoke has been resolved.  Unfortunately, it seems we can compile an invoke w/o always resolving the constant pool ResolvedMethodEntry/ResolvedIndyEntry.  There is a hack in AbstractInterpreter::deopt_continue_after_entry() to call set_num_parameters() on these possibly-unresolved entries.  However, if they are unresolved, we can&amp;#39;t trust the has_appendix information.&lt;br/&gt;
&lt;br/&gt;
With a specially-crafted test, it seems possible to create a linkTo adapter chain that drops an arbitrary number of arguments.</comment>
                            <comment id="14711646" author="dlong" created="Wed, 9 Oct 2024 10:49:09 -0700"  >[~thartmann] Please defer it.</comment>
                            <comment id="14711565" author="thartmann" created="Wed, 9 Oct 2024 05:28:49 -0700"  >[~dlong] do you plan to fix this for JDK 24 or should we pro-actively defer?</comment>
                            <comment id="14688430" author="dlong" created="Tue, 9 Jul 2024 19:17:26 -0700"  >Added reproducer test ReadObjectTest.java written by [~never].</comment>
                            <comment id="14688428" author="dlong" created="Tue, 9 Jul 2024 19:13:57 -0700"  >ILW = Crash during stack walking, reproducer test on aarch64, no known workaround but disable compilation of affected method = HLM = P3 </comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5152966">JDK-8352072</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5154109">JDK-8353026</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5154828">JDK-8353675</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10002">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                                        </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="4297391">JDK-7009361</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="4742580">JDK-8055523</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5162358">JDK-8360219</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="110039" name="ReadObjectTest.java" size="9248" author="dlong" created="Tue, 9 Jul 2024 19:15:38 -0700"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i37317:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17339"><![CDATA[b13]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>