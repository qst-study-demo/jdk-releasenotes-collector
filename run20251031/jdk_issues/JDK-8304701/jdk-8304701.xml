<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Sat Sep 27 09:30:54 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8304701] Request with timeout aborts later in-flight request on HTTP/1.1 cxn</title>
                <link>https://bugs.openjdk.org/browse/JDK-8304701</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>ADDITIONAL SYSTEM INFORMATION :&lt;br/&gt;
macOS 12.6.3 (21G419)&lt;br/&gt;
openjdk version &amp;quot;20&amp;quot; 2023-03-21&lt;br/&gt;
OpenJDK Runtime Environment (build 20+36-2344)&lt;br/&gt;
OpenJDK 64-Bit Server VM (build 20+36-2344, mixed mode, sharing)&lt;br/&gt;
&lt;br/&gt;
A DESCRIPTION OF THE PROBLEM :&lt;br/&gt;
This was originally encountered and reported as &lt;a href=&quot;https://github.com/SeleniumHQ/selenium/issues/11798,&quot;&gt;https://github.com/SeleniumHQ/selenium/issues/11798,&lt;/a&gt; until it was determined to be a JDK issue.&lt;br/&gt;
&lt;br/&gt;
When an java.net.http.HttpRequest is sent with a specific timeout over a persistent HTTP/1.1 connection, the ResponseTimerEvent appears to be unconditionally handle()&amp;#39;d once its deadline elapses (regardless of whether &lt;br/&gt;
the request has completed), forcing the connection to be promptly and unnecessarily closed.  If there is another request in-flight on the connection at this moment, then it will fail with a &amp;quot;java.io.IOException: connection closed locally&amp;quot; error.&lt;br/&gt;
&lt;br/&gt;
This issue is readily reproducible by sending requests in a tight loop to a server with non-trivial latency or that returns a large response having a non-trivial transfer time.  This issue does appear to arise with HTTP/2 connections or if the connection is idle at the moment the timer elapses.&lt;br/&gt;
&lt;br/&gt;
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :&lt;br/&gt;
javac JavaExample.java &amp;amp;&amp;amp; java JavaExample&lt;br/&gt;
&lt;br/&gt;
EXPECTED VERSUS ACTUAL BEHAVIOR :&lt;br/&gt;
EXPECTED -&lt;br/&gt;
The process should run to completion with a few successful requests over ~15 seconds.&lt;br/&gt;
ACTUAL -&lt;br/&gt;
The process sends a few successful requests, but at ~10 seconds throws an exception like:&lt;br/&gt;
```&lt;br/&gt;
Exception in thread &amp;quot;main&amp;quot; java.io.IOException: fixed content-length: 28490775, bytes received: 17112264&lt;br/&gt;
	at java.net.http/jdk.internal.net.http.HttpClientImpl.send(HttpClientImpl.java:586)&lt;br/&gt;
	at java.net.http/jdk.internal.net.http.HttpClientFacade.send(HttpClientFacade.java:123)&lt;br/&gt;
	at example.JavaExample.main(JavaExample.java:28)&lt;br/&gt;
Caused by: java.io.IOException: fixed content-length: 28490775, bytes received: 17112264&lt;br/&gt;
	at java.net.http/jdk.internal.net.http.common.Utils.wrapWithExtraDetail(Utils.java:351)&lt;br/&gt;
	at java.net.http/jdk.internal.net.http.Http1Response$BodyReader.onReadError(Http1Response.java:760)&lt;br/&gt;
	at java.net.http/jdk.internal.net.http.Http1AsyncReceiver.checkForErrors(Http1AsyncReceiver.java:302)&lt;br/&gt;
	at java.net.http/jdk.internal.net.http.Http1AsyncReceiver.flush(Http1AsyncReceiver.java:268)&lt;br/&gt;
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$LockingRestartableTask.run(SequentialScheduler.java:205)&lt;br/&gt;
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(SequentialScheduler.java:149)&lt;br/&gt;
	at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(SequentialScheduler.java:230)&lt;br/&gt;
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)&lt;br/&gt;
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)&lt;br/&gt;
	at java.base/java.lang.Thread.run(Thread.java:833)&lt;br/&gt;
Caused by: java.io.IOException: connection closed locally&lt;br/&gt;
	at java.net.http/jdk.internal.net.http.SocketTube.signalClosed(SocketTube.java:159)&lt;br/&gt;
	at java.net.http/jdk.internal.net.http.PlainHttpConnection.close(PlainHttpConnection.java:372)&lt;br/&gt;
	at java.net.http/jdk.internal.net.http.AsyncSSLConnection.close(AsyncSSLConnection.java:111)&lt;br/&gt;
	at java.net.http/jdk.internal.net.http.Http1Exchange.cancelImpl(Http1Exchange.java:492)&lt;br/&gt;
	at java.net.http/jdk.internal.net.http.Http1Exchange.cancel(Http1Exchange.java:427)&lt;br/&gt;
	at java.net.http/jdk.internal.net.http.Exchange.cancel(Exchange.java:238)&lt;br/&gt;
	at java.net.http/jdk.internal.net.http.MultiExchange.cancel(MultiExchange.java:260)&lt;br/&gt;
	at java.net.http/jdk.internal.net.http.ResponseTimerEvent.handle(ResponseTimerEvent.java:71)&lt;br/&gt;
	at java.net.http/jdk.internal.net.http.HttpClientImpl.purgeTimeoutsAndReturnNextDeadline(HttpClientImpl.java:1270)&lt;br/&gt;
	at java.net.http/jdk.internal.net.http.HttpClientImpl$SelectorManager.run(HttpClientImpl.java:899)&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
---------- BEGIN SOURCE ----------&lt;br/&gt;
import java.net.URI;&lt;br/&gt;
import java.net.http.HttpClient;&lt;br/&gt;
import java.net.http.HttpRequest;&lt;br/&gt;
import java.net.http.HttpResponse;&lt;br/&gt;
import java.time.Duration;&lt;br/&gt;
import java.time.Instant;&lt;br/&gt;
&lt;br/&gt;
import static java.net.http.HttpClient.Redirect.ALWAYS;&lt;br/&gt;
import static java.net.http.HttpClient.Version.HTTP_1_1;&lt;br/&gt;
&lt;br/&gt;
public class JavaExample {&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public static void main(String[] args) throws Exception {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int timeoutSeconds = 10;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;HttpClient client = HttpClient.newBuilder()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.followRedirects(ALWAYS)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.build();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (Instant start = Instant.now(), now = start; now.isBefore(start.plusSeconds(timeoutSeconds * 3 / 2)); now = Instant.now()) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;HttpRequest request = HttpRequest.newBuilder().uri(URI.create(&amp;quot;&lt;a href=&quot;https://github.com/SeleniumHQ/selenium/releases/download/selenium-4.8.0/selenium-java-4.8.1.zip&quot;&gt;https://github.com/SeleniumHQ/selenium/releases/download/selenium-4.8.0/selenium-java-4.8.1.zip&lt;/a&gt;&amp;quot;))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.GET()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.version(HTTP_1_1)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.timeout(Duration.ofSeconds(timeoutSeconds))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.build();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;HttpResponse&amp;lt;Void&amp;gt; response = client.send(request, HttpResponse.BodyHandlers.discarding());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(now + &amp;quot; -&amp;gt; &amp;quot; + response.headers().firstValue(&amp;quot;date&amp;quot;));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
---------- END SOURCE ----------&lt;br/&gt;
&lt;br/&gt;
CUSTOMER SUBMITTED WORKAROUND :&lt;br/&gt;
Use HTTP/2 if available&lt;br/&gt;
Add &amp;quot;Connection: close&amp;quot; header to request if possible (requires jdk.httpclient.allowRestrictedHeaders customization)&lt;br/&gt;
Avoid using request timeouts if feasible&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
FREQUENCY : often&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment></environment>
        <key id="5096854">JDK-8304701</key>
            <summary>Request with timeout aborts later in-flight request on HTTP/1.1 cxn</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="6" iconUrl="https://bugs.openjdk.org/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="ccleary">Conor Cleary</assignee>
                                    <reporter username="webbuggrp">Webbug Group</reporter>
                        <labels>
                            <label>20ea</label>
                            <label>additional-information-received</label>
                            <label>dcsaw</label>
                            <label>httpclient</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>reproducer-yes</label>
                            <label>webbug</label>
                    </labels>
                <created>Tue, 21 Mar 2023 20:50:26 -0700</created>
                <updated>Thu, 16 Jan 2025 00:19:03 -0800</updated>
                            <resolved>Mon, 27 Nov 2023 00:10:28 -0800</resolved>
                                    <version>11</version>
                    <version>17</version>
                    <version>19</version>
                    <version>20</version>
                    <version>21</version>
                                    <fixVersion>22</fixVersion>
                                    <component>core-libs</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>12</watches>
                                                                                                                <comments>
                            <comment id="14735034" author="roboduke" created="Tue, 24 Dec 2024 06:00:18 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/1289&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/1289&lt;/a&gt;&lt;br/&gt;
Date: 2024-12-24 13:55:03 +0000</comment>
                            <comment id="14735033" author="goetz" created="Tue, 24 Dec 2024 05:53:06 -0800"  >Fix request [21u]&lt;br/&gt;
&lt;br/&gt;
I would like to backport this as we have a customer that runs into testing timeouts because of this issue.&lt;br/&gt;
Low risk, simple fix and good repro case, limited to http client, but this is a frequestly used component.&lt;br/&gt;
Clean backport.&lt;br/&gt;
Test passes and fails without the fix.  SAP nightly testing passed.</comment>
                            <comment id="14628965" author="dukebot" created="Mon, 27 Nov 2023 00:10:26 -0800"  >Changeset: bddcd086&lt;br/&gt;
Author:    Conor Cleary &amp;lt;&lt;a href=&apos;mailto:ccleary@openjdk.org&apos;&gt;ccleary@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-11-27 08:09:10 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/bddcd086b7c76d915aaa76427c2ae4088ad4239f&quot;&gt;https://git.openjdk.org/jdk/commit/bddcd086b7c76d915aaa76427c2ae4088ad4239f&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14626883" author="roboduke" created="Thu, 16 Nov 2023 05:21:08 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/16689&quot;&gt;https://git.openjdk.org/jdk/pull/16689&lt;/a&gt;&lt;br/&gt;
Date: 2023-11-16 13:11:35 +0000</comment>
                            <comment id="14626041" author="ccleary" created="Tue, 14 Nov 2023 01:26:41 -0800"  >The submitter code in the JBS issue points to a github link for a selenium zip file. That zip file redirects, as would be common enough, to a separate storage service. Hence why follow redirects is configured for the client.&lt;br/&gt;
&lt;br/&gt;
When the client is given a code 302 in the response and passed a URI to redirect to, this is treated as a new request once `responseFilters(response)` is called on this initial response. See `MultiExchange::L454`. This causes `responseAsyncImpl()` to be called again with the supplied redirect URI. See `MultiExchange::L476`. &lt;br/&gt;
&lt;br/&gt;
As it stands now without a fix, the `responseTimerEvent` variable is not cancelled and unregistered when `responseAsyncImpl()` is called again which causes a chain of timers to be initiated and never unregistered/cancelled in this case where a 3xx response is received. A fix should safely cancel the timer (as [~michaelm] suggested above) and a regression test that checks these codes should also be included. I see too that this has been adressed earlier in the comments on this issue but thought I should contribute my own analysis before fixing </comment>
                            <comment id="14624833" author="michaelm" created="Wed, 8 Nov 2023 03:40:01 -0800"  >This seems to resolve it.&lt;br/&gt;
&lt;br/&gt;
diff --git a/src/java.net.http/share/classes/jdk/internal/net/http/MultiExchange.java b/src/java.net.http/share/classes/jdk/internal/net/http/MultiExchange.java&lt;br/&gt;
index 91526938bff..d6d03a9aa8a 100644&lt;br/&gt;
--- a/src/java.net.http/share/classes/jdk/internal/net/http/MultiExchange.java&lt;br/&gt;
+++ b/src/java.net.http/share/classes/jdk/internal/net/http/MultiExchange.java&lt;br/&gt;
@@ -101,7 +101,7 @@&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private final List&amp;lt;HeaderFilter&amp;gt; filters;&lt;br/&gt;
-    ResponseTimerEvent responseTimerEvent;&lt;br/&gt;
+    volatile ResponseTimerEvent responseTimerEvent;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;volatile boolean cancelled;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;AtomicReference&amp;lt;CancellationException&amp;gt; interrupted = new AtomicReference&amp;lt;&amp;gt;();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;final PushGroup&amp;lt;T&amp;gt; pushGroup;&lt;br/&gt;
@@ -231,6 +231,7 @@ private void setExchange(Exchange&amp;lt;T&amp;gt; exchange) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private void cancelTimer() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (responseTimerEvent != null) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;client.cancelTimer(responseTimerEvent);&lt;br/&gt;
+            responseTimerEvent = null;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
@@ -457,6 +458,7 @@ public void cancel() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return completedFuture(response);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} else {&lt;br/&gt;
+                            cancelTimer();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;this.response =&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new HttpResponseImpl&amp;lt;&amp;gt;(currentreq, response, this.response, null, exch);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Exchange&amp;lt;T&amp;gt; oldExch = exch;&lt;br/&gt;
</comment>
                            <comment id="14624815" author="michaelm" created="Wed, 8 Nov 2023 02:39:48 -0800"  >Can reproduce easily for jdk mainline</comment>
                            <comment id="14597530" author="michaelm" created="Thu, 20 Jul 2023 01:40:59 -0700"  >Can look at this for 22</comment>
                            <comment id="14569591" author="pnarayanaswa" created="Mon, 27 Mar 2023 02:10:32 -0700"  >Additional Information from submitter:&lt;br/&gt;
===========================&lt;br/&gt;
Reproducing this issue appears to require the server to return a redirect for the request, and for followRedirects to be enabled.  When HttpClient.Redirect.NEVER is used, it appears that the timeout is properly cleaned up.&lt;br/&gt;
&lt;br/&gt;
Analyzing the code, it looks like the problem occurs on the link-following path, when responseAsyncImpl() is calls itself recursively, and then replaces the &amp;quot;responseTimerEvent&amp;quot; that should be cancelled.  See&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/jdk-21+15/src/java.net.http/share/classes/jdk/internal/net/http/MultiExchange.java#L437&quot;&gt;https://github.com/openjdk/jdk/blob/jdk-21+15/src/java.net.http/share/classes/jdk/internal/net/http/MultiExchange.java#L437&lt;/a&gt; (and #L392).&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</comment>
                            <comment id="14568711" author="tongwan" created="Tue, 21 Mar 2023 23:16:57 -0700"  >The observations on WIndows 10:&lt;br/&gt;
JDK 11: Failed, java.io.IOException thrown.&lt;br/&gt;
JDK 17: Failed.&lt;br/&gt;
JDK 19: Failed.&lt;br/&gt;
JDK 20ea+23: Failed.&lt;br/&gt;
JDK 21ea+5: Failed.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5148222">JDK-8347876</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="103082" name="JavaExample.java" size="1215" author="tongwan" created="Tue, 21 Mar 2023 23:17:20 -0700"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17008"><![CDATA[generic]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17010"><![CDATA[generic]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i30uf7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17357"><![CDATA[b26]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="193"><![CDATA[java.net]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10100" key="com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons">
                        <customfieldname>Verification</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17000"><![CDATA[Verified]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>