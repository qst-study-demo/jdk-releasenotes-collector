<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Sat Sep 27 09:12:10 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8336640] Shenandoah: Parallel worker use in parallel_heap_region_iterate</title>
                <link>https://bugs.openjdk.org/browse/JDK-8336640</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>Shenandoah init mark is supposed to be very fast, on the order of a few hundreds microseconds. We do most of the work right in the VM thread that executes the safepoint. Yet, we have a block here that involves workers:&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/d41d2a7a82cb6eff17396717e2e14139ad8179ba/src/hotspot/share/gc/shenandoah/shenandoahConcurrentGC.cpp#L555-L559&quot;&gt;https://github.com/openjdk/jdk/blob/d41d2a7a82cb6eff17396717e2e14139ad8179ba/src/hotspot/share/gc/shenandoah/shenandoahConcurrentGC.cpp#L555-L559&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
It goes for parallel walk when the number of regions is 1024 (see ShenandoahParallelRegionStride), which is below the usual Shenandoah target of 2048 regions. Which means we are likely always going into that path.&lt;br/&gt;
&lt;br/&gt;
It might cause some trouble, if the number of parallel GC workers is high: we wake up lots of GC threads without having most them do any useful work:&lt;br/&gt;
&lt;br/&gt;
[info ][gc,start         ] GC(163) Pause Init Mark (unload classes)&lt;br/&gt;
[info ][gc,task          ] GC(163) Using 16 of 16 workers for init marking&lt;br/&gt;
[info ][gc               ] GC(163) Pause Init Mark (unload classes) 0.116ms&lt;br/&gt;
[info ][safepoint        ] Safepoint &amp;quot;ShenandoahInitMark&amp;quot;, Time since last: 10717617218 ns, Reaching safepoint: 157434 ns, Cleanup: 27282 ns, At safepoint: 202251 ns, Total: 386967 ns&lt;br/&gt;
&lt;br/&gt;
We need to see if: a) this is actually a problem; b) default ShenandoahParallelRegionStride is too low; c) whether we should limit the number of active worker around that block by `num_regions() / stride`; d) whether we should just ditch this code and do a single-threaded walk always. &lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Not limited to init mark, parallel_heap_region_iterate is used by 4 others GC phases to apply lightweight operation on heap regions, if possible/needed, we should optimize parallel_heap_region_iterate which generally benefits all the 5 places using parallel_heap_region_iterate to walk and apply operation on heap regions. &lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Assuming the overhead to orchestrate worker threads for parallel interaction is `n`, the cost to process 1024 heap region is `m`(assuming total cost is linear in single thread), we could test and collect the value of `n` and `m` them  calculate the threshold, below the threshold simply use single thread, otherwise use parallel walk.  Threshold should be roughly `(n/m + 1) * 1024`</description>
                <environment></environment>
        <key id="5134533">JDK-8336640</key>
            <summary>Shenandoah: Parallel worker use in parallel_heap_region_iterate</summary>
                <type id="7" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14707&amp;avatarType=issuetype">Enhancement</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="xpeng">Xiaolong Peng</assignee>
                                    <reporter username="shade">Aleksey Shipilev</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>gc-shenandoah</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>jdk23u-fix-request</label>
                            <label>jdk23u-fix-yes</label>
                    </labels>
                <created>Wed, 17 Jul 2024 03:16:06 -0700</created>
                <updated>Tue, 19 Nov 2024 15:30:03 -0800</updated>
                            <resolved>Thu, 25 Jul 2024 09:07:55 -0700</resolved>
                                    <version>17</version>
                    <version>21</version>
                    <version>23</version>
                    <version>24</version>
                                    <fixVersion>24</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                                                                <comments>
                            <comment id="14708561" author="roboduke" created="Fri, 27 Sep 2024 14:15:44 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/shenandoah-jdk21u/pull/108&quot;&gt;https://git.openjdk.org/shenandoah-jdk21u/pull/108&lt;/a&gt;&lt;br/&gt;
Date: 2024-09-27 21:11:37 +0000</comment>
                            <comment id="14705963" author="roboduke" created="Wed, 18 Sep 2024 10:14:10 -0700"  >[jdk23u-fix-request] Approval Request from William Kemper&lt;br/&gt;
This is a performance enhancement for Shenandoah. It&amp;#39;s a clean backport and there are no changes outside of Shenandoah. In addition to the GHA tests, we have tested this with dacapo, extremem, specjbb2015, specjvm2008 and have been running this patch in production for months.</comment>
                            <comment id="14705702" author="roboduke" created="Tue, 17 Sep 2024 16:33:00 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk23u/pull/101&quot;&gt;https://git.openjdk.org/jdk23u/pull/101&lt;/a&gt;&lt;br/&gt;
Date: 2024-09-17 23:26:43 +0000</comment>
                            <comment id="14705289" author="roboduke" created="Mon, 16 Sep 2024 09:58:07 -0700"  >[jdk21u-fix-request] Approval Request from William Kemper&lt;br/&gt;
This is a performance enhancement for Shenandoah. It&amp;#39;s a clean backport and there are no changes outside of Shenandoah. I do not believe the macos test failure is related to this change. We have been running this change in production for over a month now. This change has also been accepted in jdk23u.</comment>
                            <comment id="14704609" author="roboduke" created="Thu, 12 Sep 2024 15:35:49 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/973&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/973&lt;/a&gt;&lt;br/&gt;
Date: 2024-09-12 22:29:41 +0000</comment>
                            <comment id="14692781" author="dukebot" created="Thu, 25 Jul 2024 09:07:49 -0700"  >Changeset: e74edbae&lt;br/&gt;
Branch: master&lt;br/&gt;
Author:    Xiaolong Peng &amp;lt;&lt;a href=&apos;mailto:xpeng@openjdk.org&apos;&gt;xpeng@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Committer: Aleksey Shipilev &amp;lt;&lt;a href=&apos;mailto:shade@openjdk.org&apos;&gt;shade@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-07-25 16:04:58 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/e74edbaea9f09169f597a470f647f3b7d10cc71b&quot;&gt;https://git.openjdk.org/jdk/commit/e74edbaea9f09169f597a470f647f3b7d10cc71b&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14692417" author="roboduke" created="Wed, 24 Jul 2024 12:11:14 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/20305&quot;&gt;https://git.openjdk.org/jdk/pull/20305&lt;/a&gt;&lt;br/&gt;
Date: 2024-07-24 00:42:22 +0000</comment>
                            <comment id="14691479" author="JIRAUSER21708" created="Mon, 22 Jul 2024 00:17:48 -0700"  >&amp;gt;&amp;gt; 2. Yes, and that&amp;#39;s a problem. We can mitigate this by pre-computing how many threads we actually need, and passing that number to `run_task`, which accepts the number of threads as the argument.&lt;br/&gt;
&lt;br/&gt;
It was the first version I was trying to test, but reading the code I felt it should have no performance at all, the number of threads actually having some work load is exactly same, the amount of work load of each thread should be also same, hence I tested the other two approach:1. re-calculate the stride size based on actual number of active worker threads; 2. simple use single thread to process the light weight task instead of multiple threading.&lt;br/&gt;
&lt;br/&gt;
Here is the result from the test pre-computing threads:&lt;br/&gt;
```&lt;br/&gt;
dev-dsk-xlpeng-2c-r7g4x-49a81adb % less recalibrated-threads.gc.log  | grep &amp;quot;ShenandoahInitMarkUpdateRegionStateClosure&amp;quot; | head -n 30&lt;br/&gt;
[1.778s][info][gc          ] GC(0) ShenandoahInitMarkUpdateRegionStateClosure Total time 24068 ns.&lt;br/&gt;
[1.812s][info][gc          ] GC(1) ShenandoahInitMarkUpdateRegionStateClosure Total time 19332 ns.&lt;br/&gt;
[1.837s][info][gc          ] GC(2) ShenandoahInitMarkUpdateRegionStateClosure Total time 23949 ns.&lt;br/&gt;
[1.857s][info][gc          ] GC(3) ShenandoahInitMarkUpdateRegionStateClosure Total time 29133 ns.&lt;br/&gt;
[1.883s][info][gc          ] GC(4) ShenandoahInitMarkUpdateRegionStateClosure Total time 18353 ns.&lt;br/&gt;
[1.897s][info][gc          ] GC(5) ShenandoahInitMarkUpdateRegionStateClosure Total time 28402 ns.&lt;br/&gt;
[1.914s][info][gc          ] GC(6) ShenandoahInitMarkUpdateRegionStateClosure Total time 24452 ns.&lt;br/&gt;
[1.934s][info][gc          ] GC(7) ShenandoahInitMarkUpdateRegionStateClosure Total time 27688 ns.&lt;br/&gt;
[2.018s][info][gc          ] GC(8) ShenandoahInitMarkUpdateRegionStateClosure Total time 35609 ns.&lt;br/&gt;
[2.053s][info][gc          ] GC(9) ShenandoahInitMarkUpdateRegionStateClosure Total time 22206 ns.&lt;br/&gt;
[2.092s][info][gc          ] GC(10) ShenandoahInitMarkUpdateRegionStateClosure Total time 27785 ns.&lt;br/&gt;
[2.172s][info][gc          ] GC(11) ShenandoahInitMarkUpdateRegionStateClosure Total time 25558 ns.&lt;br/&gt;
[2.256s][info][gc          ] GC(12) ShenandoahInitMarkUpdateRegionStateClosure Total time 24259 ns.&lt;br/&gt;
[2.337s][info][gc          ] GC(13) ShenandoahInitMarkUpdateRegionStateClosure Total time 23301 ns.&lt;br/&gt;
[2.417s][info][gc          ] GC(14) ShenandoahInitMarkUpdateRegionStateClosure Total time 20076 ns.&lt;br/&gt;
[2.497s][info][gc          ] GC(15) ShenandoahInitMarkUpdateRegionStateClosure Total time 17850 ns.&lt;br/&gt;
[2.578s][info][gc          ] GC(16) ShenandoahInitMarkUpdateRegionStateClosure Total time 24745 ns.&lt;br/&gt;
[2.659s][info][gc          ] GC(17) ShenandoahInitMarkUpdateRegionStateClosure Total time 19655 ns.&lt;br/&gt;
[2.739s][info][gc          ] GC(18) ShenandoahInitMarkUpdateRegionStateClosure Total time 20725 ns.&lt;br/&gt;
[2.821s][info][gc          ] GC(19) ShenandoahInitMarkUpdateRegionStateClosure Total time 23634 ns.&lt;br/&gt;
[2.901s][info][gc          ] GC(20) ShenandoahInitMarkUpdateRegionStateClosure Total time 21536 ns.&lt;br/&gt;
[2.983s][info][gc          ] GC(21) ShenandoahInitMarkUpdateRegionStateClosure Total time 21140 ns.&lt;br/&gt;
[3.062s][info][gc          ] GC(22) ShenandoahInitMarkUpdateRegionStateClosure Total time 23116 ns.&lt;br/&gt;
[3.142s][info][gc          ] GC(23) ShenandoahInitMarkUpdateRegionStateClosure Total time 19995 ns.&lt;br/&gt;
[3.224s][info][gc          ] GC(24) ShenandoahInitMarkUpdateRegionStateClosure Total time 26771 ns.&lt;br/&gt;
[3.311s][info][gc          ] GC(25) ShenandoahInitMarkUpdateRegionStateClosure Total time 27477 ns.&lt;br/&gt;
[3.396s][info][gc          ] GC(26) ShenandoahInitMarkUpdateRegionStateClosure Total time 25366 ns.&lt;br/&gt;
[3.476s][info][gc          ] GC(27) ShenandoahInitMarkUpdateRegionStateClosure Total time 22474 ns.&lt;br/&gt;
[3.557s][info][gc          ] GC(28) ShenandoahInitMarkUpdateRegionStateClosure Total time 19898 ns.&lt;br/&gt;
[3.637s][info][gc          ] GC(29) ShenandoahInitMarkUpdateRegionStateClosure Total time 23105 ns.&lt;br/&gt;
```</comment>
                            <comment id="14691281" author="JIRAUSER21708" created="Fri, 19 Jul 2024 09:20:10 -0700"  >Tested with 2050 heap regions, compared the baseline with: 1. single thread; 2. multiple threads with recalibrated stride(number of regions/active workers + 1)&lt;br/&gt;
&lt;br/&gt;
Multiple threads with recalibrated stride should have benefit if the operation applied on region is very expensive, but it is not the case for 3 out of the 5 places where parallel_heap_region_iterate is called. ShenandoahFinalMarkUpdateRegionStateClosure and ShenandoahFinalUpdateRefsUpdateRegionStateClosure might be expensive because both may take heap lock for make_pinned/make_unpinned if needed(Need to revisit and see if the lock is really needed)&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
dev-dsk-xlpeng-2c-r7g4x-49a81adb % less baseline.gc.log | grep &amp;quot;ShenandoahInitMarkUpdateRegionStateClosure&amp;quot; | head -n 30&lt;br/&gt;
[1.813s][info][gc          ] GC(0) ShenandoahInitMarkUpdateRegionStateClosure Total time 27485 ns.&lt;br/&gt;
[1.847s][info][gc          ] GC(1) ShenandoahInitMarkUpdateRegionStateClosure Total time 26278 ns.&lt;br/&gt;
[1.873s][info][gc          ] GC(2) ShenandoahInitMarkUpdateRegionStateClosure Total time 26300 ns.&lt;br/&gt;
[1.895s][info][gc          ] GC(3) ShenandoahInitMarkUpdateRegionStateClosure Total time 27965 ns.&lt;br/&gt;
[1.921s][info][gc          ] GC(4) ShenandoahInitMarkUpdateRegionStateClosure Total time 37346 ns.&lt;br/&gt;
[1.939s][info][gc          ] GC(5) ShenandoahInitMarkUpdateRegionStateClosure Total time 26822 ns.&lt;br/&gt;
[1.961s][info][gc          ] GC(6) ShenandoahInitMarkUpdateRegionStateClosure Total time 25485 ns.&lt;br/&gt;
[1.981s][info][gc          ] GC(7) ShenandoahInitMarkUpdateRegionStateClosure Total time 23525 ns.&lt;br/&gt;
[2.063s][info][gc          ] GC(8) ShenandoahInitMarkUpdateRegionStateClosure Total time 26859 ns.&lt;br/&gt;
[2.087s][info][gc          ] GC(9) ShenandoahInitMarkUpdateRegionStateClosure Total time 25392 ns.&lt;br/&gt;
[2.106s][info][gc          ] GC(10) ShenandoahInitMarkUpdateRegionStateClosure Total time 23593 ns.&lt;br/&gt;
[2.156s][info][gc          ] GC(11) ShenandoahInitMarkUpdateRegionStateClosure Total time 23801 ns.&lt;br/&gt;
[2.237s][info][gc          ] GC(12) ShenandoahInitMarkUpdateRegionStateClosure Total time 26444 ns.&lt;br/&gt;
[2.321s][info][gc          ] GC(13) ShenandoahInitMarkUpdateRegionStateClosure Total time 25490 ns.&lt;br/&gt;
[2.411s][info][gc          ] GC(14) ShenandoahInitMarkUpdateRegionStateClosure Total time 22352 ns.&lt;br/&gt;
[2.502s][info][gc          ] GC(15) ShenandoahInitMarkUpdateRegionStateClosure Total time 33953 ns.&lt;br/&gt;
[2.584s][info][gc          ] GC(16) ShenandoahInitMarkUpdateRegionStateClosure Total time 24097 ns.&lt;br/&gt;
[2.672s][info][gc          ] GC(17) ShenandoahInitMarkUpdateRegionStateClosure Total time 23542 ns.&lt;br/&gt;
[2.752s][info][gc          ] GC(18) ShenandoahInitMarkUpdateRegionStateClosure Total time 22603 ns.&lt;br/&gt;
[2.832s][info][gc          ] GC(19) ShenandoahInitMarkUpdateRegionStateClosure Total time 37259 ns.&lt;br/&gt;
[2.913s][info][gc          ] GC(20) ShenandoahInitMarkUpdateRegionStateClosure Total time 23641 ns.&lt;br/&gt;
[2.995s][info][gc          ] GC(21) ShenandoahInitMarkUpdateRegionStateClosure Total time 24907 ns.&lt;br/&gt;
[3.079s][info][gc          ] GC(22) ShenandoahInitMarkUpdateRegionStateClosure Total time 39800 ns.&lt;br/&gt;
[3.164s][info][gc          ] GC(23) ShenandoahInitMarkUpdateRegionStateClosure Total time 25697 ns.&lt;br/&gt;
[3.246s][info][gc          ] GC(24) ShenandoahInitMarkUpdateRegionStateClosure Total time 25706 ns.&lt;br/&gt;
[3.334s][info][gc          ] GC(25) ShenandoahInitMarkUpdateRegionStateClosure Total time 36679 ns.&lt;br/&gt;
[3.417s][info][gc          ] GC(26) ShenandoahInitMarkUpdateRegionStateClosure Total time 27291 ns.&lt;br/&gt;
[3.505s][info][gc          ] GC(27) ShenandoahInitMarkUpdateRegionStateClosure Total time 29015 ns.&lt;br/&gt;
[3.586s][info][gc          ] GC(28) ShenandoahInitMarkUpdateRegionStateClosure Total time 25414 ns.&lt;br/&gt;
[3.667s][info][gc          ] GC(29) ShenandoahInitMarkUpdateRegionStateClosure Total time 22632 ns.&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
dev-dsk-xlpeng-2c-r7g4x-49a81adb % less recalibrated-stride.gc.log | grep &amp;quot;ShenandoahInitMarkUpdateRegionStateClosure&amp;quot; | head -n 30 &lt;br/&gt;
[1.826s][info][gc          ] GC(0) ShenandoahInitMarkUpdateRegionStateClosure Total time 26236 ns.&lt;br/&gt;
[1.858s][info][gc          ] GC(1) ShenandoahInitMarkUpdateRegionStateClosure Total time 22480 ns.&lt;br/&gt;
[1.883s][info][gc          ] GC(2) ShenandoahInitMarkUpdateRegionStateClosure Total time 25259 ns.&lt;br/&gt;
[1.909s][info][gc          ] GC(3) ShenandoahInitMarkUpdateRegionStateClosure Total time 26861 ns.&lt;br/&gt;
[1.934s][info][gc          ] GC(4) ShenandoahInitMarkUpdateRegionStateClosure Total time 28463 ns.&lt;br/&gt;
[1.955s][info][gc          ] GC(5) ShenandoahInitMarkUpdateRegionStateClosure Total time 27272 ns.&lt;br/&gt;
[1.968s][info][gc          ] GC(6) ShenandoahInitMarkUpdateRegionStateClosure Total time 34315 ns.&lt;br/&gt;
[2.053s][info][gc          ] GC(7) ShenandoahInitMarkUpdateRegionStateClosure Total time 25890 ns.&lt;br/&gt;
[2.075s][info][gc          ] GC(8) ShenandoahInitMarkUpdateRegionStateClosure Total time 27697 ns.&lt;br/&gt;
[2.096s][info][gc          ] GC(9) ShenandoahInitMarkUpdateRegionStateClosure Total time 24256 ns.&lt;br/&gt;
[2.115s][info][gc          ] GC(10) ShenandoahInitMarkUpdateRegionStateClosure Total time 26041 ns.&lt;br/&gt;
[2.158s][info][gc          ] GC(11) ShenandoahInitMarkUpdateRegionStateClosure Total time 23490 ns.&lt;br/&gt;
[2.240s][info][gc          ] GC(12) ShenandoahInitMarkUpdateRegionStateClosure Total time 31533 ns.&lt;br/&gt;
[2.322s][info][gc          ] GC(13) ShenandoahInitMarkUpdateRegionStateClosure Total time 23519 ns.&lt;br/&gt;
[2.403s][info][gc          ] GC(14) ShenandoahInitMarkUpdateRegionStateClosure Total time 24366 ns.&lt;br/&gt;
[2.482s][info][gc          ] GC(15) ShenandoahInitMarkUpdateRegionStateClosure Total time 22501 ns.&lt;br/&gt;
[2.564s][info][gc          ] GC(16) ShenandoahInitMarkUpdateRegionStateClosure Total time 24383 ns.&lt;br/&gt;
[2.644s][info][gc          ] GC(17) ShenandoahInitMarkUpdateRegionStateClosure Total time 22962 ns.&lt;br/&gt;
[2.724s][info][gc          ] GC(18) ShenandoahInitMarkUpdateRegionStateClosure Total time 24573 ns.&lt;br/&gt;
[2.804s][info][gc          ] GC(19) ShenandoahInitMarkUpdateRegionStateClosure Total time 22554 ns.&lt;br/&gt;
[2.886s][info][gc          ] GC(20) ShenandoahInitMarkUpdateRegionStateClosure Total time 22393 ns.&lt;br/&gt;
[2.967s][info][gc          ] GC(21) ShenandoahInitMarkUpdateRegionStateClosure Total time 25938 ns.&lt;br/&gt;
[3.047s][info][gc          ] GC(22) ShenandoahInitMarkUpdateRegionStateClosure Total time 38780 ns.&lt;br/&gt;
[3.129s][info][gc          ] GC(23) ShenandoahInitMarkUpdateRegionStateClosure Total time 27611 ns.&lt;br/&gt;
[3.218s][info][gc          ] GC(24) ShenandoahInitMarkUpdateRegionStateClosure Total time 26388 ns.&lt;br/&gt;
[3.297s][info][gc          ] GC(25) ShenandoahInitMarkUpdateRegionStateClosure Total time 25244 ns.&lt;br/&gt;
[3.379s][info][gc          ] GC(26) ShenandoahInitMarkUpdateRegionStateClosure Total time 23905 ns.&lt;br/&gt;
[3.459s][info][gc          ] GC(27) ShenandoahInitMarkUpdateRegionStateClosure Total time 25440 ns.&lt;br/&gt;
[3.541s][info][gc          ] GC(28) ShenandoahInitMarkUpdateRegionStateClosure Total time 22928 ns.&lt;br/&gt;
[3.628s][info][gc          ] GC(29) ShenandoahInitMarkUpdateRegionStateClosure Total time 22424 ns.&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
(24-07-19 15:45:33) &amp;lt;0&amp;gt; [~/repos/benchmarks/guava-cache-gc-influence/build/distributions]  &lt;br/&gt;
dev-dsk-xlpeng-2c-r7g4x-49a81adb % less single-thread.gc.log | grep &amp;quot;ShenandoahInitMarkUpdateRegionStateClosure&amp;quot; | head -n 30 &lt;br/&gt;
[1.817s][info][gc          ] GC(0) ShenandoahInitMarkUpdateRegionStateClosure Total time 8794 ns.&lt;br/&gt;
[1.852s][info][gc          ] GC(1) ShenandoahInitMarkUpdateRegionStateClosure Total time 6274 ns.&lt;br/&gt;
[1.864s][info][gc          ] GC(2) ShenandoahInitMarkUpdateRegionStateClosure Total time 7512 ns.&lt;br/&gt;
[1.886s][info][gc          ] GC(3) ShenandoahInitMarkUpdateRegionStateClosure Total time 7102 ns.&lt;br/&gt;
[1.912s][info][gc          ] GC(4) ShenandoahInitMarkUpdateRegionStateClosure Total time 6350 ns.&lt;br/&gt;
[1.944s][info][gc          ] GC(5) ShenandoahInitMarkUpdateRegionStateClosure Total time 8336 ns.&lt;br/&gt;
[2.031s][info][gc          ] GC(6) ShenandoahInitMarkUpdateRegionStateClosure Total time 10349 ns.&lt;br/&gt;
[2.056s][info][gc          ] GC(7) ShenandoahInitMarkUpdateRegionStateClosure Total time 7830 ns.&lt;br/&gt;
[2.082s][info][gc          ] GC(8) ShenandoahInitMarkUpdateRegionStateClosure Total time 5850 ns.&lt;br/&gt;
[2.126s][info][gc          ] GC(9) ShenandoahInitMarkUpdateRegionStateClosure Total time 10282 ns.&lt;br/&gt;
[2.207s][info][gc          ] GC(10) ShenandoahInitMarkUpdateRegionStateClosure Total time 6931 ns.&lt;br/&gt;
[2.294s][info][gc          ] GC(11) ShenandoahInitMarkUpdateRegionStateClosure Total time 7845 ns.&lt;br/&gt;
[2.376s][info][gc          ] GC(12) ShenandoahInitMarkUpdateRegionStateClosure Total time 8110 ns.&lt;br/&gt;
[2.458s][info][gc          ] GC(13) ShenandoahInitMarkUpdateRegionStateClosure Total time 7867 ns.&lt;br/&gt;
[2.547s][info][gc          ] GC(14) ShenandoahInitMarkUpdateRegionStateClosure Total time 8491 ns.&lt;br/&gt;
[2.628s][info][gc          ] GC(15) ShenandoahInitMarkUpdateRegionStateClosure Total time 7090 ns.&lt;br/&gt;
[2.717s][info][gc          ] GC(16) ShenandoahInitMarkUpdateRegionStateClosure Total time 8372 ns.&lt;br/&gt;
[2.797s][info][gc          ] GC(17) ShenandoahInitMarkUpdateRegionStateClosure Total time 7328 ns.&lt;br/&gt;
[2.877s][info][gc          ] GC(18) ShenandoahInitMarkUpdateRegionStateClosure Total time 6368 ns.&lt;br/&gt;
[2.960s][info][gc          ] GC(19) ShenandoahInitMarkUpdateRegionStateClosure Total time 7687 ns.&lt;br/&gt;
[3.042s][info][gc          ] GC(20) ShenandoahInitMarkUpdateRegionStateClosure Total time 7468 ns.&lt;br/&gt;
[3.130s][info][gc          ] GC(21) ShenandoahInitMarkUpdateRegionStateClosure Total time 8840 ns.&lt;br/&gt;
[3.212s][info][gc          ] GC(22) ShenandoahInitMarkUpdateRegionStateClosure Total time 8325 ns.&lt;br/&gt;
[3.302s][info][gc          ] GC(23) ShenandoahInitMarkUpdateRegionStateClosure Total time 6640 ns.&lt;br/&gt;
[3.384s][info][gc          ] GC(24) ShenandoahInitMarkUpdateRegionStateClosure Total time 6341 ns.&lt;br/&gt;
[3.480s][info][gc          ] GC(25) ShenandoahInitMarkUpdateRegionStateClosure Total time 6936 ns.&lt;br/&gt;
[3.563s][info][gc          ] GC(26) ShenandoahInitMarkUpdateRegionStateClosure Total time 7466 ns.&lt;br/&gt;
[3.643s][info][gc          ] GC(27) ShenandoahInitMarkUpdateRegionStateClosure Total time 6840 ns.&lt;br/&gt;
[3.724s][info][gc          ] GC(28) ShenandoahInitMarkUpdateRegionStateClosure Total time 7504 ns.&lt;br/&gt;
[3.805s][info][gc          ] GC(29) ShenandoahInitMarkUpdateRegionStateClosure Total time 6122 ns.&lt;br/&gt;
&lt;br/&gt;
```</comment>
                            <comment id="14691261" author="shade" created="Fri, 19 Jul 2024 06:59:14 -0700"  >1. Yes, and there is a balance between coordination costs that dominate at small strides, and not precisely balanced parallelization at large strides. &lt;br/&gt;
2. Yes, and that&amp;#39;s a problem. We can mitigate this by pre-computing how many threads we actually need, and passing that number to `run_task`, which accepts the number of threads as the argument.&lt;br/&gt;
3. No, I think the actual thing to balance is how many regions does it usually take to offset the communication costs, see (1).&lt;br/&gt;
4. I think we can affect all uses at once, given how they all are likely affected by (2), and that they do similar light-weight stuff.&lt;br/&gt;
</comment>
                            <comment id="14691085" author="JIRAUSER21708" created="Thu, 18 Jul 2024 15:13:51 -0700"  >Read the implementation of parallel_heap_region_iterate, it makes me think following problems:&lt;br/&gt;
1. Is load evenly assigned to each worker? seems not, e.g. if there are 1025 regions, one worker will process 1024 regions, the other worker will process 1 single region.&lt;br/&gt;
&lt;br/&gt;
2. Following #1, only two workers(threads) actually worked, the rest workers(threads) were waken up but not actually did any work.&lt;br/&gt;
&lt;br/&gt;
3. Should we use a different VM option/argument instead of &amp;#39;ShenandoahParallelRegionStride&amp;#39;, e.g. &amp;#39;ShenandoahParallelRegionIterateThreads&amp;#39;, then derive the stride for better/more even breakdown. &lt;br/&gt;
&lt;br/&gt;
4. parallel_heap_region_iterate is actually used in 5 different places including init mark, it is actually a much broader issue; should we extend the scope of the fix to cover all the 5 different places, in that case we should improve the general implementation of  parallel_heap_region_iterate, and benefit all 5 different places. &lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/d41d2a7a82cb6eff17396717e2e14139ad8179ba/src/hotspot/share/gc/shenandoah/shenandoahHeap.cpp#L1693-L1734&quot;&gt;https://github.com/openjdk/jdk/blob/d41d2a7a82cb6eff17396717e2e14139ad8179ba/src/hotspot/share/gc/shenandoah/shenandoahHeap.cpp#L1693-L1734&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5139548">JDK-8340549</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5144335">JDK-8344591</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i37797:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17336"><![CDATA[b09]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="209"><![CDATA[gc]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>