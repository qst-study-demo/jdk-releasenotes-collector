<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Sat Sep 27 09:48:04 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8338426] Test java/nio/channels/Selector/WakeupNow.java failed</title>
                <link>https://bugs.openjdk.org/browse/JDK-8338426</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>----------System.err:(11/544)----------&lt;br/&gt;
java.lang.RuntimeException: test failed&lt;br/&gt;
	at WakeupNow.test2(WakeupNow.java:76)&lt;br/&gt;
	at WakeupNow.main(WakeupNow.java:35)&lt;br/&gt;
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)&lt;br/&gt;
	at java.base/java.lang.reflect.Method.invoke(Method.java:588)&lt;br/&gt;
	at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)&lt;br/&gt;
	at java.base/java.lang.Thread.run(Thread.java:1575)</description>
                <environment></environment>
        <key id="5136837">JDK-8338426</key>
            <summary>Test java/nio/channels/Selector/WakeupNow.java failed</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="bpb">Brian Burkhalter</assignee>
                                    <reporter username="dholmes">David Holmes</reporter>
                        <labels>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>noreg-self</label>
                    </labels>
                <created>Wed, 14 Aug 2024 19:17:57 -0700</created>
                <updated>Thu, 19 Dec 2024 05:01:27 -0800</updated>
                            <resolved>Fri, 25 Oct 2024 08:36:47 -0700</resolved>
                                                    <fixVersion>24</fixVersion>
                                    <component>core-libs</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                                                                <comments>
                            <comment id="14733215" author="roboduke" created="Wed, 18 Dec 2024 02:29:55 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/3142&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/3142&lt;/a&gt;&lt;br/&gt;
Date: 2024-12-18 10:18:33 +0000</comment>
                            <comment id="14733209" author="roboduke" created="Wed, 18 Dec 2024 02:23:27 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/1262&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/1262&lt;/a&gt;&lt;br/&gt;
Date: 2024-12-18 10:18:25 +0000</comment>
                            <comment id="14733203" author="goetz" created="Wed, 18 Dec 2024 02:08:34 -0800"  >Fix request [21u,17u]&lt;br/&gt;
&lt;br/&gt;
I backport this for parity with 21.0.7-oracle,17.0.15-oracle.&lt;br/&gt;
No risk, only a test change.&lt;br/&gt;
Clean backport.&lt;br/&gt;
Test passes. SAP nightly testing passed.</comment>
                            <comment id="14716709" author="dukebot" created="Fri, 25 Oct 2024 08:36:46 -0700"  >Changeset: 0853aee3&lt;br/&gt;
Branch: master&lt;br/&gt;
Author:    Brian Burkhalter &amp;lt;&lt;a href=&apos;mailto:bpb@openjdk.org&apos;&gt;bpb@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-10-25 15:35:49 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/0853aee3b377cf9f17340a85f600651db42e6999&quot;&gt;https://git.openjdk.org/jdk/commit/0853aee3b377cf9f17340a85f600651db42e6999&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14716287" author="roboduke" created="Wed, 23 Oct 2024 18:02:31 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/21674&quot;&gt;https://git.openjdk.org/jdk/pull/21674&lt;/a&gt;&lt;br/&gt;
Date: 2024-10-24 00:58:42 +0000</comment>
                            <comment id="14699128" author="msheppar" created="Mon, 19 Aug 2024 06:24:11 -0700"  >I think the fact that the test failed for a time period of &amp;lt; 1000 milliseconds should be a focus of attention.&lt;br/&gt;
&lt;br/&gt;
Looking at the original issue and what is being tested: &lt;br/&gt;
It is the interaction between wakeup, selectNow and select.&lt;br/&gt;
That is to say, the effect of wakeup on a select should be mitigated, if a selectNow has been invoked prior to invoking select.&lt;br/&gt;
In this context, there is a question as to what is the definition of returns immediately &#8212; the blink of an eye, which would be around 100/200 milliseconds.&lt;br/&gt;
As such the temporal predicate in both test scenarios is dubious and is somewhat arbitrary, especially when evaluated against the Selector::select(long timeout) spec, e.g.&lt;br/&gt;
&lt;br/&gt;
&amp;quot;This method does not offer real-time guarantees: It schedules the timeout as if by invoking the Object.wait(long) method.&amp;quot; As Object.wait is unreliable, then this conveys a behaviour that&#8217;s a bit &#8220;hit and miss&#8221; as expressed in the text&lt;br/&gt;
&lt;a href=&quot;https://docs.oracle.com/en%2Fjava%2Fjavase%2F22%2Fdocs%2Fapi%2F%2F/java.base/java/lang/Object.html#wait(long,int)&quot;&gt;https://docs.oracle.com/en%2Fjava%2Fjavase%2F22%2Fdocs%2Fapi%2F%2F/java.base/java/lang/Object.html#wait(long,int)&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
&amp;quot;timeout - If positive, block for up to timeout milliseconds, more or less, while waiting for a channel to become ready;  . . .&amp;quot;&lt;br/&gt;
&lt;br/&gt;
which says: don&amp;#39;t depend on the accuracy of the timeout expiry, it night wakeup early &#8212; up to timeout !!.&lt;br/&gt;
&lt;br/&gt;
Back to the original issue, and a fundamental question is how should a test determine &#8220;return immediately&#8221; semantics. &lt;br/&gt;
The temporal predicate&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (endTime - startTime &amp;lt; 1000)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;throw new RuntimeException(&amp;quot;test failed&amp;quot;);&lt;br/&gt;
&lt;br/&gt;
doesn&#8217;t determine &#8220;returns immediately&#8221;.  It is nebulous and arbitrary.&lt;br/&gt;
&lt;br/&gt;
A conditional against an elapsed time equal to zero is an option (or a very small epoch 100msecs/200msecs). &lt;br/&gt;
A simple test of wakeup followed by select(long timeout) will see an immediate return i.e.an effective elapsed time == 0&lt;br/&gt;
But all of this can be hampered by OS thread and process scheduling.&lt;br/&gt;
&lt;br/&gt;
Thus, any test with a quasi realtime temporal condition is fiction.&lt;br/&gt;
Only a best effort can be assumed, and there is always the possibility of intermittent glitches, even when nanoTime is used.&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
It would have been helpful had the actual failed elapsed time been output as part of the execution message, so amending the RuntimeException message would be helpful. &lt;br/&gt;
This failure looks like an OS temporal glitch&lt;br/&gt;
&lt;br/&gt;
Additionally, neither test examines the return value from the select, which should be zero, and should be an important consideration, because if non zero then there is a serious issue!&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;WakeupNow&lt;br/&gt;
----------System.out:(23/930)----------&lt;br/&gt;
Executing test1&lt;br/&gt;
SelectorProvider: get DefaultSelectorProvider&lt;br/&gt;
KQueueSelectorImpl.doSelect: ENTER timeout == 0&lt;br/&gt;
KQueueSelectorImpl.doSelect: execute a KQueue poll&lt;br/&gt;
KQueueSelectorImpl.doSelect: numEntries == 1&lt;br/&gt;
KQueueSelectorImpl.doSelect: ENTER timeout == 2000&lt;br/&gt;
KQueueSelectorImpl.doSelect: execute a KQueue poll&lt;br/&gt;
KQueueSelectorImpl.doSelect: numEntries == 0&lt;br/&gt;
test1: n == 0&lt;br/&gt;
test1: select duration == 2002484375&lt;br/&gt;
Executing test2&lt;br/&gt;
KQueueSelectorImpl.doSelect: ENTER timeout == 2000&lt;br/&gt;
KQueueSelectorImpl.doSelect: execute a KQueue poll&lt;br/&gt;
KQueueSelectorImpl.doSelect: numEntries == 1&lt;br/&gt;
select duration 1 == 158125                      **** less than the blink of an eye&lt;br/&gt;
KQueueSelectorImpl.doSelect: ENTER timeout == 0&lt;br/&gt;
KQueueSelectorImpl.doSelect: execute a KQueue poll&lt;br/&gt;
KQueueSelectorImpl.doSelect: numEntries == 0&lt;br/&gt;
KQueueSelectorImpl.doSelect: ENTER timeout == 2000&lt;br/&gt;
KQueueSelectorImpl.doSelect: execute a KQueue poll&lt;br/&gt;
KQueueSelectorImpl.doSelect: numEntries == 0&lt;br/&gt;
test2: n == 0&lt;br/&gt;
select duration == 2002626458&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</comment>
                            <comment id="14698422" author="alanb" created="Wed, 14 Aug 2024 22:30:12 -0700"  >JDK 1.4 era test, surprised it wasn&amp;#39;t changed a long time ago. Several other tests in this, and other areas, were changed to use nanoTime, this one seems to have been missed.</comment>
                            <comment id="14698413" author="dholmes" created="Wed, 14 Aug 2024 19:21:11 -0700"  >Test is flawed:&lt;br/&gt;
&lt;br/&gt;
50:         long startTime = System.currentTimeMillis();&lt;br/&gt;
51:         int n = sel.select(2000);&lt;br/&gt;
52:         long endTime = System.currentTimeMillis();&lt;br/&gt;
&lt;br/&gt;
currentTimeMillis is not a monotonic time source. System.nanoTime should always be used to measure elapsed time.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5143414">JDK-8343849</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5143415">JDK-8343850</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5143500">JDK-8343878</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5146716">JDK-8346631</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5146723">JDK-8346638</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i37kd7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17415"><![CDATA[b22]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="228"><![CDATA[java.nio]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>