<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Sat Sep 27 08:55:13 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8317575] AArch64: C2_MacroAssembler::fast_lock uses rscratch1 for cmpxchg result</title>
                <link>https://bugs.openjdk.org/browse/JDK-8317575</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>The fast_lock code CASes the owner field with the current thread and upon failure checks if the previous value was the current thread, which would indicate a recursive lock.&lt;br/&gt;
```&lt;br/&gt;
&amp;nbsp;&amp;nbsp;add(tmp, disp_hdr, (in_bytes(ObjectMonitor::owner_offset())-markWord::monitor_value));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;cmpxchg(tmp, zr, rthread, Assembler::xword, /*acquire*/ true,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/*release*/ true, /*weak*/ false, rscratch1); // Sets flags for result&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;lt;snip&amp;gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;br(Assembler::EQ, cont); // CAS success means locking succeeded&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;cmp(rscratch1, rthread);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;br(Assembler::NE, cont); // Check for recursive locking&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
The contract is that cmpxchg clobbers rscratch1, so this seems problematic.&lt;br/&gt;
&lt;br/&gt;
The cmpxchg code looks like this:&lt;br/&gt;
```&lt;br/&gt;
void MacroAssembler::cmpxchg(Register addr, Register expected,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Register new_val,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;enum operand_size size,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;bool acquire, bool release,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;bool weak,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Register result) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (result == noreg)  result = rscratch1;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;BLOCK_COMMENT(&amp;quot;cmpxchg {&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (UseLSE) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;mov(result, expected);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lse_cas(result, new_val, addr, size, acquire, release, /*not_pair*/ true);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;compare_eq(result, expected, size);&lt;br/&gt;
#ifdef ASSERT&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Poison rscratch1 which is written on !UseLSE branch&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;mov(rscratch1, 0x1f1f1f1f1f1f1f1f);&lt;br/&gt;
#endif&lt;br/&gt;
&amp;nbsp;&amp;nbsp;} else {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Label retry_load, done;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;prfm(Address(addr), PSTL1STRM);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;bind(retry_load);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;load_exclusive(result, addr, size, acquire);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;compare_eq(result, expected, size);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;br(Assembler::NE, done);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;store_exclusive(rscratch1, new_val, addr, size, release);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (weak) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmpw(rscratch1, 0u);  // If the store fails, return NE to our caller.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} else {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cbnzw(rscratch1, retry_load);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;bind(done);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;BLOCK_COMMENT(&amp;quot;} cmpxchg&amp;quot;);&lt;br/&gt;
}&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
For -XX:-UseLSE this is a benign problem because when the owner value is set to non-null the cmpxchg doesn&amp;#39;t take the clobbering path:&lt;br/&gt;
```&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;store_exclusive(rscratch1, new_val, addr, size, release);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (weak) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmpw(rscratch1, 0u);  // If the store fails, return NE to our caller.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} else {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cbnzw(rscratch1, retry_load);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
```&lt;br/&gt;
&lt;br/&gt;
So, the code happens to work but it would be better to use another register for the result.&lt;br/&gt;
&lt;br/&gt;
The debug clobbering in the -XX:+UseLSE path was recently added and this will lead to debug builds never taking the recursive fast-path. That clobbering should maybe be done also for -XX:-UseLSE, which doesn&amp;#39;t always clobber the register?</description>
                <environment></environment>
        <key id="5111790">JDK-8317575</key>
            <summary>AArch64: C2_MacroAssembler::fast_lock uses rscratch1 for cmpxchg result</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="5" iconUrl="https://bugs.openjdk.org/images/jbsImages/p5.png">P5</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="stefank">Stefan Karlsson</assignee>
                                    <reporter username="stefank">Stefan Karlsson</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>c2</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>oracle-triage-22</label>
                    </labels>
                <created>Thu, 5 Oct 2023 01:00:06 -0700</created>
                <updated>Thu, 5 Sep 2024 09:46:28 -0700</updated>
                            <resolved>Fri, 20 Oct 2023 00:06:49 -0700</resolved>
                                    <version>17.0.3</version>
                    <version>21</version>
                    <version>22</version>
                                    <fixVersion>22</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                                                                <comments>
                            <comment id="14699898" author="roboduke" created="Wed, 21 Aug 2024 15:32:55 -0700"  >[jdk21u-fix-request] Approval Request from Boris&lt;br/&gt;
Let us do the backport for stability and code consistency. As Aleksey mentioned, the reasons are: a) we can have surprise interaction with other backports later; b) the code shape being similar in all currently maintained releases makes other backports cleaner, and thus less tedious.&lt;br/&gt;
I have tested the change with jtreg tier1-3 on linux-aarch64.</comment>
                            <comment id="14699889" author="roboduke" created="Wed, 21 Aug 2024 15:05:38 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/941&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/941&lt;/a&gt;&lt;br/&gt;
Date: 2024-08-21 22:00:46 +0000</comment>
                            <comment id="14620194" author="shade" created="Mon, 23 Oct 2023 07:55:32 -0700"  >I would still consider backporting it, even if it does not fix any currently known bug, for two reasons: a) we can have surprise interaction with other backports later; b) the code shape being similar in all currently maintained releases makes other backports cleaner, and thus less tedious.</comment>
                            <comment id="14619723" author="dukebot" created="Fri, 20 Oct 2023 00:06:48 -0700"  >Changeset: 387504c9&lt;br/&gt;
Author:    Stefan Karlsson &amp;lt;&lt;a href=&apos;mailto:stefank@openjdk.org&apos;&gt;stefank@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-10-20 07:05:30 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/387504c9e4b93d162dcef7c90c57c27295858d2e&quot;&gt;https://git.openjdk.org/jdk/commit/387504c9e4b93d162dcef7c90c57c27295858d2e&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14616196" author="thartmann" created="Thu, 5 Oct 2023 06:40:38 -0700"  >Makes sense. I&amp;#39;m just adding the affects versions for future reference / completeness. Thanks.</comment>
                            <comment id="14616179" author="stefank" created="Thu, 5 Oct 2023 05:49:08 -0700"  >[~thartmann] 17 is affected as well, but since this isn&amp;#39;t causing any bugs I&amp;#39;m not sure this needs to be updated in 17.</comment>
                            <comment id="14616156" author="thartmann" created="Thu, 5 Oct 2023 04:34:58 -0700"  >[~stefank] looks like this code was introduced by &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8277180&quot; title=&quot;Intrinsify recursive ObjectMonitor locking for C2 x64 and A64&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8277180&quot;&gt;&lt;strike&gt;JDK-8277180&lt;/strike&gt;&lt;/a&gt;. Is 17 affected as well?</comment>
                            <comment id="14616154" author="thartmann" created="Thu, 5 Oct 2023 04:32:56 -0700"  >ILW = scratch register clobbered (not an issue with current code), AArch64 with LSE, no workaround = LMH = P5</comment>
                            <comment id="14616112" author="roboduke" created="Thu, 5 Oct 2023 01:14:51 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/16049&quot;&gt;https://git.openjdk.org/jdk/pull/16049&lt;/a&gt;&lt;br/&gt;
Date: 2023-10-05 08:08:31 +0000</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5138503">JDK-8339624</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5062715">JDK-8277180</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="19300"><![CDATA[aarch64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i33dkb:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17412"><![CDATA[b21]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>