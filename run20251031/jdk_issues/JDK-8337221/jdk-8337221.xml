<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Sat Sep 27 10:28:55 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8337221] CompileFramework: test library to conveniently compile java and jasm sources for fuzzing</title>
                <link>https://bugs.openjdk.org/browse/JDK-8337221</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>The idea is this:&lt;br/&gt;
We should be able to create java and jasm code during a jtreg test, compile and execute it. This can be used to fuzz various compiler optimizations.</description>
                <environment></environment>
        <key id="5135184">JDK-8337221</key>
            <summary>CompileFramework: test library to conveniently compile java and jasm sources for fuzzing</summary>
                <type id="7" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14707&amp;avatarType=issuetype">Enhancement</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="epeter">Emanuel Peter</assignee>
                                    <reporter username="epeter">Emanuel Peter</reporter>
                        <labels>
                            <label>c2</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>noreg-self</label>
                    </labels>
                <created>Thu, 25 Jul 2024 08:43:19 -0700</created>
                <updated>Thu, 3 Apr 2025 06:37:38 -0700</updated>
                            <resolved>Wed, 16 Oct 2024 00:25:44 -0700</resolved>
                                    <version>17</version>
                    <version>21</version>
                    <version>24</version>
                                    <fixVersion>24</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                                                                <comments>
                            <comment id="14761718" author="roboduke" created="Tue, 18 Mar 2025 04:43:11 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/3377&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/3377&lt;/a&gt;&lt;br/&gt;
Date: 2025-03-18 11:36:24 +0000</comment>
                            <comment id="14761716" author="goetz" created="Tue, 18 Mar 2025 04:37:05 -0700"  >Fix request [17u]&lt;br/&gt;
&lt;br/&gt;
I backport this for parity with 17.0.16-oracle from 21.&lt;br/&gt;
No risk, only a test change.&lt;br/&gt;
Clean backport, but I had to adapt one test.&lt;br/&gt;
Tests and examples pass. SAP nightly testing passed.</comment>
                            <comment id="14761168" author="roboduke" created="Sat, 15 Mar 2025 14:04:33 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/1501&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/1501&lt;/a&gt;&lt;br/&gt;
Date: 2025-03-15 20:59:07 +0000</comment>
                            <comment id="14761167" author="goetz" created="Sat, 15 Mar 2025 14:03:36 -0700"  >Fix request [21u]&lt;br/&gt;
&lt;br/&gt;
I backport this for parity with 21.0.8-oracle.&lt;br/&gt;
No risk, only a test change&lt;br/&gt;
Clean backport, but tests needed small adaption to compile.&lt;br/&gt;
Test/examples pass.</comment>
                            <comment id="14713393" author="dukebot" created="Wed, 16 Oct 2024 00:25:43 -0700"  >Changeset: b9b0bd08&lt;br/&gt;
Branch: master&lt;br/&gt;
Author:    Emanuel Peter &amp;lt;&lt;a href=&apos;mailto:epeter@openjdk.org&apos;&gt;epeter@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-10-16 07:23:12 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/b9b0bd0871886eb65f87864f262424b119f2c748&quot;&gt;https://git.openjdk.org/jdk/commit/b9b0bd0871886eb65f87864f262424b119f2c748&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14704570" author="roboduke" created="Thu, 12 Sep 2024 08:59:20 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/20184&quot;&gt;https://git.openjdk.org/jdk/pull/20184&lt;/a&gt;&lt;br/&gt;
Date: 2024-07-15 15:56:10 +0000</comment>
                            <comment id="14693230" author="JIRAUSER19821" created="Mon, 29 Jul 2024 00:06:52 -0700"  >Here my draft, together with some use-cases where I&amp;#39;m frustrated / limited with my current approaches:&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/pull/20184&quot;&gt;https://github.com/openjdk/jdk/pull/20184&lt;/a&gt;</comment>
                            <comment id="14693228" author="thartmann" created="Mon, 29 Jul 2024 00:02:13 -0700"  >&amp;gt; fuzzing tends to create constructs that are not legal at the language level&lt;br/&gt;
&lt;br/&gt;
I think there is a misunderstanding around the term &amp;quot;fuzzing&amp;quot; here. What Emanuel is referring to, and what&amp;#39;s the main use case of this RFE, is to enable dynamic generation of tests at runtime based on String manipulation (for example, test loops with many different constant strides). This is not completely random and the generated tests will be legal Java code. Using Strings is most convenient and readable because we usually don&amp;#39;t write tests in bytecodes.</comment>
                            <comment id="14693216" author="JIRAUSER19821" created="Sun, 28 Jul 2024 23:25:21 -0700"  >[~dholmes] The java-fuzzer has found many bugs that reduce down to very small snippets that look reasonably likely that it could happen out in the world. And class-file fuzzing does often find unlikely code shapes. But sometimes they can be turned into java examples as well. For example there are lots of infinite-loop bugs. Infinite loops seem not to be generated by the java-fuzzer, but much more likely by classfile / jasm fuzzing.&lt;br/&gt;
It is just going to be a tool for now. And the tool has to be convenient to use. This is why I prefer strings.</comment>
                            <comment id="14693190" author="dholmes" created="Sun, 28 Jul 2024 15:34:35 -0700"  >&amp;gt; As far as I know, the classfile API and ASM do not work with strings, right?&lt;br/&gt;
&lt;br/&gt;
AFAIK that is right. From a fuzzing perspective I didn&amp;#39;t think that strings would that useful, at least for java source, as fuzzing tends to create constructs that are not legal at the language level. I don&amp;#39;t know of any mechanism to do in-memory jasm compilation of strings.&lt;br/&gt;
</comment>
                            <comment id="14693004" author="JIRAUSER19821" created="Fri, 26 Jul 2024 06:40:21 -0700"  >As far as I know, the classfile API and ASM do not work with strings, right? That has advantages, but also disadvantages. It should be easy to extract the files that the fuzzer generated, and run them outside the fuzzer and reduce the files to a small reproducer.&lt;br/&gt;
&lt;br/&gt;
Does that make sense? Or do you have other ideas?</comment>
                            <comment id="14693002" author="JIRAUSER19821" created="Fri, 26 Jul 2024 06:38:41 -0700"  >[~dholmes]&lt;br/&gt;
My goal is this: create some strings that are either Java files or Jasm files. Then dynamically compile. Java and Jasm are very convenient formats. If required jdec could easily be added.&lt;br/&gt;
&lt;br/&gt;
I know that I could use InMemoryJavaCompiler (instead of calling javac with ProcessBuilder). We can benchmark later if that would be worth it. I actually had it working with the InMemoryJavaCompiler, but decided to use the ProcessBuilder, since I&amp;#39;m also using that with asmtools.jar, that is delivered with jtreg - to compile Jasm files.&lt;br/&gt;
&lt;br/&gt;
I want something that is VERY convenient. Basically you just give it some strings, then &amp;quot;compile()&amp;quot;, then &amp;quot;call(className, methodName, varargs)&amp;quot;. The idea is that it should be stupid simple to create nice small dedicated fuzzers this way.&lt;br/&gt;
&lt;br/&gt;
I want the framework to deal with all the classpaths, deciding where the classfiles end up, how to chose compilation method based on file type, etc.</comment>
                            <comment id="14692907" author="dholmes" created="Thu, 25 Jul 2024 23:20:55 -0700"  >Not sure if I am misunderstanding but you can use the InMemoryJavaCompiler to dynamically compile Java source code, and use ASM (or the new Classfile API) to generate class files directly.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5152164">JDK-8351324</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5152357">JDK-8351489</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5153158">JDK-8352230</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5153572">JDK-8352551</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10600">
                    <name>Causes</name>
                                            <outwardlinks description="causes">
                                        <issuelink>
            <issuekey id="5152890">JDK-8351998</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5144761">JDK-8344942</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5152913">JDK-8352020</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5141712">JDK-8342387</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i37b9n:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17351"><![CDATA[b20]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>