<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Sat Sep 27 10:25:18 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8332506] SIGFPE In ObjectSynchronizer::is_async_deflation_needed()</title>
                <link>https://bugs.openjdk.org/browse/JDK-8332506</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>ADDITIONAL SYSTEM INFORMATION :&lt;br/&gt;
Host: Intel(R) Xeon(R) Silver 4215R CPU @ 3.20GHz, 4 cores, 15G, Red Hat Enterprise Linux release 8.8 (Ootpa)&lt;br/&gt;
JRE version: OpenJDK Runtime Environment (Red_Hat-21.0.1.0.12-2) (21.0.1+12) (build 21.0.1+12-LTS)&lt;br/&gt;
Java VM: OpenJDK 64-Bit Server VM (Red_Hat-21.0.1.0.12-2) (21.0.1+12-LTS, mixed mode, sharing, tiered, compressed class ptrs, z gc, linux-amd64)&lt;br/&gt;
&lt;br/&gt;
Note this a VMWare VM&lt;br/&gt;
&lt;br/&gt;
A DESCRIPTION OF THE PROBLEM :&lt;br/&gt;
The JVM seemingly randomly crashed with a SIGFPE Error&lt;br/&gt;
&lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  SIGFPE (0x8) at pc=0x00007fd1ebb1f331, pid=802111, tid=802127&lt;br/&gt;
#&lt;br/&gt;
# JRE version: OpenJDK Runtime Environment (Red_Hat-21.0.1.0.12-2) (21.0.1+12) (build 21.0.1+12-LTS)&lt;br/&gt;
# Java VM: OpenJDK 64-Bit Server VM (Red_Hat-21.0.1.0.12-2) (21.0.1+12-LTS, mixed mode, sharing, tiered, compressed class ptrs, z gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0xf46331]  ObjectSynchronizer::is_async_deflation_needed()+0x1e1&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment></environment>
        <key id="5129538">JDK-8332506</key>
            <summary>SIGFPE In ObjectSynchronizer::is_async_deflation_needed()</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="fbredberg">Fredrik Bredberg</assignee>
                                    <reporter username="webbuggrp">Webbug Group</reporter>
                        <labels>
                            <label>21bpr-critical-approved</label>
                            <label>additional-information-received</label>
                            <label>amazon-interest</label>
                            <label>hgupdate-sync</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>review</label>
                            <label>sync</label>
                            <label>webbug</label>
                    </labels>
                <created>Wed, 15 May 2024 10:01:25 -0700</created>
                <updated>Tue, 1 Jul 2025 05:15:15 -0700</updated>
                            <resolved>Wed, 8 Jan 2025 01:53:42 -0800</resolved>
                                    <version>17</version>
                    <version>21</version>
                                    <fixVersion>25</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>14</watches>
                                                                                                                <comments>
                            <comment id="14766390" author="roboduke" created="Wed, 2 Apr 2025 10:05:08 -0700"  >[jdk21u-fix-request] Approval Request from Roman Marchenko&lt;br/&gt;
Almost clean backport to 21u. PR checks (tier1) are OK. This fixes division by zero problem in JDK21 as there are cases the problem occurs in 21.</comment>
                            <comment id="14766226" author="roboduke" created="Wed, 2 Apr 2025 03:42:39 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/1566&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/1566&lt;/a&gt;&lt;br/&gt;
Date: 2025-04-02 10:33:08 +0000</comment>
                            <comment id="14766224" author="JIRAUSER20522" created="Wed, 2 Apr 2025 03:35:16 -0700"  >There is a customer who has the issue in 21.0.6:&lt;br/&gt;
&lt;br/&gt;
```&lt;br/&gt;
#  SIGFPE (0x8) at pc=0x00007fa729e8b551, pid=1031338, tid=1031352&lt;br/&gt;
&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0xe8b551]  ObjectSynchronizer::is_async_deflation_needed()+0x1e1&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00007fa6f2af0000,0x00007fa6f2bf0000],  sp=0x00007fa6f2beec80,  free space=1019k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0xe8b551]  ObjectSynchronizer::is_async_deflation_needed()+0x1e1&lt;br/&gt;
V  [libjvm.so+0xc0da98]  MonitorDeflationThread::monitor_deflation_thread_entry(JavaThread*, JavaThread*)+0xc8&lt;br/&gt;
V  [libjvm.so+0x91cfd0]  JavaThread::thread_main_inner()+0x1e0&lt;br/&gt;
V  [libjvm.so+0xedba38]  Thread::call_run()+0xa8&lt;br/&gt;
V  [libjvm.so+0xc66fea]  thread_native_entry(Thread*)+0xda&lt;br/&gt;
&lt;br/&gt;
siginfo: si_signo: 8 (SIGFPE), si_code: 1 (FPE_INTDIV), si_addr: 0x00007fa729e8b551</comment>
                            <comment id="14737094" author="roboduke" created="Thu, 9 Jan 2025 10:42:33 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: jdk24&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/23000&quot;&gt;https://git.openjdk.org/jdk/pull/23000&lt;/a&gt;&lt;br/&gt;
Date: 2025-01-09 10:45:32 +0000</comment>
                            <comment id="14736611" author="dukebot" created="Wed, 8 Jan 2025 01:53:41 -0800"  >Changeset: cbabc045&lt;br/&gt;
Branch: master&lt;br/&gt;
Author:    Fredrik Bredberg &amp;lt;&lt;a href=&apos;mailto:fbredberg@openjdk.org&apos;&gt;fbredberg@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2025-01-08 09:50:35 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/cbabc0451505a00dfe77c163190736460c53820f&quot;&gt;https://git.openjdk.org/jdk/commit/cbabc0451505a00dfe77c163190736460c53820f&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14733414" author="dholmes" created="Wed, 18 Dec 2024 17:09:59 -0800"  >The ceiling calculation was last modified by &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8226416&quot; title=&quot;MonitorUsedDeflationThreshold can cause repeated async deflation requests&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8226416&quot;&gt;&lt;strike&gt;JDK-8226416&lt;/strike&gt;&lt;/a&gt; AFAICS, though the potential for division-by-zero seems to pre-date that.</comment>
                            <comment id="14733368" author="roboduke" created="Wed, 18 Dec 2024 10:27:49 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/22815&quot;&gt;https://git.openjdk.org/jdk/pull/22815&lt;/a&gt;&lt;br/&gt;
Date: 2024-12-18 15:33:43 +0000</comment>
                            <comment id="14732517" author="JIRAUSER20504" created="Mon, 16 Dec 2024 08:46:01 -0800"  >Thanks [~dholmes]! As I understand it, the reason the ceiling value currently increases even if monitor_usage is below MonitorUsedDeflationThreshold, is because it was meant to act as a back off plan when there was too many deflations without any progress, and the thought was that it would lower any repeated async deflation request pressure.&lt;br/&gt;
&lt;br/&gt;
If you ask me, the design flaw is that the ceiling value  should not increase if monitor_usage is below the MonitorUsedDeflationThreshold.</comment>
                            <comment id="14732194" author="dholmes" created="Sun, 15 Dec 2024 17:12:19 -0800"  >Great find [~fbredberg]! I don&amp;#39;t think it was ever expected that the ceiling would increase without bound! A simple fix would just prevent the overflow but there seems a design flaw here as we should not keep increasing this way.</comment>
                            <comment id="14728405" author="JIRAUSER20504" created="Wed, 4 Dec 2024 06:48:20 -0800"  >Using objdump to disassemble the code for ObjectSynchronizer::is_async_deflation_needed() on x86 we find that there is only one &amp;quot;div&amp;quot; instruction.  By using addr2line we find the corresponding source line near the end of the monitors_used_above_threshold() function, which seems to have been inlined into is_async_deflation_needed().&lt;br/&gt;
The problematic line looks like this:&lt;br/&gt;
&lt;br/&gt;
size_t monitor_usage = (monitors_used * 100LL) / ceiling;&lt;br/&gt;
&lt;br/&gt;
The problem seems to be that the value of &amp;quot;ceiling&amp;quot; has somehow become zero, which is causing the division by zero error. A few lines above that code we see how a new increased ceiling value is created if there has been too many deflations without progress. This will eventually lead to an overflow in the ceiling value, and if we&amp;#39;re really unlucky, it will become zero.&lt;br/&gt;
&lt;br/&gt;
This is further confirmed when looking at the last log line in the description of &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8343619&quot; title=&quot;Crash similar to JDK-8332506&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8343619&quot;&gt;&lt;strike&gt;JDK-8343619&lt;/strike&gt;&lt;/a&gt; (Crash similar to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8332506&quot; title=&quot;SIGFPE In ObjectSynchronizer::is_async_deflation_needed()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8332506&quot;&gt;&lt;strike&gt;JDK-8332506&lt;/strike&gt;&lt;/a&gt;),&lt;br/&gt;
which looks like this:&lt;br/&gt;
&lt;br/&gt;
[2024-10-30T16:41:33.915+0000][info][monitorinflation] Too many deflations without progress; bumping in_use_list_ceiling from 17587870461276979200 to 0&lt;br/&gt;
&lt;br/&gt;
</comment>
                            <comment id="14693254" author="pnarayanaswa" created="Mon, 29 Jul 2024 01:19:59 -0700"  >Additional Information from submitter:&lt;br/&gt;
=================================================&lt;br/&gt;
I&amp;#39;ve run my application with 21.0.4 for for over 72 hours under the same circumstances as before, except dumping threads every 30s instead of a minute to encourage a reoccurrence.&lt;br/&gt;
&lt;br/&gt;
I am happy to report that I haven&amp;#39;t experienced a crash.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m assuming some combination of the below issues fixed the root cause of the crash, but, nothing definitive.&lt;br/&gt;
&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8318757&quot; title=&quot;VM_ThreadDump asserts in interleaved ObjectMonitor::deflate_monitor calls&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8318757&quot;&gt;&lt;strike&gt;JDK-8318757&lt;/strike&gt;&lt;/a&gt; - VM_ThreadDump asserts in interleaved ObjectMonitor::deflate_monitor calls&lt;br/&gt;
&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8273107&quot; title=&quot;RunThese24H times out with &amp;quot;java.lang.management.ThreadInfo.getLockName()&amp;quot; is null&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8273107&quot;&gt;&lt;strike&gt;JDK-8273107&lt;/strike&gt;&lt;/a&gt; - RunThese24H times out with &amp;quot;java.lang.management.ThreadInfo.getLockName()&amp;quot; is null&lt;br/&gt;
&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8320515&quot; title=&quot;assert(monitor-&amp;gt;object_peek() != nullptr) failed: Owned monitors should not have a dead object&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8320515&quot;&gt;&lt;strike&gt;JDK-8320515&lt;/strike&gt;&lt;/a&gt; - assert(monitor-&amp;gt;object_peek() != nullptr) failed: Owned monitors should not have a dead object</comment>
                            <comment id="14678430" author="pnarayanaswa" created="Mon, 3 Jun 2024 08:47:15 -0700"  >Additional Information from Submitter:&lt;br/&gt;
============================&lt;br/&gt;
When reviewing &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8290786&quot; title=&quot;V  [libjvm.so+0xd4466c]  ObjectSynchronizer::is_async_deflation_needed()+0x14c&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8290786&quot;&gt;&lt;strike&gt;JDK-8290786&lt;/strike&gt;&lt;/a&gt; (previous bug of this incident), the crash report in that ticket also includes &amp;quot;ThreadDump&amp;quot; entries under &amp;#39;VM Operations&amp;#39;.</comment>
                            <comment id="14676895" author="mseledtsov" created="Tue, 28 May 2024 11:23:26 -0700"  >ILW = HLM = P3</comment>
                            <comment id="14675885" author="dholmes" created="Thu, 23 May 2024 23:16:04 -0700"  >I still can&amp;#39;t see anything that would lead to a SIGFPE. But interesting that the thread dump triggers it.</comment>
                            <comment id="14675876" author="pnarayanaswa" created="Thu, 23 May 2024 22:35:07 -0700"  >Additional Information from submitter to original bug report (&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8332506&quot; title=&quot;SIGFPE In ObjectSynchronizer::is_async_deflation_needed()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8332506&quot;&gt;&lt;strike&gt;JDK-8332506&lt;/strike&gt;&lt;/a&gt;)&lt;br/&gt;
=====================================================&lt;br/&gt;
I reported this happens randomly. I have since discovered this crash always occurs with a thread dump. The application was periodically (once a minute) performing a thread dump.&lt;br/&gt;
&lt;br/&gt;
The application would crash after ~30-38 hours of run time. Looking around for bugs on the JDK, I&amp;#39;m assuming this happens due to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8318757&quot; title=&quot;VM_ThreadDump asserts in interleaved ObjectMonitor::deflate_monitor calls&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8318757&quot;&gt;&lt;strike&gt;JDK-8318757&lt;/strike&gt;&lt;/a&gt;, but have no concrete proof.&lt;br/&gt;
&lt;br/&gt;
In the initial report this happened on 21.0.1, I have since had it on 21.0.3. In both reports the application is using ZGC (single-gen)&lt;br/&gt;
&lt;br/&gt;
REGRESSION : Last worked in version 17&lt;br/&gt;
&lt;br/&gt;
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :&lt;br/&gt;
Run the supplied code for up to 48 hours, at once a minute. Potentially increasing your odds for reproduction if ran at a higher rate.&lt;br/&gt;
&lt;br/&gt;
EXPECTED VERSUS ACTUAL BEHAVIOR :&lt;br/&gt;
EXPECTED -&lt;br/&gt;
No JVM Crash&lt;br/&gt;
ACTUAL -&lt;br/&gt;
JVM Crashed with SIGFPE.&lt;br/&gt;
&lt;br/&gt;
---------- BEGIN SOURCE ----------&lt;br/&gt;
import java.io.ByteArrayOutputStream;&lt;br/&gt;
import java.io.FileInputStream;&lt;br/&gt;
import java.io.PrintStream;&lt;br/&gt;
import java.lang.management.LockInfo;&lt;br/&gt;
import java.lang.management.ManagementFactory;&lt;br/&gt;
import java.lang.management.MonitorInfo;&lt;br/&gt;
import java.lang.management.ThreadInfo;&lt;br/&gt;
import java.lang.management.ThreadMXBean;&lt;br/&gt;
import java.util.Arrays;&lt;br/&gt;
import java.util.HashMap;&lt;br/&gt;
import java.util.List;&lt;br/&gt;
import java.util.Map;&lt;br/&gt;
import java.util.stream.Collectors;&lt;br/&gt;
&lt;br/&gt;
import org.apache.logging.log4j.LogManager;&lt;br/&gt;
import org.apache.logging.log4j.Logger;&lt;br/&gt;
import org.apache.logging.log4j.core.config.ConfigurationSource;&lt;br/&gt;
import org.apache.logging.log4j.core.config.Configurator;&lt;br/&gt;
&lt;br/&gt;
import globalstar.logging.Log;&lt;br/&gt;
&lt;br/&gt;
public class ThreadChecker implements Runnable{&lt;br/&gt;
&lt;br/&gt;
private final Logger logger;&lt;br/&gt;
&lt;br/&gt;
public ThreadChecker() {&lt;br/&gt;
logger = LogManager.getLogger(&amp;quot;thread-logger&amp;quot;);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
private void dumpJVMThreads(PrintStream pw) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ThreadMXBean b = ManagementFactory.getThreadMXBean();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (b != null) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ThreadInfo[] tis = b.dumpAllThreads(b.isObjectMonitorUsageSupported(), b.isSynchronizerUsageSupported());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (tis != null &amp;amp;&amp;amp; tis.length != 0) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pw.println(&amp;quot;\nWaiting JVM threads:&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (ThreadInfo ti : tis) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.State state = ti.getThreadState();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (state != Thread.State.RUNNABLE &amp;amp;&amp;amp; state != Thread.State.TERMINATED) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;printThreadInfo(pw, ti);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}else {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pw.println(&amp;quot;\nNo Waiting JVM Threads&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}else {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pw.println(&amp;quot;\nUnable to get ThreadMXBean&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private boolean findJVMDeadlocks(PrintStream pw) {;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ThreadMXBean b = ManagementFactory.getThreadMXBean();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (b != null) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;long[] ids = b.findDeadlockedThreads();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (ids != null &amp;amp;&amp;amp; ids.length != 0) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ThreadInfo[] tis = b.getThreadInfo(ids, b.isObjectMonitorUsageSupported(), b.isSynchronizerUsageSupported());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pw.print(&amp;quot;\nDeadlocked Java threads found:\n\t&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;List&amp;lt;String&amp;gt; threadNames = Arrays.stream(tis).map(ThreadInfo::getThreadName).collect(Collectors.toList());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pw.println(String.join(&amp;quot;, &amp;quot;, threadNames));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return true;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}else {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pw.println(&amp;quot;\nNo Deadlocked JVM Threads&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}else {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pw.println(&amp;quot;\nUnable to get ThreadMXBean&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private void printThreadInfo(PrintStream pw, ThreadInfo ti) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pw.println(&amp;quot;\tThread \&amp;quot;&amp;quot; + ti.getThreadName() + &amp;quot;\&amp;quot; (&amp;quot; + hex(ti.getThreadId()) + &amp;quot;) &amp;quot; + ti.getThreadState());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LockInfo l = ti.getLockInfo();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (l != null) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pw.println(&amp;quot;\t\twaiting for &amp;quot; + format(l) +&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(ti.getLockOwnerName() == null ? &amp;quot;&amp;quot; : &amp;quot; held by &amp;quot; + ti.getLockOwnerName() + &amp;quot; (&amp;quot; + hex(ti.getLockOwnerId()) + &amp;quot;)&amp;quot;));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Map&amp;lt;StackTraceElement, MonitorInfo&amp;gt; mlocs = new HashMap&amp;lt;StackTraceElement, MonitorInfo&amp;gt;();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;MonitorInfo[] mis = ti.getLockedMonitors();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (mis.length &amp;gt; 0) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pw.println(&amp;quot;\tMonitors held:&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (MonitorInfo mi : mis) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;mlocs.put(mi.getLockedStackFrame(), mi);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pw.println(&amp;quot;\t\t&amp;quot; + format(mi));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;LockInfo[] lis = ti.getLockedSynchronizers();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (lis.length &amp;gt; 0) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pw.println(&amp;quot;\tSynchronizers held:&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (LockInfo li : lis) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pw.println(&amp;quot;\t\t&amp;quot; + format(li));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pw.println(&amp;quot;\tStack trace:&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;StackTraceElement[] stes = ti.getStackTrace();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (StackTraceElement ste : stes) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pw.print(&amp;quot;\t\t&amp;quot; + ste.getClassName() + &amp;quot;.&amp;quot; + ste.getMethodName() + formatLineNumber(&amp;quot;:&amp;quot;, ste.getLineNumber()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (mlocs.containsKey(ste)) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pw.print(&amp;quot; -&amp;gt; locked &amp;quot; + format(mlocs.get(ste)));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pw.println();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;pw.println();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private String formatLineNumber(String prefix, int n) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (n &amp;lt; 0) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return &amp;quot;&amp;quot;;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return prefix + String.valueOf(n);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private String format(LockInfo l) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (l != null) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return l.getClassName() + &amp;quot; (&amp;quot; + hex(l.getIdentityHashCode()) + &amp;quot;)&amp;quot;;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;else {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return &amp;quot;&amp;lt;unknown&amp;gt;&amp;quot;;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;private String hex(long x) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return String.format(&amp;quot;0x%08x&amp;quot;, x);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
@Override&lt;br/&gt;
public void run() {&lt;br/&gt;
try {&lt;br/&gt;
try (ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();&lt;br/&gt;
PrintStream printStream = new PrintStream(byteArrayOutputStream);) {&lt;br/&gt;
findJVMDeadlocks(printStream);&lt;br/&gt;
dumpJVMThreads(printStream);&lt;br/&gt;
String threadReport = byteArrayOutputStream.toString();&lt;br/&gt;
logger.info(&amp;quot;\n=====Thread Report=====\n&amp;quot;&lt;br/&gt;
+threadReport+&lt;br/&gt;
&amp;quot;\n=======End Report======\n&amp;quot;);&lt;br/&gt;
&lt;br/&gt;
} catch (Exception e) {&lt;br/&gt;
logger.error(&amp;quot;Error producing thread report&amp;quot;,e);&lt;br/&gt;
}&lt;br/&gt;
}catch(Exception ex) {&lt;br/&gt;
Log.warning(&amp;quot;Error in thread checker&amp;quot;,ex);&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
---------- END SOURCE ---------- </comment>
                            <comment id="14675871" author="pnarayanaswa" created="Thu, 23 May 2024 22:30:00 -0700"  >Additional Information from submitter:&lt;br/&gt;
==============================&lt;br/&gt;
Since filing this report, I&amp;#39;ve noticed that this crash coincides with a thread dump.&lt;br/&gt;
&lt;br/&gt;
The application in question performs a thread dump once a minute, as we attempted to use it to uncover a deadlock,&lt;br/&gt;
&lt;br/&gt;
The crash would happen after ~30-36 hours after runtime.&lt;br/&gt;
&lt;br/&gt;
Since disabling these periodic thread dumps, no crash has occurred. &lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m assuming it has to do with a combination of &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8318757&quot; title=&quot;VM_ThreadDump asserts in interleaved ObjectMonitor::deflate_monitor calls&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8318757&quot;&gt;&lt;strike&gt;JDK-8318757&lt;/strike&gt;&lt;/a&gt; and &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8273107&quot; title=&quot;RunThese24H times out with &amp;quot;java.lang.management.ThreadInfo.getLockName()&amp;quot; is null&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8273107&quot;&gt;&lt;strike&gt;JDK-8273107&lt;/strike&gt;&lt;/a&gt; since this issue did not occur on 17.0.8.&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</comment>
                            <comment id="14675562" author="dholmes" created="Thu, 23 May 2024 00:11:20 -0700"  >The comments from &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8290786&quot; title=&quot;V  [libjvm.so+0xd4466c]  ObjectSynchronizer::is_async_deflation_needed()+0x14c&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8290786&quot;&gt;&lt;strike&gt;JDK-8290786&lt;/strike&gt;&lt;/a&gt; remain the same - there is nowhere in our code that I can see that could introduce a floating-point division by zero, or an integer division by zero.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5147503">JDK-8347253</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5148938">JDK-8348492</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5154829">JDK-8353676</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5157131">JDK-8355688</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5162407">JDK-8360267</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5163350">JDK-8361147</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5131246">JDK-8333741</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10000">
                    <name>Blocks</name>
                                            <outwardlinks description="blocks">
                                                        </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10002">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="5142801">JDK-8343619</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5057657">JDK-8273107</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5113126">JDK-8318757</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="4993721">JDK-8226416</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5157052">JDK-8355647</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17008"><![CDATA[generic]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17010"><![CDATA[generic]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i36cyz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17315"><![CDATA[b05]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>