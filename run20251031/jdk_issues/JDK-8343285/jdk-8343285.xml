<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Sat Sep 27 09:27:37 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8343285] java.lang.Process is unresponsive and CPU usage spikes to 100%</title>
                <link>https://bugs.openjdk.org/browse/JDK-8343285</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>ADDITIONAL SYSTEM INFORMATION :&lt;br/&gt;
A DESCRIPTION OF THE PROBLEM :&lt;br/&gt;
In JDK 8, using the Process class to execute the command &amp;quot;/Applications/LibreOffice.app/Contents/MacOS/soffice --help&amp;quot;works as expected. However, after switching to JDK 21, the thread executing the command becomes unresponsive, and the forked process causes CPU usage to spike to 100%.&lt;br/&gt;
&lt;br/&gt;
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :&lt;br/&gt;
1. install soffice  &lt;br/&gt;
2. run code&lt;br/&gt;
3. switch jdk&lt;br/&gt;
&lt;br/&gt;
EXPECTED VERSUS ACTUAL BEHAVIOR :&lt;br/&gt;
EXPECTED -&lt;br/&gt;
return immediately&lt;br/&gt;
ACTUAL -&lt;br/&gt;
no result&lt;br/&gt;
&lt;br/&gt;
---------- BEGIN SOURCE ----------&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ProcessBuilder processBuilder = new ProcessBuilder(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;/Applications/LibreOffice.app/Contents/MacOS/soffice&amp;quot;,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;--help&amp;quot;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;);&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Process process = processBuilder.start();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String line;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while ((line = reader.readLine()) != null) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(line);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int exitCode = process.waitFor();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Process exited with code: &amp;quot; + exitCode);&lt;br/&gt;
---------- END SOURCE ----------&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment></environment>
        <key id="5142639">JDK-8343285</key>
            <summary>java.lang.Process is unresponsive and CPU usage spikes to 100%</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="gziemski">Gerard Ziemski</assignee>
                                    <reporter username="webbuggrp">Webbug Group</reporter>
                        <labels>
                            <label>dcsaw</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>regression</label>
                            <label>reproducer-yes</label>
                            <label>webbug</label>
                    </labels>
                <created>Tue, 29 Oct 2024 07:30:24 -0700</created>
                <updated>Fri, 28 Feb 2025 11:47:06 -0800</updated>
                            <resolved>Wed, 13 Nov 2024 07:34:52 -0800</resolved>
                                    <version>21</version>
                    <version>23</version>
                    <version>24</version>
                                    <fixVersion>24</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>12</watches>
                                                                                                                <comments>
                            <comment id="14727226" author="roboduke" created="Fri, 29 Nov 2024 10:31:57 -0800"  >[jdk17u-fix-request] Approval Request from Dmitry Cherepanov&lt;br/&gt;
clean backport, fixes regression introduced in 17.0.13, reproducer fails without and passes with the fix</comment>
                            <comment id="14727221" author="roboduke" created="Fri, 29 Nov 2024 10:26:32 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/3079&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/3079&lt;/a&gt;&lt;br/&gt;
Date: 2024-11-29 18:20:59 +0000</comment>
                            <comment id="14727218" author="roboduke" created="Fri, 29 Nov 2024 10:19:21 -0800"  >[jdk21u-fix-request] Approval Request from Dmitry Cherepanov&lt;br/&gt;
clean backport, fixes regression introduced in 21.0.5, reproducer fails without and passes with the fix</comment>
                            <comment id="14727217" author="roboduke" created="Fri, 29 Nov 2024 10:17:53 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/1190&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/1190&lt;/a&gt;&lt;br/&gt;
Date: 2024-11-29 18:11:30 +0000</comment>
                            <comment id="14723132" author="sgehwolf" created="Mon, 18 Nov 2024 05:05:35 -0800"  >Removing the fix request comments for OpenJDK 21 and 17 since there is a) no PR open for them b) no Fix request comment.</comment>
                            <comment id="14722447" author="gziemski" created="Thu, 14 Nov 2024 11:45:20 -0800"  >Both jdk17 and jdk21 need the fix, since the regression was back-ported to them.</comment>
                            <comment id="14722440" author="gziemski" created="Thu, 14 Nov 2024 11:29:33 -0800"  >[~rriggs]&lt;br/&gt;
&lt;br/&gt;
So these repos?&lt;br/&gt;
&lt;br/&gt;
jdk21u-cpu&lt;br/&gt;
jdk21u&lt;br/&gt;
jdk17u</comment>
                            <comment id="14722435" author="gziemski" created="Thu, 14 Nov 2024 11:23:32 -0800"  >Versions that need backports:&lt;br/&gt;
&lt;br/&gt;
21.0.5-oracle&lt;br/&gt;
21.0.5&lt;br/&gt;
17.0.13&lt;br/&gt;
</comment>
                            <comment id="14721542" author="rriggs" created="Wed, 13 Nov 2024 07:54:45 -0800"  >Please followup with backports to the same releases as the original fix.</comment>
                            <comment id="14721534" author="dukebot" created="Wed, 13 Nov 2024 07:34:51 -0800"  >Changeset: c00e20c3&lt;br/&gt;
Branch: master&lt;br/&gt;
Author:    Gerard Ziemski &amp;lt;&lt;a href=&apos;mailto:gziemski@openjdk.org&apos;&gt;gziemski@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-11-13 15:33:00 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/c00e20c399cf9b3b21258bd5654a92d703c8fcd2&quot;&gt;https://git.openjdk.org/jdk/commit/c00e20c399cf9b3b21258bd5654a92d703c8fcd2&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14720456" author="roboduke" created="Fri, 8 Nov 2024 11:36:38 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/21992&quot;&gt;https://git.openjdk.org/jdk/pull/21992&lt;/a&gt;&lt;br/&gt;
Date: 2024-11-08 19:08:28 +0000</comment>
                            <comment id="14720442" author="gziemski" created="Fri, 8 Nov 2024 10:45:27 -0800"  >It looks like on Linux the default value for the number of file descriptors is 0x100000 (i.e. 1,048,576) which takes under1 second to iterate through on an old x86_64 machine on both Linux and macOS.&lt;br/&gt;
&lt;br/&gt;
That value is still much larger than the old max value that we used to have on macOS (i.e. 10,240) by 2 orders of magnitude.</comment>
                            <comment id="14720381" author="gziemski" created="Fri, 8 Nov 2024 07:36:31 -0800"  >We need to figure this out, without forcing users to adapt since it is the default behavior.</comment>
                            <comment id="14720378" author="gziemski" created="Fri, 8 Nov 2024 07:31:27 -0800"  >I missed that.&lt;br/&gt;
&lt;br/&gt;
I would definitively call this a regression then.&lt;br/&gt;
&lt;br/&gt;
At this point then I am leaning towards lowering the value to something where anyone who uses similar logic in their code to iterate over the allowed range of file descriptors does not run into this.&lt;br/&gt;
&lt;br/&gt;
I will look into a reasonable value to use...</comment>
                            <comment id="14720191" author="dholmes" created="Thu, 7 Nov 2024 16:06:44 -0800"  >&amp;gt; But this is not default behavior, a client must explicitly ask for &amp;quot;MaxFDLimit&amp;quot; to encounter this.&lt;br/&gt;
&lt;br/&gt;
[~gziemski] That is not correct - MaxFDLimit is true by default.</comment>
                            <comment id="14720169" author="rriggs" created="Thu, 7 Nov 2024 13:09:57 -0800"  >Removed the &amp;quot;regression&amp;quot; label, if the function works as designed.&lt;br/&gt;
Is there any workaround to suggest for users of soffice; until a new version is released?&lt;br/&gt;
Or perhaps only a release note suggest patience in the startup of soffice.</comment>
                            <comment id="14720167" author="gziemski" created="Thu, 7 Nov 2024 13:02:26 -0800"  >BTW, I&amp;#39;m not sure how to run dtruss on macOS with SIP ON, but an easy way to sample a &amp;quot;hung&amp;quot; process is to use &amp;quot;sample PID&amp;quot; command. You get a report that shows something like:&lt;br/&gt;
&lt;br/&gt;
Call graph:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;8299 Thread_4069956   DispatchQueue_1: com.apple.main-thread  (serial)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+ 8299 start  (in dyld) + 1909  [0x200f87345]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+   8299 main  (in soffice) + 11  [0x100e71f5b]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+     8286 sal_detail_initialize  (in libuno_sal.dylib.3) + 178  [0x109978c82]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+     ! 8226 fstat$INODE64  (in libsystem_kernel.dylib) + 10  [0x7ff812440852]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+     ! : 8051 ???  (in &amp;lt;unknown binary&amp;gt;)  [0x7ff8a272ea78]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+     ! : 38 ???  (in &amp;lt;unknown binary&amp;gt;)  [0x7ff8a272ea08]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+     ! : 30 ???  (in &amp;lt;unknown binary&amp;gt;)  [0x7ff8a272ec60]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+     ! : 24 ???  (in &amp;lt;unknown binary&amp;gt;)  [0x7ff8a272e69c]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+     ! : 23 ???  (in &amp;lt;unknown binary&amp;gt;)  [0x7ff8a272c21c]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+     ! : 20 ???  (in &amp;lt;unknown binary&amp;gt;)  [0x7ff8a272e5dc]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+     ! : 16 ???  (in &amp;lt;unknown binary&amp;gt;)  [0x7ff8a272ea70]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+     ! : 14 ???  (in &amp;lt;unknown binary&amp;gt;)  [0x7ff8a272e5cc]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+     ! : 9 ???  (in &amp;lt;unknown binary&amp;gt;)  [0x7ff8a272e698]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+     ! : 1 ???  (in &amp;lt;unknown binary&amp;gt;)  [0x7ff8a272e678]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+     ! 33 DYLD-STUB$$fstat$INODE64  (in libuno_sal.dylib.3) + 0  [0x109986cbe]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+     ! 16 cerror_nocancel  (in libsystem_kernel.dylib) + 36,6  [0x7ff8124407e4,0x7ff8124407c6]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+     ! 11 cerror_nocancel  (in libsystem_kernel.dylib) + 6  [0x7ff8124407c6]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+     !   11 ???  (in &amp;lt;unknown binary&amp;gt;)  [0x7ff8a272d324]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;+     13 sal_detail_initialize  (in libuno_sal.dylib.3) + 178  [0x109978c82]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;8299 Thread_4069959: com.apple.rosetta.exceptionserver&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;8299 ???  (in runtime)  load address 0x7ff7ffd47000 + 0x4414  [0x7ff7ffd4b414]</comment>
                            <comment id="14720166" author="gziemski" created="Thu, 7 Nov 2024 12:57:27 -0800"  >Behaves as expected.</comment>
                            <comment id="14720165" author="gziemski" created="Thu, 7 Nov 2024 12:56:06 -0800"  >LibreOffice starts jvm with &amp;quot;MaxFDLimit&amp;quot;, which:&lt;br/&gt;
&lt;br/&gt;
&amp;quot;Bump the number of file descriptors to maximum (Unix only)&amp;quot;&lt;br/&gt;
&lt;br/&gt;
That limit used to be 10240 in jdk22 and before. For jdk23 and going forward, we changed it to the maximum that the macOS allowed.&lt;br/&gt;
&lt;br/&gt;
However it turned out that ksh had an issue where the maximum value overflowed an &amp;quot;int&amp;quot;, so we rounded it down to MAX_INT.&lt;br/&gt;
&lt;br/&gt;
Later, we found out that in jdwp agent even with the rounded down value, code was timing out because it was trying to close all possible file descriptors, just like LibreOffice. We found a way to close only those file descriptors that were being actually used. That fix is here:&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/commit/a6632487863db5ff3136cdcc76b7440c15ce6be9#diff-1a48137c6688c91d10f931b3e37e4b961b24748fbcb2906d629807aea53db80fR71&quot;&gt;https://github.com/openjdk/jdk/commit/a6632487863db5ff3136cdcc76b7440c15ce6be9#diff-1a48137c6688c91d10f931b3e37e4b961b24748fbcb2906d629807aea53db80fR71&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
3 ways LibreOffice can fix it on their end:&lt;br/&gt;
- do not use &amp;quot;MaxFDLimit&amp;quot;&lt;br/&gt;
- always use the workaround that limits the MAX to 100,000&lt;br/&gt;
- only close file descriptors that the process is using, just like in src/jdk.jdwp.agent/unix/native/libjdwp/exec_md.c&lt;br/&gt;
&lt;br/&gt;
So, it is a regression in a sense that the behavior has changed. But this is not default behavior, a client must explicitly ask for &amp;quot;MaxFDLimit&amp;quot; to encounter this.&lt;br/&gt;
&lt;br/&gt;
So it is up to the client to handle the higher limit, if that&amp;#39;s what they ask for.</comment>
                            <comment id="14719824" author="gziemski" created="Wed, 6 Nov 2024 10:04:59 -0800"  >From &lt;a href=&quot;https://www.gnu.org/software/gnulib/manual/html_node/closefrom.html&quot;&gt;https://www.gnu.org/software/gnulib/manual/html_node/closefrom.html&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
&#8220;The [POSIX] standard developers rejected a proposal to add closefrom() to the [POSIX] standard. Because the standard permits implementations to use inherited file descriptors as a means of providing a conforming environment for the child process, it is not possible to standardize an interface that closes arbitrary file descriptors above a certain value while still guaranteeing a conforming environment.&#8221;</comment>
                            <comment id="14719822" author="gziemski" created="Wed, 6 Nov 2024 10:01:12 -0800"  >We could decrease the default limit to a smaller, but still reasonable value - larger than the old one, but small enough that walking those fd&amp;#39;s does not appear to hang the process (but that is dependent on the machine performance)&lt;br/&gt;
&lt;br/&gt;
I will double check to see if there is no API like &amp;quot;closefrom()&amp;quot; on macOS...</comment>
                            <comment id="14718745" author="dholmes" created="Sun, 3 Nov 2024 16:04:20 -0800"  >I see the same buggy application logic (in gdb) has been reported in&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8324577?focusedId=14718514&amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14718514&quot;&gt;https://bugs.openjdk.org/browse/JDK-8324577?focusedId=14718514&amp;amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14718514&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
The only solution would be to revert the fix.</comment>
                            <comment id="14718744" author="dholmes" created="Sun, 3 Nov 2024 15:59:55 -0800"  >Not sure there is really anything we can or should do about this. The user running soffice could just as easily change the rlimit value and cause soffice to make excessive stat calls. But I&amp;#39;m unclear if the problem is that we have now exceeded the 100000 cap, or are now enforcing it (rather than some lower limit)? Calling stat 100000 times does not seem like a reasonable thing to do at all.</comment>
                            <comment id="14718624" author="gziemski" created="Fri, 1 Nov 2024 11:03:29 -0700"  >It looks like a regression and as the runtime team is responsible, it&amp;#39;s our responsibility.&lt;br/&gt;
&lt;br/&gt;
I will assign it to myself and start working on it.</comment>
                            <comment id="14718508" author="rriggs" created="Fri, 1 Nov 2024 01:21:54 -0700"  >The change to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8324577&quot; title=&quot;[REDO] - [IMPROVE] OPEN_MAX is no longer the max limit on macOS &amp;gt;= 10.6 for RLIMIT_NOFILE&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8324577&quot;&gt;&lt;strike&gt;JDK-8324577&lt;/strike&gt;&lt;/a&gt; has brought about this issue by changing the RLIMIT_NOFILE.&lt;br/&gt;
[~gziemski][~dholmes] Please review and comment.&lt;br/&gt;
&lt;br/&gt;
Should this be considered a regression?&lt;br/&gt;
Should the issue be re-assigned to hotspot/runtime?&lt;br/&gt;
&lt;br/&gt;
Soffice has code to guard against an excessive range of fd&amp;#39;s. &lt;br/&gt;
However, the change to vm initialization has foiled the sanity check, resulting in soffice exhaustive checking all fd up to init_max.&lt;br/&gt;
&lt;br/&gt;
The code in soffice is:&lt;br/&gt;
`#if defined MACOSX &amp;amp;&amp;amp; !HAVE_FEATURE_MACOSX_SANDBOX&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// On macOS when not sandboxed, soffice can restart itself via exec (see&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// restartOnMac in desktop/source/app/app.cxx), which leaves all file&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// descriptors open, which in turn can have unwanted effects (see&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// &amp;lt;&lt;a href=&quot;https://bugs.libreoffice.org/show_bug.cgi?id=50603&quot;&gt;https://bugs.libreoffice.org/show_bug.cgi?id=50603&lt;/a&gt;&amp;gt; &amp;quot;Unable to update&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// LibreOffice without resetting user profile&amp;quot;). But closing fds in&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// restartOnMac before calling exec does not work, as additional threads&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// might still be running then, which can still use those fds and cause&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// crashes. Therefore, the simplest solution is to close fds at process&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// start (as early as possible, so that no other threads have been created&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// yet that might already have opened some fds); this is done for all kinds&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// of processes here, not just soffice, but hopefully none of our processes&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// rely on being spawned with certain fds already open. Unfortunately, Mac&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// macOS appears to have no better interface to close all fds (like&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// closefrom):&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;long openMax = sysconf(_SC_OPEN_MAX);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// When LibreOffice restarts itself on macOS 11 beta on arm64, for&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// some reason sysconf(_SC_OPEN_MAX) returns 0x7FFFFFFFFFFFFFFF,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// so use a sanity limit here.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (openMax == -1 || openMax == std::numeric_limits&amp;lt;long&amp;gt;::max()) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;openMax = 100000;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;assert(openMax &amp;gt;= 0 &amp;amp;&amp;amp; openMax &amp;lt;= std::numeric_limits&amp;lt; int &amp;gt;::max());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int fd = 3; fd &amp;lt; int(openMax); ++fd) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;struct stat s;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (fstat(fd, &amp;amp;s) != -1 &amp;amp;&amp;amp; S_ISREG(s.st_mode))&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;close(fd);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
#endif&lt;br/&gt;
`</comment>
                            <comment id="14718321" author="rriggs" created="Thu, 31 Oct 2024 09:28:45 -0700"  >Using dtruss, it appears that soffice is spinning using fstat to check for fd (file descriptors) to be closed.&lt;br/&gt;
The fd numbers increase sequentially. I think eventually, it will continue, when the loop finishes.&lt;br/&gt;
There&amp;#39;s more to discover.</comment>
                            <comment id="14717589" author="tongwan" created="Wed, 30 Oct 2024 02:53:08 -0700"  >The observations on MacOS:&lt;br/&gt;
JDK 21.0.4.0.2: Passed.&lt;br/&gt;
JDK 21.0.5+1: Failed, no response.&lt;br/&gt;
JDK 23: Failed.&lt;br/&gt;
JDK 24ea+10: Failed.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5145162">JDK-8345290</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5145163">JDK-8345291</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5151727">JDK-8350972</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10002">
                    <name>Duplicate</name>
                                                                <inwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="5144993">JDK-8345256</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5119879">JDK-8324577</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17008"><![CDATA[generic]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    <customfield id="customfield_10003" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Introduced In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17303"><![CDATA[b01]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10004" key="com.atlassian.jira.plugin.system.customfieldtypes:version">
                        <customfieldname>Introduced In Version</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue id="23087">21.0.5</customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17017"><![CDATA[os_x]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i38ihf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17436"><![CDATA[b24]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="192"><![CDATA[runtime]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>