<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Sat Sep 27 09:58:40 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8343205] CompileBroker::possibly_add_compiler_threads excessively polls available memory</title>
                <link>https://bugs.openjdk.org/browse/JDK-8343205</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>A DESCRIPTION OF THE PROBLEM :&lt;br/&gt;
possibly_add_compiler_threads always fetches the free memory, before considering if a compiler thread is required, which we&amp;#39;ve observed causing performance issues with both cgroupv1 and cgroupv2 due to the frequency of polling (even with the mitigations added in &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8232207&quot; title=&quot;Linux os::available_memory re-reads cgroup configuration on every invocation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8232207&quot;&gt;&lt;strike&gt;JDK-8232207&lt;/strike&gt;&lt;/a&gt;), particularly with large running large numbers of relatively short lived tasks on container platforms.&lt;br/&gt;
&lt;br/&gt;
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :&lt;br/&gt;
Believe this is enough to demonstrate the correlation between compilations and calls:&lt;br/&gt;
&lt;br/&gt;
java -Xlog:os+container=trace,jit+compilation=debug&lt;br/&gt;
[0.000s][trace][os,container] OSContainer::init: Initializing Container Support&lt;br/&gt;
[0.000s][debug][os,container] Detected optional pids controller entry in /proc/cgroups&lt;br/&gt;
[0.001s][debug][os,container] Detected cgroups v2 unified hierarchy&lt;br/&gt;
[0.001s][trace][os,container] Path to /cpu.max is /sys/fs/cgroup/cpu.max&lt;br/&gt;
[0.001s][trace][os,container] CPU Quota is: 400000&lt;br/&gt;
[0.001s][trace][os,container] Path to /cpu.max is /sys/fs/cgroup/cpu.max&lt;br/&gt;
[0.001s][trace][os,container] CPU Period is: 100000&lt;br/&gt;
[0.001s][trace][os,container] CPU Quota count based on quota/period: 4&lt;br/&gt;
[0.001s][trace][os,container] OSContainer::active_processor_count: 4&lt;br/&gt;
[0.004s][trace][os,container] CgroupSubsystem::active_processor_count (cached): 4&lt;br/&gt;
[0.004s][trace][os,container] total physical memory: 790776565760&lt;br/&gt;
[0.004s][trace][os,container] Path to /memory.max is /sys/fs/cgroup/memory.max&lt;br/&gt;
[0.004s][trace][os,container] Memory Limit is: 8589934592&lt;br/&gt;
[0.005s][trace][os,container] CgroupSubsystem::active_processor_count (cached): 4&lt;br/&gt;
[0.025s][trace][os,container] Path to /cpu.max is /sys/fs/cgroup/cpu.max&lt;br/&gt;
[0.025s][trace][os,container] CPU Quota is: 400000&lt;br/&gt;
[0.025s][trace][os,container] Path to /cpu.max is /sys/fs/cgroup/cpu.max&lt;br/&gt;
[0.025s][trace][os,container] CPU Period is: 100000&lt;br/&gt;
[0.025s][trace][os,container] CPU Quota count based on quota/period: 4&lt;br/&gt;
[0.025s][trace][os,container] OSContainer::active_processor_count: 4&lt;br/&gt;
[0.029s][debug][jit,compilation]    1       3       java.lang.String::hashCode (60 bytes)&lt;br/&gt;
[0.029s][trace][os,container   ] total physical memory: 790776565760&lt;br/&gt;
[0.029s][trace][os,container   ] Path to /memory.max is /sys/fs/cgroup/memory.max&lt;br/&gt;
[0.029s][trace][os,container   ] Memory Limit is: 8589934592&lt;br/&gt;
[0.029s][trace][os,container   ] Path to /memory.current is /sys/fs/cgroup/memory.current&lt;br/&gt;
[0.029s][trace][os,container   ] Memory Usage is: 8166121472&lt;br/&gt;
[0.030s][debug][jit,compilation]    2       3       java.lang.Object::&amp;lt;init&amp;gt; (1 bytes)&lt;br/&gt;
[0.030s][trace][os,container   ] Path to /memory.current is /sys/fs/cgroup/memory.current&lt;br/&gt;
[0.030s][trace][os,container   ] Memory Usage is: 8166121472&lt;br/&gt;
[0.030s][debug][jit,compilation]    3     n 0       jdk.internal.misc.Unsafe::getReferenceVolatile (native)&lt;br/&gt;
[0.030s][debug][jit,compilation]    4     n 0       jdk.internal.vm.Continuation::enterSpecial (native)   (static)&lt;br/&gt;
[0.030s][debug][jit,compilation]    5     n 0       jdk.internal.vm.Continuation::doYield (native)   (static)&lt;br/&gt;
[0.031s][debug][jit,compilation]    6       3       java.lang.Byte::toUnsignedInt (6 bytes)&lt;br/&gt;
[0.031s][trace][os,container   ] Path to /memory.current is /sys/fs/cgroup/memory.current&lt;br/&gt;
[0.031s][trace][os,container   ] Memory Usage is: 8166383616&lt;br/&gt;
[0.032s][debug][jit,compilation]    7       3       java.lang.String::coder (15 bytes)&lt;br/&gt;
[0.032s][trace][os,container   ] Path to /memory.current is /sys/fs/cgroup/memory.current&lt;br/&gt;
[0.032s][trace][os,container   ] Memory Usage is: 8166383616&lt;br/&gt;
[0.032s][debug][jit,compilation]   10       3       java.lang.String::isLatin1 (19 bytes)&lt;br/&gt;
[0.032s][trace][os,container   ] Path to /memory.current is /sys/fs/cgroup/memory.current&lt;br/&gt;
[0.032s][trace][os,container   ] Memory Usage is: 8166383616&lt;br/&gt;
[0.032s][debug][jit,compilation]    8       3       jdk.internal.util.Preconditions::checkIndex (18 bytes)&lt;br/&gt;
[0.032s][trace][os,container   ] Path to /memory.current is /sys/fs/cgroup/memory.current&lt;br/&gt;
[0.032s][trace][os,container   ] Memory Usage is: 8166383616&lt;br/&gt;
[0.032s][debug][jit,compilation]    9       3       java.lang.String::charAt (25 bytes)&lt;br/&gt;
[0.032s][trace][os,container   ] Path to /memory.current is /sys/fs/cgroup/memory.current&lt;br/&gt;
[0.032s][trace][os,container   ] Memory Usage is: 8166383616&lt;br/&gt;
[0.032s][debug][jit,compilation]   11     n 0       java.lang.Object::hashCode (native)&lt;br/&gt;
[0.032s][debug][jit,compilation]   12     n 0       java.lang.invoke.MethodHandle::linkToStatic(LLLLLLL)L (native)   (static)&lt;br/&gt;
[0.033s][debug][jit,compilation]   13       1       java.lang.Enum::ordinal (5 bytes)&lt;br/&gt;
[0.033s][trace][os,container   ] Path to /memory.current is /sys/fs/cgroup/memory.current&lt;br/&gt;
[0.033s][trace][os,container   ] Memory Usage is: 8166383616&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
EXPECTED VERSUS ACTUAL BEHAVIOR :&lt;br/&gt;
EXPECTED -&lt;br/&gt;
Free memory is only considered if a thread would otherwise be added.&lt;br/&gt;
ACTUAL -&lt;br/&gt;
Free memory is considered for each compiler loop iteration.&lt;br/&gt;
&lt;br/&gt;
CUSTOMER SUBMITTED WORKAROUND :&lt;br/&gt;
Configure -XX:-UseDynamicNumberOfCompilerThreads&lt;br/&gt;
&lt;br/&gt;
FREQUENCY : often&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment></environment>
        <key id="5142442">JDK-8343205</key>
            <summary>CompileBroker::possibly_add_compiler_threads excessively polls available memory</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="mdoerr">Martin Doerr</assignee>
                                    <reporter username="webbuggrp">Webbug Group</reporter>
                        <labels>
                            <label>dcsae</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>jdk23u-fix-request</label>
                            <label>oracle-triage-24</label>
                            <label>performance</label>
                            <label>starter</label>
                            <label>webbug</label>
                    </labels>
                <created>Thu, 24 Oct 2024 21:46:56 -0700</created>
                <updated>Mon, 3 Mar 2025 01:24:43 -0800</updated>
                            <resolved>Mon, 4 Nov 2024 02:02:51 -0800</resolved>
                                    <version>11</version>
                    <version>17</version>
                    <version>21</version>
                    <version>24</version>
                                    <fixVersion>24</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                                                                <comments>
                            <comment id="14732509" author="roboduke" created="Mon, 16 Dec 2024 08:20:34 -0800"  >[jdk17u-fix-request] Approval Request from Martin&lt;br/&gt;
JDK17 is affected by this performance issue, too. The fix is not complicated and the backport from 21u-dev applies cleanly. Tier1-4 plus extra tests have passed many times. No regression observed.</comment>
                            <comment id="14731011" author="roboduke" created="Wed, 11 Dec 2024 03:45:29 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/3106&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/3106&lt;/a&gt;&lt;br/&gt;
Date: 2024-12-11 11:39:50 +0000</comment>
                            <comment id="14723154" author="mdoerr" created="Mon, 18 Nov 2024 05:57:52 -0800"  >Please note that it didn&amp;#39;t make it into 23.0.2 because it was too late. The workaround -XX:-UseDynamicNumberOfCompilerThreads has other drawbacks.</comment>
                            <comment id="14723137" author="sgehwolf" created="Mon, 18 Nov 2024 05:23:29 -0800"  >This is a relatively new change and should see some more real world runs e.g. in JDK 23 before putting into a backport release. Deferring to April for OpenJDK 21. Work-around is to use:  -XX:-UseDynamicNumberOfCompilerThreads in the meantime.</comment>
                            <comment id="14720671" author="roboduke" created="Mon, 11 Nov 2024 02:23:48 -0800"  >[jdk21u-fix-request] Approval Request from Martin&lt;br/&gt;
JDK21 is affected by this performance issue, too. This solution is not complicated, the backport applies almost cleanly and has been reviewed. Tier1-4 plus extra tests and benchmarks have passed several times. No regression observed.</comment>
                            <comment id="14720176" author="roboduke" created="Thu, 7 Nov 2024 14:11:54 -0800"  >[jdk23u-fix-request] Approval Request from Martin&lt;br/&gt;
JDK23 is affected by this performance issue. This solution is not complicated and the backport applies cleanly. Tier1-4 plus extra tests and benchmarks have passed several times. No regression observed.</comment>
                            <comment id="14718969" author="roboduke" created="Mon, 4 Nov 2024 10:14:22 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/1123&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/1123&lt;/a&gt;&lt;br/&gt;
Date: 2024-11-04 18:07:40 +0000</comment>
                            <comment id="14718967" author="roboduke" created="Mon, 4 Nov 2024 10:05:43 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk23u/pull/214&quot;&gt;https://git.openjdk.org/jdk23u/pull/214&lt;/a&gt;&lt;br/&gt;
Date: 2024-11-04 18:00:25 +0000</comment>
                            <comment id="14718838" author="dukebot" created="Mon, 4 Nov 2024 02:02:49 -0800"  >Changeset: 75801992&lt;br/&gt;
Branch: master&lt;br/&gt;
Author:    Martin Doerr &amp;lt;&lt;a href=&apos;mailto:mdoerr@openjdk.org&apos;&gt;mdoerr@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-11-04 09:58:51 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/75801992a7c626d409f66e2491082dba84c6fe45&quot;&gt;https://git.openjdk.org/jdk/commit/75801992a7c626d409f66e2491082dba84c6fe45&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14718328" author="roboduke" created="Thu, 31 Oct 2024 10:09:31 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/21812&quot;&gt;https://git.openjdk.org/jdk/pull/21812&lt;/a&gt;&lt;br/&gt;
Date: 2024-10-31 17:03:33 +0000</comment>
                            <comment id="14718319" author="mdoerr" created="Thu, 31 Oct 2024 09:22:57 -0700"  >We can do the quick checks first and query os::free_memory() afterwards. This will make it less frequent. I&amp;#39;ll take a look. Thanks for reporting!</comment>
                            <comment id="14717523" author="thartmann" created="Tue, 29 Oct 2024 23:43:24 -0700"  >Martin, what do you think?</comment>
                            <comment id="14717522" author="thartmann" created="Tue, 29 Oct 2024 23:42:56 -0700"  >&amp;gt; EXPECTED -&lt;br/&gt;
&amp;gt; Free memory is only considered if a thread would otherwise be added.&lt;br/&gt;
&lt;br/&gt;
The current logic needs the free memory to determine if a new compiler thread should be added and therefore has to eagerly poll that information:&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/master/src/hotspot/share/compiler/compileBroker.cpp#L1036&quot;&gt;https://github.com/openjdk/jdk/blob/master/src/hotspot/share/compiler/compileBroker.cpp#L1036&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
I think that logic should be changed to not use a MIN4 but first check if the compile queue is even filled enough to justify adding a new compiler thread. Only then we should check if there&amp;#39;s enough memory (first checking the code cache and then system memory). </comment>
                            <comment id="14717520" author="thartmann" created="Tue, 29 Oct 2024 23:37:26 -0700"  >ILW = Logic that determines if a new compiler thread should be added polls os::free_memory() too often causing performance issues similar to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8232207&quot; title=&quot;Linux os::available_memory re-reads cgroup configuration on every invocation&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8232207&quot;&gt;&lt;strike&gt;JDK-8232207&lt;/strike&gt;&lt;/a&gt;, with a large number of short lived tasks on container platforms, -XX:-UseDynamicNumberOfCompilerThreads = MML = P4</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5145941">JDK-8345983</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5151843">JDK-8351024</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="4954220">JDK-8198756</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="19000"><![CDATA[x86_64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17023"><![CDATA[linux]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i38h9n:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17433"><![CDATA[b23]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>