<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Sat Sep 27 09:42:58 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8331977] Crash: SIGSEGV in dlerror()</title>
                <link>https://bugs.openjdk.org/browse/JDK-8331977</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>Test:  tools/jpackage/share/jdk/jpackage/tests/MainClassTest.java&lt;br/&gt;
&lt;br/&gt;
[23:08:47.438] TRACE: exec: Execute [/opt/mach5/mesos/work_dir/slaves/f8dfb4e7-ae2d-48ec-aec1-afff79404935-S31203/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/f927ceb2-8f2f-40e3-988c-207f210132bf/runs/85774163-597d-4c86-8558-8b853edef678/testoutput/test-support/jtreg_open_test_jdk_tier3/scratch/5/./test.f20c824a/output/MainClassTest/bin/MainClassTest](1); save output; in directory [./test.f20c824a/output]...&lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  SIGSEGV (0xb) at pc=0x00007f59a64d5424, pid=28546, tid=28556&lt;br/&gt;
#&lt;br/&gt;
# JRE version: OpenJDK Runtime Environment (23.0+22) (build 23-ea+22-1820)&lt;br/&gt;
# Java VM: OpenJDK 64-Bit Server VM (23-ea+22-1820, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# C  [libdl.so.2+0x1424]  dlerror+0xe4&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
---------------  T H R E A D  ---------------&lt;br/&gt;
&lt;br/&gt;
Current thread (0x00007f59a002b180):  JavaThread &amp;quot;main&amp;quot;             [_thread_in_vm, id=28556, stack(0x00007f59a67d7000,0x00007f59a68d8000) (1028K)]&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00007f59a67d7000,0x00007f59a68d8000],  sp=0x00007f59a68d50f0,  free space=1016k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
C  [libdl.so.2+0x1424]  dlerror+0xe4&lt;br/&gt;
V  [libjvm.so+0xc83058]  NativeLookup::lookup_style(methodHandle const&amp;amp;, char*, char const*, int, bool, JavaThread*)+0x268  (nativeLookup.cpp:267)&lt;br/&gt;
V  [libjvm.so+0xc8364c]  NativeLookup::lookup_base(methodHandle const&amp;amp;, JavaThread*)+0xac  (nativeLookup.cpp:336)&lt;br/&gt;
V  [libjvm.so+0xc838bb]  NativeLookup::lookup(methodHandle const&amp;amp;, JavaThread*)+0x4b  (nativeLookup.cpp:423)&lt;br/&gt;
V  [libjvm.so+0x8ca35d]  InterpreterRuntime::prepare_native_call(JavaThread*, Method*)+0x6d  (interpreterRuntime.cpp:1458)&lt;br/&gt;
j  sun.nio.fs.UnixNativeDispatcher.init()I+0 java.base&lt;br/&gt;
j  sun.nio.fs.UnixNativeDispatcher.&amp;lt;clinit&amp;gt;()V+5 java.base&lt;br/&gt;
v  ~StubRoutines::call_stub 0x00007f598fe6bc86&lt;br/&gt;
V  [libjvm.so+0x8d3a1b]  JavaCalls::call_helper(JavaValue*, methodHandle const&amp;amp;, JavaCallArguments*, JavaThread*)+0x2db  (javaCalls.cpp:415)&lt;br/&gt;
V  [libjvm.so+0x8ab0bf]  InstanceKlass::call_class_initializer(JavaThread*)+0x2ef  (instanceKlass.cpp:1630)&lt;br/&gt;
V  [libjvm.so+0x8ac021]  InstanceKlass::initialize_impl(JavaThread*)+0x5b1  (instanceKlass.cpp:1214)&lt;br/&gt;
V  [libjvm.so+0xb590aa]  LinkResolver::resolve_static_call(CallInfo&amp;amp;, LinkInfo const&amp;amp;, bool, JavaThread*)+0x19a  (linkResolver.cpp:1101)&lt;br/&gt;
V  [libjvm.so+0xb5978b]  LinkResolver::resolve_invoke(CallInfo&amp;amp;, Handle, constantPoolHandle const&amp;amp;, int, Bytecodes::Code, JavaThread*)+0x16b  (linkResolver.cpp:1689)&lt;br/&gt;
V  [libjvm.so+0x8cbc77]  InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code)+0x1b7  (interpreterRuntime.cpp:853)&lt;br/&gt;
V  [libjvm.so+0x8cc1f7]  InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)+0x37  (interpreterRuntime.cpp:980)&lt;br/&gt;
j  sun.nio.fs.UnixFileSystem.&amp;lt;init&amp;gt;(Lsun/nio/fs/UnixFileSystemProvider;Ljava/lang/String;)V+79 java.base&lt;br/&gt;
j  sun.nio.fs.LinuxFileSystem.&amp;lt;init&amp;gt;(Lsun/nio/fs/UnixFileSystemProvider;Ljava/lang/String;)V+3 java.base&lt;br/&gt;
j  sun.nio.fs.LinuxFileSystemProvider.newFileSystem(Ljava/lang/String;)Lsun/nio/fs/LinuxFileSystem;+6 java.base&lt;br/&gt;
j  sun.nio.fs.LinuxFileSystemProvider.newFileSystem(Ljava/lang/String;)Lsun/nio/fs/UnixFileSystem;+2 java.base&lt;br/&gt;
j  sun.nio.fs.UnixFileSystemProvider.&amp;lt;init&amp;gt;()V+9 java.base&lt;br/&gt;
j  sun.nio.fs.LinuxFileSystemProvider.&amp;lt;init&amp;gt;()V+1 java.base&lt;br/&gt;
j  sun.nio.fs.DefaultFileSystemProvider.&amp;lt;clinit&amp;gt;()V+4 java.base&lt;br/&gt;
v  ~StubRoutines::call_stub 0x00007f598fe6bc86&lt;br/&gt;
V  [libjvm.so+0x8d3a1b]  JavaCalls::call_helper(JavaValue*, methodHandle const&amp;amp;, JavaCallArguments*, JavaThread*)+0x2db  (javaCalls.cpp:415)&lt;br/&gt;
V  [libjvm.so+0x8ab0bf]  InstanceKlass::call_class_initializer(JavaThread*)+0x2ef  (instanceKlass.cpp:1630)&lt;br/&gt;
V  [libjvm.so+0x8ac021]  InstanceKlass::initialize_impl(JavaThread*)+0x5b1  (instanceKlass.cpp:1214)&lt;br/&gt;
V  [libjvm.so+0xb590aa]  LinkResolver::resolve_static_call(CallInfo&amp;amp;, LinkInfo const&amp;amp;, bool, JavaThread*)+0x19a  (linkResolver.cpp:1101)&lt;br/&gt;
V  [libjvm.so+0xb5978b]  LinkResolver::resolve_invoke(CallInfo&amp;amp;, Handle, constantPoolHandle const&amp;amp;, int, Bytecodes::Code, JavaThread*)+0x16b  (linkResolver.cpp:1689)&lt;br/&gt;
V  [libjvm.so+0x8cbc77]  InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code)+0x1b7  (interpreterRuntime.cpp:853)&lt;br/&gt;
V  [libjvm.so+0x8cc1f7]  InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)+0x37  (interpreterRuntime.cpp:980)&lt;br/&gt;
j  java.nio.file.FileSystems.getDefault()Ljava/nio/file/FileSystem;+10 java.base&lt;br/&gt;
j  java.nio.file.Path.of(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;+0 java.base&lt;br/&gt;
j  jdk.internal.module.ModuleBootstrap.finderFor(Ljava/lang/String;)Ljava/lang/module/ModuleFinder;+65 java.base&lt;br/&gt;
j  jdk.internal.module.ModuleBootstrap.boot2()Ljava/lang/ModuleLayer;+8 java.base&lt;br/&gt;
j  jdk.internal.module.ModuleBootstrap.boot()Ljava/lang/ModuleLayer;+64 java.base&lt;br/&gt;
j  java.lang.System.initPhase2(ZZ)I+0 java.base&lt;br/&gt;
v  ~StubRoutines::call_stub 0x00007f598fe6bc86&lt;br/&gt;
V  [libjvm.so+0x8d3a1b]  JavaCalls::call_helper(JavaValue*, methodHandle const&amp;amp;, JavaCallArguments*, JavaThread*)+0x2db  (javaCalls.cpp:415)&lt;br/&gt;
V  [libjvm.so+0x8d3deb]  JavaCalls::call_static(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x10b  (javaCalls.cpp:329)&lt;br/&gt;
V  [libjvm.so+0xeb9c0c]  Threads::create_vm(JavaVMInitArgs*, bool*)+0x76c  (threads.cpp:316)&lt;br/&gt;
V  [libjvm.so+0x97756e]  JNI_CreateJavaVM+0x4e  (jni.cpp:3581)&lt;br/&gt;
C  [libjli.so+0x3c2f]  JavaMain+0x8f  (java.c:1550)&lt;br/&gt;
C  [libjli.so+0x7ee9]  ThreadJavaMain+0x9  (java_md.c:642)&lt;br/&gt;
</description>
                <environment></environment>
        <key id="5129076">JDK-8331977</key>
            <summary>Crash: SIGSEGV in dlerror()</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="2" iconUrl="https://bugs.openjdk.org/images/jbsImages/p2.png">P2</priority>
                        <status id="6" iconUrl="https://bugs.openjdk.org/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="asemenyuk">Alexey Semenyuk</assignee>
                                    <reporter username="dholmes">David Holmes</reporter>
                        <labels>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>noreg-self</label>
                            <label>sn_170</label>
                            <label>sn_171</label>
                            <label>tier3</label>
                    </labels>
                <created>Wed, 8 May 2024 17:30:12 -0700</created>
                <updated>Tue, 23 Sep 2025 01:09:59 -0700</updated>
                            <resolved>Mon, 9 Dec 2024 06:05:09 -0800</resolved>
                                    <version>23</version>
                                    <fixVersion>23</fixVersion>
                                    <component>tools</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>14</watches>
                                                                                                                <comments>
                            <comment id="14741111" author="roboduke" created="Mon, 20 Jan 2025 07:23:24 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/1344&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/1344&lt;/a&gt;&lt;br/&gt;
Date: 2025-01-20 15:16:33 +0000</comment>
                            <comment id="14741109" author="goetz" created="Mon, 20 Jan 2025 07:17:32 -0800"  >Fix request [21u]&lt;br/&gt;
&lt;br/&gt;
I backport this for parity with 21.0.7-oracle.&lt;br/&gt;
No risk, only a test change&lt;br/&gt;
Resolved file that was moved.&lt;br/&gt;
Tests pass (linux). Win/Mac covered by SAP nightlies. SAP nightly testing passed.</comment>
                            <comment id="14729947" author="mbaesken" created="Mon, 9 Dec 2024 06:12:04 -0800"  >&amp;gt; We never reopen a bug that is resolved as Fixed with an associated commit. Please file a new bug.&lt;br/&gt;
&lt;br/&gt;
I created &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8345810&quot;&gt;https://bugs.openjdk.org/browse/JDK-8345810&lt;/a&gt; .</comment>
                            <comment id="14729944" author="kcr" created="Mon, 9 Dec 2024 06:05:09 -0800"  >[~mbaesken] We never reopen a bug that is resolved as Fixed with an associated commit. Please file a new bug.</comment>
                            <comment id="14729622" author="mbaesken" created="Mon, 9 Dec 2024 00:36:09 -0800"  >If you prefer I can open a separate JBS issue.  Crash looks similar and test triggering the crash is also MainClass .</comment>
                            <comment id="14729621" author="mbaesken" created="Mon, 9 Dec 2024 00:34:00 -0800"  >We saw a similar issue today  (linuxx86_64) :&lt;br/&gt;
jtreg test was tools/jpackage/share/MainClassTest.java&lt;br/&gt;
&lt;br/&gt;
#  SIGSEGV (0xb) at pc=0x00007fa8185d4a1a, pid=80754, tid=80764&lt;br/&gt;
#&lt;br/&gt;
# JRE version: OpenJDK Runtime Environment (25.0) (build 25-internal-adhoc.jenkinsi.jdk)&lt;br/&gt;
# Java VM: OpenJDK 64-Bit Server VM (25-internal-adhoc.jenkinsi.jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# C  [libdl.so.2+0x1a1a]  dlerror+0x18c&lt;br/&gt;
&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
C  [libdl.so.2+0x1a1a]  dlerror+0x18c&lt;br/&gt;
V  [libjvm.so+0xd3a070]  NativeLookup::lookup_style(methodHandle const&amp;amp;, char*, char const*, int, JavaThread*)+0x2d0  (nativeLookup.cpp:267)&lt;br/&gt;
V  [libjvm.so+0xd3a792]  NativeLookup::lookup_base(methodHandle const&amp;amp;, JavaThread*)+0xa2  (nativeLookup.cpp:335)&lt;br/&gt;
V  [libjvm.so+0xd3a97b]  NativeLookup::lookup(methodHandle const&amp;amp;, JavaThread*)+0x4b  (nativeLookup.cpp:422)&lt;br/&gt;
V  [libjvm.so+0x96d9b7]  InterpreterRuntime::prepare_native_call(JavaThread*, Method*)+0x77  (interpreterRuntime.cpp:1481)&lt;br/&gt;
j  sun.nio.fs.UnixNativeDispatcher.init()I+0 java.base&lt;br/&gt;
j  sun.nio.fs.UnixNativeDispatcher.&amp;lt;clinit&amp;gt;()V+5 java.base&lt;br/&gt;
v  ~StubRoutines::call_stub 0x00007fa7ffa32c86&lt;br/&gt;
V  [libjvm.so+0x977be0]  JavaCalls::call_helper(JavaValue*, methodHandle const&amp;amp;, JavaCallArguments*, JavaThread*)+0x2b0  (javaCalls.cpp:416)&lt;br/&gt;
V  [libjvm.so+0x94de1a]  InstanceKlass::call_class_initializer(JavaThread*)+0x2ea  (instanceKlass.cpp:1686)&lt;br/&gt;
V  [libjvm.so+0x9500ef]  InstanceKlass::initialize_impl(JavaThread*)+0x72f  (instanceKlass.cpp:1295)&lt;br/&gt;
V  [libjvm.so+0xc07760]  LinkResolver::resolve_static_call(CallInfo&amp;amp;, LinkInfo const&amp;amp;, bool, JavaThread*)+0x2e0  (linkResolver.cpp:1116)&lt;br/&gt;
V  [libjvm.so+0xc07e13]  LinkResolver::resolve_invoke(CallInfo&amp;amp;, Handle, constantPoolHandle const&amp;amp;, int, Bytecodes::Code, JavaThread*)+0x163  (linkResolver.cpp:1745)&lt;br/&gt;
V  [libjvm.so+0x96f37a]  InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code)+0x19a  (interpreterRuntime.cpp:824)&lt;br/&gt;
V  [libjvm.so+0x96f915]  InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)+0x105  (interpreterRuntime.cpp:1003)&lt;br/&gt;
j  sun.nio.fs.UnixFileSystem.&amp;lt;init&amp;gt;(Lsun/nio/fs/UnixFileSystemProvider;Ljava/lang/String;)V+79 java.base&lt;br/&gt;
j  sun.nio.fs.LinuxFileSystem.&amp;lt;init&amp;gt;(Lsun/nio/fs/UnixFileSystemProvider;Ljava/lang/String;)V+3 java.base&lt;br/&gt;
j  sun.nio.fs.LinuxFileSystemProvider.newFileSystem(Ljava/lang/String;)Lsun/nio/fs/LinuxFileSystem;+6 java.base&lt;br/&gt;
j  sun.nio.fs.LinuxFileSystemProvider.newFileSystem(Ljava/lang/String;)Lsun/nio/fs/UnixFileSystem;+2 java.base&lt;br/&gt;
j  sun.nio.fs.UnixFileSystemProvider.&amp;lt;init&amp;gt;()V+9 java.base&lt;br/&gt;
j  sun.nio.fs.LinuxFileSystemProvider.&amp;lt;init&amp;gt;()V+1 java.base&lt;br/&gt;
j  sun.nio.fs.DefaultFileSystemProvider.&amp;lt;clinit&amp;gt;()V+4 java.base&lt;br/&gt;
v  ~StubRoutines::call_stub 0x00007fa7ffa32c86&lt;br/&gt;
V  [libjvm.so+0x977be0]  JavaCalls::call_helper(JavaValue*, methodHandle const&amp;amp;, JavaCallArguments*, JavaThread*)+0x2b0  (javaCalls.cpp:416)&lt;br/&gt;
V  [libjvm.so+0x94de1a]  InstanceKlass::call_class_initializer(JavaThread*)+0x2ea  (instanceKlass.cpp:1686)&lt;br/&gt;
V  [libjvm.so+0x9500ef]  InstanceKlass::initialize_impl(JavaThread*)+0x72f  (instanceKlass.cpp:1295)&lt;br/&gt;
V  [libjvm.so+0xc07760]  LinkResolver::resolve_static_call(CallInfo&amp;amp;, LinkInfo const&amp;amp;, bool, JavaThread*)+0x2e0  (linkResolver.cpp:1116)&lt;br/&gt;
V  [libjvm.so+0xc07e13]  LinkResolver::resolve_invoke(CallInfo&amp;amp;, Handle, constantPoolHandle const&amp;amp;, int, Bytecodes::Code, JavaThread*)+0x163  (linkResolver.cpp:1745)&lt;br/&gt;
V  [libjvm.so+0x96f37a]  InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code)+0x19a  (interpreterRuntime.cpp:824)&lt;br/&gt;
V  [libjvm.so+0x96f915]  InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)+0x105  (interpreterRuntime.cpp:1003)&lt;br/&gt;
j  java.nio.file.FileSystems.getDefault()Ljava/nio/file/FileSystem;+10 java.base&lt;br/&gt;
j  java.nio.file.Path.of(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;+0 java.base&lt;br/&gt;
j  jdk.internal.module.ModuleBootstrap.finderFor(Ljava/lang/String;)Ljava/lang/module/ModuleFinder;+65 java.base&lt;br/&gt;
j  jdk.internal.module.ModuleBootstrap.boot2()Ljava/lang/ModuleLayer;+8 java.base&lt;br/&gt;
j  jdk.internal.module.ModuleBootstrap.boot()Ljava/lang/ModuleLayer;+64 java.base&lt;br/&gt;
j  java.lang.System.initPhase2(ZZ)I+0 java.base&lt;br/&gt;
v  ~StubRoutines::call_stub 0x00007fa7ffa32c86&lt;br/&gt;
V  [libjvm.so+0x977be0]  JavaCalls::call_helper(JavaValue*, methodHandle const&amp;amp;, JavaCallArguments*, JavaThread*)+0x2b0  (javaCalls.cpp:416)&lt;br/&gt;
V  [libjvm.so+0x978032]  JavaCalls::call_static(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x122  (javaCalls.cpp:324)&lt;br/&gt;
V  [libjvm.so+0x1060b8c]  Threads::create_vm(JavaVMInitArgs*, bool*)+0x80c  (threads.cpp:322)&lt;br/&gt;
V  [libjvm.so+0xa1bc2e]  JNI_CreateJavaVM+0x4e  (jni.cpp:3589)&lt;br/&gt;
C  [libjli.so+0x3bfb]  JavaMain+0x8b  (java.c:1495)&lt;br/&gt;
C  [libjli.so+0x7a99]  ThreadJavaMain+0x9  (java_md.c:649)</comment>
                            <comment id="14679796" author="asemenyuk" created="Fri, 7 Jun 2024 05:57:16 -0700"  >The standard Java launcher links with jli lib statically. jpackage app launcher links dynamically. Can this be related to the crash somehow?</comment>
                            <comment id="14679772" author="stuefe" created="Fri, 7 Jun 2024 04:24:37 -0700"  >One thing I just remembered was this: &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8328258&quot;&gt;https://bugs.openjdk.org/browse/JDK-8328258&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
Maybe there is an issue with glibc dlopen.</comment>
                            <comment id="14678766" author="asemenyuk" created="Tue, 4 Jun 2024 06:52:08 -0700"  >The fix is not addressing the root cause of the crash. It fixes a workaround for the crash introduced in jpackage tests in &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8269403&quot; title=&quot;Fix jpackage tests to gracefully handle jpackage app launcher crashes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8269403&quot;&gt;&lt;strike&gt;JDK-8269403&lt;/strike&gt;&lt;/a&gt;.</comment>
                            <comment id="14678227" author="stuefe" created="Mon, 3 Jun 2024 04:53:31 -0700"  >Did anyone successfully analyze this?&lt;br/&gt;
&lt;br/&gt;
What is the relation to the second hs-err file (from 24.5.) that shows a crash in free()?&lt;br/&gt;
&lt;br/&gt;
As [~dholmes] wrote, stack is weird on the first crash. One of the strangenesses is that we call into `os::dll_lookup` before calling into dlerror. Which is not inlined, so it should appear with its own frame in the stack, no?</comment>
                            <comment id="14677979" author="dukebot" created="Sat, 1 Jun 2024 05:34:04 -0700"  >Changeset: 24530022&lt;br/&gt;
Author:    Alexey Semenyuk &amp;lt;&lt;a href=&apos;mailto:asemenyuk@openjdk.org&apos;&gt;asemenyuk@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-06-01 12:31:25 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/24530022d066763f7573f5c6d2030a30dc55afa6&quot;&gt;https://git.openjdk.org/jdk/commit/24530022d066763f7573f5c6d2030a30dc55afa6&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14677949" author="roboduke" created="Fri, 31 May 2024 16:56:10 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/19502&quot;&gt;https://git.openjdk.org/jdk/pull/19502&lt;/a&gt;&lt;br/&gt;
Date: 2024-05-31 14:05:07 +0000</comment>
                            <comment id="14677660" author="asemenyuk" created="Thu, 30 May 2024 20:31:26 -0700"  >I modified jpackage app launcher to make it always crash and executed SimplePackageTest. It failed, but it tried to rerun the launcher a few times before giving up:&lt;br/&gt;
&lt;br/&gt;
[21:36:24.256] TRACE: Clearing PATH in environment&lt;br/&gt;
[21:36:24.257] TRACE: exec: Execute [jtreg_open_test_jdk_tools_jpackage_share_SimplePackageTest_java/scratch/0/./test/unpacked-rpm/opt/simplepackagetest/bin/SimplePackageTest](1); inherit I/O; in directory [./test]...&lt;br/&gt;
[21:36:24.347] TRACE: exec: Done. Exit code: 139&lt;br/&gt;
[21:36:29.348] TRACE: Clearing PATH in environment&lt;br/&gt;
[21:36:29.348] TRACE: exec: Execute [jtreg_open_test_jdk_tools_jpackage_share_SimplePackageTest_java/scratch/0/./test/unpacked-rpm/opt/simplepackagetest/bin/SimplePackageTest](1); inherit I/O; in directory [./test]...&lt;br/&gt;
[21:36:29.430] TRACE: exec: Done. Exit code: 139&lt;br/&gt;
[21:36:34.431] TRACE: Clearing PATH in environment&lt;br/&gt;
[21:36:34.431] TRACE: exec: Execute [jtreg_open_test_jdk_tools_jpackage_share_SimplePackageTest_java/scratch/0/./test/unpacked-rpm/opt/simplepackagetest/bin/SimplePackageTest](1); inherit I/O; in directory [./test]...&lt;br/&gt;
[21:36:34.515] TRACE: exec: Done. Exit code: 139&lt;br/&gt;
[21:36:39.516] ERROR: Expected [0]. Actual [139]: Check command [jtreg_open_test_jdk_tools_jpackage_share_SimplePackageTest_java/scratch/0/./test/unpacked-rpm/opt/simplepackagetest/bin/SimplePackageTest](1) exited with 0 code&lt;br/&gt;
...&lt;br/&gt;
java.lang.AssertionError: Expected [0]. Actual [139]: Check command [jtreg_open_test_jdk_tools_jpackage_share_SimplePackageTest_java/scratch/0/./test/unpacked-rpm/opt/simplepackagetest/bin/SimplePackageTest](1) exited with 0 code&lt;br/&gt;
	at jdk.jpackage.test.TKit.error(TKit.java:273)&lt;br/&gt;
	at jdk.jpackage.test.TKit.assertEquals(TKit.java:576)&lt;br/&gt;
	at jdk.jpackage.test.Executor$Result.assertExitCodeIs(Executor.java:186)&lt;br/&gt;
	at jdk.jpackage.test.Executor.executeAndRepeatUntilExitCode(Executor.java:265)&lt;br/&gt;
	at jdk.jpackage.test.HelloApp$AppOutputVerifier.executeAndVerifyOutput(HelloApp.java:426)&lt;br/&gt;
	at jdk.jpackage.test.HelloApp$AppOutputVerifier.executeAndVerifyOutput(HelloApp.java:440)&lt;br/&gt;
	at jdk.jpackage.test.HelloApp.executeLauncherAndVerifyOutput(HelloApp.java:323)&lt;br/&gt;
	at jdk.jpackage.test.PackageTest.lambda$configureHelloApp$22(PackageTest.java:335)&lt;br/&gt;
	at jdk.jpackage.test.Functional$ThrowingConsumer.lambda$toConsumer$0(Functional.java:41)&lt;br/&gt;
	at jdk.jpackage.test.PackageTest$Handler.lambda$verifyPackageInstalled$6(PackageTest.java:660)&lt;br/&gt;
&lt;br/&gt;
Then I executed MainClassTest test with the same build and it didn&amp;#39;t retry running the launcher:&lt;br/&gt;
&lt;br/&gt;
[22:55:51.197] TRACE: exec: Execute [jtreg_open_test_jdk_tools_jpackage_share_jdk_jpackage_tests_MainClassTest_java/scratch/0/./test.76578db5/output/MainClassTest/bin/MainClassTest](1); save output; in directory [./test.76578db5/output]...&lt;br/&gt;
[22:55:51.299] TRACE: exec: Done. Exit code: 139&lt;br/&gt;
[22:55:51.302] ERROR: Expected [1]. Actual [139]: Check command [jtreg_open_test_jdk_tools_jpackage_share_jdk_jpackage_tests_MainClassTest_java/scratch/0/./test.76578db5/output/MainClassTest/bin/MainClassTest](1) exited with 1 code&lt;br/&gt;
[22:55:51.303] [  FAILED  ] MainClassTest(modular=n; main-class=b; jar-main-class=b; jlink=n).test; checks=16&lt;br/&gt;
...&lt;br/&gt;
java.lang.AssertionError: Expected [1]. Actual [139]: Check command [jtreg_open_test_jdk_tools_jpackage_share_jdk_jpackage_tests_MainClassTest_java/scratch/0/./test.76578db5/output/MainClassTest/bin/MainClassTest](1) exited with 1 code&lt;br/&gt;
	at jdk.jpackage.test.TKit.error(TKit.java:273)&lt;br/&gt;
	at jdk.jpackage.test.TKit.assertEquals(TKit.java:576)&lt;br/&gt;
	at jdk.jpackage.test.Executor$Result.assertExitCodeIs(Executor.java:186)&lt;br/&gt;
	at jdk.jpackage.test.Executor.execute(Executor.java:224)&lt;br/&gt;
	at jdk.jpackage.tests.MainClassTest.test(MainClassTest.java:244)&lt;br/&gt;
&lt;br/&gt;
The stack trace is different, there is no jdk.jpackage.test.Executor.executeAndRepeatUntilExitCode() call in case of MainClassTest test.&lt;br/&gt;
MainClassTest is not using jdk.jpackage.test.HelloApp$AppOutputVerifier helper class to run app launchers with retries [1]. &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8269403&quot; title=&quot;Fix jpackage tests to gracefully handle jpackage app launcher crashes&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8269403&quot;&gt;&lt;strike&gt;JDK-8269403&lt;/strike&gt;&lt;/a&gt; was supposed to address all executions of app launchers, but it only addressed those made through jdk.jpackage.test.HelloApp$AppOutputVerifier class.&lt;br/&gt;
&lt;br/&gt;
Shall use jdk.jpackage.test.HelloApp$AppOutputVerifier class in MainClassTest test to fix the issue.&lt;br/&gt;
&lt;br/&gt;
[1] &lt;a href=&quot;https://github.com/openjdk/jdk/blob/1b7d59f171d0e2a3bdd234cddffac548b1f8ba57/test/jdk/tools/jpackage/share/jdk/jpackage/tests/MainClassTest.java#L240&quot;&gt;https://github.com/openjdk/jdk/blob/1b7d59f171d0e2a3bdd234cddffac548b1f8ba57/test/jdk/tools/jpackage/share/jdk/jpackage/tests/MainClassTest.java#L240&lt;/a&gt;</comment>
                            <comment id="14676043" author="coleenp" created="Fri, 24 May 2024 09:09:20 -0700"  >I can&amp;#39;t tell what this test does except it runs jpackage a lot of times and one of the times it can&amp;#39;t load something from a native library.  I&amp;#39;m trying to reproduce it with logging.</comment>
                            <comment id="14676039" author="asemenyuk" created="Fri, 24 May 2024 09:00:12 -0700"  >I don&amp;#39;t see jpackage calls in the stack. It looks like it crashes before the test is executed.&lt;br/&gt;
&lt;br/&gt;
It doesn&amp;#39;t look like jpackage issue.</comment>
                            <comment id="14675974" author="coleenp" created="Fri, 24 May 2024 04:53:27 -0700"  >You&amp;#39;re right. That&amp;#39;s even stranger. Since it&amp;#39;s only this test, I think we should reassign it.</comment>
                            <comment id="14675881" author="dholmes" created="Thu, 23 May 2024 23:03:22 -0700"  >The actual failure is quite bizarre because dlerror should be fail-proof from a usage perspective. The actual call is likely in here:&lt;br/&gt;
&lt;br/&gt;
void* os::dll_lookup(void* handle, const char* name) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;::dlerror(); // Clear any previous error&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void* ret = ::dlsym(handle, name);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (ret == nullptr) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const char* tmp = ::dlerror();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// It is possible that we found a NULL symbol, hence no error.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (tmp != nullptr) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;log_debug(os)(&amp;quot;Symbol %s not found in dll: %s&amp;quot;, name, tmp);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return ret;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
I think only a general corruption problem could cause dlerror to fail.</comment>
                            <comment id="14675798" author="coleenp" created="Thu, 23 May 2024 15:00:22 -0700"  >This only fails with the &amp;quot;Open&amp;quot; JDK build.  I can&amp;#39;t reproduce it with logging and the core/symbol files are no good.  It appears that a dll load is failing here:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;const char* jni_name = compute_complete_jni_name(pure_name, long_name, args_size, os_style);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Handle loader(THREAD, method-&amp;gt;method_holder()-&amp;gt;class_loader());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (loader.is_null()) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;entry = lookup_special_native(jni_name);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (entry == nullptr) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;log_info(os, bot)(&amp;quot;loading %s&amp;quot;, jni_name);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;entry = (address) os::dll_lookup(os::native_java_library(), jni_name);  &amp;lt;===== Here&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (entry != nullptr) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return entry;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
So far hasn&amp;#39;t failed in 200 tries.  I checked for ResourceMarks in the code that could deallocate memory.&lt;br/&gt;
&lt;br/&gt;
I don&amp;#39;t really follow what the test is doing.  Maybe we can reassign it to tools (jpackage) and they can narrow down the failing test case?  It&amp;#39;s almost like the library was deleted while the test was running.</comment>
                            <comment id="14673404" author="mseledtsov" created="Tue, 14 May 2024 11:10:13 -0700"  >ILW = HLH = P2</comment>
                            <comment id="14672738" author="dholmes" created="Sun, 12 May 2024 14:25:57 -0700"  >A slightly different failure mode:&lt;br/&gt;
&lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  SIGSEGV (0xb) at pc=0x00007f666a52ffbe, pid=21286, tid=21296&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (23.0+23) (build 23-ea+23-1857)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (23-ea+23-1857, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# C  [libc.so.6+0x80fbe]&lt;br/&gt;
[timeout occurred during error reporting in step &amp;quot;printing problematic frame&amp;quot;] after 30 s.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5148109">JDK-8347780</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5148770">JDK-8348341</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5171369">JDK-8368171</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5052726">JDK-8269403</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5145739">JDK-8345810</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5044352">JDK-8263466</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5140215">JDK-8341458</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="109439" name="hs_err_pid7219.log" size="73239" author="coleenp" created="Fri, 24 May 2024 06:06:05 -0700"/>
                            <attachment id="109448" name="hs_err_pid8736.log" size="68065" author="asemenyuk" created="Fri, 24 May 2024 11:36:10 -0700"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17023"><![CDATA[linux]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i36a4r:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17357"><![CDATA[b26]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="2192"><![CDATA[jpackage]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10100" key="com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons">
                        <customfieldname>Verification</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17000"><![CDATA[Verified]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>