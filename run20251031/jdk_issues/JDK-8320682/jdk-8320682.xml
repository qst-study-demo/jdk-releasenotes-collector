<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Sat Sep 27 08:57:43 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8320682] [AArch64] C1 compilation fails with &quot;Field too big for insn&quot;</title>
                <link>https://bugs.openjdk.org/browse/JDK-8320682</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>### Failure analysis ###&lt;br/&gt;
The issue is due to using PC-relative addressing (the aarch64 adr instruction) with an (unusually) large non-nmethod code heap size. Attempting to load the address of a constant that is out of range triggers the assert/guarantee.&lt;br/&gt;
&lt;br/&gt;
### Original report ###&lt;br/&gt;
In the tier 6 test run that included the fix for &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8319700&quot; title=&quot;[AArch64] C2 compilation fails with &amp;quot;Field too big for insn&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8319700&quot;&gt;&lt;strike&gt;JDK-8319700&lt;/strike&gt;&lt;/a&gt; we saw the same failure.&lt;br/&gt;
&lt;br/&gt;
Test: compiler/arguments/TestC1Globals.java#id4	&lt;br/&gt;
&lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S10903/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0724edac-4f9d-4b23-a291-90fd75eb8a31/runs/365cdd81-6ab1-4745-a986-7340646f3a7b/workspace/open/src/hotspot/cpu/aarch64/assembler_aarch64.hpp:265), pid=2092794, tid=2092814&lt;br/&gt;
#  guarantee(chk == -1 || chk == 0) failed: Field too big for insn&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (22.0+26) (fastdebug build 22-ea+26-2029)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 22-ea+26-2029, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0x5b9958]  Assembler::adr(Register, unsigned char*)+0x148&lt;br/&gt;
#&lt;br/&gt;
Host: AArch64, 8 cores, 30G, Oracle Linux Server release 8.8&lt;br/&gt;
Time: Fri Nov 24 01:16:05 2023 UTC elapsed time: 2.811199 seconds (0d 0h 0m 2s)&lt;br/&gt;
&lt;br/&gt;
---------------  T H R E A D  ---------------&lt;br/&gt;
&lt;br/&gt;
Current thread (0x0000ffff7837e0a0):  JavaThread &amp;quot;C1 CompilerThread0&amp;quot; daemon [_thread_in_native, id=2092814, stack(0x0000ffff23e02000,0x0000ffff24000000) (2040K)]&lt;br/&gt;
&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C1:2811  242    b  3       java.util.HashMap::putMapEntries (170 bytes)&lt;br/&gt;
&lt;br/&gt;
Stack: [0x0000ffff23e02000,0x0000ffff24000000],  sp=0x0000ffff23ffbc00,  free space=2023k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x5b9958]  Assembler::adr(Register, unsigned char*)+0x148  (assembler_aarch64.hpp:265)&lt;br/&gt;
V  [libjvm.so+0x698ff8]  LIR_Assembler::const2reg(LIR_Opr, LIR_Opr, LIR_PatchCode, CodeEmitInfo*)+0x3b8  (c1_LIRAssembler_aarch64.cpp:588)&lt;br/&gt;
V  [libjvm.so+0x68c194]  LIR_Assembler::move_op(LIR_Opr, LIR_Opr, BasicType, LIR_PatchCode, CodeEmitInfo*, bool, bool)+0x310  (c1_LIRAssembler.cpp:816)&lt;br/&gt;
V  [libjvm.so+0x68da68]  LIR_Assembler::emit_lir_list(LIR_List*)+0xf8  (c1_LIRAssembler.cpp:304)&lt;br/&gt;
V  [libjvm.so+0x68e6f0]  LIR_Assembler::emit_code(BlockList*)+0x270  (c1_LIRAssembler.cpp:269)&lt;br/&gt;
V  [libjvm.so+0x63720c]  Compilation::emit_code_body()+0x14c  (c1_Compilation.cpp:358)&lt;br/&gt;
V  [libjvm.so+0x6377d0]  Compilation::compile_java_method()+0x390  (c1_Compilation.cpp:421)&lt;br/&gt;
V  [libjvm.so+0x638060]  Compilation::compile_method()+0x1fc  (c1_Compilation.cpp:482)&lt;br/&gt;
V  [libjvm.so+0x6386ec]  Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)+0x25c  (c1_Compilation.cpp:612)&lt;br/&gt;
V  [libjvm.so+0x63a464]  Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0xa4  (c1_Compiler.cpp:258)&lt;br/&gt;
V  [libjvm.so+0x8f2b44]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x7e0  (compileBroker.cpp:2305)&lt;br/&gt;
V  [libjvm.so+0x8f372c]  CompileBroker::compiler_thread_loop()+0x598  (compileBroker.cpp:1964)&lt;br/&gt;
V  [libjvm.so+0xd6b248]  JavaThread::thread_main_inner()+0xe4  (javaThread.cpp:720)&lt;br/&gt;
V  [libjvm.so+0x159a1e0]  Thread::call_run()+0xac  (thread.cpp:220)&lt;br/&gt;
V  [libjvm.so+0x130d4cc]  thread_native_entry(Thread*)+0x12c  (os_linux.cpp:787)&lt;br/&gt;
C  [libpthread.so.0+0x7928]  start_thread+0x188</description>
                <environment></environment>
        <key id="5115383">JDK-8320682</key>
            <summary>[AArch64] C1 compilation fails with &quot;Field too big for insn&quot;</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="dlunden">Daniel Lunden</assignee>
                                    <reporter username="dholmes">David Holmes</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>c1</label>
                            <label>hgupdate-sync</label>
                            <label>intermittent</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>oracle-triage-22</label>
                            <label>regression</label>
                            <label>tier6</label>
                            <label>tier7</label>
                    </labels>
                <created>Thu, 23 Nov 2023 18:54:08 -0800</created>
                <updated>Tue, 15 Apr 2025 10:46:13 -0700</updated>
                            <resolved>Thu, 14 Dec 2023 05:11:56 -0800</resolved>
                                    <version>17</version>
                    <version>21</version>
                    <version>22</version>
                    <version>23</version>
                                    <fixVersion>23</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                                                                <comments>
                            <comment id="14769873" author="roboduke" created="Mon, 14 Apr 2025 09:58:08 -0700"  >[jdk17u-fix-request] Approval Request from Boris&lt;br/&gt;
The issue is applicable to jdk17u as well. The change is safe and well tested.</comment>
                            <comment id="14766799" author="roboduke" created="Thu, 3 Apr 2025 07:17:32 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/3432&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/3432&lt;/a&gt;&lt;br/&gt;
Date: 2025-04-03 13:53:32 +0000</comment>
                            <comment id="14709411" author="roboduke" created="Tue, 1 Oct 2024 03:00:03 -0700"  >[jdk21u-fix-request] Approval Request from Boris&lt;br/&gt;
The backport fixes C1 internal error caused by adr limit being broken by too large NMethodSizeLimit option value. The change is safe and simple. Let us do it.</comment>
                            <comment id="14703109" author="roboduke" created="Thu, 5 Sep 2024 10:32:26 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/956&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/956&lt;/a&gt;&lt;br/&gt;
Date: 2024-09-05 17:24:26 +0000</comment>
                            <comment id="14634686" author="dcubed" created="Fri, 15 Dec 2023 08:23:10 -0800"  >The fix for this bug is integrated in jdk-22+29-2277.</comment>
                            <comment id="14634597" author="roboduke" created="Fri, 15 Dec 2023 03:03:06 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk22/pull/15&quot;&gt;https://git.openjdk.org/jdk22/pull/15&lt;/a&gt;&lt;br/&gt;
Date: 2023-12-15 10:55:48 +0000</comment>
                            <comment id="14634316" author="dcubed" created="Thu, 14 Dec 2023 06:41:22 -0800"  >The fix for this bug is integrated in jdk-23+2-76.</comment>
                            <comment id="14634282" author="dukebot" created="Thu, 14 Dec 2023 05:11:54 -0800"  >Changeset: 69014cd5&lt;br/&gt;
Author:    Daniel Lund&amp;#xE9;n &amp;lt;&lt;a href=&apos;mailto:daniel.lunden@oracle.com&apos;&gt;daniel.lunden@oracle.com&lt;/a&gt;&amp;gt;&lt;br/&gt;
Committer: Roberto Casta&amp;#xF1;eda Lozano &amp;lt;&lt;a href=&apos;mailto:rcastanedalo@openjdk.org&apos;&gt;rcastanedalo@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-12-14 13:09:39 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/69014cd55b59a0a63f4918fad575a6887640573e&quot;&gt;https://git.openjdk.org/jdk/commit/69014cd55b59a0a63f4918fad575a6887640573e&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14634061" author="dcubed" created="Wed, 13 Dec 2023 10:42:35 -0800"  >Here&amp;#39;s a log file snippet for the jdk-23+2-54-tier6 sighting:&lt;br/&gt;
&lt;br/&gt;
compiler/arguments/TestC1Globals.java#id4&lt;br/&gt;
&lt;br/&gt;
#section:main&lt;br/&gt;
----------messages:(6/391)----------&lt;br/&gt;
command: main -XX:NMethodSizeLimit=224001703 -XX:+UseTransparentHugePages compiler.arguments.TestC1Globals&lt;br/&gt;
reason: User specified action: run main/othervm -XX:NMethodSizeLimit=224001703 -XX:+UseTransparentHugePages compiler.arguments.TestC1Globals &lt;br/&gt;
started: Wed Dec 13 14:35:08 UTC 2023&lt;br/&gt;
Mode: othervm [/othervm specified]&lt;br/&gt;
finished: Wed Dec 13 14:35:15 UTC 2023&lt;br/&gt;
elapsed time (seconds): 6.736&lt;br/&gt;
----------configuration:(0/0)----------&lt;br/&gt;
----------System.out:(22/2126)----------&lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9728/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/2011e6f1-c154-4e7b-a106-62868f9fed7f/runs/c20fe407-979a-4d94-830f-d1ed2bcd09bd/workspace/open/src/hotspot/cpu/aarch64/assembler_aarch64.hpp:265), pid=2089753, tid=2089770&lt;br/&gt;
#  guarantee(chk == -1 || chk == 0) failed: Field too big for insn&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (23.0+2) (fastdebug build 23-ea+2-54)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 23-ea+2-54, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0x5bbfd8]  Assembler::adr(Register, unsigned char*)+0x148&lt;br/&gt;
#&lt;br/&gt;
# Core dump will be written. Default location: Core dumps may be processed with &amp;quot;/opt/core.sh %p&amp;quot; (or dumping to /opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S10011/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/250aa595-6773-4cc1-81de-08967216407c/runs/7ddb3529-b2bb-4157-968a-5a9e39c4b8ba/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_not_fast_compiler/scratch/1/core.2089753)&lt;br/&gt;
#&lt;br/&gt;
# An error report file with more information is saved as:&lt;br/&gt;
# /opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S10011/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/250aa595-6773-4cc1-81de-08967216407c/runs/7ddb3529-b2bb-4157-968a-5a9e39c4b8ba/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_not_fast_compiler/scratch/1/hs_err_pid2089753.log&lt;br/&gt;
#&lt;br/&gt;
# Compiler replay data is saved as:&lt;br/&gt;
# /opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S10011/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/250aa595-6773-4cc1-81de-08967216407c/runs/7ddb3529-b2bb-4157-968a-5a9e39c4b8ba/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_not_fast_compiler/scratch/1/replay_pid2089753.log&lt;br/&gt;
#&lt;br/&gt;
# If you would like to submit a bug report, please visit:&lt;br/&gt;
#   &lt;a href=&quot;https://bugreport.java.com/bugreport/crash.jsp&quot;&gt;https://bugreport.java.com/bugreport/crash.jsp&lt;/a&gt;&lt;br/&gt;
#&lt;br/&gt;
----------System.err:(0/0)----------&lt;br/&gt;
----------rerun:(44/6451)*----------&lt;br/&gt;
&lt;br/&gt;
&amp;lt;snip&amp;gt;&lt;br/&gt;
&lt;br/&gt;
result: Failed. Unexpected exit from test [exit code: 134]&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
And here&amp;#39;s the crashing thread&amp;#39;s stack:&lt;br/&gt;
&lt;br/&gt;
---------------  T H R E A D  ---------------&lt;br/&gt;
&lt;br/&gt;
Current thread (0x0000ffffa8380a10):  JavaThread &amp;quot;C1 CompilerThread0&amp;quot; daemon [_thread_in_native, id=2089770, stack(0x0000ffff8c007000,0x0000ffff8c205000) (2040K)]&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C1:1620  244    b  3       java.util.HashMap::putMapEntries (170 bytes)&lt;br/&gt;
&lt;br/&gt;
Stack: [0x0000ffff8c007000,0x0000ffff8c205000],  sp=0x0000ffff8c200c00,  free space=2023k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x5bbfd8]  Assembler::adr(Register, unsigned char*)+0x148  (assembler_aarch64.hpp:265)&lt;br/&gt;
V  [libjvm.so+0x69b388]  LIR_Assembler::const2reg(LIR_Opr, LIR_Opr, LIR_PatchCode, CodeEmitInfo*)+0x3b8  (c1_LIRAssembler_aarch64.cpp:588)&lt;br/&gt;
V  [libjvm.so+0x68f0b4]  LIR_Assembler::move_op(LIR_Opr, LIR_Opr, BasicType, LIR_PatchCode, CodeEmitInfo*, bool, bool)+0x310  (c1_LIRAssembler.cpp:816)&lt;br/&gt;
V  [libjvm.so+0x690988]  LIR_Assembler::emit_lir_list(LIR_List*)+0xf8  (c1_LIRAssembler.cpp:304)&lt;br/&gt;
V  [libjvm.so+0x691610]  LIR_Assembler::emit_code(BlockList*)+0x270  (c1_LIRAssembler.cpp:269)&lt;br/&gt;
V  [libjvm.so+0x63986c]  Compilation::emit_code_body()+0x14c  (c1_Compilation.cpp:358)&lt;br/&gt;
V  [libjvm.so+0x639e30]  Compilation::compile_java_method()+0x390  (c1_Compilation.cpp:421)&lt;br/&gt;
V  [libjvm.so+0x63a6c0]  Compilation::compile_method()+0x1fc  (c1_Compilation.cpp:482)&lt;br/&gt;
V  [libjvm.so+0x63ad4c]  Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)+0x25c  (c1_Compilation.cpp:612)&lt;br/&gt;
V  [libjvm.so+0x63cac4]  Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0xa4  (c1_Compiler.cpp:257)&lt;br/&gt;
V  [libjvm.so+0x8f3714]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x7e0  (compileBroker.cpp:2299)&lt;br/&gt;
V  [libjvm.so+0x8f42fc]  CompileBroker::compiler_thread_loop()+0x598  (compileBroker.cpp:1958)&lt;br/&gt;
V  [libjvm.so+0xd746b8]  JavaThread::thread_main_inner()+0xe4  (javaThread.cpp:720)&lt;br/&gt;
V  [libjvm.so+0x15abd80]  Thread::call_run()+0xac  (thread.cpp:220)&lt;br/&gt;
V  [libjvm.so+0x131e9cc]  thread_native_entry(Thread*)+0x12c  (os_linux.cpp:789)&lt;br/&gt;
C  [libpthread.so.0+0x7928]  start_thread+0x188</comment>
                            <comment id="14631022" author="roboduke" created="Mon, 4 Dec 2023 06:27:16 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/16951&quot;&gt;https://git.openjdk.org/jdk/pull/16951&lt;/a&gt;&lt;br/&gt;
Date: 2023-12-04 14:19:10 +0000</comment>
                            <comment id="14630279" author="chagedorn" created="Thu, 30 Nov 2023 03:36:38 -0800"  >Can also be triggered like this:&lt;br/&gt;
$ java -XX:CompileOnly=java.util.HashMap::putMapEntries -Xcomp -XX:NMethodSizeLimit=224001703 --version</comment>
                            <comment id="14629006" author="chagedorn" created="Mon, 27 Nov 2023 02:20:53 -0800"  >I could trace it back to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8318817&quot; title=&quot;Could not reserve enough space in CodeHeap &amp;#39;profiled nmethods&amp;#39; (0K)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8318817&quot;&gt;&lt;strike&gt;JDK-8318817&lt;/strike&gt;&lt;/a&gt;. Before that, the VM just exits with:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Error occurred during initialization of VM&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Could not reserve enough space in CodeHeap &amp;#39;profiled nmethods&amp;#39; (0K)&lt;br/&gt;
&lt;br/&gt;
The problem might be that C1 directly takes NMethodSizeLimit as code buffer size:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;static uint desired_max_code_buffer_size() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return (uint)NMethodSizeLimit;  // default 64K&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
Which could then be too large to use an immediate for the assembly instruction. But that&amp;#39;s just a guess.&lt;br/&gt;
&lt;br/&gt;
A workaround could be to use a smaller NMethodSizeLimit. A quick binary search with the replay file showed that NMethodSizeLimit values larger than 1049455 trigger the assertion. &lt;br/&gt;
&lt;br/&gt;
[~dlunden] can you have a look?</comment>
                            <comment id="14628989" author="chagedorn" created="Mon, 27 Nov 2023 01:02:51 -0800"  >Can be reproduced with the attached replay file replay.log:&lt;br/&gt;
$ java -XX:NMethodSizeLimit=224001703 -XX:+ReplayCompiles -XX:+ReplayIgnoreInitErrors -XX:ReplayDataFile=replay.log</comment>
                            <comment id="14628981" author="chagedorn" created="Mon, 27 Nov 2023 00:39:30 -0800"  >Fails intermittently (6 out of 50 runs of TestC1Globals.java, run with -Xcomp -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:+TieredCompilation) </comment>
                            <comment id="14628929" author="thartmann" created="Sun, 26 Nov 2023 22:21:07 -0800"  >[~chagedorn] It&amp;#39;s definitely unrelated to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8319700&quot; title=&quot;[AArch64] C2 compilation fails with &amp;quot;Field too big for insn&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8319700&quot;&gt;&lt;strike&gt;JDK-8319700&lt;/strike&gt;&lt;/a&gt;.</comment>
                            <comment id="14628846" author="chagedorn" created="Fri, 24 Nov 2023 07:56:46 -0800"  >[~aboldtch] Since you fixed &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8319700&quot; title=&quot;[AArch64] C2 compilation fails with &amp;quot;Field too big for insn&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8319700&quot;&gt;&lt;strike&gt;JDK-8319700&lt;/strike&gt;&lt;/a&gt;, can you also have a look at that even though it seems unrelated?</comment>
                            <comment id="14628845" author="chagedorn" created="Fri, 24 Nov 2023 07:55:28 -0800"  >ILW = Same as &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8310844&quot; title=&quot;[AArch64] C1 compilation fails because monitor offset in OSR buffer is too large for immediate&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8310844&quot;&gt;&lt;strike&gt;JDK-8310844&lt;/strike&gt;&lt;/a&gt; = P3</comment>
                            <comment id="14628775" author="thartmann" created="Thu, 23 Nov 2023 23:23:24 -0800"  >I don&amp;#39;t think this is related to or caused by &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8319700&quot; title=&quot;[AArch64] C2 compilation fails with &amp;quot;Field too big for insn&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8319700&quot;&gt;&lt;strike&gt;JDK-8319700&lt;/strike&gt;&lt;/a&gt; because that fix is ZGC specific. This one happens with G1. It might be related to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8310844&quot; title=&quot;[AArch64] C1 compilation fails because monitor offset in OSR buffer is too large for immediate&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8310844&quot;&gt;&lt;strike&gt;JDK-8310844&lt;/strike&gt;&lt;/a&gt;.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5116910">JDK-8321995</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5117601">JDK-8322556</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5141853">JDK-8342516</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5155944">JDK-8354685</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5104089">JDK-8310844</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5113192">JDK-8318817</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5114295">JDK-8319700</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="107332" name="replay.log" size="133562" author="chagedorn" created="Mon, 27 Nov 2023 01:02:23 -0800"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="19300"><![CDATA[aarch64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17023"><![CDATA[linux]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i33zbf:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17305"><![CDATA[b03]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>