<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Sat Sep 27 08:53:09 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8308429] jvmti/StopThread/stopthrd007 failed with &quot;NoClassDefFoundError: Could not initialize class jdk.internal.misc.VirtualThreads&quot;</title>
                <link>https://bugs.openjdk.org/browse/JDK-8308429</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>The following test failed in the JDK21 CI:&lt;br/&gt;
&lt;br/&gt;
vmTestbase/nsk/jvmti/StopThread/stopthrd007/TestDescription.java&lt;br/&gt;
&lt;br/&gt;
Here&amp;#39;s a snippet from the log file:&lt;br/&gt;
&lt;br/&gt;
#section:main&lt;br/&gt;
----------messages:(8/397)----------&lt;br/&gt;
command: main -agentlib:stopthrd007=-waittime=5 nsk.jvmti.StopThread.stopthrd007&lt;br/&gt;
reason: User specified action: run main/othervm/native -agentlib:stopthrd007=-waittime=5 nsk.jvmti.StopThread.stopthrd007 &lt;br/&gt;
started: Fri May 19 03:02:45 UTC 2023&lt;br/&gt;
Mode: othervm [/othervm specified]&lt;br/&gt;
Timeout information:&lt;br/&gt;
--- Timeout information end.&lt;br/&gt;
finished: Fri May 19 03:11:49 UTC 2023&lt;br/&gt;
elapsed time (seconds): 544.51&lt;br/&gt;
----------configuration:(0/0)----------&lt;br/&gt;
----------System.out:(1/26)----------&lt;br/&gt;
Timeout refired 480 times&lt;br/&gt;
----------System.err:(11/1002)----------&lt;br/&gt;
Exception in thread &amp;quot;DebuggeeWaitingThread&amp;quot; Exception in thread &amp;quot;DebuggeeSleepingThread&amp;quot; Exception in thread &amp;quot;DebuggeeRunningThread&amp;quot; java.lang.ThreadDeath&lt;br/&gt;
java.lang.NoClassDefFoundError: Could not initialize class jdk.internal.misc.VirtualThreads&lt;br/&gt;
	at java.base/java.util.concurrent.locks.LockSupport.unpark(LockSupport.java:179)&lt;br/&gt;
	at java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer.java:645)&lt;br/&gt;
	at java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer.release(AbstractQueuedSynchronizer.java:1060)&lt;br/&gt;
	at java.base/java.util.concurrent.locks.ReentrantLock.unlock(ReentrantLock.java:494)&lt;br/&gt;
	at nsk.share.Wicket.unlock(Wicket.java:226)&lt;br/&gt;
	at nsk.jvmti.StopThread.stopthrd007ThreadRunning.run(stopthrd007.java:195)&lt;br/&gt;
Caused by: java.lang.ExceptionInInitializerError: Exception java.lang.ThreadDeath [in thread &amp;quot;DebuggeeRunningThread&amp;quot;]&lt;br/&gt;
&lt;br/&gt;
Exception: java.lang.NoClassDefFoundError thrown from the UncaughtExceptionHandler in thread &amp;quot;DebuggeeRunningThread&amp;quot;&lt;br/&gt;
----------rerun:(42/8469)*----------&lt;br/&gt;
</description>
                <environment></environment>
        <key id="5101333">JDK-8308429</key>
            <summary>jvmti/StopThread/stopthrd007 failed with &quot;NoClassDefFoundError: Could not initialize class jdk.internal.misc.VirtualThreads&quot;</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="lmesnik">Leonid Mesnik</assignee>
                                    <reporter username="dcubed">Daniel Daugherty</reporter>
                        <labels>
                            <label>intermittent</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>loom</label>
                            <label>noreg-self</label>
                            <label>tier5</label>
                    </labels>
                <created>Fri, 19 May 2023 08:03:16 -0700</created>
                <updated>Mon, 11 Nov 2024 00:57:39 -0800</updated>
                            <resolved>Tue, 3 Oct 2023 08:04:33 -0700</resolved>
                                    <version>21</version>
                                    <fixVersion>22</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>6</watches>
                                                                                                                <comments>
                            <comment id="14719952" author="roboduke" created="Thu, 7 Nov 2024 01:51:40 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/1134&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/1134&lt;/a&gt;&lt;br/&gt;
Date: 2024-11-07 09:45:36 +0000</comment>
                            <comment id="14719949" author="goetz" created="Thu, 7 Nov 2024 01:44:31 -0800"  >Fix request [21u]&lt;br/&gt;
&lt;br/&gt;
I backport this for parity with 21.0.6-oracle.&lt;br/&gt;
No risk, only a test change&lt;br/&gt;
Clean backport.&lt;br/&gt;
Test passes. SAP nightly testing passed.</comment>
                            <comment id="14692948" author="alanb" created="Fri, 26 Jul 2024 02:58:59 -0700"  >The changes in &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8336254&quot; title=&quot;Virtual thread implementation + test updates&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8336254&quot;&gt;&lt;strike&gt;JDK-8336254&lt;/strike&gt;&lt;/a&gt; have removed jdk.internal.misc.VirtualThreads and changed jdk.internal.event.VirtualThreadPinnedEvent to be eagerly loaded so remove the class loading of supporting classes in critical code.</comment>
                            <comment id="14615521" author="dukebot" created="Tue, 3 Oct 2023 08:04:32 -0700"  >Changeset: 0e501f66&lt;br/&gt;
Author:    Leonid Mesnik &amp;lt;&lt;a href=&apos;mailto:lmesnik@openjdk.org&apos;&gt;lmesnik@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-10-03 15:03:21 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/0e501f66dfc52a0e049d4fa39c1fcd24f1f2ee4b&quot;&gt;https://git.openjdk.org/jdk/commit/0e501f66dfc52a0e049d4fa39c1fcd24f1f2ee4b&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14614768" author="roboduke" created="Thu, 28 Sep 2023 10:08:47 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/15966&quot;&gt;https://git.openjdk.org/jdk/pull/15966&lt;/a&gt;&lt;br/&gt;
Date: 2023-09-28 17:00:00 +0000</comment>
                            <comment id="14614586" author="lmesnik" created="Thu, 28 Sep 2023 00:45:37 -0700"  >Here are details:&lt;br/&gt;
Test starts 3 threads: DebuggeeWaitingThread, DebuggeeRunningThread and DebuggeeSleepingThread.&lt;br/&gt;
They use nsk.share.Wicket for synchronization. This &amp;#39;Wicket&amp;#39; uses ReentrantLock and Condition for implementation.&lt;br/&gt;
&lt;br/&gt;
main virtual thread uses &amp;#39;Wicket.waitFor()&amp;#39;  which is described here:&lt;br/&gt;
&amp;nbsp;public void waitFor() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lock.lock();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;++waiters;            &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while (count &amp;gt; 0) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;condition.await();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} catch (InterruptedException e) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;--waiters;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} finally {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lock.unlock();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
and other threads use &lt;br/&gt;
public void unlock() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lock.lock();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try {         &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;--count;         &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (count == 0) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;condition.signalAll();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} finally {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;lock.unlock();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
So once threads call unlock the main thread got signal and start executing the &amp;#39;lock.unlock();&amp;#39;  as well as the last TestedThread.&lt;br/&gt;
&lt;br/&gt;
The stack is&lt;br/&gt;
at java.base/java.util.concurrent.locks.LockSupport.unpark(LockSupport.java:179)&lt;br/&gt;
	at java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer.java:645)&lt;br/&gt;
	at java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer.release(AbstractQueuedSynchronizer.java:1060)&lt;br/&gt;
	at java.base/java.util.concurrent.locks.ReentrantLock.unlock(ReentrantLock.java:494)&lt;br/&gt;
	at nsk.share.Wicket.unlock(Wicket.java:226&lt;br/&gt;
&lt;br/&gt;
Finally, they should synchronize in the LockSupport where unpark each other.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;public static void unpark(Thread thread) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (thread != null) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (thread.isVirtual()) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;VirtualThreads.unpark(thread);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} else {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;U.unpark(thread);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
And when TestedThread got to this point it start loading class  &amp;#39;VirtualThreads&amp;#39; (main thread is virtual). At the same time the main thread trying to unpark other threads doesn&amp;#39;t need to load any classes wins the competition and send ThreadDeath to threads. If it send ThreadDeath while class is loading then we got this exception and broken lock.&lt;br/&gt;
&amp;nbsp;</comment>
                            <comment id="14614501" author="lmesnik" created="Wed, 27 Sep 2023 15:33:20 -0700"  >The test got ThreadDeath during unlock. Need to improve synchronization with agent so stop threads when expected only. </comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5137061">JDK-8338637</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5143529">JDK-8343908</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i31l6b:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17354"><![CDATA[b18]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="372"><![CDATA[jvmti]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>