<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Thu Sep 25 23:19:43 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8225377] type annotations are not visible to javac plugins across compilation boundaries</title>
                <link>https://bugs.openjdk.org/browse/JDK-8225377</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>javac fails to associate type annotations with TypeMirrors for some symbols loaded from the classpath, which prevents plugins from accessing those annotations across compilation boundaries. The annotations are present if the same symbol is compiled from source in the compilation where the plugin runs.&lt;br/&gt;
&lt;br/&gt;
=== ./test/B.java&lt;br/&gt;
abstract class B extends A {}&lt;br/&gt;
=== ./test/A.java&lt;br/&gt;
import java.lang.annotation.ElementType;&lt;br/&gt;
import java.util.List;&lt;br/&gt;
import java.lang.annotation.Retention;&lt;br/&gt;
import java.lang.annotation.RetentionPolicy;&lt;br/&gt;
import java.lang.annotation.Target;&lt;br/&gt;
&lt;br/&gt;
@Target(ElementType.TYPE_USE)&lt;br/&gt;
@Retention(RetentionPolicy.RUNTIME)&lt;br/&gt;
@interface TypeAnnotation {}&lt;br/&gt;
&lt;br/&gt;
abstract class A implements List&amp;lt;@TypeAnnotation String&amp;gt; {}&lt;br/&gt;
=== ./plugin/p/P.java&lt;br/&gt;
package p;&lt;br/&gt;
&lt;br/&gt;
import com.sun.source.util.JavacTask;&lt;br/&gt;
import com.sun.source.util.Plugin;&lt;br/&gt;
import com.sun.source.util.TaskEvent;&lt;br/&gt;
import com.sun.source.util.TaskListener;&lt;br/&gt;
import javax.lang.model.element.TypeElement;&lt;br/&gt;
import javax.lang.model.type.DeclaredType;&lt;br/&gt;
import javax.lang.model.type.TypeMirror;&lt;br/&gt;
&lt;br/&gt;
public class P implements Plugin {&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;@Override&lt;br/&gt;
&amp;nbsp;&amp;nbsp;public String getName() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return &amp;quot;P&amp;quot;;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;@Override&lt;br/&gt;
&amp;nbsp;&amp;nbsp;public void init(JavacTask javacTask, String... strings) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;javacTask.addTaskListener(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;new TaskListener() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Override&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void finished(TaskEvent e) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (e.getKind() != TaskEvent.Kind.ENTER) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TypeElement b = javacTask.getElements().getTypeElement(&amp;quot;B&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (TypeMirror i :&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;((TypeElement) ((DeclaredType) b.getSuperclass()).asElement()).getInterfaces()) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.err.printf(&amp;quot;%s %s\n&amp;quot;, i, i.getAnnotationMirrors());&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;});&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
=== ./plugin/module-info.java&lt;br/&gt;
module p { &lt;br/&gt;
&amp;nbsp;&amp;nbsp;requires transitive jdk.compiler; &lt;br/&gt;
&amp;nbsp;&amp;nbsp;provides com.sun.source.util.Plugin with p.P; &lt;br/&gt;
} &lt;br/&gt;
===&lt;br/&gt;
&lt;br/&gt;
$ javac $(find plugin -name &amp;#39;*.java&amp;#39;)&lt;br/&gt;
&lt;br/&gt;
# when both compilation units are compiled from source, the type annotations are visible&lt;br/&gt;
&lt;br/&gt;
$ javac --processor-module-path plugin -Xplugin:P test/A.java test/B.java &lt;br/&gt;
java.util.List&amp;lt;@TypeAnnotation java.lang.String&amp;gt; &lt;br/&gt;
java.util.List&amp;lt;@TypeAnnotation java.lang.String&amp;gt; &lt;br/&gt;
&lt;br/&gt;
# when &amp;#39;A&amp;#39; is loaded from the classpath, the type annotations on its supertype are not visible&lt;br/&gt;
&lt;br/&gt;
$ javac --processor-module-path plugin -Xplugin:P -classpath test test/B.java &lt;br/&gt;
java.util.List&amp;lt;java.lang.String&amp;gt; &lt;br/&gt;
</description>
                <environment></environment>
        <key id="4992387">JDK-8225377</key>
            <summary>type annotations are not visible to javac plugins across compilation boundaries</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cushon">Liam Miller-Cushon</assignee>
                                    <reporter username="cushon">Liam Miller-Cushon</reporter>
                        <labels>
                            <label>javac-plugin</label>
                            <label>jdk11u-fix-request</label>
                            <label>jdk11u-fix-yes</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk21u-fix-SQE-ok</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>type-annotations</label>
                    </labels>
                <created>Wed, 5 Jun 2019 14:53:35 -0700</created>
                <updated>Fri, 18 Apr 2025 05:48:33 -0700</updated>
                            <resolved>Fri, 3 Nov 2023 10:32:37 -0700</resolved>
                                    <version>13</version>
                    <version>21</version>
                                    <fixVersion>22</fixVersion>
                                    <component>tools</component>
                        <due></due>
                            <votes>1</votes>
                                    <watches>13</watches>
                                                                                                                                                            <comments>
                            <comment id="14771431" author="sgehwolf" created="Fri, 18 Apr 2025 05:48:33 -0700"  >For posterity: This got backed out of JDK 21.0.2 with &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8322883&quot; title=&quot;[BACKOUT] 8225377: type annotations are not visible to javac plugins across compilation boundaries&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8322883&quot;&gt;&lt;strike&gt;JDK-8322883&lt;/strike&gt;&lt;/a&gt; and re-done in 21.0.8 with &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8341779&quot; title=&quot;[REDO BACKPORT] type annotations are not visible to javac plugins across compilation boundaries (JDK-8225377)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8341779&quot;&gt;&lt;strike&gt;JDK-8341779&lt;/strike&gt;&lt;/a&gt;</comment>
                            <comment id="14638354" author="cushon" created="Mon, 8 Jan 2024 12:36:23 -0800"  >As advised I have written up relnotes (&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8323094&quot;&gt;https://bugs.openjdk.org/browse/JDK-8323094&lt;/a&gt;) and a retroactive CSR (&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8323093&quot;&gt;https://bugs.openjdk.org/browse/JDK-8323093&lt;/a&gt;) for this change, feedback is welcome.</comment>
                            <comment id="14636308" author="cushon" created="Sat, 23 Dec 2023 05:09:54 -0800"  >Understood, thanks. Are there other public issues besides &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8322641&quot; title=&quot;javac fails with &amp;quot;Unable to implement &amp;lt;class&amp;gt; method&amp;quot;.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8322641&quot;&gt;&lt;strike&gt;JDK-8322641&lt;/strike&gt;&lt;/a&gt; you can share?</comment>
                            <comment id="14636249" author="rcalnan" created="Fri, 22 Dec 2023 10:33:21 -0800"  >Liam, this fix is going to be backed out of 21.0.2 as the change in behaviour is causing issues (see &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8322641&quot; title=&quot;javac fails with &amp;quot;Unable to implement &amp;lt;class&amp;gt; method&amp;quot;.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8322641&quot;&gt;&lt;strike&gt;JDK-8322641&lt;/strike&gt;&lt;/a&gt;), you may also want to reconsider the change for 11 and 17.  There needs to be a release-note for 22 - and perhaps a retroactive CSR should be considered.</comment>
                            <comment id="14624660" author="roboduke" created="Tue, 7 Nov 2023 17:37:26 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk11u-dev/pull/2272&quot;&gt;https://git.openjdk.org/jdk11u-dev/pull/2272&lt;/a&gt;&lt;br/&gt;
Date: 2023-11-08 01:31:36 +0000</comment>
                            <comment id="14624598" author="cushon" created="Tue, 7 Nov 2023 17:32:03 -0800"  >Fix Request 11u&lt;br/&gt;
&lt;br/&gt;
Backporting this patch fixes a bug preventing type use annotations for elements loaded from class files from appearing in the javax.lang.model API. This bug is preventing adoption of type use annotations.&lt;br/&gt;
&lt;br/&gt;
Risk is low. Annotation processors will be able to access new type annotations for elements loaded from the classpath. This can have observable side effects, for example if an annotation processor includes `TypeMirror#toString` output in diagnostics or generated code that output may now include additional annotations.&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
The patch did not apply cleanly. I resolved a merge conflict with the imports, and due to changes to the internal TypeMetadata API for &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8303820&quot; title=&quot;Simplify type metadata&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8303820&quot;&gt;&lt;strike&gt;JDK-8303820&lt;/strike&gt;&lt;/a&gt;.&lt;br/&gt;
&lt;br/&gt;
The modified test fails without the patch, and passes with it. The patch passes langtools:tier1 tests. I also built Google&amp;#39;s code with this patch applied to validate it.&lt;br/&gt;
&lt;br/&gt;
Backport requires follow up issue &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8320001&quot; title=&quot;javac crashes while adding type annotations to the return type of a constructor&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8320001&quot;&gt;&lt;strike&gt;JDK-8320001&lt;/strike&gt;&lt;/a&gt;.</comment>
                            <comment id="14624592" author="roboduke" created="Tue, 7 Nov 2023 17:04:52 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/1952&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/1952&lt;/a&gt;&lt;br/&gt;
Date: 2023-11-08 00:58:28 +0000</comment>
                            <comment id="14624590" author="cushon" created="Tue, 7 Nov 2023 17:00:25 -0800"  >Fix Request 17u&lt;br/&gt;
&lt;br/&gt;
Backporting this patch fixes a bug preventing type use annotations for elements loaded from class files from appearing in the javax.lang.model API. This bug is preventing adoption of type use annotations.&lt;br/&gt;
&lt;br/&gt;
Risk is low. Annotation processors will be able to access new type annotations for elements loaded from the classpath. This can have observable side effects, for example if an annotation processor includes `TypeMirror#toString` output in diagnostics or generated code that output may now include additional annotations.&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
The patch did not apply cleanly, I resolved one merge conflict due to changes to the internal TypeMetadata API for &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8303820&quot; title=&quot;Simplify type metadata&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8303820&quot;&gt;&lt;strike&gt;JDK-8303820&lt;/strike&gt;&lt;/a&gt;.&lt;br/&gt;
&lt;br/&gt;
The modified test fails without the patch, and passes with it. The patch passes langtools:tier1 tests. I also built Google&amp;#39;s code with this patch applied to validate it.&lt;br/&gt;
&lt;br/&gt;
Backport requires follow up issue &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8320001&quot; title=&quot;javac crashes while adding type annotations to the return type of a constructor&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8320001&quot;&gt;&lt;strike&gt;JDK-8320001&lt;/strike&gt;&lt;/a&gt;.</comment>
                            <comment id="14624199" author="roboduke" created="Mon, 6 Nov 2023 14:16:50 -0800"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u/pull/329&quot;&gt;https://git.openjdk.org/jdk21u/pull/329&lt;/a&gt;&lt;br/&gt;
Date: 2023-11-06 22:10:08 +0000</comment>
                            <comment id="14624198" author="cushon" created="Mon, 6 Nov 2023 14:10:10 -0800"  >Fix Request JDK 21u&lt;br/&gt;
&lt;br/&gt;
Backporting this patch fixes a bug preventing type use annotations for elements loaded from class files from appearing in the javax.lang.model API. This bug is preventing adoption of type use annotations.&lt;br/&gt;
&lt;br/&gt;
Risk is low. Annotation processors will be able to access new type annotations for elements loaded from the classpath. This can have observable side effects, for example if an annotation processor includes `TypeMirror#toString` output in diagnostics or generated code that output may now include additional annotations.&lt;br/&gt;
&amp;nbsp;&lt;br/&gt;
The patch applies cleanly to 21u. The backport passes the langtools:tier1 tests.&lt;br/&gt;
&lt;br/&gt;
I also built Google&amp;#39;s code with this patch applied to validate it.</comment>
                            <comment id="14623697" author="dukebot" created="Fri, 3 Nov 2023 10:32:35 -0700"  >Changeset: de6667cf&lt;br/&gt;
Author:    Liam Miller-Cushon &amp;lt;&lt;a href=&apos;mailto:cushon@openjdk.org&apos;&gt;cushon@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-11-03 17:31:05 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/de6667cf11aa59d1bab78ae5fb235ea0b901d5c4&quot;&gt;https://git.openjdk.org/jdk/commit/de6667cf11aa59d1bab78ae5fb235ea0b901d5c4&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14621787" author="roboduke" created="Fri, 27 Oct 2023 14:07:54 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/16407&quot;&gt;https://git.openjdk.org/jdk/pull/16407&lt;/a&gt;&lt;br/&gt;
Date: 2023-10-27 21:01:54 +0000</comment>
                            <comment id="14560756" author="cushon" created="Thu, 16 Feb 2023 07:45:44 -0800"  >I think the underlying issue is the same for both -Xplugin style plugins and annotation processors.&lt;br/&gt;
&lt;br/&gt;
I did some investigation last year and left some notes in these compiler-dev posts:&lt;br/&gt;
&lt;br/&gt;
* &lt;a href=&quot;https://mail.openjdk.org/pipermail/compiler-dev/2022-March/019122.html&quot;&gt;https://mail.openjdk.org/pipermail/compiler-dev/2022-March/019122.html&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
* &lt;a href=&quot;https://mail.openjdk.org/pipermail/compiler-dev/2022-April/019375.html&quot;&gt;https://mail.openjdk.org/pipermail/compiler-dev/2022-April/019375.html&lt;/a&gt;</comment>
                            <comment id="14560668" author="vromero" created="Thu, 16 Feb 2023 04:01:34 -0800"  >another test case provided by Liam, having:&lt;br/&gt;
&lt;br/&gt;
=== A.java ===&lt;br/&gt;
import java.lang.annotation.ElementType;&lt;br/&gt;
import java.lang.annotation.Retention;&lt;br/&gt;
import java.lang.annotation.RetentionPolicy;&lt;br/&gt;
import java.lang.annotation.Target;&lt;br/&gt;
&lt;br/&gt;
@Retention(RetentionPolicy.RUNTIME)&lt;br/&gt;
@Target({ElementType.TYPE_USE})&lt;br/&gt;
public @interface A {}&lt;br/&gt;
=== B.java ===&lt;br/&gt;
public final class B {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;public static final void c(@A String s) {}&lt;br/&gt;
}&lt;br/&gt;
=== P.java ===&lt;br/&gt;
import java.util.Set;&lt;br/&gt;
import javax.annotation.processing.AbstractProcessor;&lt;br/&gt;
import javax.annotation.processing.RoundEnvironment;&lt;br/&gt;
import javax.annotation.processing.SupportedAnnotationTypes;&lt;br/&gt;
import javax.lang.model.SourceVersion;&lt;br/&gt;
import javax.lang.model.element.Element;&lt;br/&gt;
import javax.lang.model.element.ExecutableElement;&lt;br/&gt;
import javax.lang.model.element.TypeElement;&lt;br/&gt;
import javax.lang.model.element.VariableElement;&lt;br/&gt;
import javax.lang.model.type.TypeMirror;&lt;br/&gt;
import javax.lang.model.util.Elements;&lt;br/&gt;
import javax.tools.Diagnostic;&lt;br/&gt;
&lt;br/&gt;
@SupportedAnnotationTypes(&amp;quot;*&amp;quot;)&lt;br/&gt;
public class P extends AbstractProcessor {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;@Override&lt;br/&gt;
&amp;nbsp;&amp;nbsp;public SourceVersion getSupportedSourceVersion() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return SourceVersion.latestSupported();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;@Override&lt;br/&gt;
&amp;nbsp;&amp;nbsp;public boolean process(Set&amp;lt;? extends TypeElement&amp;gt; annotations, RoundEnvironment roundEnv) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Elements elements = processingEnv.getElementUtils();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Element e = elements.getTypeElement(&amp;quot;B&amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ExecutableElement c = (ExecutableElement) e.getEnclosedElements().get(1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;VariableElement s = c.getParameters().get(0);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;TypeMirror sAsType = s.asType();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;processingEnv&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.getMessager()&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;.printMessage(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Diagnostic.Kind.NOTE,&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String.format(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;quot;%s.%s.%s has annotations [%s]&amp;quot;, e, c, s, sAsType.getAnnotationMirrors()));&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
$ javac -processor P -implicit:none  -sourcepath : -parameters A.java B.java&lt;br/&gt;
Note: B.c(java.lang.@A String).s has annotations [@A]&lt;br/&gt;
Note: B.c(java.lang.@A String).s has annotations [@A]&lt;br/&gt;
$ javac -processor P -implicit:none  -sourcepath : -parameters A.java&lt;br/&gt;
Note: B.c(java.lang.String).s has annotations []&lt;br/&gt;
Note: B.c(java.lang.String).s has annotations []</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5116848">JDK-8321934</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5117140">JDK-8322203</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5118502">JDK-8323370</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5114500">JDK-8319885</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10400">
                    <name>CSR</name>
                                            <outwardlinks description="csr for">
                                        <issuelink>
            <issuekey id="5118199">JDK-8323093</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10001">
                    <name>Cloners</name>
                                                                <inwardlinks description="is cloned by">
                                        <issuelink>
            <issuekey id="5141006">JDK-8341779</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10002">
                    <name>Duplicate</name>
                                                                <inwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="5098894">JDK-8306815</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="4993460">JDK-8226216</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5136349">JDK-8337998</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5114629">JDK-8320001</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5134881">JDK-8336942</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5117695">JDK-8322641</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5117958">JDK-8322883</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                                              <subtask id="5118200">JDK-8323094</subtask>
                                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2j90z:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17433"><![CDATA[b23]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="212"><![CDATA[javac]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>