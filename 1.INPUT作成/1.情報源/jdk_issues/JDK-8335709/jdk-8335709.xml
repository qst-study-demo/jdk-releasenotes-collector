<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Sat Sep 27 09:10:38 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8335709] C2: assert(!loop-&gt;is_member(get_loop(useblock))) failed: must be outside loop</title>
                <link>https://bugs.openjdk.org/browse/JDK-8335709</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>I would really appreciate a mention in the PR: I extracted the JASM file from a class-file, reduced it, and was able to recreate a JAVA file from that. This simplifies the debug job and the triaging (class-file would have been limited to JDK22 and newer).&lt;br/&gt;
&lt;br/&gt;
Affected: 23, 22, 21, 17 (did not reproduce with 11)&lt;br/&gt;
Assert in debug. Product: infinite loop as expected, but not sure if there is no wrong result possible.&lt;br/&gt;
&lt;br/&gt;
Only reproduced with JDK17 and newer, but you will have to see why it does not reproduce with JDK11.&lt;br/&gt;
&lt;br/&gt;
Looks like a problem with infinite-loops, see java code and the NeverBranch as evidence that there is no loop exit:&lt;br/&gt;
(rr) p x_ctrl-&amp;gt;dump_bfs(100,x_ctrl,&amp;quot;#cA&amp;quot;)&lt;br/&gt;
dist apd dump&lt;br/&gt;
---------------------------------------------&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;7  14   84  IfFalse  === 82  [[ 87 91 ]] #0 !jvms: Test::test @ bci:4 (line 12)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;6   7   87  Region  === 87 84 83  [[ 87 112 92 105 107 130 ]] #reducible  !jvms: Test::test @ bci:11 (line 15)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;5   7  107  SafePoint  === 87 1 108 1 1 112 106  [[ 73 ]]  SafePoint  !jvms: Test::test @ bci:24 (line 16)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;4   7   73  Region  === 73 107 72  [[ 73 119 77 118 117 ]] #reducible  !jvms: Test::test @ bci:2 (line 12)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;3   7  119  NeverBranch  === 73  [[ 120 121 ]] &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;2   7  120  CProj  === 119  [[ 82 ]] #0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;1   7   82  If  === 120 81  [[ 83 84 ]] P=0.500000, C=-1.000000 !jvms: Test::test @ bci:4 (line 12)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0   0   83  IfTrue  === 82  [[ 87 ]] #1 !jvms: Test::test @ bci:4 (line 12)&lt;br/&gt;
We have had many open bugs with infinite-loops: they are quite rare in the wild but tricky to get right with loop-opts.&lt;br/&gt;
&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8308749&quot; title=&quot;C2 failed: regular loops only (counted loop inside infinite loop)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8308749&quot;&gt;&lt;strike&gt;JDK-8308749&lt;/strike&gt;&lt;/a&gt;: C2 failed: regular loops only (counted loop inside infinite loop)&lt;br/&gt;
&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8296389&quot; title=&quot;C2: PhaseCFG::convert_NeverBranch_to_Goto must handle both orders of successors&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8296389&quot;&gt;&lt;strike&gt;JDK-8296389&lt;/strike&gt;&lt;/a&gt;: C2: PhaseCFG::convert_NeverBranch_to_Goto must handle both orders of successors&lt;br/&gt;
&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8297642&quot; title=&quot;PhaseIdealLoop::only_has_infinite_loops must detect all loops that never lead to termination&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8297642&quot;&gt;&lt;strike&gt;JDK-8297642&lt;/strike&gt;&lt;/a&gt;: PhaseIdealLoop::only_has_infinite_loops must detect all loops that never lead to termination&lt;br/&gt;
&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8296318&quot; title=&quot;use-def assert: special case undetected loops nested in infinite loops&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8296318&quot;&gt;&lt;strike&gt;JDK-8296318&lt;/strike&gt;&lt;/a&gt;: use-def assert: special case undetected loops nested in infinite loops&lt;br/&gt;
&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8296412&quot; title=&quot;Special case infinite loops with unmerged backedges in IdealLoopTree::check_safepts&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8296412&quot;&gt;&lt;strike&gt;JDK-8296412&lt;/strike&gt;&lt;/a&gt;: Special case infinite loops with unmerged backedges in IdealLoopTree::check_safepts&lt;br/&gt;
Maybe we should just disable PhaseIdealLoop::try_sink_out_of_loop  for infinite loops: they never terminate anyway, and thus their performance is not very important.&lt;br/&gt;
&lt;br/&gt;
/oracle-work/jdk-fork2/build/linux-x64-debug/jdk/bin/java -Xcomp -XX:CompileCommand=compileonly,Test::* -XX:CompileCommand=printcompilation,Test::* -XX:+TraceLoopOpts Test.java&lt;br/&gt;
&lt;br/&gt;
CompileCommand: compileonly Test.* bool compileonly = true&lt;br/&gt;
CompileCommand: PrintCompilation Test.* bool PrintCompilation = true&lt;br/&gt;
36751   97    b  3       Test::main (4 bytes)&lt;br/&gt;
36773   99    b  4       Test::main (4 bytes)&lt;br/&gt;
36775  100 %  b  4       Test::test @ 2 (27 bytes)&lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error (/oracle-work/jdk-fork2/open/src/hotspot/share/opto/loopopts.cpp:1266), pid=4119505, tid=4119519&lt;br/&gt;
#  assert(!loop-&amp;gt;is_member(get_loop(useblock))) failed: must be outside loop&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (24.0) (fastdebug build 24-internal-2024-07-04-1039391.emanuel...)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 24-internal-2024-07-04-1039391.emanuel..., compiled mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0x12a2718]  PhaseIdealLoop::place_outside_loop(Node*, IdealLoopTree*) const+0x348&lt;br/&gt;
#&lt;br/&gt;
# Core dump will be written. Default location: Core dumps may be processed with &amp;quot;/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E&amp;quot; (or dumping to /oracle-work/xyz/core.4119505)&lt;br/&gt;
#&lt;br/&gt;
# An error report file with more information is saved as:&lt;br/&gt;
# /oracle-work/xyz/hs_err_pid4119505.log&lt;br/&gt;
#&lt;br/&gt;
# Compiler replay data is saved as:&lt;br/&gt;
# /oracle-work/xyz/replay_pid4119505.log&lt;br/&gt;
#&lt;br/&gt;
# If you would like to submit a bug report, please visit:&lt;br/&gt;
#   &lt;a href=&quot;https://bugreport.java.com/bugreport/crash.jsp&quot;&gt;https://bugreport.java.com/bugreport/crash.jsp&lt;/a&gt;&lt;br/&gt;
#&lt;br/&gt;
&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C2:36803  100 %  b  4       Test::test @ 2 (27 bytes)&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00007f4fc436f000,0x00007f4fc4470000],  sp=0x00007f4fc446ad80,  free space=1007k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x12a2718]  PhaseIdealLoop::place_outside_loop(Node*, IdealLoopTree*) const+0x348  (loopopts.cpp:1266)&lt;br/&gt;
V  [libjvm.so+0x12a5bd6]  PhaseIdealLoop::try_sink_out_of_loop(Node*)+0x376  (loopopts.cpp:1753)&lt;br/&gt;
V  [libjvm.so+0x12a6603]  PhaseIdealLoop::split_if_with_blocks_post(Node*)+0x83  (loopopts.cpp:1531)&lt;br/&gt;
V  [libjvm.so+0x12a6ec6]  PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;amp;, Node_Stack&amp;amp;)+0x96  (loopopts.cpp:1964)&lt;br/&gt;
V  [libjvm.so+0x1299519]  PhaseIdealLoop::build_and_optimize()+0xee9  (loopnode.cpp:4815)&lt;br/&gt;
V  [libjvm.so+0x9e4770]  PhaseIdealLoop::optimize(PhaseIterGVN&amp;amp;, LoopOptsMode)+0x390  (loopnode.hpp:1117)&lt;br/&gt;
V  [libjvm.so+0x9df283]  Compile::Optimize()+0x4c3  (compile.cpp:2366)&lt;br/&gt;
V  [libjvm.so+0x9e3326]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1b06  (compile.cpp:852)&lt;br/&gt;
V  [libjvm.so+0x835575]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1d5  (c2compiler.cpp:142)&lt;br/&gt;
V  [libjvm.so+0x9eef68]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x928  (compileBroker.cpp:2303)&lt;br/&gt;
V  [libjvm.so+0x9efbf8]  CompileBroker::compiler_thread_loop()+0x478  (compileBroker.cpp:1961)&lt;br/&gt;
V  [libjvm.so+0xe994dc]  JavaThread::thread_main_inner()+0xcc  (javaThread.cpp:757)&lt;br/&gt;
V  [libjvm.so+0x17b9076]  Thread::call_run()+0xb6  (thread.cpp:225)&lt;br/&gt;
V  [libjvm.so+0x14a1717]  thread_native_entry(Thread*)+0x127  (os_linux.cpp:858)</description>
                <environment></environment>
        <key id="5133483">JDK-8335709</key>
            <summary>C2: assert(!loop-&gt;is_member(get_loop(useblock))) failed: must be outside loop</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="roland">Roland Westrelin</assignee>
                                    <reporter username="epeter">Emanuel Peter</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>c2</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>jdk23u-fix-SQE-ok</label>
                            <label>jdk23u-fix-request</label>
                            <label>jdk23u-fix-yes</label>
                            <label>oracle-triage-24</label>
                    </labels>
                <created>Thu, 4 Jul 2024 07:13:58 -0700</created>
                <updated>Fri, 13 Dec 2024 00:04:51 -0800</updated>
                            <resolved>Fri, 19 Jul 2024 00:32:17 -0700</resolved>
                                    <version>17</version>
                    <version>21</version>
                    <version>22</version>
                    <version>23</version>
                    <version>24</version>
                                    <fixVersion>24</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                                                                <comments>
                            <comment id="14716147" author="roboduke" created="Wed, 23 Oct 2024 07:23:15 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/1079&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/1079&lt;/a&gt;&lt;br/&gt;
Date: 2024-10-23 14:15:41 +0000</comment>
                            <comment id="14716146" author="roboduke" created="Wed, 23 Oct 2024 07:22:02 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/2991&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/2991&lt;/a&gt;&lt;br/&gt;
Date: 2024-10-23 14:16:11 +0000</comment>
                            <comment id="14716144" author="goetz" created="Wed, 23 Oct 2024 07:17:42 -0700"  >Fix request [17u.,21u]&lt;br/&gt;
&lt;br/&gt;
I backport this for parity with 17.0.14-oracle,21.0.6-oracle.&lt;br/&gt;
Medium risk. Simple change, but with the typical C2 risk. Let&amp;#39;s go along with Oracle here.&lt;br/&gt;
Clean backport in 21, trivial resolve in 17.&lt;br/&gt;
Test passes and reproduces the issue without the fix. SAP nightly testing passed.</comment>
                            <comment id="14711508" author="roboduke" created="Wed, 9 Oct 2024 01:57:48 -0700"  >[jdk23u-fix-request] Approval Request from Yagmur Eren&lt;br/&gt;
Clean backport of the logic fix to sink nodes out of loop.</comment>
                            <comment id="14711505" author="roboduke" created="Wed, 9 Oct 2024 01:33:11 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk23u/pull/145&quot;&gt;https://git.openjdk.org/jdk23u/pull/145&lt;/a&gt;&lt;br/&gt;
Date: 2024-10-09 08:25:50 +0000</comment>
                            <comment id="14691165" author="dukebot" created="Fri, 19 Jul 2024 00:32:13 -0700"  >Changeset: 0ddf54e2&lt;br/&gt;
Branch: master&lt;br/&gt;
Author:    Roland Westrelin &amp;lt;&lt;a href=&apos;mailto:roland@openjdk.org&apos;&gt;roland@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-07-19 07:30:23 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/0ddf54e222104469669f611804ae55e2685f54fb&quot;&gt;https://git.openjdk.org/jdk/commit/0ddf54e222104469669f611804ae55e2685f54fb&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14690898" author="roboduke" created="Thu, 18 Jul 2024 02:44:50 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/20231&quot;&gt;https://git.openjdk.org/jdk/pull/20231&lt;/a&gt;&lt;br/&gt;
Date: 2024-07-18 09:38:47 +0000</comment>
                            <comment id="14690492" author="thartmann" created="Tue, 16 Jul 2024 23:49:51 -0700"  >Might be related to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8336472&quot; title=&quot;C2: assert(!n-&amp;gt;is_Store() &amp;amp;&amp;amp; !n-&amp;gt;is_LoadStore()) failed: no node with a side effect&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8336472&quot;&gt;&lt;strike&gt;JDK-8336472&lt;/strike&gt;&lt;/a&gt;.</comment>
                            <comment id="14687324" author="thartmann" created="Fri, 5 Jul 2024 00:35:03 -0700"  >[~roland], FYI, in case you have time to look at this.</comment>
                            <comment id="14687160" author="thartmann" created="Thu, 4 Jul 2024 08:06:12 -0700"  >Code was introduced by &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8252372&quot; title=&quot;Check if cloning is required to move loads out of loops in PhaseIdealLoop::split_if_with_blocks_post()&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8252372&quot;&gt;&lt;strike&gt;JDK-8252372&lt;/strike&gt;&lt;/a&gt; in JDK 17.&lt;br/&gt;
&lt;br/&gt;
ILW = Assert when trying to sink node out of loop, edge case but reproducible, disable split if or compilation of affected method = HLM = P3</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5141074">JDK-8341841</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5141075">JDK-8341842</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5141295">JDK-8342019</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5142810">JDK-8343349</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5142819">JDK-8343358</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10002">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                        <issuelink>
            <issuekey id="5133531">JDK-8335753</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5028509">JDK-8252372</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5134350">JDK-8336472</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5137326">JDK-8338844</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="109972" name="Test.java" size="323" author="epeter" created="Thu, 4 Jul 2024 07:11:42 -0700"/>
                            <attachment id="109974" name="hs_err_pid4119505.log" size="84023" author="epeter" created="Thu, 4 Jul 2024 07:11:43 -0700"/>
                            <attachment id="109973" name="replay_pid4119505.log" size="264370" author="epeter" created="Thu, 4 Jul 2024 07:11:43 -0700"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i370rn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17337"><![CDATA[b08]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>