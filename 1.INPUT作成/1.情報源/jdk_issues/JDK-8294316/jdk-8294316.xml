<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Sat Sep 27 09:30:27 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8294316] SA core file support is broken on macosx-x64 starting with macOS 12.x</title>
                <link>https://bugs.openjdk.org/browse/JDK-8294316</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>It appears that SA no longer works with core files on macosx-x64, I believe starting with macOS 12.x.  macosx-aarch64 seems to be fine, as are earlier versions of macosx-x64. The failure that happens with all the SA core file tests in test/hotspot/jtreg/serviceability/sa is:&lt;br/&gt;
&lt;br/&gt;
ERROR: failed to workaround classshareing&lt;br/&gt;
Unable to open core file&lt;br/&gt;
&lt;br/&gt;
I added some debugging code to SA&amp;#39;s init_classsharing_workaround(), and it indicated that the cause was related to the fetching of the value of SharedArchivePath from the core file. This is suppose to point to a cstring containing the classes.jsa path, but instead seemed to contain garbage. I modified hotspot to print out  &amp;amp;SharedArchivePath, SharedArchivePath, and the cstring it points to:&lt;br/&gt;
&lt;br/&gt;
log_info(cds)(&amp;quot;Got default archive path: %p %p %s&amp;quot;, &amp;amp;SharedArchivePath, SharedArchivePath, SharedArchivePath);&lt;br/&gt;
&lt;br/&gt;
When SA fails to open the core file, I see:&lt;br/&gt;
&lt;br/&gt;
[0.003s][info][cds] Got default archive path: 0x10faccb30 0x6000008b8010 /System/Volumes/Data/mesos/work_dir/jib-master/install/2022-09-22-2232312.chris.plummer.jdk/macosx-x64-debug.jdk/jdk-20/fastdebug/lib/server/classes.jsa&lt;br/&gt;
&lt;br/&gt;
This all looks fine. However, SA looks up the &amp;quot;SharedArchivePath&amp;quot; symbol to get its address, so in turn it can get its value, which then points to the classes.jsa path. So I also modified SA to print out this info:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;printf(&amp;quot;sharedArchivePathAddrAddr(%p)\n&amp;quot;, (void*)sharedArchivePathAddrAddr);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;printf(&amp;quot;sharedArchivePathAddr        (%p)\n&amp;quot;, (void*)sharedArchivePathAddr);&lt;br/&gt;
&lt;br/&gt;
In the passing test cases it would match up with the CDS log output above. When it fails you get something different:&lt;br/&gt;
&lt;br/&gt;
Opening core file, please wait...&lt;br/&gt;
hsdb&amp;gt;&lt;br/&gt;
sharedArchivePathAddrAddr(0x10f881b30)&lt;br/&gt;
sharedArchivePathAddr        (0x7364616572687420)&lt;br/&gt;
&lt;br/&gt;
sharedArchivePathAddrAddr should match the hotspot &amp;amp;SharedArchivePath output, but it doesn&amp;#39;t. SA is doing a symbol table lookup to get this value, so there appears to be a bug in SA&amp;#39;s mach-o symbol table handling code.&lt;br/&gt;
&lt;br/&gt;
This problem has gone unnoticed because we have problem listed all core file testing on macoxx-x64 for probably a year now due to occasional issues with timeouts (slow core dumps). This issue seems to only be happening on 12.3.1, 12.4 and 12.5.1 host, and happens every time on these hosts, so likely the issue was introduced with  macOS 12.&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m not seeing this on macos-aarch64, although on occasion I was seeing the same &amp;quot;ERROR: failed to workaround classshareing&amp;quot; failure message. However, I believe it was for a different reason. From what I could tell with some debugging I did with lldb, it looked like the memory where SharedArchivePath pointed to was not in the core file. However, for some reason I can&amp;#39;t reproduce this anymore. It could be related to &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8293563&quot; title=&quot;[macos-aarch64] SA core file tests failing with sun.jvm.hotspot.oops.UnknownOopException &quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8293563&quot;&gt;&lt;strike&gt;JDK-8293563&lt;/strike&gt;&lt;/a&gt;, which is caused by the java heap not being in the core file. Possibly sometimes other areas of memory are also missing.&lt;br/&gt;
&lt;br/&gt;
Note if you try using -Xshare:off, you still see this same issue with SharedArchivePath, even though SA should not need to access it. This is because SA first accesses UseSharedSpaces to see if it is 0 or 1. It should be 0, but due to the same issue we see with SharedArchivePath (symbol lookup not working properly), UseSharedSpaces could contain anything, and usually it is not 0. To work around this I forced SA to just quickly exit init_classsharing_workaround() no matter what UseSharedSpaces is set to. This caused SA to instead fail at a later point during intialization when trying to lookup some hotspot types. It does so through vmstructs, which SA accesses via other global symbols that it appears SA is not looking up properly. So it appears that in general SA&amp;#39;s symbol table lookups are broken with core files on 12.x, and it is not just just some global symbosl.</description>
                <environment></environment>
        <key id="5084062">JDK-8294316</key>
            <summary>SA core file support is broken on macosx-x64 starting with macOS 12.x</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="never">Tom Rodriguez</assignee>
                                    <reporter username="cjplummer">Chris Plummer</reporter>
                        <labels>
                            <label>jdk11u-fix-request</label>
                            <label>jdk11u-fix-yes</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>problemlist</label>
                    </labels>
                <created>Fri, 23 Sep 2022 14:16:34 -0700</created>
                <updated>Fri, 14 Feb 2025 03:25:40 -0800</updated>
                            <resolved>Tue, 27 Jun 2023 12:59:11 -0700</resolved>
                                    <version>20</version>
                                    <fixVersion>22</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>9</watches>
                                                                                                                                                            <comments>
                            <comment id="14753723" author="roboduke" created="Fri, 14 Feb 2025 02:37:58 -0800"  >[jdk11u-fix-request] Approval Request from Antonio Vieiro&lt;br/&gt;
Please approve this backport from JDK-17 related to the serviceability agent. If fixes core file parsing in macosx 13 and better and allows all the GHA tests to pass. Low risk (serviceability agent on macosx only). Tested on both macos 13/XCode 14 and macos 12.6.1/Xcode 13.4.1</comment>
                            <comment id="14746077" author="goetz" created="Wed, 29 Jan 2025 23:43:09 -0800"  >Replacing link to  &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8321684&quot; title=&quot;Test serviceability/sa/ClhsdbFindPC.java#no-xcomp-core failed&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8321684&quot;&gt;&lt;strike&gt;JDK-8321684&lt;/strike&gt;&lt;/a&gt; by &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8318754&quot; title=&quot;[macosx-aarch64] SA tests fail on macosx-aarch64 with various address exceptions or AIOOBE.&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8318754&quot;&gt;JDK-8318754&lt;/a&gt; because 8321684 was closed as duplicate.</comment>
                            <comment id="14745141" author="roboduke" created="Wed, 29 Jan 2025 03:33:10 -0800"  >[jdk17u-fix-request] Approval Request from Antonio Vieiro&lt;br/&gt;
Let&amp;#39;s get this in 17 as it is required in 11 to fix a GHA serviceability test failure.</comment>
                            <comment id="14738373" author="roboduke" created="Mon, 13 Jan 2025 12:04:14 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk11u-dev/pull/2987&quot;&gt;https://git.openjdk.org/jdk11u-dev/pull/2987&lt;/a&gt;&lt;br/&gt;
Date: 2025-01-13 19:55:14 +0000</comment>
                            <comment id="14733380" author="roboduke" created="Wed, 18 Dec 2024 12:16:53 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/3150&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/3150&lt;/a&gt;&lt;br/&gt;
Date: 2024-12-18 20:09:03 +0000</comment>
                            <comment id="14731593" author="roboduke" created="Thu, 12 Dec 2024 08:06:41 -0800"  >[jdk21u-fix-request] Approval Request from Antonio Vieiro&lt;br/&gt;
This improves macos core files parsing. The plan is to backport this to `11` to make an older version of serviceability/sa/ClhsdbFindPC.java to pass with minimum impact.</comment>
                            <comment id="14731590" author="roboduke" created="Thu, 12 Dec 2024 08:01:47 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/1227&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/1227&lt;/a&gt;&lt;br/&gt;
Date: 2024-12-12 15:54:47 +0000</comment>
                            <comment id="14592360" author="dukebot" created="Tue, 27 Jun 2023 12:59:10 -0700"  >Changeset: 269852b9&lt;br/&gt;
Author:    Tom Rodriguez &amp;lt;&lt;a href=&apos;mailto:never@openjdk.org&apos;&gt;never@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-06-27 19:57:06 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/269852b90634aa43d4d719c93563608e42792fc6&quot;&gt;https://git.openjdk.org/jdk/commit/269852b90634aa43d4d719c93563608e42792fc6&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14590697" author="roboduke" created="Tue, 20 Jun 2023 11:12:35 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/14569&quot;&gt;https://git.openjdk.org/jdk/pull/14569&lt;/a&gt;&lt;br/&gt;
Date: 2023-06-20 18:05:09 +0000</comment>
                            <comment id="14590693" author="never" created="Tue, 20 Jun 2023 11:02:04 -0700"  >I believe I have a fix for this.  I was investigating a mac core and needed working SA support.  The problem seems to be that the core file contains a randomly sized section just before the actual mapping for the beginning of the core file.  The otool -l output looks like this:&lt;br/&gt;
Load command 82&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmd LC_SEGMENT_64&lt;br/&gt;
&amp;nbsp;&amp;nbsp;cmdsize 72&lt;br/&gt;
&amp;nbsp;&amp;nbsp;segname &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;vmaddr 0x00000001076ea000&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;vmsize 0x0000000000008000&lt;br/&gt;
&amp;nbsp;&amp;nbsp;fileoff 5267456&lt;br/&gt;
&amp;nbsp;filesize 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;maxprot 0x00000007&lt;br/&gt;
&amp;nbsp;initprot 0x00000001&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;nsects 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;flags 0x0&lt;br/&gt;
Load command 83&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;cmd LC_SEGMENT_64&lt;br/&gt;
&amp;nbsp;&amp;nbsp;cmdsize 72&lt;br/&gt;
&amp;nbsp;&amp;nbsp;segname &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;vmaddr 0x00000001082e3000&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;vmsize 0x0000000000b84000&lt;br/&gt;
&amp;nbsp;&amp;nbsp;fileoff 5267456&lt;br/&gt;
&amp;nbsp;filesize 12075008&lt;br/&gt;
&amp;nbsp;&amp;nbsp;maxprot 0x00000007&lt;br/&gt;
&amp;nbsp;initprot 0x00000005&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;nsects 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;flags 0x0&lt;br/&gt;
&lt;br/&gt;
The fix seems to be to ignore load commands with filesize == 0 when looking for the library mappings so that you select the real mapping.&lt;br/&gt;
&lt;br/&gt;
diff --git a/src/jdk.hotspot.agent/macosx/native/libsaproc/ps_core.c b/src/jdk.hotspot.agent/macosx/native/libsaproc/ps_core.c&lt;br/&gt;
index 721eb625797..508df64696e 100644&lt;br/&gt;
--- a/src/jdk.hotspot.agent/macosx/native/libsaproc/ps_core.c&lt;br/&gt;
+++ b/src/jdk.hotspot.agent/macosx/native/libsaproc/ps_core.c&lt;br/&gt;
@@ -297,13 +297,17 @@ static bool read_core_segments(struct ps_prochandle* ph) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;print_debug(&amp;quot;failed to read LC_SEGMENT_64 i = %d!\n&amp;quot;, i);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;goto err;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
-      if (add_map_info(ph, fd, segcmd.fileoff, segcmd.vmaddr, segcmd.vmsize, segcmd.flags) == NULL) {&lt;br/&gt;
-        print_debug(&amp;quot;Failed to add map_info at i = %d\n&amp;quot;, i);&lt;br/&gt;
-        goto err;&lt;br/&gt;
+      // The base of the library is offset by a random amount which ends up as a load command with a&lt;br/&gt;
+      // filesize of 0.  This must be ignored otherwise the base address of the library is wrong.&lt;br/&gt;
+      if (segcmd.filesize != 0) {&lt;br/&gt;
+        if (add_map_info(ph, fd, segcmd.fileoff, segcmd.vmaddr, segcmd.vmsize, segcmd.flags) == NULL) {&lt;br/&gt;
+          print_debug(&amp;quot;Failed to add map_info at i = %d\n&amp;quot;, i);&lt;br/&gt;
+          goto err;&lt;br/&gt;
+        }&lt;br/&gt;
+        print_debug(&amp;quot;LC_SEGMENT_64 added: nsects=%d fileoff=0x%llx vmaddr=0x%llx vmsize=0x%llx filesize=0x%llx %s\n&amp;quot;,&lt;br/&gt;
+                    segcmd.nsects, segcmd.fileoff, segcmd.vmaddr, segcmd.vmsize,&lt;br/&gt;
+                    segcmd.filesize, &amp;amp;segcmd.segname[0]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
-      print_debug(&amp;quot;LC_SEGMENT_64 added: nsects=%d fileoff=0x%llx vmaddr=0x%llx vmsize=0x%llx filesize=0x%llx %s\n&amp;quot;,&lt;br/&gt;
-                  segcmd.nsects, segcmd.fileoff, segcmd.vmaddr, segcmd.vmsize,&lt;br/&gt;
-                  segcmd.filesize, &amp;amp;segcmd.segname[0]);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} else if (lcmd.cmd == LC_THREAD || lcmd.cmd == LC_UNIXTHREAD) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;typedef struct thread_fc {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;uint32_t  flavor;&lt;br/&gt;
&lt;br/&gt;
With this fix I was able to successfully open core files.  Looking at the live process with vmmap shows the library mapping with the extra offset but doesn&amp;#39;t seem to show any mapping related to the filesize == 0 part.</comment>
                            <comment id="14526505" author="mwthomps" created="Tue, 27 Sep 2022 10:21:30 -0700"  >ILW=MLH=P4</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5146658">JDK-8346578</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5149548">JDK-8349050</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5150712">JDK-8350087</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5113123">JDK-8318754</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5084184">JDK-8294411</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5082479">JDK-8293068</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5143341">JDK-8343786</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                                              <subtask id="5084375">JDK-8294548</subtask>
                                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="19000"><![CDATA[x86_64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17017"><![CDATA[os_x]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i2yod7:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17314"><![CDATA[b04]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="2072"><![CDATA[svc-agent]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>