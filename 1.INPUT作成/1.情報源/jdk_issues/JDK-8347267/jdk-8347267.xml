<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Sat Sep 27 10:04:44 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8347267] [macOS]: UnixOperatingSystem.c:67:40: runtime error: division by zero</title>
                <link>https://bugs.openjdk.org/browse/JDK-8347267</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>When running ubsan-enabled binaries on macOS aarch64, in test &lt;br/&gt;
javax/management/MBeanServer/OldMBeanServerTest.java&lt;br/&gt;
the following division by zero is shown  :&lt;br/&gt;
src/jdk.management/macosx/native/libmanagement_ext/UnixOperatingSystem.c:67:40: runtime error: division by zero&lt;br/&gt;
UndefinedBehaviorSanitizer:DEADLYSIGNAL&lt;br/&gt;
UndefinedBehaviorSanitizer: nested bug in the same thread, aborting.&lt;br/&gt;
&lt;br/&gt;
This seems to come from the division by a total_delta (of ticks) == 0   :  &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jlong used_delta  = used - last_used;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jlong total_delta = total - last_total;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;jdouble cpu = (jdouble) used_delta / total_delta;&lt;br/&gt;
</description>
                <environment></environment>
        <key id="5147517">JDK-8347267</key>
            <summary>[macOS]: UnixOperatingSystem.c:67:40: runtime error: division by zero</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="mbaesken">Matthias Baesken</assignee>
                                    <reporter username="mbaesken">Matthias Baesken</reporter>
                        <labels>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>jdk24u-fix-SQE-ok-next</label>
                            <label>jdk24u-fix-request</label>
                            <label>jdk24u-fix-yes</label>
                            <label>ubsan</label>
                    </labels>
                <created>Wed, 8 Jan 2025 05:19:35 -0800</created>
                <updated>Sun, 30 Mar 2025 08:53:35 -0700</updated>
                            <resolved>Fri, 10 Jan 2025 02:07:10 -0800</resolved>
                                    <version>24</version>
                    <version>25</version>
                                    <fixVersion>25</fixVersion>
                                    <component>core-svc</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                                                                <comments>
                            <comment id="14764978" author="mbaesken" created="Fri, 28 Mar 2025 01:52:21 -0700"  >jdk17u-dev backport request&lt;br/&gt;
I would like to have the fix in jdk17u-dev too, because the issue is present there too. The patch is clean and low risk.</comment>
                            <comment id="14764738" author="roboduke" created="Thu, 27 Mar 2025 09:17:26 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/3408&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/3408&lt;/a&gt;&lt;br/&gt;
Date: 2025-03-27 15:55:43 +0000</comment>
                            <comment id="14754308" author="roboduke" created="Mon, 17 Feb 2025 05:09:35 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/1407&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/1407&lt;/a&gt;&lt;br/&gt;
Date: 2025-02-17 13:01:27 +0000</comment>
                            <comment id="14754304" author="mbaesken" created="Mon, 17 Feb 2025 05:06:02 -0800"  >jdk21u-dev backport request&lt;br/&gt;
I would like to have the fix in jdk21u-dev too, because the issue is present there too. The patch is clean and low risk.</comment>
                            <comment id="14749605" author="roboduke" created="Wed, 5 Feb 2025 04:32:38 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk24u/pull/52&quot;&gt;https://git.openjdk.org/jdk24u/pull/52&lt;/a&gt;&lt;br/&gt;
Date: 2025-02-05 12:27:25 +0000</comment>
                            <comment id="14749604" author="mbaesken" created="Wed, 5 Feb 2025 04:29:48 -0800"  >jdk24u backport request&lt;br/&gt;
I would like to have the fix in jdk24u too, because the issue is present there too. The patch is clean and low risk.</comment>
                            <comment id="14737311" author="mbaesken" created="Fri, 10 Jan 2025 04:39:09 -0800"  >here &lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blame/12752b0031643b3bf868de50b4455654162b2ee4/src/hotspot/os/bsd/os_perf_bsd.cpp#L140&quot;&gt;https://github.com/openjdk/jdk/blame/12752b0031643b3bf868de50b4455654162b2ee4/src/hotspot/os/bsd/os_perf_bsd.cpp#L140&lt;/a&gt;&lt;br/&gt;
int CPUPerformanceInterface::CPUPerformance::cpu_load_total_process(double* cpu_load) {&lt;br/&gt;
&lt;br/&gt;
we have similar code in HS and check already for total_delta == 0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;if (total_delta == 0) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Avoid division by zero&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return OS_ERR;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
so in the HS version of the coding this was already addressed.  But sure if it is bad that we return now 0  in the jdk.management coding  but  OS_ERR in HS. It looks a little inconsistent (but maybe it&amp;#39;s okay).</comment>
                            <comment id="14737265" author="dukebot" created="Fri, 10 Jan 2025 02:07:08 -0800"  >Changeset: 5e92a4ce&lt;br/&gt;
Branch: master&lt;br/&gt;
Author:    Matthias Baesken &amp;lt;&lt;a href=&apos;mailto:mbaesken@openjdk.org&apos;&gt;mbaesken@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2025-01-10 10:02:24 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/5e92a4ceafd0626e3600e44a3370ca2f5d9347c8&quot;&gt;https://git.openjdk.org/jdk/commit/5e92a4ceafd0626e3600e44a3370ca2f5d9347c8&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14737025" author="roboduke" created="Thu, 9 Jan 2025 07:22:46 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/23010&quot;&gt;https://git.openjdk.org/jdk/pull/23010&lt;/a&gt;&lt;br/&gt;
Date: 2025-01-09 15:13:01 +0000</comment>
                            <comment id="14736726" author="kevinw" created="Wed, 8 Jan 2025 07:17:13 -0800"  >Thanks for confirming!&lt;br/&gt;
&lt;br/&gt;
OldMBeanServerTest is not exactly a stress test, it&amp;#39;s not concurrent, but it does print all attributes...&lt;br/&gt;
&lt;br/&gt;
It shouldn&amp;#39;t be the first call of this function where there&amp;#39;s a problem, as we check and handle that, returning zero.&lt;br/&gt;
&lt;br/&gt;
On Linux, get_cpuload_internal returns zero if tick diff is zero.&lt;br/&gt;
&lt;br/&gt;
I think returning a constant zero here on mac would be good also - I read that as saying if zero ticks have passed, then zero cpu has been used (which kind of has to be true!...).&lt;br/&gt;
</comment>
                            <comment id="14736694" author="mbaesken" created="Wed, 8 Jan 2025 06:20:12 -0800"  >&amp;gt; Curious - this is a theoretical divide by zero?&lt;br/&gt;
&lt;br/&gt;
It is a practical divide by zero, when running the ubsan-enabled binaries on macOS aarch64.&lt;br/&gt;
Not sure how often this occurs, I just saw it today, when running the jtreg tests.&lt;br/&gt;
Should we set  total_delta to some small value like 1  or 0.1 when it is 0  ?</comment>
                            <comment id="14736685" author="kevinw" created="Wed, 8 Jan 2025 05:58:42 -0800"  >Curious - this is a theoretical divide by zero?&lt;br/&gt;
&lt;br/&gt;
67      jdouble cpu = (jdouble) used_delta / total_delta;&lt;br/&gt;
&lt;br/&gt;
For divide by zero, total_delta was zero, which came from:&lt;br/&gt;
&lt;br/&gt;
65      jlong total_delta = total - last_total;&lt;br/&gt;
&lt;br/&gt;
So we had  total == last_total&lt;br/&gt;
&lt;br/&gt;
As last_total is set to total at the end of this function (Java_com_sun_management_internal_OperatingSystemImpl_getCpuLoad0),&lt;br/&gt;
we would have to return, get called again, and see total recalculated and get the same result:&lt;br/&gt;
&lt;br/&gt;
53      jlong used  = load.cpu_ticks[CPU_STATE_USER] + load.cpu_ticks[CPU_STATE_NICE] + load.cpu_ticks[CPU_STATE_SYSTEM];&lt;br/&gt;
54      jlong total = used + load.cpu_ticks[CPU_STATE_IDLE];&lt;br/&gt;
&lt;br/&gt;
The call to host_statistics() would have to contain the same tick info again?&lt;br/&gt;
&lt;br/&gt;
Or maybe a concurrent or almost concurrent invocation can get very lucky/unlucky and hit a problem.&lt;br/&gt;
&lt;br/&gt;
The Linux version specifically avoids divide by zero but it&amp;#39;s just generally different.&lt;br/&gt;
&lt;br/&gt;
</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5150838">JDK-8350198</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5150967">JDK-8350312</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5151520">JDK-8350788</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5154336">JDK-8353228</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="19300"><![CDATA[aarch64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17017"><![CDATA[os_x]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i39b2z:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17334"><![CDATA[b06]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="194"><![CDATA[java.lang.management]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>