<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Sat Sep 27 10:07:06 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8136895] Writer not closed with disk full error, file resource leaked</title>
                <link>https://bugs.openjdk.org/browse/JDK-8136895</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>FULL PRODUCT VERSION :&lt;br/&gt;
java version &amp;quot;1.8.0_45&amp;quot;&lt;br/&gt;
Java(TM) SE Runtime Environment (build 1.8.0_45-b14)&lt;br/&gt;
Java HotSpot(TM) 64-Bit Server VM (build 25.45-b02, mixed mode)&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
ADDITIONAL OS VERSION INFORMATION :&lt;br/&gt;
Linux &amp;lt;host&amp;gt; 3.2.45-0.6.acc.624.45.283.amzn1acc.x86_64 #1 SMP Fri Nov 21 22:39:25 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux&lt;br/&gt;
&lt;br/&gt;
A DESCRIPTION OF THE PROBLEM :&lt;br/&gt;
When writing to a file and a disk full condition occurs, the file is not properly closed and the handle is leaked even though a try-with-resources is used.&lt;br/&gt;
&lt;br/&gt;
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :&lt;br/&gt;
use Files.newBufferedWriter() in a try with resources construct.  Write until disk full.  Check to see if file has been properly closed by checking open files.&lt;br/&gt;
&lt;br/&gt;
You can check open files on Linux like this:&lt;br/&gt;
sudo lsof -a +L1 /&lt;br/&gt;
(grep for the filename)&lt;br/&gt;
&lt;br/&gt;
EXPECTED VERSUS ACTUAL BEHAVIOR :&lt;br/&gt;
EXPECTED -&lt;br/&gt;
File should not be open, because the try with resources construct should have closed the file.&lt;br/&gt;
ACTUAL -&lt;br/&gt;
File remains open as reported by:  sudo lsof -a +L1 /&lt;br/&gt;
&lt;br/&gt;
ERROR MESSAGES/STACK TRACES THAT OCCUR :&lt;br/&gt;
This exception is generated:&lt;br/&gt;
&lt;br/&gt;
java.io.IOException: No space left on device&lt;br/&gt;
&amp;nbsp;&amp;nbsp;at sun.nio.ch.FileDispatcherImpl.write0(Native Method)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;at sun.nio.ch.FileDispatcherImpl.write(FileDispatcherImpl.java:60)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;at sun.nio.ch.IOUtil.write(IOUtil.java:65)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;at sun.nio.ch.FileChannelImpl.write(FileChannelImpl.java:210)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;at java.nio.channels.Channels.writeFullyImpl(Channels.java:78)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;at java.nio.channels.Channels.writeFully(Channels.java:101)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;at java.nio.channels.Channels.access$000(Channels.java:61)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;at java.nio.channels.Channels$1.write(Channels.java:174)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;at sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:221)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;at sun.nio.cs.StreamEncoder.implWrite(StreamEncoder.java:282)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;at sun.nio.cs.StreamEncoder.write(StreamEncoder.java:125)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;at java.io.OutputStreamWriter.write(OutputStreamWriter.java:207)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;at java.io.BufferedWriter.flushBuffer(BufferedWriter.java:129)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;at java.io.BufferedWriter.write(BufferedWriter.java:230)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;at java.io.Writer.write(Writer.java:157)&lt;br/&gt;
[... snip application level info ...]&lt;br/&gt;
Suppressed: java.io.IOException: No space left on device&lt;br/&gt;
&amp;nbsp;&amp;nbsp;at sun.nio.ch.FileDispatcherImpl.write0(Native Method)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;at sun.nio.ch.FileDispatcherImpl.write(FileDispatcherImpl.java:60)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;at sun.nio.ch.IOUtil.write(IOUtil.java:65)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;at sun.nio.ch.FileChannelImpl.write(FileChannelImpl.java:210)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;at java.nio.channels.Channels.writeFullyImpl(Channels.java:78)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;at java.nio.channels.Channels.writeFully(Channels.java:101)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;at java.nio.channels.Channels.access$000(Channels.java:61)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;at java.nio.channels.Channels$1.write(Channels.java:174)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;at sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:221)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;at sun.nio.cs.StreamEncoder.implClose(StreamEncoder.java:316)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;at sun.nio.cs.StreamEncoder.close(StreamEncoder.java:149)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;at java.io.OutputStreamWriter.close(OutputStreamWriter.java:233)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;at java.io.BufferedWriter.close(BufferedWriter.java:266)&lt;br/&gt;
[... snip application level info ...]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;... 4 more&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
REPRODUCIBILITY :&lt;br/&gt;
This bug can be reproduced always.&lt;br/&gt;
&lt;br/&gt;
---------- BEGIN SOURCE ----------&lt;br/&gt;
Run this junit test.  Set the path to a disk with limited space to save time.  When disk is full, the IOException will be printed.  Then, while the test continues to sleep, before termination, check for open files.&lt;br/&gt;
-----------------------------------&lt;br/&gt;
&lt;br/&gt;
import java.io.BufferedWriter;&lt;br/&gt;
import java.io.IOException;&lt;br/&gt;
import java.nio.charset.StandardCharsets;&lt;br/&gt;
import java.nio.file.Files;&lt;br/&gt;
import java.nio.file.Path;&lt;br/&gt;
import java.nio.file.Paths;&lt;br/&gt;
&lt;br/&gt;
import org.junit.Test;&lt;br/&gt;
&lt;br/&gt;
public class DiskFullTest {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;@Test&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public void diskFullTest() throws IOException, InterruptedException {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;StringBuffer text = new StringBuffer();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i = 0;  i &amp;lt; 10000;  i++) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;text.append(&amp;quot;HelloWorld!   &amp;quot;);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;String bigString = text.toString();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Path tempFile = Files.createTempFile(Paths.get(&amp;quot;/tmp&amp;quot;), &amp;quot;diskFullTest&amp;quot;, null);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try (BufferedWriter writer = Files.newBufferedWriter(tempFile, StandardCharsets.UTF_8)) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;while (true) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;writer.write(bigString);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;writer.newLine();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;} catch (IOException e) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.out.println(&amp;quot;Exception:  &amp;quot; + e);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Sleep while I check file handles&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;Thread.sleep(30000);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Of course file handles are released when the JVM exits&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
---------- END SOURCE ----------&lt;br/&gt;
&lt;br/&gt;
CUSTOMER SUBMITTED WORKAROUND :&lt;br/&gt;
No workaround known.&lt;br/&gt;
&lt;br/&gt;
</description>
                <environment></environment>
        <key id="4831956">JDK-8136895</key>
            <summary>Writer not closed with disk full error, file resource leaked</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://bugs.openjdk.org/images/jbsImages/p4.png">P4</priority>
                        <status id="6" iconUrl="https://bugs.openjdk.org/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="bpb">Brian Burkhalter</assignee>
                                    <reporter username="webbuggrp">Webbug Group</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>dcs-pso</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>webbug</label>
                    </labels>
                <created>Fri, 12 Jun 2015 22:09:02 -0700</created>
                <updated>Fri, 13 Jun 2025 07:50:05 -0700</updated>
                            <resolved>Fri, 21 Jul 2023 08:22:38 -0700</resolved>
                                    <version>7</version>
                    <version>8</version>
                    <version>9</version>
                    <version>11</version>
                    <version>17</version>
                    <version>21</version>
                                    <fixVersion>22</fixVersion>
                                    <component>core-libs</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>11</watches>
                                                                                                                <comments>
                            <comment id="14768984" author="roboduke" created="Thu, 10 Apr 2025 09:32:42 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/1632&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/1632&lt;/a&gt;&lt;br/&gt;
Date: 2025-04-09 20:28:15 +0000</comment>
                            <comment id="14768983" author="roboduke" created="Thu, 10 Apr 2025 09:32:40 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/3475&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/3475&lt;/a&gt;&lt;br/&gt;
Date: 2025-04-09 20:40:01 +0000</comment>
                            <comment id="14768982" author="roboduke" created="Thu, 10 Apr 2025 09:30:40 -0700"  >[jdk17u-fix-request] Approval Request from Daniel Hu&lt;br/&gt;
Fixes bug with file writer leaking and not closing when encountering a disk full error. Applies cleanly. Patched in JDK22, and no known bugs from this change. New tests fail without the fix, and passes with it. Risk is low given the length of time in mainline and minor change.</comment>
                            <comment id="14768981" author="roboduke" created="Thu, 10 Apr 2025 09:29:03 -0700"  >[jdk21u-fix-request] Approval Request from Daniel Hu&lt;br/&gt;
Fixes bug with file writer leaking and not closing when encountering a disk full error. Applies cleanly. Patched in JDK22, and no known bugs from this change. New tests fail without the fix, and passes with it. Risk is low given the length of time in mainline and minor change.</comment>
                            <comment id="14597921" author="dukebot" created="Fri, 21 Jul 2023 08:22:37 -0700"  >Changeset: d55d7e8d&lt;br/&gt;
Author:    Brian Burkhalter &amp;lt;&lt;a href=&apos;mailto:bpb@openjdk.org&apos;&gt;bpb@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2023-07-21 15:21:02 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/d55d7e8d87670043dd22ec6a3fb6cc49b39000cd&quot;&gt;https://git.openjdk.org/jdk/commit/d55d7e8d87670043dd22ec6a3fb6cc49b39000cd&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14574386" author="roboduke" created="Mon, 17 Apr 2023 19:08:40 -0700"  >A pull request was submitted for review.&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/13503&quot;&gt;https://git.openjdk.org/jdk/pull/13503&lt;/a&gt;&lt;br/&gt;
Date: 2023-04-18 02:03:19 +0000</comment>
                            <comment id="14566220" author="JIRAUSER19825" created="Mon, 13 Mar 2023 01:49:55 -0700"  >The issue is caused by StreamEncoder not closing the underlying stream when a write operation fails during StreamEncoder.close().&lt;br/&gt;
&lt;br/&gt;
Attached a smaller reproducer (Scratch.java), copied from &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8220477&quot; title=&quot;Channels.newWriter() does not close if underlying channel throws an IOException&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8220477&quot;&gt;&lt;strike&gt;JDK-8220477&lt;/strike&gt;&lt;/a&gt; and adjusted for one additional failure mode.</comment>
                            <comment id="14034574" author="bpb" created="Tue, 20 Dec 2016 14:22:21 -0800"  >I am unable to reproduce the DiskFullTest error on Ubuntu 16.04 x86_64: no files appear to remain open.&lt;br/&gt;
&lt;br/&gt;
As regards the attached DeleteFileTest, the test itself appears to be in error. The try-with-resources statement should begin with&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;try (FileWriter fw = new FileWriter(file1);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;BufferedWriter writer = new BufferedWriter(fw)) {&lt;br/&gt;
&lt;br/&gt;
otherwise the close() method of the FileWriter wrapped by the BufferedWriter will not be closed automatically. The behavior is however different on Linux and Windows. On Linux the file is deleted in both situations, but on Windows it is not deleted using the attached version of DeleteFileTest, but it is deleted if the try statement is changed to the above.</comment>
                            <comment id="13846132" author="psonal" created="Tue, 22 Sep 2015 01:01:47 -0700"  >Attached test case was executed on Windows 7 on JDK 7, 7u80, 8, 8u60 and 9EAb78 - failed on all.&lt;br/&gt;
Related bug :&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-6266377&quot; title=&quot;BufferedWriter.close() fails to release resources if exception occurs during flush&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-6266377&quot;&gt;&lt;strike&gt;JDK-6266377&lt;/strike&gt;&lt;/a&gt;&lt;br/&gt;
This was fixed in JDK 6, but looks like the &amp;quot;try with resources &amp;quot; introduced in JDK 7 didn&amp;#39;t consider this fix.&lt;br/&gt;
Moving across to dev-team to fix this.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5155774">JDK-8354533</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5161513">JDK-8359447</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="4861698">JDK-8147534</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="53443" name="DeleteFileTest.java" size="1098" author="psonal" created="Tue, 22 Sep 2015 01:01:23 -0700"/>
                            <attachment id="102959" name="Scratch.java" size="1259" author="djelinski" created="Mon, 13 Mar 2023 01:49:41 -0700"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17008"><![CDATA[generic]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                <customfield id="customfield_10004" key="com.atlassian.jira.plugin.system.customfieldtypes:version">
                        <customfieldname>Introduced In Version</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue id="11810">7</customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_10005" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>OS</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17010"><![CDATA[generic]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                            <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i1elxr:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>295155</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17337"><![CDATA[b08]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="244"><![CDATA[java.io]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10100" key="com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons">
                        <customfieldname>Verification</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17000"><![CDATA[Verified]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>