<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Sat Sep 27 09:54:52 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8342498] Add test for Allocation elimination after use as alignment reference by SuperWord</title>
                <link>https://bugs.openjdk.org/browse/JDK-8342498</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>We should add the TestA4.java to regression testing, and probably backport it at least to JDK11.&lt;br/&gt;
&lt;br/&gt;
It turns out that the bug is already fixed in all old versions with JDK-8328544 and its backport of this snipped:&lt;br/&gt;
&lt;br/&gt;
// We did not find the int_index. Just to be safe, reject this VPointer.&lt;br/&gt;
if (!_has_int_index_after_convI2L) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
But if somebody were to remove it, we would re-reveal the bug with the CastX2P and Allocation removal, described below.&lt;br/&gt;
&lt;br/&gt;
------------------------------------------------------------------ Original Description ------------------------------------------------------------------&lt;br/&gt;
&lt;br/&gt;
During the investigation of &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8339349&quot; title=&quot;Crash in the GC running the DaCapo spring benchmark&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8339349&quot;&gt;&lt;strike&gt;JDK-8339349&lt;/strike&gt;&lt;/a&gt;, we found a replay file that has a different failure mode.&lt;br/&gt;
&lt;br/&gt;
unuzip jars.zip -&amp;gt; place in jars directory.&lt;br/&gt;
&lt;br/&gt;
[~thartmann] narrowed it down:&lt;br/&gt;
&amp;gt; I narrowed it down. The issue is introduced/triggered by &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8308606&quot; title=&quot;C2 SuperWord: remove alignment checks when not required&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8308606&quot;&gt;&lt;strike&gt;JDK-8308606&lt;/strike&gt;&lt;/a&gt; in JDK 22 b03 (see hs_err_pid1979173.log) and fixed/hidden by &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8310190&quot; title=&quot;C2 SuperWord: AlignVector is broken, generates misaligned packs&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8310190&quot;&gt;&lt;strike&gt;JDK-8310190&lt;/strike&gt;&lt;/a&gt; in JDK 23 b05.&lt;br/&gt;
&amp;gt; Emanuel, please have a look and verify that the fix was indeed introduced by &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8308606&quot; title=&quot;C2 SuperWord: remove alignment checks when not required&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8308606&quot;&gt;&lt;strike&gt;JDK-8308606&lt;/strike&gt;&lt;/a&gt; and fixed &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8310190&quot; title=&quot;C2 SuperWord: AlignVector is broken, generates misaligned packs&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8310190&quot;&gt;&lt;strike&gt;JDK-8310190&lt;/strike&gt;&lt;/a&gt;. If so, we need to re-triage those bugs.&lt;br/&gt;
&lt;br/&gt;
DEBUG:&lt;br/&gt;
&lt;br/&gt;
/oracle-work/jdk-fork1/build/linux-x64-debug/jdk/bin/java -XX:+ReplayCompiles -XX:+ReplayIgnoreInitErrors -XX:ReplayDataFile=replay_pid3400217.log -cp &amp;quot;jars/*:jars/&amp;quot; -XX:+TraceSuperWord -XX:+UseSuperWord -XX:+TraceNewVectors -Xbatch -XX:+UseG1GC -XX:+PrintIdeal&lt;br/&gt;
&lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error (/oracle-work/jdk-fork1/open/src/hotspot/share/gc/g1/c2/g1BarrierSetC2.cpp:730), pid=980994, tid=981014&lt;br/&gt;
#  Error: assert(this_region != nullptr) failed&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (23.0) (fastdebug build 23-internal-2024-10-14-1158199.emanuel...)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 23-internal-2024-10-14-1158199.emanuel..., mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0xc38091]  G1BarrierSetC2::eliminate_gc_barrier(PhaseMacroExpand*, Node*) const+0x411&lt;br/&gt;
#&lt;br/&gt;
# Core dump will be written. Default location: Core dumps may be processed with &amp;quot;/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E&amp;quot; (or dumping to /oracle-work/&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8339349&quot; title=&quot;Crash in the GC running the DaCapo spring benchmark&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8339349&quot;&gt;&lt;strike&gt;JDK-8339349&lt;/strike&gt;&lt;/a&gt;/core.980994)&lt;br/&gt;
#&lt;br/&gt;
# An error report file with more information is saved as:&lt;br/&gt;
# /oracle-work/&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8339349&quot; title=&quot;Crash in the GC running the DaCapo spring benchmark&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8339349&quot;&gt;&lt;strike&gt;JDK-8339349&lt;/strike&gt;&lt;/a&gt;/hs_err_pid980994.log&lt;br/&gt;
#&lt;br/&gt;
# If you would like to submit a bug report, please visit:&lt;br/&gt;
#   &lt;a href=&quot;https://bugreport.java.com/bugreport/crash.jsp&quot;&gt;https://bugreport.java.com/bugreport/crash.jsp&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C2:56926  186    b  4       org.apache.coyote.http11.Http11OutputBuffer::write (93 bytes)&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00007facbd1bc000,0x00007facbd2bd000],  sp=0x00007facbd2b7fa0,  free space=1007k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0xc38091]  G1BarrierSetC2::eliminate_gc_barrier(PhaseMacroExpand*, Node*) const+0x411  (g1BarrierSetC2.cpp:730)&lt;br/&gt;
V  [libjvm.so+0x12d3064]  PhaseMacroExpand::process_users_of_allocation(CallNode*)+0x694  (macro.cpp:159)&lt;br/&gt;
V  [libjvm.so+0x12decae]  PhaseMacroExpand::eliminate_allocate_node(AllocateNode*)+0x35e  (macro.cpp:1100)&lt;br/&gt;
V  [libjvm.so+0x12df2b2]  PhaseMacroExpand::eliminate_macro_nodes()+0x3b2  (macro.cpp:2386)&lt;br/&gt;
V  [libjvm.so+0x12df569]  PhaseMacroExpand::expand_macro_nodes()+0x19  (macro.cpp:2434)&lt;br/&gt;
V  [libjvm.so+0x9ece06]  Compile::Optimize()+0xef6  (compile.cpp:2446)&lt;br/&gt;
V  [libjvm.so+0x9f04cb]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1beb  (compile.cpp:857)&lt;br/&gt;
V  [libjvm.so+0x83dc17]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1e7  (c2compiler.cpp:134)&lt;br/&gt;
V  [libjvm.so+0x9fba8c]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x92c  (compileBroker.cpp:2299)&lt;br/&gt;
V  [libjvm.so+0x9fc718]  CompileBroker::compiler_thread_loop()+0x468  (compileBroker.cpp:1958)&lt;br/&gt;
V  [libjvm.so+0xeb99ac]  JavaThread::thread_main_inner()+0xcc  (javaThread.cpp:721)&lt;br/&gt;
V  [libjvm.so+0x179e956]  Thread::call_run()+0xb6  (thread.cpp:220)&lt;br/&gt;
V  [libjvm.so+0x14a92a7]  thread_native_entry(Thread*)+0x127  (os_linux.cpp:789)&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
PRODUCT:&lt;br/&gt;
&lt;br/&gt;
/oracle-work/jdk-fork1/build/linux-x64/jdk/bin/java -XX:+UnlockDiagnosticVMOptions -XX:+ReplayCompiles -XX:+ReplayIgnoreInitErrors -XX:ReplayDataFile=replay_pid3400217.log -cp &amp;quot;jars/*:jars/&amp;quot; -XX:+UseSuperWord -Xbatch -XX:+UseG1GC&lt;br/&gt;
&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  SIGSEGV (0xb) at pc=0x00007fc3455e00fa, pid=892245, tid=892653&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (23.0) (build 23-internal-2024-10-14-1157432.xyz...)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (23-internal-2024-10-14-1157432.xyz..., mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0x7910fa]  G1BarrierSetC2::eliminate_gc_barrier(PhaseMacroExpand*, Node*) const+0x22a&lt;br/&gt;
#&lt;br/&gt;
# Core dump will be written. Default location: Core dumps may be processed with &amp;quot;/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E&amp;quot; (or dumping to /oracle-work/&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8339349&quot; title=&quot;Crash in the GC running the DaCapo spring benchmark&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8339349&quot;&gt;&lt;strike&gt;JDK-8339349&lt;/strike&gt;&lt;/a&gt;/core.892245)&lt;br/&gt;
#&lt;br/&gt;
# An error report file with more information is saved as:&lt;br/&gt;
# /oracle-work/&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8339349&quot; title=&quot;Crash in the GC running the DaCapo spring benchmark&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8339349&quot;&gt;&lt;strike&gt;JDK-8339349&lt;/strike&gt;&lt;/a&gt;/hs_err_pid892245.log&lt;br/&gt;
#&lt;br/&gt;
# If you would like to submit a bug report, please visit:&lt;br/&gt;
#   &lt;a href=&quot;https://bugreport.java.com/bugreport/crash.jsp&quot;&gt;https://bugreport.java.com/bugreport/crash.jsp&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C2:42341  186    b  4       org.apache.coyote.http11.Http11OutputBuffer::write (93 bytes)&lt;br/&gt;
&lt;br/&gt;
Stack: [0x00007fc30efaf000,0x00007fc30f0b0000],  sp=0x00007fc30f0ab760,  free space=1009k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x7910fa]  G1BarrierSetC2::eliminate_gc_barrier(PhaseMacroExpand*, Node*) const+0x22a  (node.hpp:406)&lt;br/&gt;
V  [libjvm.so+0xbd119f]  PhaseMacroExpand::process_users_of_allocation(CallNode*)+0x6bf  (macro.cpp:159)&lt;br/&gt;
V  [libjvm.so+0xbd6d0e]  PhaseMacroExpand::eliminate_allocate_node(AllocateNode*)+0x1ee  (macro.cpp:1100)&lt;br/&gt;
V  [libjvm.so+0xbd6e92]  PhaseMacroExpand::eliminate_macro_nodes()+0x122  (macro.cpp:2386)&lt;br/&gt;
V  [libjvm.so+0xbd6f39]  PhaseMacroExpand::expand_macro_nodes()+0x19  (macro.cpp:2434)&lt;br/&gt;
V  [libjvm.so+0x641bee]  Compile::Optimize()+0x89e  (compile.cpp:2446)&lt;br/&gt;
V  [libjvm.so+0x6432ad]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0xedd  (compile.cpp:857)&lt;br/&gt;
V  [libjvm.so+0x56b091]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1f1  (c2compiler.cpp:134)&lt;br/&gt;
V  [libjvm.so+0x648c71]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xae1  (compileBroker.cpp:2299)&lt;br/&gt;
V  [libjvm.so+0x64bd58]  CompileBroker::compiler_thread_loop()+0x498  (compileBroker.cpp:1958)&lt;br/&gt;
V  [libjvm.so+0x909d38]  JavaThread::thread_main_inner() [clone .part.0]+0xb8  (javaThread.cpp:721)&lt;br/&gt;
V  [libjvm.so+0xebcf7f]  Thread::call_run()+0x9f  (thread.cpp:220)&lt;br/&gt;
V  [libjvm.so+0xce0485]  thread_native_entry(Thread*)+0xd5  (os_linux.cpp:789)</description>
                <environment></environment>
        <key id="5141835">JDK-8342498</key>
            <summary>Add test for Allocation elimination after use as alignment reference by SuperWord</summary>
                <type id="7" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14707&amp;avatarType=issuetype">Enhancement</type>
                                            <priority id="2" iconUrl="https://bugs.openjdk.org/images/jbsImages/p2.png">P2</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="epeter">Emanuel Peter</assignee>
                                    <reporter username="epeter">Emanuel Peter</reporter>
                        <labels>
                            <label>c2</label>
                            <label>c2-superword</label>
                            <label>gc-g1</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>noreg-self</label>
                            <label>oracle-triage-24</label>
                    </labels>
                <created>Thu, 17 Oct 2024 02:06:26 -0700</created>
                <updated>Fri, 14 Mar 2025 02:01:14 -0700</updated>
                            <resolved>Tue, 5 Nov 2024 03:48:49 -0800</resolved>
                                    <version>11</version>
                    <version>17</version>
                    <version>21</version>
                    <version>22</version>
                    <version>23</version>
                    <version>24</version>
                                    <fixVersion>24</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>5</watches>
                                                                                                                <comments>
                            <comment id="14737759" author="roboduke" created="Mon, 13 Jan 2025 02:05:37 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/1325&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/1325&lt;/a&gt;&lt;br/&gt;
Date: 2025-01-13 09:57:06 +0000</comment>
                            <comment id="14737758" author="roboduke" created="Mon, 13 Jan 2025 02:03:18 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/3208&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/3208&lt;/a&gt;&lt;br/&gt;
Date: 2025-01-13 09:57:15 +0000</comment>
                            <comment id="14737750" author="goetz" created="Mon, 13 Jan 2025 01:54:07 -0800"  >Fix request [21u,17u]&lt;br/&gt;
&lt;br/&gt;
I backport this for parity with 21.0.7-oracle,17.0.15-oracle.&lt;br/&gt;
No risk, only a test change.&lt;br/&gt;
Clean backport.&lt;br/&gt;
Test passes. SAP nightly testing passed.</comment>
                            <comment id="14719186" author="dukebot" created="Tue, 5 Nov 2024 03:48:48 -0800"  >Changeset: f62fc484&lt;br/&gt;
Branch: master&lt;br/&gt;
Author:    Emanuel Peter &amp;lt;&lt;a href=&apos;mailto:epeter@openjdk.org&apos;&gt;epeter@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-11-05 11:47:42 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/f62fc4844125cc20a91dc2be39ba05a2d3aca8cf&quot;&gt;https://git.openjdk.org/jdk/commit/f62fc4844125cc20a91dc2be39ba05a2d3aca8cf&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14718880" author="roboduke" created="Mon, 4 Nov 2024 05:30:57 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/21875&quot;&gt;https://git.openjdk.org/jdk/pull/21875&lt;/a&gt;&lt;br/&gt;
Date: 2024-11-04 13:13:58 +0000</comment>
                            <comment id="14718865" author="JIRAUSER19821" created="Mon, 4 Nov 2024 04:26:20 -0800"  >I&amp;#39;m changing this to an RFE. The bug seems fixed in all old versions - sort of &amp;quot;on accident&amp;quot; - by JDK-8328544. But we should add the regression test, and probably backport it too.</comment>
                            <comment id="14718842" author="JIRAUSER19821" created="Mon, 4 Nov 2024 02:18:28 -0800"  >JDK11 would be equally affected without the &amp;quot;ust to be safe&amp;quot; patch.&lt;br/&gt;
With JDK8 I did not have luck with that trick... maybe the Allocation just does not get eliminated. But it seems we do indeed vectorize and add the CastP2X for the field-store. I don&amp;#39;t want to investigate more for now.</comment>
                            <comment id="14718823" author="JIRAUSER19821" created="Mon, 4 Nov 2024 01:14:57 -0800"  >For JDK17, we have the same as for JDK21: If I return &amp;quot;true&amp;quot; instead, then we crash. I slightly adjusted the test again.&lt;br/&gt;
&lt;br/&gt;
/oracle-work/fork-cpu-jdk17/build/linux-x64-debug/jdk/bin/java --add-opens java.base/jdk.internal.misc=ALL-UNNAMED --add-exports java.base/jdk.internal.misc=ALL-UNNAMED -XX:+TraceSuperWord -XX:+UseSuperWord -XX:+TraceNewVectors -Xbatch -XX:+UseG1GC -XX:+PrintEliminateAllocations -XX:-PrintIdeal -XX:+PrintEscapeAnalysis -Xbatch -XX:CompileCommand=compileonly,TestA4::test -XX:CompileCommand=printcompilation,TestA4::test -XX:+TraceLoopOpts -XX:-SplitIfBlocks -XX:LoopMaxUnroll=8 -XX:DominatorSearchLimit=45 TestA4.java&lt;br/&gt;
&lt;br/&gt;
This this test also reproduces with the modified JDK21 and JDK23.</comment>
                            <comment id="14718801" author="JIRAUSER19821" created="Mon, 4 Nov 2024 00:10:45 -0800"  >It is clear that this bug was introduced before  &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8308606&quot; title=&quot;C2 SuperWord: remove alignment checks when not required&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8308606&quot;&gt;&lt;strike&gt;JDK-8308606&lt;/strike&gt;&lt;/a&gt;. Though it seems that the patch in JDK-8328544 fixed this issue. And this patch is backported now. I&amp;#39;m just a little worried that because of the &amp;quot;just to be safe&amp;quot; comment, this might be understood as overly safe... and reverted because it might be a performance regression. Such a &amp;quot;regression fix&amp;quot; would then only re-reveal this bug on older JDK, not on the newest JDK because there we would never use a non-vectorized mem_ref for alignment.&lt;br/&gt;
&lt;br/&gt;
// We did not find the int_index. Just to be safe, reject this VPointer.&lt;br/&gt;
if (!_has_int_index_after_convI2L) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
}</comment>
                            <comment id="14718786" author="JIRAUSER19821" created="Sun, 3 Nov 2024 23:51:47 -0800"  >I investigated 21.0.6+3 ... and we also get blocked because of this patch, which was backported to JDK21 and lower:&lt;br/&gt;
&lt;br/&gt;
// We did not find the int_index. Just to be safe, reject this VPointer.&lt;br/&gt;
if (!_has_int_index_after_convI2L) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
If I return true instead, then the StoreL VPointer (aka SWPointer) is valid.&lt;br/&gt;
&lt;br/&gt;
I had to modify the example a little, but it then triggers:&lt;br/&gt;
&lt;br/&gt;
/oracle-work/fork-cpu-jdk21/build/linux-x64-debug/jdk/bin/java --add-opens java.base/jdk.internal.misc=ALL-UNNAMED --add-exports java.base/jdk.internal.misc=ALL-UNNAMED -XX:+TraceSuperWord -XX:+UseSuperWord -XX:+TraceNewVectors -Xbatch -XX:+UseG1GC -XX:+PrintEliminateAllocations -XX:-PrintIdeal -XX:+PrintEscapeAnalysis -Xbatch -XX:CompileCommand=compileonly,TestA3::test -XX:CompileCommand=printcompilation,TestA3::test -XX:+TraceLoopOpts -XX:-SplitIfBlocks -XX:LoopMaxUnroll=8 -XX:DominatorSearchLimit=45 TestA3.java&lt;br/&gt;
&lt;br/&gt;
So it would be worth adding this test and backporting it, even if currently the JDK21 does not allow taking field-stores as mem_ref.</comment>
                            <comment id="14718545" author="JIRAUSER19821" created="Fri, 1 Nov 2024 05:55:47 -0700"  >Side note:&lt;br/&gt;
In the replay file, the Node::dominates check failed because of a dead path somewhere. This should now be fixed with &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8333334&quot; title=&quot;C2: Make result of `Node::dominates` more precise to enhance scalar replacement&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8333334&quot;&gt;&lt;strike&gt;JDK-8333334&lt;/strike&gt;&lt;/a&gt;.</comment>
                            <comment id="14718303" author="JIRAUSER19821" created="Thu, 31 Oct 2024 08:16:09 -0700"  >Now digging a little more into affected versions. I&amp;#39;m taking the newest versions of every JDK that I can get today.&lt;br/&gt;
&lt;br/&gt;
############ 21.0.6+3&lt;br/&gt;
I cannot make it to work... would have to research a bit more why though.&lt;br/&gt;
&lt;br/&gt;
I suspect that it is also the VPointer::is_safe_to_use_as_simple_form change that was packported. See more info below, for later JDK versions.&lt;br/&gt;
&lt;br/&gt;
############ jdk-22.0.2 -&amp;gt; asserts&lt;br/&gt;
Not surprising, because as far as I know JDK22 is already not getting updates any more.&lt;br/&gt;
&lt;br/&gt;
/oracle-work/jdk-22.0.2/fastdebug/bin/java -XX:+TraceSuperWord -XX:+UseSuperWord -XX:+TraceNewVectors -Xbatch -XX:+UseG1GC -XX:+PrintEliminateAllocations -XX:-PrintIdeal -XX:+PrintEscapeAnalysis -Xbatch -XX:CompileCommand=compileonly,TestA2::test -XX:CompileCommand=printcompilation,TestA2::test -XX:+TraceLoopOpts -XX:-SplitIfBlocks -XX:LoopMaxUnroll=8 -XX:DominatorSearchLimit=45 TestA2.java&lt;br/&gt;
&lt;br/&gt;
############ 23.0.2+3    -  no assert / crash&lt;br/&gt;
This is because we now cannot get a the alignment reference from the B:offset.&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/jdk23/src/hotspot/share/opto/superword.cpp&quot;&gt;https://github.com/openjdk/jdk/blob/jdk23/src/hotspot/share/opto/superword.cpp&lt;/a&gt;&lt;br/&gt;
We now only take the alignment references from MemNode packs, see&lt;br/&gt;
SuperWord::determine_mem_ref_and_aw_for_main_loop_alignment.&lt;br/&gt;
To make that work, we would have to create a pack for B::offset.... not sure that can be done .. but I shall try later.&lt;br/&gt;
&lt;br/&gt;
Well... we can have 2 fields that are adjacent. Then, SuperWord might want to pack them. But it looks like the field accesses are judged to be invalid. More investigation needed.&lt;br/&gt;
&lt;br/&gt;
########## JDK24&lt;br/&gt;
&lt;br/&gt;
Ok, I also get invalid VPointers:&lt;br/&gt;
&lt;br/&gt;
VLoopVPointers::print:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;VPointer[mem: 2221     StoreB, base: 1243, adr: 1243,  base[1243] + offset(  16) + invar(   0) + scale(   1) * iv]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;VPointer[mem: 2215     StoreB, base: 1243, adr: 1243,  base[1243] + offset(  17) + invar(   0) + scale(   1) * iv]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;VPointer[mem: 2197     StoreB, base: 1243, adr: 1243,  base[1243] + offset(  18) + invar(   0) + scale(   1) * iv]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;VPointer[mem: 2196     StoreB, base: 1243, adr: 1243,  base[1243] + offset(  19) + invar(   0) + scale(   1) * iv]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;VPointer[mem: 2088     StoreB, base: 1243, adr: 1243,  base[1243] + offset(  20) + invar(   0) + scale(   1) * iv]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;VPointer[mem: 2082     StoreB, base: 1243, adr: 1243,  base[1243] + offset(  21) + invar(   0) + scale(   1) * iv]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;VPointer[mem: 1343     StoreL, invalid]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;VPointer[mem: 1345     StoreL, invalid]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;VPointer[mem: 1347     StoreL, invalid]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;VPointer[mem: 1353     StoreL, invalid]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;VPointer[mem: 1355     StoreL, invalid]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;VPointer[mem: 1357     StoreL, invalid]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;VPointer[mem: 1351     StoreL, invalid]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;VPointer[mem: 1349     StoreL, invalid]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;VPointer[mem: 1361     StoreL, invalid]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;VPointer[mem: 1970     StoreB, base: 1243, adr: 1243,  base[1243] + offset(  22) + invar(   0) + scale(   1) * iv]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;VPointer[mem: 1341     StoreB, base: 1243, adr: 1243,  base[1243] + offset(  23) + invar(   0) + scale(   1) * iv]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;VPointer[mem: 1359     StoreL, invalid]&lt;br/&gt;
&lt;br/&gt;
Why does that happen? Ah, due to a recent change, in VPointer::is_safe_to_use_as_simple_form:&lt;br/&gt;
&lt;br/&gt;
// We did not find the int_index. Just to be safe, reject this VPointer.&lt;br/&gt;
if (!_has_int_index_after_convI2L) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
What would happen if we removed that (possibly unnecessary) restriction, i.e. if we return true instead? ... well we cannot really get the field stores to be found adjacent because they are put in different slices.&lt;br/&gt;
&lt;br/&gt;
I tried to split the field store with Unsafe... but then it tags the Allocate as NSR. So that seems safe...?&lt;br/&gt;
&lt;br/&gt;
Still, this makes me a little nervous, that also JDK24 could be somehow affected.. just in a less obvious way.</comment>
                            <comment id="14718297" author="JIRAUSER19821" created="Thu, 31 Oct 2024 07:37:31 -0700"  >Wow, I was able to find a Testa2.java, which requires no VM changes. Just some odd VM flags. Maybe those could also be removed with more code changes... but not sure that is worth the effort.&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;// Summary:&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//  - Some B allocations are detected as NoEscape, but cannot be removed because of a field load.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//  - The field loads cannot be LoadNode::split_through_phi because DominatorSearchLimit is too low&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//    for the dominates query to look through some IfNode / IfProj path.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//  - We go into loop-opts.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//  - In theory, the Stores of B::offset would be moved out of the loop. But we disable&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//    PhaseIdealLoop::try_move_store_after_loop by setting -XX:-SplitIfBlocks.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//  - The field loads are folded away because of some MaxUnroll trick, where the val constant folds to 1.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//  - SuperWord eventually kicks in, and vectorizes the array stores.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//  - Since some vectorization has happened, SuperWord wants to align the main loop with a memory reference&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//    in the loop. The code here is not very smart, and just picks the memory reference that occurs the&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//    most often. But the B::offset stores occur more often than the array stores, and so we align to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//    one of the B::offset stores. This inserts a CastP2X under the CheckCastPP of the B allocation.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//  - Once loop opts is over, we eventually go into macro expansion.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//  - During macro expansion, we now discover that the Allocations were marked NoEscape, and that by now&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//    there are no field loads any more: yay, we can remove the allocation!&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//  - ... except that there is the CastP2X from SuperWord alignment ...&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//  - The Allocation removal code wants to pattern match the CastP2X as part of a GC barrier, but then&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//    the pattern does not conform to the expecatation - it is after all from SuperWord. This leads to&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;//    an assert, and SIGSEGV in product, at least with G1GC.&lt;br/&gt;
&lt;br/&gt;
JDK: jdk-23+4&lt;br/&gt;
&lt;br/&gt;
With all my debug flags:&lt;br/&gt;
/oracle-work/jdk-fork1/build/linux-x64-debug/jdk/bin/java -XX:+TraceSuperWord -XX:+UseSuperWord -XX:+TraceNewVectors -Xbatch -XX:+UseG1GC -XX:+PrintEliminateAllocations -XX:-PrintIdeal -XX:+PrintEscapeAnalysis -Xbatch -XX:CompileCommand=compileonly,TestA2::test -XX:CompileCommand=printcompilation,TestA2::test -XX:+TraceLoopOpts -XX:-SplitIfBlocks -XX:LoopMaxUnroll=8 -XX:DominatorSearchLimit=45 TestA2.java&lt;br/&gt;
&lt;br/&gt;
Or just with these flags:&lt;br/&gt;
/oracle-work/jdk-fork1/build/linux-x64-debug/jdk/bin/java -Xbatch -XX:-SplitIfBlocks -XX:LoopMaxUnroll=8 -XX:DominatorSearchLimit=45 TestA2.java&lt;br/&gt;
&lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error (/oracle-work/jdk-fork1/open/src/hotspot/share/gc/g1/c2/g1BarrierSetC2.cpp:730), pid=1299433, tid=1299447&lt;br/&gt;
#  Error: assert(this_region != nullptr) failed&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (23.0) (fastdebug build 23-internal-2024-10-14-1158199.emanuel...)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 23-internal-2024-10-14-1158199.emanuel..., mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0xc38091]  G1BarrierSetC2::eliminate_gc_barrier(PhaseMacroExpand*, Node*) const+0x411&lt;br/&gt;
#&lt;br/&gt;
# Core dump will be written. Default location: Core dumps may be processed with &amp;quot;/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E&amp;quot; (or dumping to /oracle-work/&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8339349&quot; title=&quot;Crash in the GC running the DaCapo spring benchmark&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8339349&quot;&gt;&lt;strike&gt;JDK-8339349&lt;/strike&gt;&lt;/a&gt;/core.1299433)&lt;br/&gt;
#&lt;br/&gt;
# An error report file with more information is saved as:&lt;br/&gt;
# /oracle-work/&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8339349&quot; title=&quot;Crash in the GC running the DaCapo spring benchmark&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8339349&quot;&gt;&lt;strike&gt;JDK-8339349&lt;/strike&gt;&lt;/a&gt;/hs_err_pid1299433.log&lt;br/&gt;
#&lt;br/&gt;
# Compiler replay data is saved as:&lt;br/&gt;
# /oracle-work/&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8339349&quot; title=&quot;Crash in the GC running the DaCapo spring benchmark&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8339349&quot;&gt;&lt;strike&gt;JDK-8339349&lt;/strike&gt;&lt;/a&gt;/replay_pid1299433.log&lt;br/&gt;
#&lt;br/&gt;
# If you would like to submit a bug report, please visit:&lt;br/&gt;
#   &lt;a href=&quot;https://bugreport.java.com/bugreport/crash.jsp&quot;&gt;https://bugreport.java.com/bugreport/crash.jsp&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14718211" author="JIRAUSER19821" created="Thu, 31 Oct 2024 02:18:31 -0700"  >Progress update:&lt;br/&gt;
I can of course disable PhaseIdealLoop::try_move_store_after_loop with -XX:-SplitIfBlocks, and so I don&amp;#39;t need to make a VM change for that. Nice.</comment>
                            <comment id="14718018" author="JIRAUSER19821" created="Wed, 30 Oct 2024 07:06:49 -0700"  >Current Best Explanation&lt;br/&gt;
----------------------------------&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;public static int test(char[] a) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;B b = new B();&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (int i = 0; i &amp;lt; a.length; i++) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;a[i] = (char)i;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b.offset++;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return b.offset;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
The Allocation from &amp;quot;B b = new B();&amp;quot; has these uses:&lt;br/&gt;
&amp;nbsp;- LoadI + StoreI in loop&lt;br/&gt;
&amp;nbsp;- LoadI for return&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;And during SuperWord: we align to some memory-reference in the loop. Accidentally we pick the StoreI for b.offset.&lt;br/&gt;
This means we insert a CastP2X for the base pointer of that reference, which is the CheckCastPP of the Allocation:&lt;br/&gt;
46  CheckCastPP  === 43 41  [[ 257 89 135 89 ]]  #Test$B:NotNull:exact *,iid=29  Oop:Test$B:NotNull:exact *,iid=29 !jvms: Test::test @ bci:0 (line 19)&lt;br/&gt;
&lt;br/&gt;
Later (sometime after SuperWord), all the loads of the &amp;quot;b&amp;quot; object disappear (in part because I delayed some of the relevant optimizations).&lt;br/&gt;
Now, during macro expansion, the Allocation can be removed, because it is scalar.&lt;br/&gt;
But during the removal, we now find the CastP2X, and assume it belongs to the barrier code. We hit an assert/SIGSEGV because the pattern looks different than expected - after all it is not barrier code but SuperWord alignment code!&lt;br/&gt;
&lt;br/&gt;
This is the relevant part of the graph, at the time of the assert:&lt;br/&gt;
&lt;br/&gt;
(rr) p find_node(46)-&amp;gt;dump_bfs(15,0,&amp;quot;#dMC-&amp;quot;)&lt;br/&gt;
dist dump&lt;br/&gt;
---------------------------------------------&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;0    46  CheckCastPP  === 43 41  [[ 89 89 956 ]]  #Test$B:NotNull:exact *,iid=29  Oop:Test$B:NotNull:exact *,iid=29 !jvms: Test::test @ bci:0 (line 19)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;1    89  AddP  === _ 46 46 88  [[ 209 975 310 343 ]]   Oop:Test$B:NotNull:exact+12 *,iid=29 !jvms: Test$B::&amp;lt;init&amp;gt; @ bci:6 (line 52) Test::test @ bci:4 (line 19)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;1   956  CastP2X  === _ 46  [[ 957 ]] &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;2   209  StoreI  === 1124 1132 89 207  [[ 1132 1021 1031 212 ]]  @Test$B+12 *, name=offset, idx=6;  Memory: @Test$B:NotNull:exact+12 *,iid=29, name=offset, idx=12; !orig=489 !jvms: Test::test @ bci:34 (line 43)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;2   975  StoreI  === 1013 1021 89 1006  [[ 1021 1031 ]]  @Test$B+12 *, name=offset, idx=6;  Memory: @Test$B:NotNull:exact+12 *,iid=29, name=offset, idx=12; !orig=209,489 !jvms: Test::test @ bci:34 (line 43)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;2   310  StoreI  === 320 322 89 311  [[ 322 331 ]]  @Test$B+12 *, name=offset, idx=6;  Memory: @Test$B:NotNull:exact+12 *,iid=29, name=offset, idx=12; !orig=209,489 !jvms: Test::test @ bci:34 (line 43)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;2   343  StoreI  === 353 355 89 344  [[ 355 1132 365 ]]  @Test$B+12 *, name=offset, idx=6;  Memory: @Test$B:NotNull:exact+12 *,iid=29, name=offset, idx=12; !orig=209,489 !jvms: Test::test @ bci:34 (line 43)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;2   957  ConvL2I  === _ 956  [[ 968 ]]  #int&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;3   968  URShiftI  === _ 957 441  [[ 969 ]] &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;4   969  AndI  === _ 968 900  [[ 962 ]]  !orig=[960]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;5   962  AddI  === _ 969 522  [[ 963 ]] &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;6   963  AndI  === _ 962 900  [[ 964 ]] &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;7   964  AddI  === _ 963 129  [[ 965 ]] &lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;8   965  MinI  === _ 964 115  [[ 347 ]]  !orig=[440]&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;9   347  CmpI  === _ 350 965  [[ 346 ]]  !orig=249,[219] !jvms: Test::test @ bci:16 (line 41)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;10   346  Bool  === _ 347  [[ 356 ]] [lt] !orig=250,[220] !jvms: Test::test @ bci:16 (line 41)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;11   356  CountedLoopEnd  === 353 346  [[ 357 371 ]] [lt] P=0.500000, C=112637.000000 !orig=251,[221] !jvms: Test::test @ bci:16 (line 41)&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
------------------------&lt;br/&gt;
&lt;br/&gt;
I made these VM changes:&lt;br/&gt;
- PhaseIdealLoop::try_move_store_after_loop&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;gt; disable moving stores out of the loop until after loop opts. This means we have some of the StoreI from b.offset in the loop still.&lt;br/&gt;
- LoadNode::split_through_phi&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;gt; delay splitting the LoadI until after loop opts. This ensures that the LoadI at the return stays after the loop, and so does not get eliminated during escape analysis -&amp;gt; otherwise the Allocation already gets removed then as it has no LoadI use any more. But we need the LoadI to stay until after SuperWord.&lt;br/&gt;
- StoreNode::Ideal&lt;br/&gt;
&amp;nbsp;&amp;nbsp;-&amp;gt; delay folding stores to the same address until after loop opts. This ensures we have lots of StoreI from b.offset left in the loop, and the unrolled copies do not fold away.&lt;br/&gt;
&amp;nbsp;&amp;nbsp;-&amp;gt; Ah, I just played with it: I can also disable the merging completely and it also still works. So maybe this can be played with a little more...?&lt;br/&gt;
&lt;br/&gt;
The consequence is that during SuperWord, we have lots of StoreI from b.offset in the loop. That way, SuperWord picks one of those StoreI as the alignment reference, instead of the array references. But after loopopts, we want the LoadI of the b.offset to disappear, so that the Allocation does not have a LoadI use any more -&amp;gt; and the Allocation can be removed... but of course we still need it for alignment in the loop ... and the GC code finds the CastP2X and mistakes it for barrier code, rather than alignment code -&amp;gt; assert/SIGSEGV.</comment>
                            <comment id="14718016" author="JIRAUSER19821" created="Wed, 30 Oct 2024 06:57:04 -0700"  >I have been playing a little with this. I&amp;#39;m still working on a reproducer that works directly with JDK-23+4.&lt;br/&gt;
&lt;br/&gt;
But what I got so far, is a TestA.java with a JVM patch patch-for-TestA.diff.&lt;br/&gt;
With that, I can reproduce the assert - by disabling / delaying some optimizations.&lt;br/&gt;
&lt;br/&gt;
/oracle-work/jdk-fork1/build/linux-x64-debug/jdk/bin/java -XX:+TraceSuperWord -XX:+UseSuperWord -XX:+TraceNewVectors -Xbatch -XX:+UseG1GC -XX:+PrintEliminateAllocations -XX:-PrintIdeal -XX:+PrintEscapeAnalysis -Xbatch -XX:CompileCommand=compileonly,TestA::test -XX:CompileCommand=printcompilation,TestA::test -XX:+TraceLoopOpts TestA.java&lt;br/&gt;
&lt;br/&gt;
/oracle-work/jdk-fork1/build/linux-x64-debug/jdk/bin/java -Xbatch -XX:+UseG1GC -Xbatch -XX:CompileCommand=compileonly,TestA::test -XX:CompileCommand=printcompilation,TestA::test  TestA.java&lt;br/&gt;
&lt;br/&gt;
#  Internal Error (/oracle-work/jdk-fork1/open/src/hotspot/share/gc/g1/c2/g1BarrierSetC2.cpp:730), pid=856223, tid=856237&lt;br/&gt;
#  Error: assert(this_region != nullptr) failed&lt;br/&gt;
&lt;br/&gt;
/oracle-work/jdk-fork1/build/linux-x64/jdk/bin/java -Xbatch -XX:+UseG1GC -Xbatch -XX:CompileCommand=compileonly,TestA::test -XX:CompileCommand=printcompilation,TestA::test  TestA.java&lt;br/&gt;
&lt;br/&gt;
#  SIGSEGV (0xb) at pc=0x00007f59a4d670fa, pid=857685, tid=857699&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (23.0) (build 23-internal-2024-10-14-1157432.emanuel...)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (23-internal-2024-10-14-1157432.emanuel..., mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0x7910fa]  G1BarrierSetC2::eliminate_gc_barrier(PhaseMacroExpand*, Node*) const+0x22a&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
----------------------------- SerialGC:&lt;br/&gt;
&lt;br/&gt;
/oracle-work/jdk-fork1/build/linux-x64-debug/jdk/bin/java -Xbatch -XX:+UseSerialGC -Xbatch -XX:CompileCommand=compileonly,TestA::test -XX:CompileCommand=printcompilation,TestA::test TestA.java&lt;br/&gt;
&lt;br/&gt;
#&lt;br/&gt;
# A fatal error has been detected by the Java Runtime Environment:&lt;br/&gt;
#&lt;br/&gt;
#  Internal Error (/oracle-work/jdk-fork1/open/src/hotspot/share/gc/shared/c2/cardTableBarrierSetC2.cpp:174), pid=865963, tid=865972&lt;br/&gt;
#  assert(mem-&amp;gt;is_Store()) failed: store required&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (23.0) (fastdebug build 23-internal-2024-10-14-1158199.emanuel...)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 23-internal-2024-10-14-1158199.emanuel..., mixed mode, tiered, compressed oops, compressed class ptrs, serial gc, linux-amd64)&lt;br/&gt;
# Problematic frame:&lt;br/&gt;
# V  [libjvm.so+0x868688]  CardTableBarrierSetC2::eliminate_gc_barrier(PhaseMacroExpand*, Node*) const+0x2e8&lt;br/&gt;
#&lt;br/&gt;
# Core dump will be written. Default location: Core dumps may be processed with &amp;quot;/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E&amp;quot; (or dumping to /oracle-work/&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8339349&quot; title=&quot;Crash in the GC running the DaCapo spring benchmark&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8339349&quot;&gt;&lt;strike&gt;JDK-8339349&lt;/strike&gt;&lt;/a&gt;/core.865963)&lt;br/&gt;
#&lt;br/&gt;
# An error report file with more information is saved as:&lt;br/&gt;
# /oracle-work/&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8339349&quot; title=&quot;Crash in the GC running the DaCapo spring benchmark&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8339349&quot;&gt;&lt;strike&gt;JDK-8339349&lt;/strike&gt;&lt;/a&gt;/hs_err_pid865963.log&lt;br/&gt;
#&lt;br/&gt;
# Compiler replay data is saved as:&lt;br/&gt;
# /oracle-work/&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8339349&quot; title=&quot;Crash in the GC running the DaCapo spring benchmark&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8339349&quot;&gt;&lt;strike&gt;JDK-8339349&lt;/strike&gt;&lt;/a&gt;/replay_pid865963.log&lt;br/&gt;
#&lt;br/&gt;
# If you would like to submit a bug report, please visit:&lt;br/&gt;
#   &lt;a href=&quot;https://bugreport.java.com/bugreport/crash.jsp&quot;&gt;https://bugreport.java.com/bugreport/crash.jsp&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
Product seems to run through... but not sure how that is sane!&lt;br/&gt;
-&amp;gt; we do some replacement of nodes... it is not very meaningful, but probably also not horribly incorrect...?&lt;br/&gt;
</comment>
                            <comment id="14714715" author="thartmann" created="Thu, 17 Oct 2024 23:41:10 -0700"  >ILW = Same as &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8339349&quot; title=&quot;Crash in the GC running the DaCapo spring benchmark&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8339349&quot;&gt;&lt;strike&gt;JDK-8339349&lt;/strike&gt;&lt;/a&gt; = P2</comment>
                            <comment id="14714416" author="JIRAUSER19821" created="Thu, 17 Oct 2024 02:07:24 -0700"  >Some initial anaysis can be found in &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8339349&quot; title=&quot;Crash in the GC running the DaCapo spring benchmark&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8339349&quot;&gt;&lt;strike&gt;JDK-8339349&lt;/strike&gt;&lt;/a&gt;.&lt;br/&gt;
My first goal now is to find a reproducer.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5147311">JDK-8347076</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5147312">JDK-8347077</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5147313">JDK-8347078</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5148230">JDK-8347884</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5148242">JDK-8347896</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5149318">JDK-8348834</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5137994">JDK-8339349</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="111781" name="TestA.java" size="439" author="epeter" created="Wed, 30 Oct 2024 06:53:28 -0700"/>
                            <attachment id="111803" name="TestA2.java" size="6885" author="epeter" created="Thu, 31 Oct 2024 07:33:14 -0700"/>
                            <attachment id="111929" name="TestA3.java" size="7297" author="epeter" created="Sun, 3 Nov 2024 23:52:09 -0800"/>
                            <attachment id="111930" name="TestA4.java" size="7289" author="epeter" created="Mon, 4 Nov 2024 01:13:36 -0800"/>
                            <attachment id="111589" name="hs_err_pid892245.log" size="70829" author="epeter" created="Thu, 17 Oct 2024 01:59:59 -0700"/>
                            <attachment id="111588" name="hs_err_pid980994.log" size="77220" author="epeter" created="Thu, 17 Oct 2024 02:02:49 -0700"/>
                            <attachment id="111586" name="jars.zip" size="47344910" author="epeter" created="Thu, 17 Oct 2024 02:03:39 -0700"/>
                            <attachment id="111782" name="patch-for-TestA.diff" size="3611" author="epeter" created="Wed, 30 Oct 2024 06:54:02 -0700"/>
                            <attachment id="111587" name="replay_pid3400217.log" size="1407349" author="epeter" created="Thu, 17 Oct 2024 02:03:05 -0700"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i38diz:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17433"><![CDATA[b23]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>