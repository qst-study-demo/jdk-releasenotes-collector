Title: [JDK-6942632] Hotspot should be able to use more than 64 logical processors on Windows
Priority: P3
Type: Enhancement
Component: hotspot
Description: Windows 7 and Windows Server 2008 R2 implement "processor groups" that, with some complication, allow a single process to use more than 64 hardware threads.  This mechanism is distinct from the NUMA mode facility, which focuses on allocating threads to NUMA domains, e.g., a single multi-core socket.  Without support for processor groups, a single jvm instance can't use more than 64 hw threads.
See
http://msdn.microsoft.com/en-us/library/dd405503(VS.85).aspx
and
http://msdn.microsoft.com/en-us/library/dd405503(VS.85).aspx
and, for NUMA
http://msdn.microsoft.com/en-us/library/aa363804(v=VS.85).aspx
Linxux and Solaris have no such limitation.
OS: windows_7

-----
Title: [JDK-8028127] Regtest java/security/Security/SynchronizedAccess.java is incorrect
Priority: P3
Type: Bug
Component: security-libs
Description: We're creating a bunch of threads which create several local providers which are added to the security framework.  However, those providers we're adding/removing are potentially lost when the following is called in the AccessorThread at the end of the loop:
provs = Security.getProviders();
This will start adding/removing some of the system providers, in addition to the local providers.  I don't understand this, and think this was not the intent.
Also, with the rewrite of the delayed provider selection and without an implementation of sigimpl, I don't think we'll ever be getting to the removeProvider code, it's always going to be failing the getInstance call.
In addition, this test is failing on windows-i586 with the server compiler only.  See 6915983.  Could be -sameVM issue.
windows_i586-product-c2-jdk_security1
TEST: java/security/Security/SynchronizedAccess.java
JDK under test: (C:\temp\jprt\T1\T\182757~1.SS1\TESTPR~1\WINDOW~1.0-P)
java version "1.7.0-2010-02-10-182757.ss145989.tl-pit-jtreg"
Java(TM) SE Runtime Environment (build 1.7.0-2010-02-10-182757.ss145989.tl-pit-j
treg-administrator_2010_02_10_11_28-b00)
Java HotSpot(TM) Server VM (build 17.0-b08, mixed mode)
ACTION: build -- Passed. Build successful
REASON: Named class compiled on demand
TIME:   0.468 seconds
messages:
command: build SynchronizedAccess
reason: Named class compiled on demand
elapsed time (seconds): 0.468
ACTION: compile -- Passed. Compilation successful
REASON: .class file out of date or does not exist
TIME:   0.437 seconds
messages:
command: compile C:\temp\jprt\T1\T\182757.ss145989\source\test\java\security\Sec
urity\SynchronizedAccess.java
reason: .class file out of date or does not exist
elapsed time (seconds): 0.437
ACTION: main -- Error. Error while cleaning up threads after test
REASON: Assumed action based on file name: run main SynchronizedAccess
TIME:   124.844 seconds
messages:
command: main SynchronizedAccess
reason: Assumed action based on file name: run main SynchronizedAccess
elapsed time (seconds): 124.844
STDOUT:
STDERR:
TEST RESULT: Error. Error while cleaning up threads after test
OS: generic

-----
Title: [JDK-8195675] Call to insertText with single character from custom Input Method ignored
Priority: P4
Type: Bug
Component: client-libs
Description: FULL PRODUCT VERSION :
I don't have java installed to run at the command line. OmegaT reports that it is running on Java 1.8.0_144 (64-bit). jEdit reports that is using Java 1.8.0_151 (which I downloaded directly, independent of jEdit).
ADDITIONAL OS VERSION INFORMATION :
macOS 10.12.6 (16G1114)
EXTRA RELEVANT SYSTEM CONFIGURATION :
I am reporting behavior observed in both OmegaT and jEdit (see version info).
Here is the original bug report filed with OmegaT: https://sourceforge.net/p/omegat/bugs/889/
A DESCRIPTION OF THE PROBLEM :
Using the Keyman (Keyman.com) ISIS-Devanagari keyboard, I expected to be able to type the letter "j" and see ज, but instead I just got a plain "j". Typing a subsequent "i" does insert the correct two-character sequence (जि), but it fails to delete and replace the errant "j" character. I have written a small test input method to reproduce this with a minimum of code, and it appears that the problem is calling insertText: and passing a single character as the string to insert). If I pass two ज characters or a space followed by a ज, it outputs just fine. I also tested this with a simple Roman script letter using a test case where typing the letter "l" was supposed to produce a "j" and that also failed. If you don't want to download and use Keyman to reproduce this, I would be happy to provide my simple test IM.
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
To reproduce using Keyman:
1) Download and install Keyman for macOS from https://keyman.com/macos/
2) Follow instructions to install Keyman and set it up as an Input Method: https://help.keyman.com/products/mac/1.0/docs/start_download-install_keyman.php?_ga=2.174123428.780044351.1516121660-886959843.1497845253
3) Follow instructions here to download and install a keyboard: https://help.keyman.com/products/mac/1.0/docs/start_download-install_keyboard.php. Download and select the ISIS-Devanagari keyboard as the keyboard for Keyman to use.
In OmegaT, jEdit, or any application that uses the text editor in JDK, type a "j".
If necessary, I can provide a very simple test IM that will illustrate the problem without requiring the above steps, but since Keyman is already packaged up nicely for easy installation, this is probably the easiest way to reproduce.
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
You should get a ज character. (Furthermore, typing a subsequent "i" should replace the ज with जि. However, this could require some more work on our end because many "legacy" apps that don't use Apple's editing controls require a special mode in Keyman to correctly handle character replacements.) You can observe the correct behavior of the keyboard in any standard Apple app, such as Notes or Messages.
ACTUAL -
Outputs a plain "j" character.
REPRODUCIBILITY :
This bug can be reproduced always.
CUSTOMER SUBMITTED WORKAROUND :
The only workaround I know of would be to type the text in another application and paste it into the application that uses the JDK editor.
Note that this deficiency is not directly hampering the development of Keyman (which has been chosen as the software to serve as the official reference implementation for the LDML standard). It does, however, affect all of any software whose editing is based on this JDK editing control. Although OmegaT declined to follow up on this directly, they do have affected users. I don't know of any existing users complaining about jEdit or any other software that uses this control, but there may well be some.
OS: os_x

-----
Title: [JDK-8207908] JMXStatusTest.java fails assertion intermittently
Priority: P3
Type: Bug
Component: core-svc
Description: The following test failed on Solaris X64 in release and
slowdebug configs using jdk11+19 bits:
sun/management/jmxremote/startstop/JMXStatusTest.java
The test did not fail in the fastdebug config at all and did not
fail in all 'release' or 'slowdebug' runs so I'm tagging this bug
as intermittent.
Here's a snippet from the stdout part of one of the 'release'
bits failures:
test JMXStatusTest.testAgentDefault(): failure
java.lang.AssertionError:  expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:94)
at org.testng.Assert.failNotEquals(Assert.java:496)
at org.testng.Assert.assertTrue(Assert.java:42)
at JMXStatusTest.assertStatusMatches(JMXStatusTest.java:155)
at JMXStatusTest.assertStatusMatches(JMXStatusTest.java:148)
at JMXStatusTest.testAgentDefault(JMXStatusTest.java:144)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
at org.testng.TestRunner.privateRun(TestRunner.java:773)
at org.testng.TestRunner.run(TestRunner.java:623)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:357)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310)
at org.testng.SuiteRunner.run(SuiteRunner.java:259)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1110)
at org.testng.TestNG.run(TestNG.java:1018)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:115)
at java.base/java.lang.Thread.run(Thread.java:832)
[TestApp] read: 1
[TestApp] main exit
Here's the stderr part of the same log:
----------System.err:(15/936)----------
[jcmd] java.lang.RuntimeException: Invalid agent state: Agent already started
java.lang.Exception: failures: 1
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:96)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:115)
at java.base/java.lang.Thread.run(Thread.java:832)
JavaTest Message: Test threw exception: java.lang.Exception: failures: 1
JavaTest Message: shutting down test
STATUS:Failed.`main' threw exception: java.lang.Exception: failures: 1
The two 'release' bits logs are similar. The 'slowdebug' failures
are more verbose.
OS: linux, os_x, solaris

-----
Title: [JDK-8225220] When the Tab Policy is checked,the scroll button direction displayed incorrectly.
Priority: P3
Type: Bug
Component: client-libs
Description: Testsuite name: Swing manual
Test name(s): Swing_JTabbedPane/Manual/JTabbedPaneLAFTests/TabbedPaneLAFTest2
Product(s) tested:JDK 8u221b06 (64bit)/tonga-4.0.2-rc2
OS/architecture:oel7.6-uek-x64
option: -Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel -Djdk.gtk.version=3
Actual behavior:
1.When the Tab Policy is checked,the scroll button direction displayed incorrectly.Refer to TabbedPaneLAFTest2_1-with-option.png
2.No such issue without option.Refer to TabbedPaneLAFTest2_1-no-option.png
3.No such issue on oel6.4-uek-x86/JDK8u221b04(32bit) with the same option
OS: linux

-----
Title: [JDK-8240343] JDI stopListening/stoplis001 "FAILED: listening is successfully stopped without starting listening"
Priority: P4
Type: Bug
Component: core-svc
Description: The following test failed in the JDK15 CI:
vmTestbase/nsk/jdi/ListeningConnector/stopListening/stoplis001/TestDescription.java
Here's a snippet from the log file:
----------System.out:(86/5530)----------
run [nsk.jdi.ListeningConnector.stopListening.stoplis001, -verbose, -arch=linux-x64, -waittime=5, -debugee.vmkind=java, -transport.address=dynamic, -debugee.vmkeys=-XX:MaxRAMPercentage=6 -Xshare:off -showversion]
Connector name=com.sun.jdi.SocketListen
description=Accepts socket connections initiated by other VMs
transport=dt_socket
argument name=timeout
value=
argument name=port
value=44321
argument name=localAddress
value=
Connector name=com.sun.jdi.SocketListen
description=Accepts socket connections initiated by other VMs
transport=dt_socket
argument name=timeout
value=
argument name=port
value=
argument name=localAddress
value=
TEST: start listening the address localhost:44321
# ERROR: Test case #1 FAILED: listening is successfully stopped without starting listening
The following stacktrace is for failure analysis.
nsk.share.TestFailure: Test case #1 FAILED: listening is successfully stopped without starting listening
at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:428)
at nsk.share.Log.complain(Log.java:399)
at nsk.jdi.ListeningConnector.stopListening.stoplis001.runIt(stoplis001.java:102)
at nsk.jdi.ListeningConnector.stopListening.stoplis001.run(stoplis001.java:72)
at nsk.jdi.ListeningConnector.stopListening.stoplis001.main(stoplis001.java:68)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at PropertyResolvingWrapper.main(PropertyResolvingWrapper.java:104)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
at java.base/java.lang.Thread.run(Thread.java:832)
# ERROR: FAILURE: Illegal connector arguments: Not listening
The following stacktrace is for failure analysis.
nsk.share.TestFailure: FAILURE: Illegal connector arguments: Not listening
at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:428)
at nsk.share.Log.complain(Log.java:399)
at nsk.jdi.ListeningConnector.stopListening.stoplis001.stopListen(stoplis001.java:185)
at nsk.jdi.ListeningConnector.stopListening.stoplis001.runIt(stoplis001.java:108)
at nsk.jdi.ListeningConnector.stopListening.stoplis001.run(stoplis001.java:72)
at nsk.jdi.ListeningConnector.stopListening.stoplis001.main(stoplis001.java:68)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at PropertyResolvingWrapper.main(PropertyResolvingWrapper.java:104)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
at java.base/java.lang.Thread.run(Thread.java:832)
com.sun.jdi.connect.IllegalConnectorArgumentsException: Not listening
at jdk.jdi/com.sun.tools.jdi.GenericListeningConnector.stopListening(GenericListeningConnector.java:136)
at nsk.jdi.ListeningConnector.stopListening.stoplis001.stopListen(stoplis001.java:169)
at nsk.jdi.ListeningConnector.stopListening.stoplis001.runIt(stoplis001.java:108)
at nsk.jdi.ListeningConnector.stopListening.stoplis001.run(stoplis001.java:72)
at nsk.jdi.ListeningConnector.stopListening.stoplis001.main(stoplis001.java:68)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at PropertyResolvingWrapper.main(PropertyResolvingWrapper.java:104)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
at java.base/java.lang.Thread.run(Thread.java:832)
# ERROR: Test case #2 FAILED: unable to stop listening
#
#  SUMMARY: Following errors occured
#      during test execution:
#
# ERROR: Test case #1 FAILED: listening is successfully stopped without starting listening
# ERROR: FAILURE: Illegal connector arguments: Not listening
# ERROR: Test case #2 FAILED: unable to stop listening
----------System.err:(3/172)----------
OS: linux

-----
Title: [JDK-8283214] [macos] Screen magnifier does not show the magnified text for JComboBox
Priority: P3
Type: Bug
Component: client-libs
Description: I have a JFrame with JLabel and JComboBox. I was trying Screen magnifier  on macOS.
I enabled Hover Text in Zoom section in Accessibility settings of macOS. I see that native combo box shows large-text view of the item under the pointer but JComboBox doesn't.
Steps to reproduce
--------------------------
1) Enable Screen magnifier on Mac
System Preferences - Accessibility - Zoom - Select (Enable Hover Text)
2) Run the attached code by passing the following option
-Djavax.accessibility.screen_magnifier_present=true    JComboBoxScreenMagnifierBug.java
3) Once the JFrame is visible, press the Command (Cmd) key and move mouse over JLabel (Fruits), you should see "Fruits" with magnified or enlarged text.
4) Move the mouse pointer over JComboBox. If you don't see the magnified text, then the bug is reproduced.
Note: I am getting the following exception in JDK 17 b35, but it's not reproduced in JDK 18 b36 and JDK 19 b13. This exception is seen when user presses the Command key and moves the mouse pointer over a Swing component
2022-03-15 13:14:57.419 java[22109:3940166] Bad JNI lookup accessibilityHitTest
2022-03-15 13:14:57.420 java[22109:3940166] (
0   libawt_lwawt.dylib                  0x0000000105efa3d9 -[JavaComponentAccessibility accessibilityHitTest:withEnv:] + 153
1   libawt_lwawt.dylib                  0x0000000105ea6573 -[AWTView accessibilityHitTest:] + 179
2   AppKit                              0x00007fff23a20b51 -[NSWindow(NSWindowAccessibility) accessibilityHitTest:] + 309
3   AppKit                              0x00007fff235c490c -[NSApplication(NSApplicationAccessibility) accessibilityHitTest:] + 342
4   AppKit                              0x00007fff235957f3 CopyElementAtPosition + 150
5   HIServices                          0x00007fff25c0aa2b _AXXMIGCopyElementAtPosition + 336
6   HIServices                          0x00007fff25c2b708 _XCopyElementAtPosition + 369
7   HIServices                          0x00007fff25be993c mshMIGPerform + 182
8   CoreFoundation                      0x00007fff20955b04 __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE1_PERFORM_FUNCTION__ + 41
9   CoreFoundation                      0x00007fff209559e5 __CFRunLoopDoSource1 + 619
10  CoreFoundation                      0x00007fff2095406f __CFRunLoopRun + 2400
11  CoreFoundation                      0x00007fff2095304c CFRunLoopRunSpecific + 563
12  HIToolbox                           0x00007fff28b9ba83 RunCurrentEventLoopInMode + 292
13  HIToolbox                           0x00007fff28b9b6b6 ReceiveNextEventCommon + 284
14  HIToolbox                           0x00007fff28b9b583 _BlockUntilNextEventMatchingListInModeWithFilter + 70
15  AppKit                              0x00007fff2315bd72 _DPSNextEvent + 864
16  AppKit                              0x00007fff2315a545 -[NSApplication(NSEvent) _nextEventMatchingEventMask:untilDate:inMode:dequeue:] + 1364
17  libosxapp.dylib                     0x0000000105fb659a -[NSApplicationAWT nextEventMatchingMask:untilDate:inMode:dequeue:] + 122
18  AppKit                              0x00007fff2314c869 -[NSApplication run] + 586
19  libosxapp.dylib                     0x0000000105fb6369 +[NSApplicationAWT runAWTLoopWithApp:] + 169
20  libawt_lwawt.dylib                  0x0000000105f02830 +[AWTStarter starter:headless:] + 496
21  libosxapp.dylib                     0x0000000105fb803f +[ThreadUtilities invokeBlockCopy:] + 15
22  Foundation                          0x00007fff21704b91 __NSThreadPerformPerform + 204
23  CoreFoundation                      0x00007fff2095537c __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + 17
24  CoreFoundation                      0x00007fff209552e4 __CFRunLoopDoSource0 + 180
25  CoreFoundation                      0x00007fff20955064 __CFRunLoopDoSources0 + 242
26  CoreFoundation                      0x00007fff20953a8c __CFRunLoopRun + 893
27  CoreFoundation                      0x00007fff2095304c CFRunLoopRunSpecific + 563
28  libjli.dylib                        0x00000001059ce0b2 CreateExecutionEnvironment + 386
29  libjli.dylib                        0x00000001059c9c15 JLI_Launch + 1413
30  java                                0x00000001059b9c09 main + 393
31  libdyld.dylib                       0x00007fff20878f3d start + 1
)
Exception in thread "AppKit Thread" java.lang.NoSuchMethodError: accessibilityHitTest
OS: os_x

-----
Title: [JDK-8296787] Unify debug printing format of X.509 cert serial numbers
Priority: P4
Type: Bug
Component: security-libs
Description: The JDK debug libraries print X.509 certificate serial numbers in 3 different formats. We should unify on one format.
e.g.
==============
certpath: X509CertSelector.match(SN: 83be056904246b1a1756ac95991c74a
Issuer: CN=DigiCert Global Root CA, OU=www.digicert.com, O=DigiCert Inc, C=US
Subject: CN=DigiCert Global Root CA, OU=www.digicert.com, O=DigiCert Inc, C=US)
certpath: X509CertSelector.match returning: true
certpath: YES - try this trustedCert
certpath: Constraints.permits(): RSA, [
Variant: tls server
Anchor: [
Trusted CA cert: [
[
Version: V3
Subject: CN=DigiCert Global Root CA, OU=www.digicert.com, O=DigiCert Inc, C=US
Signature Algorithm: SHA1withRSA, OID = 1.2.840.113549.1.1.5
Key:  Sun RSA public key, 2048 bits
params: null
modulus: 28559384442792876273280274398620578979733786817784174960112400169719065906301471912340204391164075730987771255281479191858503912379974443363319206013285922932969143082114108995903507302607372164107846395526169928849546930352778612946811335349917424469188917500996253619438384218721744278787164274625243781917237444202229339672234113350935948264576180342492691117960376023738627349150441152487120197333042448834154779966801277094070528166918968412433078879939664053044797116916260095055641583506170045241549105022323819314163625798834513544420165235412105694681616578431019525684868803389424296613694298865514217451303
public exponent: 65537
Validity: [From: Fri Nov 10 00:00:00 UTC 2006,
To: Mon Nov 10 00:00:00 UTC 2031]
Issuer: CN=DigiCert Global Root CA, OU=www.digicert.com, O=DigiCert Inc, C=US
SerialNumber: [    083be056 904246b1 a1756ac9 5991c74a]
Certificate Extensions: 4
[1]: ObjectId: 2.5.29.35 Criticality=false
AuthorityKeyIdentifier [
KeyIdentifier [
0000: 03 DE 50 35 56 D1 4C BB   66 F0 A3 E2 1B 1B C3 97  ..P5V.L.f.......
0010: B2 3D D1 55                                        .=.U
]
"certificate" : {
"version"            : "v3",
"serial number"      : "083BE056904246B1A1756AC95991C74A",
"signature algorithm": "SHA1withRSA",
"issuer"             : "CN=DigiCert Global Root CA, OU=www.digicert.com, O=DigiCert Inc, C=US",
"not before"         : "2006-11-10 24:00:00.000 UTC",
"not  after"         : "2031-11-10 24:00:00.000 UTC",
"subject"            : "CN=DigiCert Global Root CA, OU=www.digicert.com, O=DigiCert Inc, C=US",
"subject public key" : "RSA",
"extensions"         : [
==============
one cert - 3 styles of serial number :
SN: 83be056904246b1a1756ac95991c74a
SerialNumber: [    083be056 904246b1 a1756ac9 5991c74a]
"serial number"      : "083BE056904246B1A1756AC95991C74A",
It would help with debug log checks.
OS: generic

-----
Title: [JDK-8296972] [macos13] java/awt/Frame/MaximizedToIconified/MaximizedToIconified.java: getExtendedState() != 6 as expected.
Priority: P4
Type: Bug
Component: client-libs
Description: The test java/awt/Frame/MaximizedToIconified/MaximizedToIconified.java became failing on both macOS-aarch64 and macOS-x64 starting since Ventura 13.0 Beta (22A5365d) with the following output:
```
#section:main
----------messages:(7/279)----------
command: main MaximizedToIconified
reason: User specified action: run main MaximizedToIconified
started: Wed Oct 12 04:13:38 UTC 2022
Mode: othervm
Additional options from @modules: --add-modules java.desktop
finished: Wed Oct 12 04:13:42 UTC 2022
elapsed time (seconds): 3.873
----------configuration:(3/40)----------
Boot Layer
add modules: java.desktop
----------System.out:(11/452)----------
last = 0; getOldState() = 0; getNewState() = 6
state = 6; getExtendedState() = 6
last = 6; getOldState() = 6; getNewState() = 0
last = 0; getOldState() = 0; getNewState() = 1
state = 1; getExtendedState() = 1
last = 1; getOldState() = 1; getNewState() = 0
state = 0; getExtendedState() = 0
last = 0; getOldState() = 0; getNewState() = 1
state = 1; getExtendedState() = 1
last = 1; getOldState() = 1; getNewState() = 0
state = 6; getExtendedState() = 0
----------System.err:(14/877)----------
java.lang.RuntimeException: getExtendedState() != 6 as expected.
at MaximizedToIconified.checkState(MaximizedToIconified.java:70)
at MaximizedToIconified.examineStates(MaximizedToIconified.java:98)
at MaximizedToIconified.doTest(MaximizedToIconified.java:117)
at MaximizedToIconified.main(MaximizedToIconified.java:124)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
at java.base/java.lang.Thread.run(Thread.java:1588)
JavaTest Message: Test threw exception: java.lang.RuntimeException: getExtendedState() != 6 as expected.
```
It is still being observed on 13.1 Beta (22C5033e)
The test passes successfully on the previous macOS versions 11, 12.
The issue was observed on jdk20 20-ea+23-1677. It is also reproducible with jdk19 (19.0.1+10-21), jdk17
*Reproducibility*: 100%
*Steps to reproduce*:
$ jtreg/bin/jtreg -va  -testjdk:jdk-20.jdk/Contents/Home/ test/jdk/java/awt/Frame/MaximizedToIconified/MaximizedToIconified.java
OS: os_x

-----
Title: [JDK-8306446] java/lang/management/ThreadMXBean/Locks.java transient failures
Priority: P4
Type: Bug
Component: core-svc
Description: The java/lang/management/ThreadMXBean/Locks.java test seems to expect all threads returned by java.lang.management.ThreadMXBean#getAllThreadIds to still be alive in a subsequent call to java.lang.management.ThreadMXBean#getThreadInfo(long). Running the test on GraalVM sometimes fails with:
STDOUT:
LockBThread about to block on OBJC
LockAThread about to block on OBJB
Stack dump : Thread - LockBThread
java.base/java.util.concurrent.Phaser.internalAwaitAdvance(Phaser.java:1063)
java.base/java.util.concurrent.Phaser.arriveAndAwaitAdvance(Phaser.java:685)
Locks$LockBThread.run(Locks.java:196)
STDERR:
java.lang.NullPointerException: Cannot invoke "java.lang.management.ThreadInfo.getLockName()" because "" is null
at Locks.doCheck(Locks.java:437)
at Locks.findThreadsBlockedOn(Locks.java:425)
at Locks.main(Locks.java:374)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
at java.base/java.lang.Thread.run(Thread.java:1623)

-----
Title: [JDK-8308429] jvmti/StopThread/stopthrd007 failed with "NoClassDefFoundError: Could not initialize class jdk.internal.misc.VirtualThreads"
Priority: P4
Type: Bug
Component: hotspot
Description: The following test failed in the JDK21 CI:
vmTestbase/nsk/jvmti/StopThread/stopthrd007/TestDescription.java
Here's a snippet from the log file:
#section:main
----------messages:(8/397)----------
command: main -agentlib:stopthrd007=-waittime=5 nsk.jvmti.StopThread.stopthrd007
reason: User specified action: run main/othervm/native -agentlib:stopthrd007=-waittime=5 nsk.jvmti.StopThread.stopthrd007
started: Fri May 19 03:02:45 UTC 2023
Mode: othervm [/othervm specified]
Timeout information:
--- Timeout information end.
finished: Fri May 19 03:11:49 UTC 2023
elapsed time (seconds): 544.51
----------configuration:(0/0)----------
----------System.out:(1/26)----------
Timeout refired 480 times
----------System.err:(11/1002)----------
Exception in thread "DebuggeeWaitingThread" Exception in thread "DebuggeeSleepingThread" Exception in thread "DebuggeeRunningThread" java.lang.ThreadDeath
java.lang.NoClassDefFoundError: Could not initialize class jdk.internal.misc.VirtualThreads
at java.base/java.util.concurrent.locks.LockSupport.unpark(LockSupport.java:179)
at java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer.signalNext(AbstractQueuedSynchronizer.java:645)
at java.base/java.util.concurrent.locks.AbstractQueuedSynchronizer.release(AbstractQueuedSynchronizer.java:1060)
at java.base/java.util.concurrent.locks.ReentrantLock.unlock(ReentrantLock.java:494)
at nsk.share.Wicket.unlock(Wicket.java:226)
at nsk.jvmti.StopThread.stopthrd007ThreadRunning.run(stopthrd007.java:195)
Caused by: java.lang.ExceptionInInitializerError: Exception java.lang.ThreadDeath [in thread "DebuggeeRunningThread"]
Exception: java.lang.NoClassDefFoundError thrown from the UncaughtExceptionHandler in thread "DebuggeeRunningThread"
----------rerun:(42/8469)*----------

-----
Title: [JDK-8309218] java/util/concurrent/locks/Lock/OOMEInAQS.java still times out with ZGC, Generational ZGC, and SerialGC
Priority: P3
Type: Bug
Component: core-libs
Description: Even with the fix for the following bug:
JDK-8298066 java/util/concurrent/locks/Lock/OOMEInAQS.java timed out
which was integrated in jdk-21+24-2094, the following test:
java/util/concurrent/locks/Lock/OOMEInAQS.java
still times out with both ZGC and Generational ZGC.
This latest batch of timeouts happened in Tier8. If/when a new fix is attempted,
please remember that the fix needs to be tested in Tier8 along with all other
tiers where this test runs.
OS: generic

-----
Title: [JDK-8311301] MethodExitTest may fail with stack buffer overrun
Priority: P4
Type: Bug
Component: hotspot
Description: Spotted when running tier1 tests on Windows JVM build with clang.
MethodExitTest failed with:
----------System.out:(6/187)----------
Agent_OnLoad started
Agent_OnLoad finished
ThreadStart: cthread: 000001E0573A5980, name: main
ThreadStart: GetThreadLocalStorage for carrier thread returned value 111 as expected
----------System.err:(0/0)----------
...
test result: Failed. Unexpected exit from test [exit code: -1073740791]
This exit code translates to STATUS_STACK_BUFFER_OVERRUN. No hs_err file is generated, but there's an entry in Windows event log:
Faulting application name: java.exe, version: 22.0.0.0, time stamp: 0x64a2ef1a
Faulting module name: MethodExitTest.dll, version: 0.0.0.0, time stamp: 0x64a31b75
Exception code: 0xc0000409
Fault offset: 0x00000000000039f5
This, along with the test output, points to stack overrun in libMethodExitTest.cpp / ThreadStart.
Looking at the method, it passes a variable loc_tls_data of type long to SetThreadLocalStorage, and then calls GetThreadLocalStorage to retrieve the stored value back to the same variable.
The problem here is that ThreadLocalStorage is a pointer, which is 8 bytes long on 64 bit architectures. Long on Windows can only store 4 bytes, so the call to GetThreadLocalStorage overwrites additional 4 bytes on stack. When the code is compiled by MS compiler, the overrun is ignored, but clang-compiled code detects the overrun and crashes the application.

-----
Title: [JDK-8311656] Shenandoah: Unused ShenandoahSATBAndRemarkThreadsClosure::_claim_token
Priority: P4
Type: Enhancement
Component: hotspot
Description: Trivial omission from JDK-8221785: _claim_token initialization was removed, but the field itself remains:
https://github.com/openjdk/jdk/blob/34004e1666f6adf0e52af553c30b6b0006b4cfb6/src/hotspot/share/gc/shenandoah/shenandoahConcurrentMark.cpp#L76

-----
Title: [JDK-8312518] [macos13] setFullScreenWindow() shows black screen on macOS 13 & above
Priority: P3
Type: Bug
Component: client-libs
Description: macOS 13 starting showing black screen for fullscreen windows, see attachment for reproducer. Issue reproducible on both - x64 and aarch64
Issue seen to occur on macOS versions - 13.3 & above as per our testing so far.
OS: os_x

-----
Title: [JDK-8313374] --enable-ccache's CCACHE_BASEDIR breaks builds
Priority: P4
Type: Bug
Component: infrastructure
Description: With ccache enabled the dependencies no longer work.
This leads to mysterious compilation errors where one has to `rm -rf build/XXX` and rebuild it from scratch.
I am pretty sure in some cases these broken dependencies lead even to segfaulting code which again gets fixed by `rm -rf build/XXX`. Unfortunately I do not have now a reproducer for such case.
man ccache even documents this problem:
there might be cases where things break. One known issue is that absolute paths are not reproduced in dependency files
I believe the whole --enable-ccache code should be dropped as default ccache flags is up to ccache upstream, OS vendor and developer's preferences but the ccache defaults should not be quietly changed by the compiled package.
# Tested on Fedora 38 x86_64
git checkout master # ad34be1f329edc8e7155983835cc70d733c014b8
patch -p1
Updating support/modules_libs/java.base/server/libjvm.so due to 1 file(s)
/usr/bin/ld: openjdk-git/build/linux-x86_64-server-release/hotspot/variant-server/libjvm/objs/g1CollectedHeap.o: in function `G1CollectedHeap::wait_for_collection_finish()':
make/hotspot/../../src/hotspot/share/gc/g1/g1CollectedHeap.hpp:291: undefined reference to `G1UncommitRegionTask::wait_if_active()'
collect2: error: ld returned 1 exit status
OS: linux

-----
Title: [JDK-8313878] Exclude two compiler/rtm/locking tests on ppc64le
Priority: P4
Type: Sub-task
Component: hotspot
Description: The tests
compiler/rtm/locking/TestRTMSpinLoopCount.java
compiler/rtm/locking/TestRTMAbortThreshold.java
fail very often in JDK11 on linux ppc64le and should be excluded to reduce noise in the CI infrastructure.
OS: linux

-----
Title: [JDK-8315701] [macos] Regression: KeyEvent has different keycode on different keyboard layouts
Priority: P3
Type: Bug
Component: client-libs
Description: Starting from JDK18 KeyEvents started to have different keycode on different keyboard layouts.
Because of that shortcuts (like copy/paste) stopped to work on non-english locales.
Everything works fine in JDKs 17 and older.
It seems like this is the regression produced by this commit: https://github.com/openjdk/jdk/commit/47e7a42594f1c36f71cdf4d383080bf8d616b7e7
With this code
```
import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
public class Example {
public static void main(String[] args) {
SwingUtilities.invokeLater(() - {
var frame = new JFrame();
frame.addKeyListener(new KeyListener() {
@Override
public void keyTyped(KeyEvent e) {
}
@Override
public void keyPressed(KeyEvent e) {
System.out.println("CODE " + KeyEvent.VK_C + " REAL CODE " + e.getKeyCode());
}
@Override
public void keyReleased(KeyEvent e) {
}
});
frame.setSize(new Dimension(200, 200));
frame.setVisible(true);
});
}
}
```
Steps to reproduce:
1. Run the application
2. Change locale to English
3. Press cmd + C
4. Change locale to Russian (may be on other it will also fail)
5. Press cmd + C
Expected:
CODE 67 REAL CODE 67
printed on both locales
Actual -
CODE 67 REAL CODE 67
is printed on English locale
CODE 67 REAL CODE 16778305
is printed on Russian locale
OS: os_x

-----
Title: [JDK-8316428] G1: Nmethod count statistics only count last code root set iterated
Priority: P4
Type: Bug
Component: hotspot
Description: G1 Nmethod count statistics is wrong, only counting the count of the last code root set iterated.

-----
Title: [JDK-8316893] Compile without -fno-delete-null-pointer-checks
Priority: P4
Type: Enhancement
Component: infrastructure
Description: Currently we are passing -fno-delete-null-pointer-checks command line flag when compiling with GCC (6+) or Clang (12+)
This flag is necessary when the code assumes that `this` pointer of a C++ member function can be null. This is not permitted by C++ standard, which requires that `this` always contains a non-null pointer. The flag was added to enable non-compliant code to run.
There are still some places that need fixing before this flag can be removed.

-----
Title: [JDK-8316895] SeenThread::print_action_queue called on a null pointer
Priority: P4
Type: Sub-task
Component: hotspot
Description: PlaceholderEntry calls print_action_queue without checking if the thread pointers are non-null. This works because we compile with -fno-delete-null-pointer-checks, and crashes if that flag is removed.
Crash can be observed in test/hotspot/jtreg/runtime/logging/RedefineClasses.java, for example.

-----
Title: [JDK-8316907] Fix nonnull-compare warnings
Priority: P4
Type: Sub-task
Component: hotspot
Description: The following warnings are emitted when compiling with gcc without -fno-delete-null-pointer-checks:
In file included from .../src/hotspot/share/memory/allocation.hpp:29,
from .../src/hotspot/share/classfile/classLoaderData.hpp:28,
from .../src/hotspot/share/precompiled/precompiled.hpp:34:
ad_x86_pipeline.cpp: In member function 'uint Pipeline::operand_latency(uint, const Pipeline*) const':
.../src/hotspot/share/utilities/debug.hpp:152:7: warning: nonnull argument 'this' compared to NULL [-Wnonnull-compare]
152 |   if (! VMASSERT_CHECK_PASSED(p)) {                                            \
|       ^
.../src/hotspot/share/utilities/debug.hpp:160:24: note: in expansion of macro 'vmassert'
160 | #define assert(p, ...) vmassert(p, __VA_ARGS__)
|                        ^~~~~~~~
ad_x86_pipeline.cpp:142:3: note: in expansion of macro 'assert'
.../src/hotspot/share/asm/codeBuffer.cpp: In member function 'void CodeBuffer::print()':
.../src/hotspot/share/asm/codeBuffer.cpp:1064:3: warning: nonnull argument 'this' compared to NULL [-Wnonnull-compare]
1064 |   if (this == nullptr) {
|   ^~

-----
Title: [JDK-8317116] Provide layouts for multiple test UI in PassFailJFrame
Priority: P4
Type: Enhancement
Component: client-libs
Description: JDK-8294156 allows creating and adding multiple test UI frames as part of PassFailJFrame. As mentioned in the code review [1], the framework should provide a few simple layout managers to position the test UI.
The demos [2] for the testUI feature provide implementations which need to be refined.
A quote from the demo layouts [3]:
“I didn't even think about not providing any default implementations of positionTestUI — that's the idea! The framework should support simple layouts.
“Implementing common layouts each time they're used would be a waste of time.
“A method reference to an implementation in PassFailJFrame could be passed. Alternatively, we can add helper methods to builder which selects the Position and positionTestUI.
“The code in TwoWindowsHH.java and TwoWindowsHV.java needs refining. Yet it's a great foundation.”
[1] https://github.com/openjdk/jdk/pull/15665#discussion_r1323491246
[2] https://github.com/openjdk/jdk/pull/15721
[3] https://github.com/openjdk/jdk/pull/15721#discussion_r1326082796

-----
Title: [JDK-8317575] AArch64: C2_MacroAssembler::fast_lock uses rscratch1 for cmpxchg result
Priority: P5
Type: Bug
Component: hotspot
Description: The fast_lock code CASes the owner field with the current thread and upon failure checks if the previous value was the current thread, which would indicate a recursive lock.
```
add(tmp, disp_hdr, (in_bytes(ObjectMonitor::owner_offset())-markWord::monitor_value));
cmpxchg(tmp, zr, rthread, Assembler::xword, /*acquire*/ true,
/*release*/ true, /*weak*/ false, rscratch1); // Sets flags for result
br(Assembler::EQ, cont); // CAS success means locking succeeded
cmp(rscratch1, rthread);
br(Assembler::NE, cont); // Check for recursive locking
```
The contract is that cmpxchg clobbers rscratch1, so this seems problematic.
The cmpxchg code looks like this:
```
void MacroAssembler::cmpxchg(Register addr, Register expected,
Register new_val,
enum operand_size size,
bool acquire, bool release,
bool weak,
Register result) {
if (result == noreg)  result = rscratch1;
BLOCK_COMMENT("cmpxchg {");
if (UseLSE) {
mov(result, expected);
lse_cas(result, new_val, addr, size, acquire, release, /*not_pair*/ true);
compare_eq(result, expected, size);
#ifdef ASSERT
// Poison rscratch1 which is written on !UseLSE branch
mov(rscratch1, 0x1f1f1f1f1f1f1f1f);
#endif
} else {
Label retry_load, done;
prfm(Address(addr), PSTL1STRM);
bind(retry_load);
load_exclusive(result, addr, size, acquire);
compare_eq(result, expected, size);
br(Assembler::NE, done);
store_exclusive(rscratch1, new_val, addr, size, release);
if (weak) {
cmpw(rscratch1, 0u);  // If the store fails, return NE to our caller.
} else {
cbnzw(rscratch1, retry_load);
}
bind(done);
}
BLOCK_COMMENT("} cmpxchg");
}
```
For -XX:-UseLSE this is a benign problem because when the owner value is set to non-null the cmpxchg doesn't take the clobbering path:
```
store_exclusive(rscratch1, new_val, addr, size, release);
if (weak) {
cmpw(rscratch1, 0u);  // If the store fails, return NE to our caller.
} else {
cbnzw(rscratch1, retry_load);
}
```
So, the code happens to work but it would be better to use another register for the result.
The debug clobbering in the -XX:+UseLSE path was recently added and this will lead to debug builds never taking the recursive fast-path. That clobbering should maybe be done also for -XX:-UseLSE, which doesn't always clobber the register?

-----
Title: [JDK-8318105] [jmh] the test java.security.HSS failed with 2 active threads
Priority: P4
Type: Bug
Component: security-libs
Description: The test micro/org/openjdk/bench/java/security/HSS.java failed with log:
java.lang.RuntimeException
at org.openjdk.bench.java.security.HSS.verify(HSS.java:105)
for runs with 2+ threads.
OS: generic

-----
Title: [JDK-8318442] java/net/httpclient/ManyRequests2.java fails intermittently on Linux
Priority: P4
Type: Bug
Component: core-libs
Description: On Linux, especially on Linux ppc64le test machines  (RHEL8.5, Ubuntu 22.04)  we see intermittent failures of java/net/httpclient/ManyRequests2.java .
Failure seems to be this :
Oct 18, 2023 8:47:49 AM sun.net.httpserver.ServerImpl$Exchange run
FINER: ServerImpl.Exchange (5)
java.lang.AssertionError: State is not REQUEST (IDLE)
at jdk.httpserver/sun.net.httpserver.ServerImpl.requestCompleted(ServerImpl.java:1001)
at jdk.httpserver/sun.net.httpserver.FixedLengthInputStream.readImpl(FixedLengthInputStream.java:63)
at jdk.httpserver/sun.net.httpserver.LeftOverInputStream.read(LeftOverInputStream.java:99)
at java.base/java.io.InputStream.readNBytes(InputStream.java:412)
at java.base/java.io.InputStream.readAllBytes(InputStream.java:349)
at EchoHandler.handle(EchoHandler.java:48)
at ManyRequests$TestEchoHandler.handle(ManyRequests.java:147)
at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:98)
at jdk.httpserver/sun.net.httpserver.AuthFilter.doFilter(AuthFilter.java:82)
at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:101)
at jdk.httpserver/sun.net.httpserver.ServerImpl$Exchange$LinkHandler.handle(ServerImpl.java:871)
at jdk.httpserver/com.sun.net.httpserver.Filter$Chain.doFilter(Filter.java:98)
at jdk.httpserver/sun.net.httpserver.ServerImpl$Exchange.run(ServerImpl.java:845)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
at java.base/java.lang.Thread.run(Thread.java:1570)
Is the state IDLE maybe also valid under some circumstances ?
Or should we mark the test "intermittent"  ?
OS: linux

-----
Title: [JDK-8319640] ClassicFormat::parseObject (from DateTimeFormatter) does not conform to the javadoc and may leak DateTimeException
Priority: P4
Type: Bug
Component: core-libs
Description: The Format::parseObject (which ClassicFormat implements) explicitly says that it returns `null` in case of error:
* @return An Object parsed from the string. In case of error, returns null.
And it may throw NullPointerException if position is `null`:
* @throws NullPointerException if {@code source} or {@code pos} is null.
However, ClassicFormat::parseObject does not conform to this specification and may leak DateTimeException, reproducer below:
final DateTimeFormatter formatter = new DateTimeFormatterBuilder()
.parseCaseInsensitive()
.append(DateTimeFormatter.ISO_LOCAL_DATE)
.appendLiteral('T')
.optionalStart()
.appendValue(HOUR_OF_DAY, 2, 2, SignStyle.NOT_NEGATIVE)
.optionalStart()
.appendLiteral(':')
.appendValue(MINUTE_OF_HOUR, 2, 2, SignStyle.NOT_NEGATIVE)
.optionalStart()
.appendLiteral(':')
.appendValue(SECOND_OF_MINUTE, 2, 2, SignStyle.NOT_NEGATIVE)
.optionalEnd()
.optionalEnd()
.optionalStart()
.appendZoneOrOffsetId()
.optionalEnd()
.optionalStart()
.appendOffset("+HHmm", "Z")
.optionalEnd()
.optionalEnd()
.toFormatter(Locale.ROOT)
.withResolverStyle(ResolverStyle.STRICT);
var object = formatter.toFormat().parseObject("2018-03-30T17-30-28.842Z", new ParsePosition(0));
assert object == null;
The snippet fails with:
java.time.DateTimeException: Value out of range: Hour[0-23], Minute[0-59], Second[0-59]
at java.base/java.time.format.DateTimeFormatterBuilder$OffsetIdPrinterParser.parse(DateTimeFormatterBuilder.java:3708)
at java.base/java.time.format.DateTimeFormatterBuilder$CompositePrinterParser.parse(DateTimeFormatterBuilder.java:2360)
at java.base/java.time.format.DateTimeFormatterBuilder$CompositePrinterParser.parse(DateTimeFormatterBuilder.java:2360)
at java.base/java.time.format.DateTimeFormatterBuilder$CompositePrinterParser.parse(DateTimeFormatterBuilder.java:2370)
at java.base/java.time.format.DateTimeFormatter.parseUnresolved0(DateTimeFormatter.java:2107)
at java.base/java.time.format.DateTimeFormatter$ClassicFormat.parseObject(DateTimeFormatter.java:2236)
OS: generic

-----
Title: [JDK-8319673] Few security tests ignore VM flags
Priority: P4
Type: Sub-task
Component: security-libs
Description: Tests
java/security/Security/ConfigFileTest.java
java/security/SignedJar/SignedJarWithCustomClassLoader.java com/sun/crypto/provider/KeyProtector/IterationCount.java
sun/security/tools/jarsigner/compatibility/SignTwice.java
sun/security/krb5/auto/ModuleName.java
sun/security/provider/KeyStore/DKSTest.java
start java process ignoring VM flags. Needs to be updated.
OS: linux

-----
Title: [JDK-8319678] Several tests from corelibs areas ignore VM flags
Priority: P4
Type: Sub-task
Component: core-libs
Description: Tests
java/rmi/reliability/benchmark/bench/rmi/Main.java
java/time/nontestng/java/time/chrono/HijrahConfigTest.java
javax/naming/spi/providers/InitialContextTest.java
sun/misc/EscapePath.java
java/lang/annotation/LoaderLeakTest.java
java/lang/Thread/UncaughtExceptionsTest.java
start new java processes ignoring VM flags.
Should be updated.

-----
Title: [JDK-8319960] RISC-V: compiler/intrinsics/TestInteger/LongUnsignedDivMod.java failed with "counts: Graph contains wrong number of nodes"
Priority: P4
Type: Bug
Component: hotspot
Description: After JDK-8318224， compiler/intrinsics/TestInteger/LongUnsignedDivMod.java failed with "counts: Graph contains wrong number of nodes"

-----
Title: [JDK-8319970] AArch64: enable tests compiler/intrinsics/Test(Long|Integer)UnsignedDivMod.java on aarch64
Priority: P4
Type: Enhancement
Component: hotspot
Description: During the fix of JDK-8319960, found out that these 2 tests are not enabled for aarch64, but the corresponding intrinsics were implemented on aarch64 already.

-----
Title: [JDK-8319973] AArch64: Save and restore FPCR in the call stub
Priority: P3
Type: Bug
Component: hotspot
Description: On AArch64 we don't save and restore the default floating-point control state when we enter and leave Java code. We really should, because if we're called via the JNI invocation interface with a weird FP control state we'll not be Java compatible.
OS: generic

-----
Title: [JDK-8320192] SHAKE256 does not work correctly if n >= 137
Priority: P3
Type: Bug
Component: security-libs
Description: The internal SHAKE256 class fails the NIST CAVP test when n reaches 137. The following program succeeds in the 1st check but fails the 2nd one.
import sun.security.provider.SHAKE256;
import java.util.Arrays;
import java.util.HexFormat;
public class A2 {
public static void main(String[] args) throws Exception {
//https://csrc.nist.gov/CSRC/media/Projects/Cryptographic-Algorithm-Validation-Program/documents/sha3/shakebytetestvectors.zip
//SHAKE256VariableOut.rsp:
//3380: COUNT = 674
//3381: Outputlen = 1088
//3382: Msg = 6ae23f058f0f2264a18cd609acc26dd4dbc00f5c3ee9e13ecaea2bb5a2f0bb6b
//3383: Output = b9b92544fb25cfe4ec6fe437d8da2bbe00f7bdaface3de97b8775a44d753c3adca3f7c6f183cc8647e229070439aa9539ae1f8f13470c9d3527fffdeef6c94f9f0520ff0c1ba8b16e16014e1af43ac6d94cb7929188cce9d7b02f81a2746f52ba16988e5f6d93298d778dfe05ea0ef256ae3728643ce3e29c794a0370e9ca6a8bf3e7a41e8677067
//3384:
//3385: COUNT = 675
//3386: Outputlen = 1096
//3387: Msg = 8d8001e2c096f1b88e7c9224a086efd4797fbf74a8033a2d422a2b6b8f6747e4
//3388: Output = 2e975f6a8a14f0704d51b13667d8195c219f71e6345696c49fa4b9d08e9225d3d39393425152c97e71dd24601c11abcfa0f12f53c680bd3ae757b8134a9c10d429615869217fdd5885c4db174985703a6d6de94a667eac3023443a8337ae1bc601b76d7d38ec3c34463105f0d3949d78e562a039e4469548b609395de5a4fd43c46ca9fd6ee29ada5e
var s = new SHAKE256(1088/8);
var msg = HexFormat.of().parseHex("6ae23f058f0f2264a18cd609acc26dd4dbc00f5c3ee9e13ecaea2bb5a2f0bb6b");
var output = HexFormat.of().parseHex("b9b92544fb25cfe4ec6fe437d8da2bbe00f7bdaface3de97b8775a44d753c3adca3f7c6f183cc8647e229070439aa9539ae1f8f13470c9d3527fffdeef6c94f9f0520ff0c1ba8b16e16014e1af43ac6d94cb7929188cce9d7b02f81a2746f52ba16988e5f6d93298d778dfe05ea0ef256ae3728643ce3e29c794a0370e9ca6a8bf3e7a41e8677067");
s.update(msg, 0, msg.length);
if (!Arrays.equals(s.digest(), output)) {
throw new RuntimeException();
}
s = new SHAKE256(1096/8);
msg = HexFormat.of().parseHex("8d8001e2c096f1b88e7c9224a086efd4797fbf74a8033a2d422a2b6b8f6747e4");
output = HexFormat.of().parseHex("2e975f6a8a14f0704d51b13667d8195c219f71e6345696c49fa4b9d08e9225d3d39393425152c97e71dd24601c11abcfa0f12f53c680bd3ae757b8134a9c10d429615869217fdd5885c4db174985703a6d6de94a667eac3023443a8337ae1bc601b76d7d38ec3c34463105f0d3949d78e562a039e4469548b609395de5a4fd43c46ca9fd6ee29ada5e");
s.update(msg, 0, msg.length);
if (!Arrays.equals(s.digest(), output)) {
throw new RuntimeException();
}
}
}
BTW, when n  200, the state buffer in SHA3.java does not have enough bytes and the last line of implDigest() throws an exception. It probably needs to squeeze multiple times to fullfill the output.

-----
Title: [JDK-8320397] RISC-V: Avoid passing t0 as temp register to MacroAssembler:: cmpxchg_obj_header/cmpxchgptr
Priority: P4
Type: Enhancement
Component: hotspot
Description: MacroAssembler::cmpxchg/cmpxchgptr/cmpxchg_obj_header is non-trivial on linux-riscv64 platform. Passing t0(aka x5) as temporary register to this functions can also be error prone. As a reserved scratch register, t0 is implicitly clobberred by various assembler functions.
This issue is used to track avoid passing t0 as a temporary register in the following cases:
1. avoid passing t0 as temp register to MacroAssembler::cmpxchg/cmpxchgptr/cmpxchg_obj_header.
2. avoid passing t0 as temp register to x_load_barrier and x_load_barrier_slow_path function in x_riscv.ad
3. avoid passing t0 as temp register to z_store_barrier and z_color function in z_riscv.ad
Note that I didn't touch MacroAssembler::cmpxchg because it seems to me that this function is designed that it allows t0 to be used as the result register. As the result register will be set on exits, there should be no risk when using t0 for receiving the result.
OS: linux

-----
Title: [JDK-8320575] generic type information lost on mandated parameters of record's compact constructors
Priority: P3
Type: Bug
Component: core-libs
Description: ADDITIONAL SYSTEM INFORMATION :
Tested on MacBook Pro M2, Ventura 13.4
Java 21.0.1
A DESCRIPTION OF THE PROBLEM :
When, via reflection, trying to determine the generic type of an argument of the default record constructor,
the generic type cannot be determined in Java 21.
This did work in pre 21 versions. Tested in 17.0.9.
REGRESSION : Last worked in version 17.0.9
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run provided test case.
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Expect generic type to be available in the default record constructor.
ACTUAL -
No generic type information available.
---------- BEGIN SOURCE ----------
import java.util.Optional;
public class Reproducer {
interface NoConstructorDeclarations {
record Person(Optional name, Optional age) {}
}
interface AnnotatedCompactConstructor {
record Person(Optional name, Optional age) {
@Deprecated public Person {}
}
}
interface AnotatedExplicitCanonicalConstructor  {
record Person(Optional name, Optional age) {
@Deprecated
public Person(Optional name, Optional age) {
this.name = name;
this.age = age;
}
}
}
public static void main(String args[]) {
for(var approach: Reproducer.class.getDeclaredClasses()) {
Class recordClass = approach.getClasses()[0];
System.out.println(approach.getSimpleName());
var constructor = recordClass.getConstructors()[0];
System.out.println(constructor.isAnnotationPresent(Deprecated.class));
for(var p: constructor.getParameters()) {
System.out.println(p);
}
System.out.println();
}
}
}
---------- END SOURCE ----------
CUSTOMER SUBMITTED WORKAROUND :
Explicitly add a canonical constructor with all record properties.
FREQUENCY : always
OS: generic

-----
Title: [JDK-8320586] update manual test/jdk/TEST.groups
Priority: P4
Type: Task
Component: core-libs
Description: update manual groups to separate core and security tests.
This will add additional test groups jdk_core_manual_interactive, jdk_security_manual_interactive to categorise tests that are run manually and require some interactive input or manual setup, such as deploying and running an rmi server on a remote machine.
it renames the group jdk_core_manual_no_input_security to jdk_security_no_input

-----
Title: [JDK-8320665] update jdk_core at open/test/jdk/TEST.groups
Priority: P4
Type: Task
Component: core-libs
Description: This is part of the ATR job restructuring, so that separate seclibs atr jobs will be executed, allowing more even distrbution of MACH5 execution resources and more effective and efficient analysis of test results, especially for those task that  are executed by an external test partner. corelibs and seclibs  tests will execute as distinct and separate ATR jobs.
update jdk_core so that it is split on security and non security part
a similar task will be required for closed/test/jdk/TEST,groups

-----
Title: [JDK-8320673] PageFormat/CustomPaper.java has no Pass/Fail buttons; multiple instructions
Priority: P4
Type: Bug
Component: client-libs
Description: The test/jdk/java/awt/print/PageFormat/CustomPaper.java test displays instructions but there's no Pass/Fail buttons. As soon as you close the Print dialog (after selecting the file if printing to PDF), the UI disappears — there's no way for the tester to fail the test.
The instructions reference two different bugs which require different actions from the tester. As such, the test must be run twice and display different instructions, it can be achieved by having multiple blocks with `@test` tag.

-----
Title: [JDK-8320682] [AArch64] C1 compilation fails with "Field too big for insn"
Priority: P3
Type: Bug
Component: hotspot
Description: ### Failure analysis ###
The issue is due to using PC-relative addressing (the aarch64 adr instruction) with an (unusually) large non-nmethod code heap size. Attempting to load the address of a constant that is out of range triggers the assert/guarantee.
### Original report ###
In the tier 6 test run that included the fix for JDK-8319700 we saw the same failure.
Test: compiler/arguments/TestC1Globals.java#id4
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S10903/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0724edac-4f9d-4b23-a291-90fd75eb8a31/runs/365cdd81-6ab1-4745-a986-7340646f3a7b/workspace/open/src/hotspot/cpu/aarch64/assembler_aarch64.hpp:265), pid=2092794, tid=2092814
#  guarantee(chk == -1 || chk == 0) failed: Field too big for insn
#
# JRE version: Java(TM) SE Runtime Environment (22.0+26) (fastdebug build 22-ea+26-2029)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 22-ea+26-2029, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x5b9958]  Assembler::adr(Register, unsigned char*)+0x148
#
Host: AArch64, 8 cores, 30G, Oracle Linux Server release 8.8
Time: Fri Nov 24 01:16:05 2023 UTC elapsed time: 2.811199 seconds (0d 0h 0m 2s)
---------------  T H R E A D  ---------------
Current thread (0x0000ffff7837e0a0):  JavaThread "C1 CompilerThread0" daemon [_thread_in_native, id=2092814, stack(0x0000ffff23e02000,0x0000ffff24000000) (2040K)]
Current CompileTask:
C1:2811  242    b  3       java.util.HashMap::putMapEntries (170 bytes)
Stack: [0x0000ffff23e02000,0x0000ffff24000000],  sp=0x0000ffff23ffbc00,  free space=2023k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x5b9958]  Assembler::adr(Register, unsigned char*)+0x148  (assembler_aarch64.hpp:265)
V  [libjvm.so+0x698ff8]  LIR_Assembler::const2reg(LIR_Opr, LIR_Opr, LIR_PatchCode, CodeEmitInfo*)+0x3b8  (c1_LIRAssembler_aarch64.cpp:588)
V  [libjvm.so+0x68c194]  LIR_Assembler::move_op(LIR_Opr, LIR_Opr, BasicType, LIR_PatchCode, CodeEmitInfo*, bool, bool)+0x310  (c1_LIRAssembler.cpp:816)
V  [libjvm.so+0x68da68]  LIR_Assembler::emit_lir_list(LIR_List*)+0xf8  (c1_LIRAssembler.cpp:304)
V  [libjvm.so+0x68e6f0]  LIR_Assembler::emit_code(BlockList*)+0x270  (c1_LIRAssembler.cpp:269)
V  [libjvm.so+0x63720c]  Compilation::emit_code_body()+0x14c  (c1_Compilation.cpp:358)
V  [libjvm.so+0x6377d0]  Compilation::compile_java_method()+0x390  (c1_Compilation.cpp:421)
V  [libjvm.so+0x638060]  Compilation::compile_method()+0x1fc  (c1_Compilation.cpp:482)
V  [libjvm.so+0x6386ec]  Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)+0x25c  (c1_Compilation.cpp:612)
V  [libjvm.so+0x63a464]  Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0xa4  (c1_Compiler.cpp:258)
V  [libjvm.so+0x8f2b44]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x7e0  (compileBroker.cpp:2305)
V  [libjvm.so+0x8f372c]  CompileBroker::compiler_thread_loop()+0x598  (compileBroker.cpp:1964)
V  [libjvm.so+0xd6b248]  JavaThread::thread_main_inner()+0xe4  (javaThread.cpp:720)
V  [libjvm.so+0x159a1e0]  Thread::call_run()+0xac  (thread.cpp:220)
V  [libjvm.so+0x130d4cc]  thread_native_entry(Thread*)+0x12c  (os_linux.cpp:787)
C  [libpthread.so.0+0x7928]  start_thread+0x188
OS: linux

-----
Title: [JDK-8320892] AArch64: Restore FPU control state after JNI
Priority: P3
Type: Bug
Component: hotspot
Description: Some buggy libraries corrupt the floating-point control register. Provide something similar to the x86 RestoreMXCSROnJNICalls.
OS: generic

-----
Title: [JDK-8321299] runtime/logging/ClassLoadUnloadTest.java doesn't reliably trigger class unloading
Priority: P4
Type: Bug
Component: hotspot
Description: runtime/logging/ClassLoadUnloadTest.java doesn't trigger unloading of test.Empty class.
The test accidentally pass due to an unrelated class being unloaded:
$ java ... -Xlog:class+unload=info ... ClassLoadUnloadTest\$ClassUnloadTestMain
[0.113s][info][class,unload] unloading class java.lang.invoke.LambdaForm$MH/0x000007c001002000 0x000007c001002000

-----
Title: [JDK-8321470] ThreadLocal.nextHashCode can be static final
Priority: P4
Type: Enhancement
Component: core-libs
Description: Submitted for PR:
https://github.com/openjdk/jdk/pull/16987

-----
Title: [JDK-8321474] TestAutoCreateSharedArchiveUpgrade.java should be updated with JDK 21
Priority: P4
Type: Enhancement
Component: hotspot
Description: TestAutoCreateSharedArchiveUpgrade.java tests different JDK versions with their build numbers hard coded into the test. JDK 21 should be added so it can be tested.

-----
Title: [JDK-8321543] Update NSS to version 3.96
Priority: P3
Type: Bug
Component: security-libs
Description: This will be released on 12/14/2023
https://wiki.mozilla.org/NSS:Release_Versions

-----
Title: [JDK-8321550] Update several runtime/cds tests to use vm flags or mark as flagless
Priority: P4
Type: Enhancement
Component: hotspot
Description: The following tests use the ProcessTools.createLimitedTestJavaProcessBuilder() which doesn't pass the vm options to the java process. They need to be changed to use the ProcessTools.createTestJavaProcessBuilder() or mark as vm.flagless.
./appcds/dynamicArchive/LambdasInTwoArchives.java
./appcds/sharedStrings/ResolvedReferencesNotNullTest.java
./appcds/CommandLineFlagCombo.java
./appcds/VerifyWithDefaultArchive.java
./appcds/FillerObjectLoadTest.java
./appcds/TestDumpClassListSource.java
./TestCDSVMCrash.java
./SharedStrings.java
./MaxMetaspaceSize.java

-----
Title: [JDK-8321616] Retire binary test vectors in test/jdk/java/util/zip/ZipFile
Priority: P4
Type: Enhancement
Component: core-libs
Description: Various tests in zip/ZipFile use the binary test vectors input.zip, input.jar and crash.jar. Binary test vectors makes the tests harder to understand, since the contents of the binary files must be analyzed to get a complete understanding of the tests. Modifications to binary test vectors is more complicated and sharing them across tests introduces the risk of affecting unrelated tests.
We should update the tests to generate their own test vectors independently and programmatically. While making a pass over these dusty tests, it also makes sense to convert them to JUnit and perform a moderate pass of cleanup and code modernization.

-----
Title: [JDK-8321940] Improve CDSHeapVerifier in handling of interned strings
Priority: P4
Type: Enhancement
Component: hotspot
Description: If the archived heap object graphs points to any objects that may be reinitialized at run time, the JVM may behave incorrectly. CDSHeapVerifier tries to detect this kind of error. For an explanation, see
https://github.com/openjdk/jdk/blob/3d9d353edb64dd364925481d7b7c8822beeaa117/src/hotspot/share/cds/cdsHeapVerifier.cpp#L40-L65
However, cdsHeapVerifier's handling for interned strings is too strict for cases like this:
******
At dumptime, FooBar is initialized, and its static field points to something like this:
class FooBar {
static final String xxx = System.getProperty("foo") == null ? "AAA" : "BBB"
}
The strings "AAA" and "BBB" are archived as part of the interned string table.
None of the archived object graphs actually point to "AAA" or "BBB". (Note: the static fields of FooBar itself are not archived). So we don't have a condition that cdsHeapVerifier is trying to find.
*******
However, in this case, cdsHeapVerifier still reports an error, even
[3.582s][warning][cds,heap] Field: FooBar::xxx
[3.582s][warning][cds,heap] Value: java.lang.String
[3.582s][warning][cds,heap] {0x000000060e8be8d0} - klass: 'java/lang/String'
[3.582s][warning][cds,heap]  - string: "AAA"
[3.582s][warning][cds,heap]  - ---- fields (total size 3 words):
[3.582s][warning][cds,heap]  - private 'hash' 'I' @12  0 (0x00000000)
[3.582s][warning][cds,heap]  - private final 'coder' 'B' @16  0 (0x00)
[3.582s][warning][cds,heap]  - private 'hashIsZero' 'Z' @17  true (0x01)
[3.582s][warning][cds,heap]  - injected 'flags' 'B' @18  1 (0x01)
[3.582s][warning][cds,heap]  - private final 'value' '[B' @20  [B{0x000000060e8be8e8} (0xc1d17d1d)
[3.582s][warning][cds,heap] --- trace begin ---
[3.582s][warning][cds,heap] [ 0] (shared string table)
[3.582s][warning][cds,heap] [ 1] {0x000000060e8be8d0} java.lang.String
[3.582s][warning][cds,heap] --- trace end ---

-----
Title: [JDK-8322166] Files.isReadable/isWritable/isExecutable expensive when file does not exist
Priority: P4
Type: Bug
Component: core-libs
Description: ADDITIONAL SYSTEM INFORMATION :
Tested on OpenJDK 21.0.1 on Ubuntu Linux 64, but behavior goes back to JDK 7.
A DESCRIPTION OF THE PROBLEM :
The method Files.isAccessible() are implemented on checkAccess so need to catch the IOException when the file does not exist or access can't be determined.
When using Files.isReadable() / isWritable() / isExecutable(), we check only for one mode. The native code in UnixNativeDispatcher.c / Java_sun_nio_fs_UnixNativeDispatcher_access0() is able to give us an error code if the single mode we ask for is not valid for the file.
Since we are asking for a single mode, we could translate the value of error code to a boolean directly, instead of creating an exception with is caught in Files.isAccessible() to return a boolean.
I've tested a patch available here : https://github.com/gdarmont/jdk/commit/5d0128fde225844cf9155505ea005ad50fc74a8c
The performance improvement is especially visible on use cases where a call to Files.isXXX() is likely to fail.
This is for example the case when checking if many files are executable, as it is expected that most of them are not.
Eg. the well known JGit library (Java Git Implementation) is affected, as it needs to check if a file is executable to compute Git mode attributes.
OS: generic

-----
Title: [JDK-8322754] click JComboBox when dialog about to close causes IllegalComponentStateException
Priority: P3
Type: Bug
Component: client-libs
Description: A DESCRIPTION OF THE PROBLEM :
Clicking to open a JComboBox popup during AWT event processing at the end of which the dialog will be closed causes an IllegalComponentStateException. This is a re-reporting of 4773491 which I reported over 20 years ago. The evaluation there "Not common usage. Not a feature. This seesm [sic] to be timing related." makes no sense. It can not take zero time to process an event, and there is always some chance the user will click on a combo box during that time. I made that argument then but it was ignored. The very similar bug 4942216 was fixed, and the fix here is the same, check to make sure the combo box is showing before showing the popup, possibly in BasicComboPopup.togglePopup(). We have been receiving these crashes for the last 21 years. We have worked-around for our combo boxes, but we have no control over the ones in JFileChoosers, and we still get crashes for those.
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run code.
Click "Close" button on the dialog.
Before the dialog closes (2 seconds) click the combo box arrow at the top.
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Expect no exceptions.
ACTUAL -
Exception in thread "AWT-EventQueue-0" java.awt.IllegalComponentStateException: component must be showing on the screen to determine its location
at java.desktop/java.awt.Component.getLocationOnScreen_NoTreeLock(Component.java:2113)
at java.desktop/java.awt.Component.getLocationOnScreen(Component.java:2087)
at java.desktop/javax.swing.JPopupMenu.show(JPopupMenu.java:982)
at java.desktop/javax.swing.plaf.basic.BasicComboPopup.show(BasicComboPopup.java:235)
at java.desktop/javax.swing.plaf.basic.BasicComboPopup.togglePopup(BasicComboPopup.java:1265)
at java.desktop/javax.swing.plaf.basic.BasicComboPopup$Handler.mousePressed(BasicComboPopup.java:936)
at java.desktop/java.awt.AWTEventMulticaster.mousePressed(AWTEventMulticaster.java:288)
at java.desktop/java.awt.Component.processMouseEvent(Component.java:6618)
at java.desktop/javax.swing.JComponent.processMouseEvent(JComponent.java:3398)
at java.desktop/java.awt.Component.processEvent(Component.java:6386)
at java.desktop/java.awt.Container.processEvent(Container.java:2266)
at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:4996)
at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2324)
at java.desktop/java.awt.Component.dispatchEvent(Component.java:4828)
at java.desktop/java.awt.LightweightDispatcher.retargetMouseEvent(Container.java:4948)
at java.desktop/java.awt.LightweightDispatcher.processMouseEvent(Container.java:4572)
at java.desktop/java.awt.LightweightDispatcher.dispatchEvent(Container.java:4516)
at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2310)
at java.desktop/java.awt.Window.dispatchEventImpl(Window.java:2780)
at java.desktop/java.awt.Component.dispatchEvent(Component.java:4828)
at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:775)
at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:720)
at java.desktop/java.awt.EventQueue$4.run(EventQueue.java:714)
at java.base/java.security.AccessController.doPrivileged(AccessController.java:400)
at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)
at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:98)
at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:747)
at java.desktop/java.awt.EventQueue$5.run(EventQueue.java:745)
at java.base/java.security.AccessController.doPrivileged(AccessController.java:400)
at java.base/java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:87)
at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:744)
at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)
---------- BEGIN SOURCE ----------
import javax.swing.*;
import java.awt.*;
public class JComboBoxBug5 {
public static void main(String args[]) {
SwingUtilities.invokeLater(()-go());
}
public static void go() {
JDialog dialog = new JDialog();
JComboBox cb = new JComboBox();
cb.setEditable(true);
cb.addItem("test");
cb.addItem("test2");
cb.addItem("test3");
dialog.getContentPane().add(cb, "North");
JButton b = new JButton("Close");
b.addActionListener(
(e)-{
try {
Thread.sleep(2000);
}
catch (Exception ex) {
}
dialog.setVisible(false);
});
dialog.getContentPane().add(b, "South");
dialog.setMinimumSize(new java.awt.Dimension(500, 500));
dialog.pack();
dialog.setVisible(true);
}
}
---------- END SOURCE ----------
CUSTOMER SUBMITTED WORKAROUND :
Override getLocationOnScreen in a JComboBox subclass as follows:
public Point getLocationOnScreen() {
try {
return super.getLocationOnScreen();
}
catch (IllegalComponentStateException e) {
return new Point(0, 0);
}
}
The popup will not be shown, so returning (0,0) does not cause a problem.
FREQUENCY : always
OS: generic

-----
Title: [JDK-8322809] SystemModulesMap::classNames and moduleNames arrays do not match the order
Priority: P3
Type: Bug
Component: tools
Description: A DESCRIPTION OF THE PROBLEM :
I have a java-project that is build as module. The name of the module starts with "com" (e.g. com.project). This module has a dependency to jdk.httpserver. When I run the compiled jar with java command, then everything works fine. But when I build a runtime image with jlink and try to start that one, I get an error ("Module com.project not in boot Layer").
If I change the module name to not start with "com" (e.g. org.project) or remove the dependency to jdk.httpserver or use Java 17, then the runtime image created by jlink works fine.
REGRESSION : Last worked in version 17.0.9
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Create a java project with a starter class (com.project.Starter) containing the main method.
Add module-info.java and name your project "com.project" and add dependency to "jdk.httpserver".
Compile the project.
Use jlink to build a runtime image:
jlink --module-path "c:\\jmods;out" --add-modules com.project --launcher starter=com.project/com.project.Starter --output image
Execute image/bin/starter.bat and you will get an exception: "Module com.project not in boot Layer"
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Running application (no exception)
ACTUAL -
java.lang.InternalError: Module com.project not in boot Layer
---------- BEGIN SOURCE ----------
##Starter##
package com.project;
public class Starter {
public static void main(String[] args) {
System.out.println("Hello world");
}
}
##module-info.java##
module com.project {
requires jdk.httpserver;
}
---------- END SOURCE ----------
CUSTOMER SUBMITTED WORKAROUND :
renaming module to not start with "com"
FREQUENCY : always
OS: generic

-----
Title: [JDK-8322830] Add test case for ZipFile opening a ZIP with no entries
Priority: P4
Type: Enhancement
Component: core-libs
Description: A ZIP file with no entries is unusual, but valid. It can be the result of filtering a ZIP file with no matching entries, etc.
We currently have no test case for this, which can be verified by adding the following code in getEntryPos:
if (total == 0) {
throw new AssertionError();
}

-----
Title: [JDK-8323562] SaslInputStream.read() may return wrong value
Priority: P4
Type: Bug
Component: core-libs
Description: The "com.sun.jndi.ldap.sasl.SaslInputStream" class has this code:
public int read() throws IOException {
byte[] inBuf = new byte[1];
int count = read(inBuf, 0, 1);
if (count  0) {
return inBuf[0];
} else {
return -1;
}
}
SaslInputStream.read() should return a value in the range from 0 to 255 per the spec of InputStream.read() but it returns the signed byte from the inBuf as is.
OS: generic

-----
Title: [JDK-8323688] C2: Fix UB of jlong overflow in PhaseIdealLoop::is_counted_loop()
Priority: P4
Type: Bug
Component: hotspot
Description: The computation of `final_correction` in `is_counted_loop()` could overflow which is UB. I don't think that any compiler would produce a wrong result. But we should still fix this UB.

-----
Title: [JDK-8324841] PKCS11 tests still skip execution
Priority: P4
Type: Bug
Component: security-libs
Description: Since JDK-8313206, the PKCS11 tests throw SkipException if they can't find NSS library. This is fine in the default case where no NSS library was provided. However, in cases where we expect the library to be found (like when using JIB or when path to NSS is explicitly specified on the command line via -Djdk.test.lib.artifacts.nsslib-linux_x64), failure to find NSS should be treated as an error.
Additionally, the test framework adds nss/lib suffix to the provided jdk.test.lib.artifacts.nsslib-linux_x64 parameter; this is unexpected, and makes testing with platform libnss3 harder than necessary.
(Also, since JDK-8295343 the test does not work with system NSS libraries on Ubuntu 20.04/22.04. On these systems the library was located in /usr/lib/x86_64-linux-gnu/nss/, which was removed from the search path. But that might be a separate issue.)

-----
Title: [JDK-8324861] Exceptions::wrap_dynamic_exception() doesn't have ResourceMark
Priority: P4
Type: Bug
Component: hotspot
Description: Exceptions::wrap_dynamic_exception() don't have ResourceMark in the logging path
diff:
diff --git a/src/hotspot/share/utilities/exceptions.cpp b/src/hotspot/share/utilities/exceptions.cpp
index bca6837ee13..a1c5b868481 100644
--- a/src/hotspot/share/utilities/exceptions.cpp
+++ b/src/hotspot/share/utilities/exceptions.cpp
@@ -433,6 +433,7 @@ void Exceptions::wrap_dynamic_exception(bool is_indy, JavaThread* THREAD) {
// Pass through an Error, including BootstrapMethodError, any other form
// of linkage error, or say OutOfMemoryError
if (ls != nullptr) {
+        ResourceMark rm(THREAD);
ls-print_cr("bootstrap method invocation wraps BSME around " PTR_FORMAT, p2i(exception));
exception-print_on(ls);
}
@@ -441,6 +442,7 @@ void Exceptions::wrap_dynamic_exception(bool is_indy, JavaThread* THREAD) {
// Otherwise wrap the exception in a BootstrapMethodError
if (ls != nullptr) {
+      ResourceMark rm(THREAD);
ls-print_cr("%s throws BSME for " PTR_FORMAT, is_indy ? "invokedynamic" : "dynamic constant", p2i(exception));
exception-print_on(ls);
}

-----
Title: [JDK-8325038] runtime/cds/appcds/ProhibitedPackage.java can fail with UseLargePages
Priority: P4
Type: Bug
Component: hotspot
Description: make CONF_NAME=linux-x64 LOG=info TEST="runtime/cds/appcds/ProhibitedPackage.java" JTREG_JAVA_OPTIONS="-XX:+UseLargePages" test
stdout: [[0.001s][warning][pagesize] UseLargePages disabled, no large pages configured and available on the system.
[0.009s][info   ][cds     ] Core region alignment: 4096
[0.028s][info   ][cds     ] JVM_StartThread() ignored: java.lang.ref.Reference$ReferenceHandler
[0.028s][info   ][cds     ] JVM_StartThread() ignored: java.lang.ref.Finalizer$FinalizerThread
[0.041s][info   ][cds     ] Loading classes to share ...
[0.041s][info   ][cds     ] Parsing /home/dnsimon/dev/jdk-jdk/open/build/linux-x64/images/jdk/lib/classlist
[0.094s][info   ][cds     ] JVM_StartThread() ignored: jdk.internal.misc.InnocuousThread
[0.132s][info   ][cds     ] Parsing /home/dnsimon/dev/jdk-jdk/open/build/linux-x64/test-support/jtreg_test_hotspot_jtreg_runtime_cds_appcds_ProhibitedPackage_java/scratch/0/runtime.cds.appcds.ProhibitedPackage.java-test.classlist
[0.132s][info   ][cds     ] Prohibited package for non-bootstrap classes: java/lang/Prohibited.class from /home/dnsimon/dev/jdk-jdk/open/build/linux-x64/test-support/jtreg_test_hotspot_jtreg_runtime_cds_appcds_ProhibitedPackage_java/scratch/0/prohibited_pkg.jar
[0.132s][warning][cds     ] java.lang.ClassNotFoundException:
...
java.lang.RuntimeException: '[cds] Prohibited package for non-bootstrap classes: java/lang/Prohibited.class' missing from stdout/stderr
at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:252)
at ProhibitedPackage.main(ProhibitedPackage.java:57)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.Thread.run(Thread.java:1575)

-----
Title: [JDK-8325399] Add tests for virtual threads doing Selector operations
Priority: P4
Type: Enhancement
Component: core-libs
Description: SelectorOps is new test in the loom repo to exercise virtual threads doing Selector operations, this test can be brought over to the main line.

-----
Title: [JDK-8325506] Ensure randomness is only read from provided SecureRandom object
Priority: P4
Type: Enhancement
Component: security-libs
Description: Many crypto service classes require a SecureRandom object at initialization. This test makes sure no other random source is accidentally used.

-----
Title: [JDK-8325525] Create jtreg test case for JDK-8325203
Priority: P4
Type: Enhancement
Component: tools
Description: Create jtreg test case for JDK-8325203 issue.
Need to test that child process started from the app launched by jpackage launcher is not automatically terminated when the the launcher is terminated.
OS: windows

-----
Title: [JDK-8325203] System.exit(0) kills the launched 3rd party application
Priority: P3
Type: Bug
Component: tools
Description: ADDITIONAL SYSTEM INFORMATION :
Windows 11,
openjdk version "21.0.2" 2024-01-16 LTS
OpenJDK Runtime Environment Temurin-21.0.2+13 (build 21.0.2+13-LTS)
OpenJDK 64-Bit Server VM Temurin-21.0.2+13 (build 21.0.2+13-LTS, mixed mode, sharing)
A DESCRIPTION OF THE PROBLEM :
Hi there,
my Java app experienced a very weird regression when switching from JDK
OpenJDK21U-jdk_x64_windows_hotspot_21.0.1_12
to
OpenJDK21U-jdk_x64_windows_hotspot_21.0.2_13
This small snippet should start a third party software (in this case Notepad++.exe but it's just an example) and after 30 seconds, close the java app that launched it.
public static void main(String... args) throws IOException {
String[] cmdToRunUsingArgs = {"cmd.exe", "/C", "C:\\Program Files\\Notepad++\\notepad++.exe"};
Runtime.getRuntime().exec(cmdToRunUsingArgs);
Executors.newSingleThreadScheduledExecutor().schedule(() - {
System.exit(0);
}, 30, TimeUnit.SECONDS);
}
It works well with all previous JDK versions but it stopped working from java 21.0.2 and later.
With java 21.0.1, the program launches the third party app correcly, after 30 seconds, it kills itself by leaving the third app running.
With java 21.0.2, the program launches the third party app correcly, after 30 seconds, it kills itself AND the third party app.
This makes even impossible to restart a java app from the app itself.
REGRESSION : Last worked in version 17.0.10
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run the code snippet from a JAR file not in an IDE!
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The program should run a third party software and then close itself leaving the third party software running.
ACTUAL -
The program kills both the third party software and itself.
---------- BEGIN SOURCE ----------
public static void main(String... args) throws IOException {
String[] cmdToRunUsingArgs = {"cmd.exe", "/C", "C:\\Program Files\\Notepad++\\notepad++.exe"};
Runtime.getRuntime().exec(cmdToRunUsingArgs);
Executors.newSingleThreadScheduledExecutor().schedule(() - {
System.exit(0);
}, 30, TimeUnit.SECONDS);
}
---------- END SOURCE ----------
CUSTOMER SUBMITTED WORKAROUND :
no workaround found
FREQUENCY : always
OS: windows_10

-----
Title: [JDK-8325610] CTW: Add StressIncrementalInlining to stress options
Priority: P4
Type: Enhancement
Component: hotspot
Description: CtwRunner opts-in into various C2 randomizers:
https://github.com/openjdk/jdk/blob/6a12362660d6221beb3a059dc90d06a8068cce39/test/hotspot/jtreg/testlibrary/ctw/src/sun/hotspot/tools/ctw/CtwRunner.java#L297-L301
I think we forgot to add -XX:+StressIncrementalInlining there, which was added by JDK-8319879.

-----
Title: [JDK-8325762] Use PassFailJFrame.Builder.splitUI() in PrintLatinCJKTest.java
Priority: P4
Type: Enhancement
Component: client-libs
Description: The test/jdk/java/awt/print/PrinterJob/PrintLatinCJKTest.java test displays only Print button as its test UI. It can be embedded into the instruction frame using the new PassFailJFrame.Builder.splitUI() method which allows displaying test UI in a split pane.
It depends on JDK-8294148 which adds this feature to PassFailJFrame.

-----
Title: [JDK-8325851] Hide PassFailJFrame.Builder constructor
Priority: P5
Type: Bug
Component: client-libs
Description: The PassFailJFrame.Builder class provides a way to configure the parameters of PassFailJFrame in a set of chained method calls.
The Builder class is public and has public constructor. At the same time, a better design would be to hide all the Builder constructors and rely on the builder() method which returns an instance of the Builder.
At the same time, the builder() helper wasn't available until JDK-8294156 which was integrated in October 2023 whereas the Builder class became available with JDK-8294535 in August 2023.
For this reason, there are 20 tests which create the PassFailJFrame.Builder object using its constructor instead of the helper method. These tests have to be updated.
To find these tests, run:
grep -r 'new PassFailJFrame.Builder' test/jdk
Hiding the PassFailJFrame.Builder constructor is a better design choice. New tests should not create the builder using the `new` keyword. To enforce it, the Builder constructor needs to be private.

-----
Title: [JDK-8325906] Problemlist vmTestbase/vm/mlvm/meth/stress/compiler/deoptimize/Test.java#id1 until JDK-8320865 is fixed
Priority: P4
Type: Sub-task
Component: hotspot

-----
Title: [JDK-8326100] DeflaterDictionaryTests should use Deflater.getBytesWritten instead of Deflater.getTotalOut
Priority: P4
Type: Enhancement
Component: core-libs
Description: Various DeflaterDictionaryTests methods currently calls Deflater.getTotalOut() when printing some debugging info.
They should be updated to instead use Deflater.getBytesWritten.
Additionally, various debugging output lines claim to include the output of Deflater.getAdler, but instead output the value of Deflater.getTotalOut. We should correct this to actually print the Adler value.
This is a cleanup in preparation for deprecating Deflater.getTotalOut, see JDK-8326096

-----
Title: [JDK-8326121] vmTestbase/gc/g1/unloading/tests/unloading_keepRef_rootClass_inMemoryCompilation_keep_cl failed with Full gc happened. Test was useless.
Priority: P4
Type: Bug
Component: hotspot
Description: The test triggers frequent System.gc() calls which in some cases may aggressively shrink the heap, and subsequent allocations lead to full-GC. This may affect the usefulness of the test, but should not be considered a test failure.
The following test failed in the JDK23 CI:
vmTestbase/gc/g1/unloading/tests/unloading_keepRef_rootClass_inMemoryCompilation_keep_cl/TestDescription.java
Here's a snippet from the log file:
#section:main
----------messages:(7/1060)----------
command: main -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+UseG1GC -XX:+ExplicitGCInvokesConcurrent -Xbootclasspath/a:classPool.jar -Xlog:gc:gc.log -XX:-UseGCOverheadLimit gc.g1.unloading.UnloadingTest -keepRefMode STATIC_FIELD_OF_ROOT_CLASS -inMemoryCompilation -keep classloader -numberOfChecksLimit 4 -stressTime 180
reason: User specified action: run main/othervm -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+UseG1GC -XX:+ExplicitGCInvokesConcurrent -Xbootclasspath/a:classPool.jar -Xlog:gc:gc.log -XX:-UseGCOverheadLimit gc.g1.unloading.UnloadingTest -keepRefMode STATIC_FIELD_OF_ROOT_CLASS -inMemoryCompilation -keep classloader -numberOfChecksLimit 4 -stressTime 180
started: Sun Feb 18 22:33:06 UTC 2024
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base --add-exports java.base/jdk.internal.misc=ALL-UNNAMED --add-exports java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED
finished: Sun Feb 18 22:33:48 UTC 2024
elapsed time (seconds): 42.244
----------configuration:(5/210)----------
----------System.out:(209/10886)----------
Stress time: 180 seconds
Stress iterations factor: 1
Stress threads factor: 1
Stress runs factor: 1
Max memory: 1073741824
Sleep time: 500
Iterations: 0
Number of threads: 24
Run GC thread: false
Run mem diag thread: false
Run forever: false
releaseRefMode = NONE
whatToKeep = CLASSLOADER
classlodingMethod = REFLECTION
numberOfGCsBeforeCheck = 50
keepRefMode = STATIC_FIELD_OF_ROOT_CLASS
humongousClass = false
compilationLevel = 0
compilationNumber = 2
redefineClasses = false
inMemoryCompilation = false
numberOfChecksLimit = 4
For random generator using seed: -9189803049408108649
To re-run test with same seed value please add "-Djdk.test.lib.random.seed=-9189803049408108649" to command line.
In method of generated class. Random.nextDouble =  0.7275636800328681
Printing bytesToReplace0 bytesToReplace2
In method of generated class. Random.nextDouble =  0.7275636800328681
Printing bytesToReplace0 bytesToReplace2
In method of generated class. Random.nextDouble =  0.7275636800328681
Printing bytesToReplace0 bytesToReplace2
In constructor of Class0
In method of generated class. Random.nextDouble =  0.7275636800328681
Printing bytesToReplace0 bytesToReplace2
In method of generated class. Random.nextDouble =  0.7275636800328681
Printing bytesToReplace0 bytesToReplace2
In method of generated class. Random.nextDouble =  0.7275636800328681
Printing bytesToReplace0 bytesToReplace2
Check OK, class gc.g1.unloading.loading.ClassAbc_0___________, isAlive = false, shouldBeAlive = false
In method of generated class. Random.nextDouble =  0.7275636800328681
Printing bytesToReplace0 bytesToReplace2
In constructor of Class0
Check OK, class gc.g1.unloading.loading.ClassAbc_1___________, isAlive = false, shouldBeAlive = false
In method of generated class. Random.nextDouble =  0.7275636800328681
Printing bytesToReplace0 bytesToReplace2
In constructor of Class0
Check OK, class gc.g1.unloading.loading.ClassAbc_2___________, isAlive = true, shouldBeAlive = true
In method of generated class. Random.nextDouble =  0.7275636800328681
Printing bytesToReplace0 bytesToReplace2
In constructor of Class0
Check OK, class gc.g1.unloading.loading.ClassAbc_3___________, isAlive = false, shouldBeAlive = false
In method of generated class. Random.nextDouble =  0.7275636800328681
Printing bytesToReplace0 bytesToReplace2
In constructor of Class0
Check OK, class gc.g1.unloading.loading.ClassAbc_4___________, isAlive = true, shouldBeAlive = true
In method of generated class. Random.nextDouble =  0.7275636800328681
Printing bytesToReplace0 bytesToReplace2
Check OK, class gc.g1.unloading.loading.ClassAbc_5___________, isAlive = false, shouldBeAlive = false
In method of generated class. Random.nextDouble =  0.7275636800328681
Printing bytesToReplace0 bytesToReplace2
In constructor of Class0
Check OK, class gc.g1.unloading.loading.ClassAbc_6___________, isAlive = false, shouldBeAlive = false
In method of generated class. Random.nextDouble =  0.7275636800328681
Printing bytesToReplace0 bytesToReplace2
In constructor of Class0
Check OK, class gc.g1.unloading.loading.ClassAbc_7___________, isAlive = false, shouldBeAlive = false
In method of generated class. Random.nextDouble =  0.7275636800328681
Printing bytesToReplace0 bytesToReplace2
In constructor of Class0
Check OK, class gc.g1.unloading.loading.ClassAbc_8___________, isAlive = true, shouldBeAlive = true
In method of generated class. Random.nextDouble =  0.7275636800328681
Printing bytesToReplace0 bytesToReplace2
In constructor of Class0
Check OK, class gc.g1.unloading.loading.ClassAbc_9___________, isAlive = false, shouldBeAlive = false
In method of generated class. Random.nextDouble =  0.7275636800328681
Printing bytesToReplace0 bytesToReplace2
Check OK, class gc.g1.unloading.loading.ClassAbc_10__________, isAlive = true, shouldBeAlive = true
Exiting because numberOfChecksLimit exceeded.
ClassAssertion.getCounterOfCheckedAlive() = 4
ClassAssertion.getCounterOfCheckedUnloaded() = 7
bean.getName() = 	"G1 Young Generation", bean.getCollectionCount() = 	66
bean.getName() = 	"G1 Concurrent GC", bean.getCollectionCount() = 	122
bean.getName() = 	"G1 Old Generation", bean.getCollectionCount() = 	1
java.lang.RuntimeException: Full gc happened. Test was useless.
at gc.g1.unloading.UnloadingTest.checkGCCounters(UnloadingTest.java:164)
at gc.g1.unloading.UnloadingTest.run(UnloadingTest.java:133)
at nsk.share.test.Tests$TestRunner.execute(Tests.java:82)
at nsk.share.test.Tests$TestRunner.run(Tests.java:96)
at nsk.share.test.Tests.runTest(Tests.java:102)
at gc.g1.unloading.UnloadingTest.main(UnloadingTest.java:67)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1575)
----------System.err:(14/786)----------
nsk.share.TestFailure: Test exit code: 97
at nsk.share.test.Tests$TestRunner.execute(Tests.java:90)
at nsk.share.test.Tests$TestRunner.run(Tests.java:96)
at nsk.share.test.Tests.runTest(Tests.java:102)
at gc.g1.unloading.UnloadingTest.main(UnloadingTest.java:67)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1575)
JavaTest Message: Test threw exception: nsk.share.TestFailure: Test exit code: 97
JavaTest Message: shutting down test
STATUS:Failed.`main' threw exception: nsk.share.TestFailure: Test exit code: 97
----------rerun:(51/8380)*----------
OS: windows

-----
Title: [JDK-8326611] Clean up vmTestbase/nsk/stress/stack tests
Priority: P4
Type: Enhancement
Component: hotspot
Description: The vmTestbase/nsk/stress/stack might be easy refactored to improve reading.

-----
Title: [JDK-8326898] NSK tests should listen on loopback addresses only
Priority: P4
Type: Enhancement
Component: core-svc
Description: There are 2 places in nsk framework when server socket listens on all local addresses:
DebugeeBinder.prepareForPipeConnection (nsk/share/jpda/DebugeeBinder.java)
and
SocketIOPipe.createServerIOPipe (nsk/share/jpda/SocketIOPipe.java)
To improve robustness the tests should listen on loopback addresses only
OS: generic

-----
Title: [JDK-8327924] Simplify TrayIconScalingTest.java
Priority: P5
Type: Bug
Component: client-libs
Description: The test/jdk/java/awt/TrayIcon/TrayIconScalingTest.java test uses PassFailJFrame and combines builder and positioning of the windows. Previously, calling PassFailJFrame.positionTestWindow was required to show the instructions; now the instructions are shown automatically after build() is called on the builder.
Moreover, using PassFailJFrame.positionTestWindow moves the instructions to the left of the screen. Since there's no test UI, the instructions could and should remain centered.

-----
Title: [JDK-8328021] Convert applet test java/awt/List/SetFontTest/SetFontTest.html to main program
Priority: P4
Type: Bug
Component: client-libs
Description: java/awt/List/SetFontTest/SetFontTest.html  is a manual applet-based test.
It can be converted to a main program test using PassFailJFrame

-----
Title: [JDK-8328242] Add a log area to the PassFailJFrame
Priority: P4
Type: Enhancement
Component: client-libs
Description: Often manual tests have a text area in the instruction window to print feedback from the test to be evaluated by a tester.
We can add this as a standard feature.

-----
Title: [JDK-8328303] 3 JDI tests timed out with UT enabled
Priority: P4
Type: Bug
Component: core-svc
Description: The following 3 tests timed out in the JDK23 CI with UT enabled:
vmTestbase/nsk/jdi/EventRequestManager/threadDeathRequests/thrdeathreq001/TestDescription.java
vmTestbase/nsk/jdi/ClassPrepareEvent/thread/thread001/TestDescription.java
vmTestbase/nsk/jdi/ClassPrepareEvent/referenceType/refType001/TestDescription.java
thrdeathreq001 log snippet:
2) Getting ThreadDeathRequest objects with enabled event requests...
Found expected ThreadDeathRequest object with the property: (first,a quick)
Found expected ThreadDeathRequest object with the property: (second,brown)
Found expected ThreadDeathRequest object with the property: (third,fox)
Found expected ThreadDeathRequest object with the property: (fourth,jumps)
Found expected ThreadDeathRequest object with the property: (fifth,over)
Found expected ThreadDeathRequest object with the property: (sixth,the lazy)
Found expected ThreadDeathRequest object with the property: (seventh,dog)
EventListener: following JDI event occured: ThreadDeathEvent in thread UsageTracker
EventListener: following JDI event occured: ThreadDeathEvent in thread UsageTracker
EventListener: following JDI event occured: ThreadDeathEvent in thread UsageTracker
EventListener: following JDI event occured: ThreadDeathEvent in thread UsageTracker
EventListener: following JDI event occured: ThreadDeathEvent in thread UsageTracker
EventListener: following JDI event occured: ThreadDeathEvent in thread UsageTracker
EventListener: following JDI event occured: ThreadDeathEvent in thread UsageTracker
EventListener: exiting
Timeout signalled after 480 seconds
# ERROR: TEST FAILED: debuggee's process finished with status: 134
The following stacktrace is for failure analysis.
nsk.share.TestFailure: TEST FAILED: debuggee's process finished with status: 134
at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:431)
at nsk.share.Log.complain(Log.java:402)
at nsk.jdi.EventRequestManager.threadDeathRequests.thrdeathreq001.quitDebuggee(thrdeathreq001.java:187)
at nsk.jdi.EventRequestManager.threadDeathRequests.thrdeathreq001.runIt(thrdeathreq001.java:131)
at nsk.jdi.EventRequestManager.threadDeathRequests.thrdeathreq001.run(thrdeathreq001.java:82)
at nsk.jdi.EventRequestManager.threadDeathRequests.thrdeathreq001.main(thrdeathreq001.java:78)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1575)
#
#  SUMMARY: Following errors occured
#      during test execution:
#
# ERROR: TEST FAILED: debuggee's process finished with status: 134
----------System.err:(0/0)----------
----------rerun:(40/10287)*----------
thread001 log snippet:
ClassPrepareEvent received:
ClassPrepareEvent in thread UsageTracker
ClassPrepareEvent received:
ClassPrepareEvent in thread outerThread
Class nsk.jdi.ClassPrepareEvent.thread.ClassForOuterThread prepared in thread outerThread
Thread outerThread is correctly suspended
ClassPrepareEvent received:
ClassPrepareEvent in thread UsageTracker
ClassPrepareEvent received:
ClassPrepareEvent in thread main
ClassPrepareEvent received:
ClassPrepareEvent in thread main
ClassPrepareEvent received:
ClassPrepareEvent in thread UsageTracker
ClassPrepareEvent received:
ClassPrepareEvent in thread main
ClassPrepareEvent received:
ClassPrepareEvent in thread UsageTracker
eventHandler completed
Disabling StepEvent request
Sending command: quit
Waiting for debuggee terminating
debugee.stderr All threads started in debuggee
Timeout signalled after 480 seconds
# ERROR: Debuggee FAILED with exit code: 134
The following stacktrace is for failure analysis.
nsk.share.TestFailure: Debuggee FAILED with exit code: 134
at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:431)
at nsk.share.Log.complain(Log.java:402)
at nsk.jdi.ClassPrepareEvent.thread.thread001.run(thread001.java:334)
at nsk.jdi.ClassPrepareEvent.thread.thread001.main(thread001.java:79)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1575)
# ERROR: TEST FAILED
#
#  SUMMARY: Following errors occured
#      during test execution:
#
# ERROR: Debuggee FAILED with exit code: 134
# ERROR: TEST FAILED
----------System.err:(0/0)----------
----------rerun:(40/10107)*----------
refType001 log snippet:
ClassPrepareEvent received:
ClassPrepareEvent in thread UsageTracker
ClassPrepareEvent received:
ClassPrepareEvent in thread main
ClassPrepareEvent received:
ClassPrepareEvent in thread main
ClassPrepareEvent received:
ClassPrepareEvent in thread UsageTracker
ClassPrepareEvent received:
ClassPrepareEvent in thread main
ClassPrepareEvent received:
ClassPrepareEvent in thread UsageTracker
eventHandler completed
Disabling StepEvent request
debugee.stderr Another thread started in debuggee: AnotherThread
Sending command: quit
Waiting for debuggee terminating
Timeout signalled after 480 seconds
# ERROR: Debuggee FAILED with exit code: 134
The following stacktrace is for failure analysis.
nsk.share.TestFailure: Debuggee FAILED with exit code: 134
at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:431)
at nsk.share.Log.complain(Log.java:402)
at nsk.jdi.ClassPrepareEvent.referenceType.refType001.run(refType001.java:310)
at nsk.jdi.ClassPrepareEvent.referenceType.refType001.main(refType001.java:75)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1575)
# ERROR: TEST FAILED
#
#  SUMMARY: Following errors occured
#      during test execution:
#
# ERROR: Debuggee FAILED with exit code: 134
# ERROR: TEST FAILED
----------System.err:(0/0)----------
----------rerun:(40/10179)*----------
OS: linux, os_x

-----
Title: [JDK-8328379] Convert URLDragTest.html applet test to main
Priority: P4
Type: Bug
Component: client-libs
Description: Convert awt/dnd/URLDragTest.html applet test to main using PassFailJFrame.
OS: generic

-----
Title: [JDK-8328402] Implement pausing functionality for the PassFailJFrame
Priority: P4
Type: Enhancement
Component: client-libs
Description: we need to add next to Pass/Fail a "Pause Timer" button, that
(a) stops the count down
(b) changes the Pause Timer to "Resume Timer"
(c) disables Pass/Fail until the timer is resumed
the test will not have to pause or be aware - only the PassFailJFrame machinery.
So the tester can do anything they want except exit the test in the paused mode.

-----
Title: [JDK-8328619] sun/management/jmxremote/bootstrap/SSLConfigFilePermissionTest.java failed with BindException: Address already in use
Priority: P4
Type: Bug
Component: core-svc
Description: The following test failed in the JDK23 CI:
sun/management/jmxremote/bootstrap/SSLConfigFilePermissionTest.java
Here's a snippet from the log file:
#section:main
----------messages:(8/427)----------
command: main SSLConfigFilePermissionTest
reason: User specified action: run main/timeout=300 SSLConfigFilePermissionTest
started: Wed Mar 20 05:06:20 UTC 2024
Mode: agentvm
Agent id: 14
Additional exports to unnamed modules from @modules: java.management/sun.management jdk.management.agent/jdk.internal.agent jdk.management.agent/sun.management.jmxremote
finished: Wed Mar 20 05:06:27 UTC 2024
elapsed time (seconds): 7.287
----------configuration:(17/2132)----------
----------System.out:(56/17284)----------
Command line: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-23+15-1163/linux-aarch64-debug.jdk/jdk-23/fastdebug/bin/java -cp /opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/classes/2/sun/management/jmxremote/bootstrap/SSLConfigFilePermissionTest.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-23+15-1163/src.full/open/test/jdk/sun/management/jmxremote/bootstrap:/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/classes/2/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/jtreg.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/junit-platform-console-standalone-1.9.2.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/testng-7.3.0.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/jcommander-1.82.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/guice-5.1.0.jar -Xmx768m -XX:MaxRAMPercentage=6.25 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/21/35/bundles/linux-aarch64/jdk-21_linux-aarch64_bin.tar.gz/jdk-21 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/tmp -ea -esa -XX:+UseSerialGC -Xmx768m -XX:MaxRAMPercentage=6.25 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/21/35/bundles/linux-aarch64/jdk-21_linux-aarch64_bin.tar.gz/jdk-21 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/tmp -ea -esa -XX:+UseSerialGC -Dcom.sun.management.config.file=/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/classes/2/sun/management/jmxremote/bootstrap/SSLConfigFilePermissionTest.d/lib/management.properties -Dcom.sun.management.jmxremote.port=37049 -cp /opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/classes/2/sun/management/jmxremote/bootstrap/SSLConfigFilePermissionTest.d Dummy ]
test cmdline: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-23+15-1163/linux-aarch64-debug.jdk/jdk-23/fastdebug/bin/java -cp /opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/classes/2/sun/management/jmxremote/bootstrap/SSLConfigFilePermissionTest.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-23+15-1163/src.full/open/test/jdk/sun/management/jmxremote/bootstrap:/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/classes/2/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/jtreg.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/junit-platform-console-standalone-1.9.2.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/testng-7.3.0.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/jcommander-1.82.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/guice-5.1.0.jar -Xmx768m -XX:MaxRAMPercentage=6.25 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/21/35/bundles/linux-aarch64/jdk-21_linux-aarch64_bin.tar.gz/jdk-21 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/tmp -ea -esa -XX:+UseSerialGC -Xmx768m -XX:MaxRAMPercentage=6.25 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/21/35/bundles/linux-aarch64/jdk-21_linux-aarch64_bin.tar.gz/jdk-21 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/tmp -ea -esa -XX:+UseSerialGC -Dcom.sun.management.config.file=/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/classes/2/sun/management/jmxremote/bootstrap/SSLConfigFilePermissionTest.d/lib/management.properties -Dcom.sun.management.jmxremote.port=37049 -cp /opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/classes/2/sun/management/jmxremote/bootstrap/SSLConfigFilePermissionTest.d Dummy]
[2024-03-20T05:06:22.175078613Z] Gathering output for process 135662
[2024-03-20T05:06:22.305457499Z] Waiting for completion for process 135662
[2024-03-20T05:06:25.948450419Z] Waiting for completion finished for process 135662
Output and diagnostic info for process 135662 was saved into 'pid-135662-output.log'
test output:
Error: Exception thrown by the agent: java.rmi.server.ExportException: Port already in use: 37049; nested exception is:
java.net.BindException: Address already in use
jdk.internal.agent.AgentConfigurationError: java.rmi.server.ExportException: Port already in use: 37049; nested exception is:
java.net.BindException: Address already in use
at jdk.management.agent/sun.management.jmxremote.ConnectorBootstrap.startRemoteConnectorServer(ConnectorBootstrap.java:491)
at jdk.management.agent/jdk.internal.agent.Agent.startAgent(Agent.java:447)
at jdk.management.agent/jdk.internal.agent.Agent.startAgent(Agent.java:603)
Caused by: java.rmi.server.ExportException: Port already in use: 37049; nested exception is:
java.net.BindException: Address already in use
at java.rmi/sun.rmi.transport.tcp.TCPTransport.listen(TCPTransport.java:356)
at java.rmi/sun.rmi.transport.tcp.TCPTransport.exportObject(TCPTransport.java:251)
at java.rmi/sun.rmi.transport.tcp.TCPEndpoint.exportObject(TCPEndpoint.java:415)
at java.rmi/sun.rmi.transport.LiveRef.exportObject(LiveRef.java:147)
at java.rmi/sun.rmi.server.UnicastServerRef.exportObject(UnicastServerRef.java:235)
at java.rmi/sun.rmi.registry.RegistryImpl.setup(RegistryImpl.java:223)
at java.rmi/sun.rmi.registry.RegistryImpl.(RegistryImpl.java:182)
at jdk.management.agent/sun.management.jmxremote.SingleEntryRegistry.(SingleEntryRegistry.java:49)
at jdk.management.agent/sun.management.jmxremote.ConnectorBootstrap.exportMBeanServer(ConnectorBootstrap.java:857)
at jdk.management.agent/sun.management.jmxremote.ConnectorBootstrap.startRemoteConnectorServer(ConnectorBootstrap.java:479)
... 2 more
Caused by: java.net.BindException: Address already in use
at java.base/sun.nio.ch.Net.bind0(Native Method)
at java.base/sun.nio.ch.Net.bind(Net.java:565)
at java.base/sun.nio.ch.Net.bind(Net.java:554)
at java.base/sun.nio.ch.NioSocketImpl.bind(NioSocketImpl.java:636)
at java.base/java.net.ServerSocket.bind(ServerSocket.java:391)
at java.base/java.net.ServerSocket.(ServerSocket.java:278)
at java.base/java.net.ServerSocket.(ServerSocket.java:170)
at java.rmi/sun.rmi.transport.tcp.TCPDirectSocketFactory.createServerSocket(TCPDirectSocketFactory.java:45)
at java.rmi/sun.rmi.transport.tcp.TCPEndpoint.newServerSocket(TCPEndpoint.java:672)
at java.rmi/sun.rmi.transport.tcp.TCPTransport.listen(TCPTransport.java:344)
... 11 more
Command line: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-23+15-1163/linux-aarch64-debug.jdk/jdk-23/fastdebug/bin/java -cp /opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/classes/2/sun/management/jmxremote/bootstrap/SSLConfigFilePermissionTest.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-23+15-1163/src.full/open/test/jdk/sun/management/jmxremote/bootstrap:/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/classes/2/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/jtreg.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/junit-platform-console-standalone-1.9.2.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/testng-7.3.0.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/jcommander-1.82.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/guice-5.1.0.jar -Xmx768m -XX:MaxRAMPercentage=6.25 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/21/35/bundles/linux-aarch64/jdk-21_linux-aarch64_bin.tar.gz/jdk-21 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/tmp -ea -esa -XX:+UseSerialGC -Xmx768m -XX:MaxRAMPercentage=6.25 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/21/35/bundles/linux-aarch64/jdk-21_linux-aarch64_bin.tar.gz/jdk-21 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/tmp -ea -esa -XX:+UseSerialGC -Dcom.sun.management.config.file=/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/classes/2/sun/management/jmxremote/bootstrap/SSLConfigFilePermissionTest.d/lib/management.properties -Dcom.sun.management.jmxremote.port=39843 -cp /opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/classes/2/sun/management/jmxremote/bootstrap/SSLConfigFilePermissionTest.d Dummy ]
test cmdline: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-23+15-1163/linux-aarch64-debug.jdk/jdk-23/fastdebug/bin/java -cp /opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/classes/2/sun/management/jmxremote/bootstrap/SSLConfigFilePermissionTest.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-23+15-1163/src.full/open/test/jdk/sun/management/jmxremote/bootstrap:/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/classes/2/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/jtreg.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/junit-platform-console-standalone-1.9.2.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/testng-7.3.0.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/jcommander-1.82.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/guice-5.1.0.jar -Xmx768m -XX:MaxRAMPercentage=6.25 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/21/35/bundles/linux-aarch64/jdk-21_linux-aarch64_bin.tar.gz/jdk-21 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/tmp -ea -esa -XX:+UseSerialGC -Xmx768m -XX:MaxRAMPercentage=6.25 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/21/35/bundles/linux-aarch64/jdk-21_linux-aarch64_bin.tar.gz/jdk-21 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/tmp -ea -esa -XX:+UseSerialGC -Dcom.sun.management.config.file=/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/classes/2/sun/management/jmxremote/bootstrap/SSLConfigFilePermissionTest.d/lib/management.properties -Dcom.sun.management.jmxremote.port=39843 -cp /opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/classes/2/sun/management/jmxremote/bootstrap/SSLConfigFilePermissionTest.d Dummy]
[2024-03-20T05:06:25.959174046Z] Gathering output for process 135686
[2024-03-20T05:06:25.959879410Z] Waiting for completion for process 135686
[2024-03-20T05:06:27.595435680Z] Waiting for completion finished for process 135686
Output and diagnostic info for process 135686 was saved into 'pid-135686-output.log'
test output:
Error: File read access must be restricted: /opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9953/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/b6c797b4-00e2-4f50-aead-30a7c55001c7/runs/f7dcad09-9388-42b9-960a-3e343ce5ca94/testoutput/test-support/jtreg_open_test_jdk_jdk_management/classes/2/sun/management/jmxremote/bootstrap/SSLConfigFilePermissionTest.d/lib/jmxremote.ssl.config
jdk.internal.agent.AgentConfigurationError
at jdk.management.agent/sun.management.jmxremote.ConnectorBootstrap.checkRestrictedFile(ConnectorBootstrap.java:655)
at jdk.management.agent/sun.management.jmxremote.ConnectorBootstrap.createSslRMIServerSocketFactory(ConnectorBootstrap.java:689)
at jdk.management.agent/sun.management.jmxremote.ConnectorBootstrap.exportMBeanServer(ConnectorBootstrap.java:815)
at jdk.management.agent/sun.management.jmxremote.ConnectorBootstrap.startRemoteConnectorServer(ConnectorBootstrap.java:479)
at jdk.management.agent/jdk.internal.agent.Agent.startAgent(Agent.java:447)
at jdk.management.agent/jdk.internal.agent.Agent.startAgent(Agent.java:603)
----------System.err:(11/600)----------
java.lang.Error: 1 test(s) failed
at AbstractFilePermissionTest.runTest(AbstractFilePermissionTest.java:126)
at SSLConfigFilePermissionTest.main(SSLConfigFilePermissionTest.java:61)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.Thread.run(Thread.java:1575)
JavaTest Message: Test threw exception: java.lang.Error
JavaTest Message: shutting down test
result: Failed. Execution failed: `main' threw exception: java.lang.Error: 1 test(s) failed
OS: linux

-----
Title: [JDK-8328665] serviceability/jvmti/vthread/PopFrameTest failed with a timeout
Priority: P4
Type: Bug
Component: hotspot
Description: The test serviceability/jvmti/vthread/PopFrameTest/PopFrameTest.java#no-vmcontinuations resulted in test timeout after 480 secs.
This bug is a copy of the JDK-8327781 as it was created as a confidential by accident. The JDK-8327781 is closed as dup.

-----
Title: [JDK-8328723] IP Address error when client enables HTTPS endpoint check on server socket
Priority: P3
Type: Bug
Component: security-libs
Description: Client authentication in SSLServerSocket is not working correctly, when configured with endpoint identification algorithm "HTTPS".
The endpoint identification algorithm HTTPS is defined on the Java Security Standard Algorithm Names page [1], and points to RFC 2818 [2]. The RFC defines steps to perform server identity checks. For client identity, the RFC states [3]:
Typically, the server has no external knowledge of what the client's
identity ought to be and so checks (other than that the client has a
certificate chain rooted in an appropriate CA) are not possible. If a
server has such knowledge (typically from some source external to
HTTP or TLS) it SHOULD check the identity as described above.
There's no way to specify the external source of knowledge, so we should disable HTTPS identity checks on the server side.
[1] https://docs.oracle.com/en/java/javase/11/docs/specs/security/standard-names.html#additional-jsse-standard-names
[2] https://datatracker.ietf.org/doc/html/rfc2818
[3] https://datatracker.ietf.org/doc/html/rfc2818#section-3.2
Steps to reproduce:
- create a SSLServerSocket
- activate client authentication on SSLServerSocket (setNeedClientAuth(true))
- set endpoint identification algorithm to HTTPS
- connect to the SSLServerSocket with a certificate
Actual results are one of the following, depending on the certificate used:
- java.security.cert.CertificateException: No subject alternative names present
- java.security.cert.CertificateException: No subject alternative names matching IP address  found
- successful connection, if the client certificate contains SubjectAltName extension matching its IP address
Expected result:
- java.security.cert.CertificateException: Identification algorithm HTTPS is not supported on the server side

-----
Title: [JDK-8329353] ResolvedReferencesNotNullTest.java failed with Incorrect resolved references array, quxString should not be archived
Priority: P2
Type: Bug
Component: hotspot
Description: The following test failed in the JDK23 CI:
runtime/cds/appcds/sharedStrings/ResolvedReferencesNotNullTest.java
Here's a snippet from the log file:
#section:driver
----------messages:(7/254)----------
command: driver ResolvedReferencesNotNullTest
reason: User specified action: run driver ResolvedReferencesNotNullTest
started: Fri Mar 29 23:18:24 UTC 2024
Mode: agentvm
Agent id: 15
finished: Fri Mar 29 23:19:03 UTC 2024
elapsed time (seconds): 39.553
----------configuration:(16/2450)----------
----------System.out:(4/3396)----------
Command line: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-23+17-1315/linux-x64-debug.jdk/jdk-23/fastdebug/bin/java -cp /opt/mach5/mesos/work_dir/slaves/73e57426-9086-438c-bf1c-51bfaf1790ad-S39985/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/6ee1debb-2e98-4cb1-b157-0cf818d4870d/runs/197ab6a1-f376-40c1-b634-bf465ea0968d/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/classes/5/runtime/cds/appcds/sharedStrings/ResolvedReferencesNotNullTest.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-23+17-1315/src.full/open/test/hotspot/jtreg/runtime/cds/appcds/sharedStrings:/opt/mach5/mesos/work_dir/slaves/73e57426-9086-438c-bf1c-51bfaf1790ad-S39985/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/6ee1debb-2e98-4cb1-b157-0cf818d4870d/runs/197ab6a1-f376-40c1-b634-bf465ea0968d/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/classes/5/test/lib:/opt/mach5/mesos/work_dir/slaves/73e57426-9086-438c-bf1c-51bfaf1790ad-S39985/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/6ee1debb-2e98-4cb1-b157-0cf818d4870d/runs/197ab6a1-f376-40c1-b634-bf465ea0968d/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/classes/5/test/hotspot/jtreg/runtime/cds/appcds:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/jtreg.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/junit-platform-console-standalone-1.9.2.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/testng-7.3.0.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/jcommander-1.82.jar:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/guice-5.1.0.jar -XX:MaxRAMPercentage=4.16667 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/21/35/bundles/linux-x64/jdk-21_linux-x64_bin.tar.gz/jdk-21 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/73e57426-9086-438c-bf1c-51bfaf1790ad-S39985/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/6ee1debb-2e98-4cb1-b157-0cf818d4870d/runs/197ab6a1-f376-40c1-b634-bf465ea0968d/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/tmp -Xcomp -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -server -XX:+TieredCompilation -cp /opt/mach5/mesos/work_dir/slaves/73e57426-9086-438c-bf1c-51bfaf1790ad-S39985/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/6ee1debb-2e98-4cb1-b157-0cf818d4870d/runs/197ab6a1-f376-40c1-b634-bf465ea0968d/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/scratch/0/test.jar -Xbootclasspath/a:/opt/mach5/mesos/work_dir/slaves/73e57426-9086-438c-bf1c-51bfaf1790ad-S39985/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/6ee1debb-2e98-4cb1-b157-0cf818d4870d/runs/197ab6a1-f376-40c1-b634-bf465ea0968d/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_tier2_runtime/scratch/0/whitebox.jar -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI ResolvedReferencesWb false ]
[2024-03-29T23:18:24.429762282Z] Gathering output for process 2540024
[2024-03-29T23:18:24.438787921Z] Waiting for completion for process 2540024
[2024-03-29T23:19:03.834958489Z] Waiting for completion finished for process 2540024
----------System.err:(22/1034)----------
stdout: [Resolved References Array Length: 3
quxString
fooString
barString
];
stderr: [Exception in thread "main" java.lang.RuntimeException: Incorrect resolved references array, quxString should not be archived
at ResolvedReferencesWb.throwException(ResolvedReferencesWb.java:81)
at ResolvedReferencesWb.main(ResolvedReferencesWb.java:71)
]
exitValue = 1
java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [1]
at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:521)
at ResolvedReferencesNotNullTest.main(ResolvedReferencesNotNullTest.java:54)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.Thread.run(Thread.java:1575)
JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test
result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [1]
OS: linux

-----
Title: [JDK-8329533] TestCDSVMCrash fails on libgraal
Priority: P4
Type: Bug
Component: hotspot
Description: java.lang.Error: Expected VM to crash
at TestCDSVMCrash.main(TestCDSVMCrash.java:59)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.Thread.run(Thread.java:1575)
This part of the test looks suspicious to me:
// This should guarantee to throw:
// java.lang.OutOfMemoryError: Requested array size exceeds VM limit
try {
Object[] oa = new Object[Integer.MAX_VALUE];
throw new Error("OOME not triggered");
} catch (OutOfMemoryError err) {
throw new Error("OOME didn't abort JVM!");
}
Escape analysis can eliminate the allocation altogether.
This started failing with https://bugs.openjdk.org/browse/JDK-8321550 according to [~mikael].

-----
Title: [JDK-8330278] Have SSLSocketTemplate.doClientSide use loopback address
Priority: P4
Type: Bug
Component: security-libs
Description: SSLSocketTemplate currently defaults to using the localhost address. Using the loopback address by default may prove more reliable for some test configurations.
e.g. see https://github.com/openjdk/jdk/pull/2405
similar changes may be possible for the TLSBase test class

-----
Title: [JDK-8330621] Make 5 compiler tests use ProcessTools.executeProcess
Priority: P4
Type: Enhancement
Component: hotspot
Description: Those compiler tests use plain 'new ProcessBuilder' and its start method:
c2/Test7068051.java
c2/unloaded/TestInlineUnloaded.java
jsr292/NonInlinedCall/Agent.java
profiling/spectrapredefineclass_classloaders/Launcher.java
profiling/spectrapredefineclass/Launcher.java
As stated in JDK-8174768, we try to have more information about started secondary processes and make the process more controllable. For example, we can identify tests that start processes by a simple modification of ProcessTools, but that 5 would avoid such a search.
I suggest reworking them so that they use the ProcessTools.executeProcess.

-----
Title: [JDK-8331391] Enhance the keytool code by invoking the buildTrustedCerts method for essential options
Priority: P4
Type: Bug
Component: security-libs
Description: Optimize the buildTrustedCerts() method by ensuring it's invoked only when the -trustcacerts option is specified. Currently, the code lacks this conditional guarding.
https://github.com/openjdk/jdk/blob/master/src/java.base/share/classes/sun/security/tools/keytool/Main.java#L1135

-----
Title: [JDK-8331393] AArch64: u32 _partial_subtype_ctr loaded/stored as 64
Priority: P4
Type: Bug
Component: hotspot
Description: We should store/load as proper sized.
https://github.com/openjdk/jdk/blob/60b61e588c1252b4b1fbc64d0f818a85670f7146/src/hotspot/cpu/aarch64/macroAssembler_aarch64.cpp#L1565

-----
Title: [JDK-8331864] Update Public Suffix List to 1cbd6e7
Priority: P3
Type: Enhancement
Component: security-libs
Description: Download date: 2024-05-07
Download URL: https://publicsuffix.org/list/public_suffix_list.dat
which is identical to https://raw.githubusercontent.com/publicsuffix/list/1cbd6e71a9b83620b1d0b11e49d3d9ff48c27e22/public_suffix_list.dat

-----
Title: [JDK-8332112] Update nsk.share.Log to don't print summary during VM shutdown hook
Priority: P4
Type: Enhancement
Component: hotspot
Description: The nsk.share.Log doing some cleanup and reporting errors in the cleanup method. This method is supposed to be executed by finalizer originally. However, now it is called only during shutdown hook. The cleanup using Cleaner doesn't work (see JDK-8330760).
This cleanup is not necessary and printing summary usually is just disabled. It is enabled if the test called 'complain' method. However, the error should have been printed already in this method.
Note: The 'verboseOnErrorEnabled' is just not used.
See isVerboseOnErrorEnabled.
public boolean isVerboseOnErrorEnabled() {
-        return errorsSummaryEnabled;
-    }

-----
Title: [JDK-8332340] Add JavacBench as a test case for CDS
Priority: P4
Type: Enhancement
Component: hotspot
Description: JavacBench is a test program that compiles 90 Java source files. It uses a fair amount of invokedynamic callsites, so it's good for testing CDS support for indy and lambda expressions.

-----
Title: [JDK-8332461] ubsan : dependencies.cpp:906:3: runtime error: load of value 4294967295, which is not a valid value for type 'DepType'
Priority: P4
Type: Bug
Component: hotspot
Description: On linux86_64  fastdebug, with ubsan enabled, we run into this issue :
assert(_type != end_marker, "already at end");
/jdk/src/hotspot/share/code/dependencies.cpp:906:3: runtime error: load of value 4294967295, which is not a valid value for type 'DepType'
#0 0x14e2c941db7b in Dependencies::DepStream::next() /jdk/src/hotspot/share/code/dependencies.cpp:906
#1 0x14e2cadaf907 in Dependencies::validate_dependencies(CompileTask*, char**) /jdk/src/hotspot/share/code/dependencies.cpp:632
#2 0x14e2ca7b70c0 in ciEnv::validate_compile_task_dependencies(ciMethod*) /jdk/src/hotspot/share/ci/ciEnv.cpp:1007
#3 0x14e2ca7c1719 in ciEnv::register_method(ciMethod*, int, CodeOffsets*, int, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, bool, bool, bool, int, RTMState) /jdk/src/hotspot/share/ci/ciEnv.cpp:1091
#4 0x14e2ca2744f6 in Compilation::install_code(int) /jdk/src/hotspot/share/c1/c1_Compilation.cpp:426
#5 0x14e2ca283a81 in Compilation::compile_method() /jdk/src/hotspot/share/c1/c1_Compilation.cpp:488
#6 0x14e2ca2854aa in Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*) /jdk/src/hotspot/share/c1/c1_Compilation.cpp:609
#7 0x14e2ca28a9f3 in Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*) /jdk/src/hotspot/share/c1/c1_Compiler.cpp:260
#8 0x14e2cab51df1 in CompileBroker::invoke_compiler_on_method(CompileTask*) /jdk/src/hotspot/share/compiler/compileBroker.cpp:2303
#9 0x14e2cab538ee in CompileBroker::compiler_thread_loop() /jdk/src/hotspot/share/compiler/compileBroker.cpp:1961
#10 0x14e2cb7b03dc in JavaThread::thread_main_inner() /jdk/src/hotspot/share/runtime/javaThread.cpp:759
#11 0x14e2cd2a7c2f in Thread::call_run() /jdk/src/hotspot/share/runtime/thread.cpp:225
#12 0x14e2cc791415 in thread_native_entry /jdk/src/hotspot/os/linux/os_linux.cpp:846
#13 0x14e2d2d486e9 in start_thread (/lib64/libpthread.so.0+0xa6e9) (BuildId: 2f8d3c2d0f4d7888c2598d2ff6356537f5708a73)
... (rest of output omitted)
Looks like some variable (probably _type)  is not initialized or somehow overwritten.
We might also remove the assertion if it brings not much benefit.
OS: linux

-----
Title: [JDK-8332724] x86 MacroAssembler may over-align code
Priority: P5
Type: Bug
Component: hotspot
Description: The functions align32 and align64 are supposed to align the code to 32 or 64 bytes, by adding the minimal number of NOP bytes that is required to align the code.
The target is explicitly cast to unsigned long long, but then it's passed to a method that accepts a signed int. If the target happens to be negative, we will generate 32 / 64 NOP bytes too many.

-----
Title: [JDK-8332777] Update JCStress test suite
Priority: P4
Type: Enhancement
Component: hotspot
Description: Let's make our wrapper capable of running the latest JCStress with all its improvements.

-----
Title: [JDK-8332866] Crash in ImageIO JPEG decoding when MEM_STATS in enabled
Priority: P3
Type: Bug
Component: client-libs
Description: In IJG library's jmemmgr.c file we can define MEM_STATS to enable printing of memory statistic logs when we have OOM. But if we enable it we get crash while disposing IJG stored objects in jmemmgr-free-pool() function.
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x0000000103743164, pid=82400, tid=8707
#
# JRE version: Java(TM) SE Runtime Environment (23.0) (fastdebug build 23-internal-2024-05-24-0701510.jdv...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 23-internal-2024-05-24-0701510.jdv..., mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, bsd-aarch64)
# Problematic frame:
# C  [libjavajpeg.dylib+0x23164]  free_pool+0x50
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try "ulimit -c unlimited" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
# The crash happened outside the Java Virtual Machine in native code.
# See problematic frame for where to report the bug.
#
---------------  S U M M A R Y ------------
Command Line: -javaagent:/Applications/IntelliJ IDEA CE.app/Contents/lib/idea_rt.jar=49954:/Applications/IntelliJ IDEA CE.app/Contents/bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8 ImageDecoding
Host: jdv-mac, "MacBookPro18,1" arm64, 10 cores, 32G, Darwin 23.3.0, macOS 14.3.1 (23D60)
Time: Fri May 24 13:27:36 2024 IST elapsed time: 5.160990 seconds (0d 0h 0m 5s)
---------------  T H R E A D  ---------------
Current thread (0x0000000153009810):  JavaThread "main"             [_thread_in_native, id=8707, stack(0x000000016dcd4000,0x000000016ded7000) (2060K)]
Stack: [0x000000016dcd4000,0x000000016ded7000],  sp=0x000000016ded66c0,  free space=2057k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  [libjavajpeg.dylib+0x23164]  free_pool+0x50
C  [libjavajpeg.dylib+0x23324]  self_destruct+0x18
C  [libjavajpeg.dylib+0xdf34]  jDestroy+0x24
C  [libjavajpeg.dylib+0x409c]  Java_com_sun_imageio_plugins_jpeg_JPEGImageReader_disposeReader+0x40
This is happening because we delete the error handler before we actually start deleting IJG stored objects and while freeing the IJG objects we try to access cinfo-err-trace_level of error handler. This early deletion of error handler is happening in jpegloader.c-imageio_dispose() function. We should delete error handler after we are done with deleting IJG stored objects.
OS: generic

-----
Title: [JDK-8332901] Select{Current,New}ItemTest.java for Choice don't open popup on macOS
Priority: P4
Type: Bug
Component: client-libs
Description: The java/awt/Choice/SelectCurrentItemTest/SelectCurrentItemTest.java and test/jdk/java/awt/Choice/SelectNewItemTest/SelectNewItemTest.java tests do not open the choice popup on macOS. Because the popup is not open, the test does not perform its job.
SelectCurrentItemTest.java does not fail in this case, no ItemEvent is received; SelectNewItemTest.java fails and it is in ProblemList.txt.
If I add MouseListener to `theChoice`, it does not receive mouse events: pressed, released and clicked.
The test should fail if mouse click to open the popup is received because the test is not in the state it expected. Unfortunately, there are no events to determine the popup of the choice is open.
This bug is likely due to JDK-8322653. If add a component to the right of the choice, it receives mouse events and the test works correctly.
OS: os_x

-----
Title: [JDK-8333098] ubsan: bytecodeInfo.cpp:318:59: runtime error: division by zero
Priority: P4
Type: Bug
Component: hotspot
Description: When running test
compiler/classUnloading/methodUnloading/TestOverloadCompileQueues.java
with ubsan enabled binaries we run into the issue reported below.
Reason seems to be that we divide by zero in the code (maybe we should instead check for CompilationPolicy::min_invocations() == 0 in in this case set min_freq to MinInlineFrequencyRatio) .
double min_freq = MAX2(MinInlineFrequencyRatio, 1.0 / CompilationPolicy::min_invocations());
/jdk/src/hotspot/share/opto/bytecodeInfo.cpp:318:59: runtime error: division by zero
#0 0x7f5145c0dda2 in InlineTree::should_not_inline(ciMethod*, ciMethod*, int, bool&, ciCallProfile&) src/hotspot/share/opto/bytecodeInfo.cpp:318
#1 0x7f51466366d7 in InlineTree::try_to_inline(ciMethod*, ciMethod*, int, JVMState*, ciCallProfile&, bool&) src/hotspot/share/opto/bytecodeInfo.cpp:382
#2 0x7f514663d36b in InlineTree::ok_to_inline(ciMethod*, JVMState*, ciCallProfile&, bool&) src/hotspot/share/opto/bytecodeInfo.cpp:596
#3 0x7f51470dffd6 in Compile::call_generator(ciMethod*, int, bool, JVMState*, bool, float, ciKlass*, bool) src/hotspot/share/opto/doCall.cpp:189
#4 0x7f51470e18ab in Parse::do_call() src/hotspot/share/opto/doCall.cpp:641
#5 0x7f514887dbf1 in Parse::do_one_block() src/hotspot/share/opto/parse1.cpp:1607
#6 0x7f514887fefa in Parse::do_all_blocks() src/hotspot/share/opto/parse1.cpp:724
#7 0x7f514888d4da in Parse::Parse(JVMState*, ciMethod*, float) src/hotspot/share/opto/parse1.cpp:628
#8 0x7f51469d8418 in ParseGenerator::generate(JVMState*) src/hotspot/share/opto/callGenerator.cpp:99
#9 0x7f5146d99cff in Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*) src/hotspot/share/opto/compile.cpp:793
#10 0x7f51469d5ebf in C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*) src/hotspot/share/opto/c2compiler.cpp:142
#11 0x7f5146db0274 in CompileBroker::invoke_compiler_on_method(CompileTask*) src/hotspot/share/compiler/compileBroker.cpp:2303
#12 0x7f5146db2826 in CompileBroker::compiler_thread_loop() src/hotspot/share/compiler/compileBroker.cpp:1961
#13 0x7f51478d475a in JavaThread::thread_main_inner() src/hotspot/share/runtime/javaThread.cpp:759
#14 0x7f51491620ea in Thread::call_run() src/hotspot/share/runtime/thread.cpp:225
#15 0x7f51487ac201 in thread_native_entry src/hotspot/os/linux/os_linux.cpp:846
#16 0x7f514e5cf6e9 in start_thread (/lib64/libpthread.so.0+0xa6e9) (BuildId: 2f8d3c2d0f4d7888c2598d2ff6356537f5708a73)
#17 0x7f514db1550e in clone (/lib64/libc.so.6+0x11850e) (BuildId: f732026552f6adff988b338e92d466bc81a01c37)
OS: linux

-----
Title: [JDK-8333108] Update vmTestbase/nsk/share/DebugeeProcess.java to don't use finalization
Priority: P4
Type: Enhancement
Component: hotspot

-----
Title: [JDK-8333144] docker tests do not work when ubsan is configured
Priority: P4
Type: Bug
Component: hotspot
Description: Currently when we run with ubsan - enabled binaries (configure option --enable-ubsan, see JDK-8298448), the docker tests do not work.
For example :
containers/docker/TestCPUSets.jtr
[STDOUT]
/jdk/bin/java: error while loading shared libraries: libubsan.so.1: cannot open shared object file: No such file or directory
The container where the test is executed does not contain the ubsan package;  we might skip the test in this case or find a way to add the ubsan package / lib(s) to the container.
OS: linux

-----
Title: [JDK-8333235] vmTestbase/nsk/jdb/kill/kill001/kill001.java fails with C1
Priority: P4
Type: Bug
Component: core-svc
Description: Test
vmTestbase/nsk/jdb/kill/kill001/kill001.java
fails with
-Xcomp -ea -esa -XX:CompileThreshold=100 -XX:+UnlockExperimentalVMOptions -XX:TieredStopAtLevel=3 (1,2,3)
See log in comments.

-----
Title: [JDK-8333248] VectorGatherMaskFoldingTest.java failed when maximum vector bits is 64
Priority: P4
Type: Bug
Component: hotspot
Description: VectorGatherMaskFoldingTest.java Test fails when max vector bits is 64, when max vector bits is 64, LongVector.SPECIES_MAX.length()/DoubleVector.SPECIES_MAX.length() is 1.
For example, the following method will fail:
```
@Test
@IR(counts = { IRNode.STORE_VECTOR_MASKED, "= 1", IRNode.LOAD_VECTOR_MASKED, "= 1" }, applyIfCPUFeatureOr = {"avx512", "true", "sve", "true"})
public static void testDoubleVectorStoreLoadMaskedVector() {
double[] res = new double[D_SPECIES.length()];
doubleVector.intoArray(res, 0, doubleVectorMask);
DoubleVector res2 = DoubleVector.fromArray(D_SPECIES, res, 0, doubleVectorMask);
Asserts.assertNotEquals(res2, doubleVector);
}
```
doubleVector data is:[1.0], doubleVectorMask:[true], res2 is:[1.0] So here `Asserts.assertNotEquals(res2, doubleVector);` will assert Error.
By the way, the aarch64 client jvm mode, getMaxVectorBitSize will return the default 64 bit, or RISC-V will return the default 64 bit without rvv1.0.
```
/**
* Returns the maximum vector bit size for a given element type.
*
* @param etype the element type.
* @return the maximum vector bit.
*/
/*package-private*/
static int getMaxVectorBitSize(Class etype) {
// VectorSupport.getMaxLaneCount may return -1 if C2 is not enabled,
// or a value smaller than the S_64_BIT.vectorBitSize / elementSizeInBits if MaxVectorSize
OS: generic

-----
Title: [JDK-8333317] Test sun/security/pkcs11/sslecc/ClientJSSEServerJSSE.java failed with: Invalid ECDH ServerKeyExchange signature
Priority: P3
Type: Bug
Component: security-libs
Description: Test: sun/security/pkcs11/sslecc/ClientJSSEServerJSSE.java
javax.net.ssl.SSLHandshakeException: (handshake_failure) Received fatal alert: handshake_failure
at java.base/sun.security.ssl.Alert.createSSLException(Alert.java:130)
at java.base/sun.security.ssl.Alert.createSSLException(Alert.java:117)
at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:365)
at java.base/sun.security.ssl.Alert$AlertConsumer.consume(Alert.java:287)
at java.base/sun.security.ssl.TransportContext.dispatch(TransportContext.java:204)
at java.base/sun.security.ssl.SSLTransport.decode(SSLTransport.java:172)
at java.base/sun.security.ssl.SSLSocketImpl.decode(SSLSocketImpl.java:1507)
at java.base/sun.security.ssl.SSLSocketImpl.readHandshakeRecord(SSLSocketImpl.java:1422)
at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:455)
at java.base/sun.security.ssl.SSLSocketImpl.ensureNegotiated(SSLSocketImpl.java:924)
at java.base/sun.security.ssl.SSLSocketImpl$AppInputStream.read(SSLSocketImpl.java:1015)
at java.base/sun.security.ssl.SSLSocketImpl$AppInputStream.read(SSLSocketImpl.java:975)
at CipherTest$Server.handleRequest(CipherTest.java:80)
at JSSEServer$1.run(JSSEServer.java:87)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
at java.base/java.lang.Thread.run(Thread.java:1575)
javax.net.ssl.SSLHandshakeException: (handshake_failure) Invalid ECDH ServerKeyExchange signature
at java.base/sun.security.ssl.Alert.createSSLException(Alert.java:130)
at java.base/sun.security.ssl.Alert.createSSLException(Alert.java:117)
at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:365)
at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:321)
at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:312)
at java.base/sun.security.ssl.ECDHServerKeyExchange$ECDHServerKeyExchangeMessage.(ECDHServerKeyExchange.java:312)
at java.base/sun.security.ssl.ECDHServerKeyExchange$ECDHServerKeyExchangeConsumer.consume(ECDHServerKeyExchange.java:523)
at java.base/sun.security.ssl.ServerKeyExchange$ServerKeyExchangeConsumer.consume(ServerKeyExchange.java:122)
at java.base/sun.security.ssl.SSLHandshake.consume(SSLHandshake.java:393)
at java.base/sun.security.ssl.HandshakeContext.dispatch(HandshakeContext.java:476)
at java.base/sun.security.ssl.HandshakeContext.dispatch(HandshakeContext.java:447)
at java.base/sun.security.ssl.TransportContext.dispatch(TransportContext.java:201)
at java.base/sun.security.ssl.SSLTransport.decode(SSLTransport.java:172)
at java.base/sun.security.ssl.SSLSocketImpl.decode(SSLSocketImpl.java:1507)
at java.base/sun.security.ssl.SSLSocketImpl.readHandshakeRecord(SSLSocketImpl.java:1422)
at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:455)
at java.base/sun.security.ssl.SSLSocketImpl.ensureNegotiated(SSLSocketImpl.java:924)
at java.base/sun.security.ssl.SSLSocketImpl$AppOutputStream.write(SSLSocketImpl.java:1293)
at java.base/java.io.OutputStream.write(OutputStream.java:124)
at CipherTest$Client.sendRequest(CipherTest.java:269)
at JSSEClient.runTest(JSSEClient.java:74)
at CipherTest$Client.run(CipherTest.java:252)
at java.base/java.lang.Thread.run(Thread.java:1575)
java.lang.Exception: *** Test 'Client JSSE - Server JSSE' failed ***
at CipherTest.run(CipherTest.java:209)
at CipherTest.main(CipherTest.java:337)
at ClientJSSEServerJSSE.main(ClientJSSEServerJSSE.java:67)
at PKCS11Test.premain(PKCS11Test.java:820)
at PKCS11Test.testNSS(PKCS11Test.java:485)
at PKCS11Test.main(PKCS11Test.java:192)
at ClientJSSEServerJSSE.main(ClientJSSEServerJSSE.java:57)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1575)

-----
Title: [JDK-8333427] langtools/tools/javac/newlines/NewLineTest.java is failing on Japanese Windows
Priority: P4
Type: Bug
Component: tools
Description: When running langtools/tools/javac/newlines/NewLineTest.java on Japanese Windows, it always fails by MalformedInputException.
Java version:
openjdk version "23-internal" 2024-09-17
OpenJDK Runtime Environment (build 23-internal-adhoc.Administrator.jdk)
OpenJDK 64-Bit Server VM (build 23-internal-adhoc.Administrator.jdk, mixed mode, sharing)
Environment:
I tested on Windows 10.
$ locale
LANG=ja_JP.UTF-8
LC_CTYPE="ja_JP.UTF-8"
LC_NUMERIC="ja_JP.UTF-8"
LC_TIME="ja_JP.UTF-8"
LC_COLLATE="ja_JP.UTF-8"
LC_MONETARY="ja_JP.UTF-8"
LC_MESSAGES="ja_JP.UTF-8"
LC_ALL=
Exception:
java.nio.charset.MalformedInputException: Input length = 1
at java.base/java.nio.charset.CoderResult.throwException(CoderResult.java:279)
at java.base/sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:405)
at java.base/sun.nio.cs.StreamDecoder.lockedRead(StreamDecoder.java:217)
at java.base/sun.nio.cs.StreamDecoder.read(StreamDecoder.java:171)
at java.base/java.io.InputStreamReader.read(InputStreamReader.java:190)
at java.base/java.io.BufferedReader.fill(BufferedReader.java:160)
at java.base/java.io.BufferedReader.implReadLine(BufferedReader.java:370)
at java.base/java.io.BufferedReader.readLine(BufferedReader.java:347)
at java.base/java.io.BufferedReader.readLine(BufferedReader.java:436)
at java.base/java.nio.file.Files.readAllLines(Files.java:3419)
at NewLineTest.main(NewLineTest.java:61)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.Thread.run(Thread.java:1575)
I verified this test passed on English Windows and Linux. Also, this problem does not occur in jdk17.
This exception is probably related to the change in default charset in JEP 400.
The exception message indicates that it failed to read a file to which the output of javac run in the test was redirected. JEP400 changed Charset.defaultCharset() to return UTF-8. However, the encoding of Javac's standard output is still derived from the host environment and/or the user's settings. As a result, the test fails on Windows with non-English locale in jdk18 and later.
OS: windows

-----
Title: [JDK-8333728] ubsan: shenandoahFreeSet.cpp:1347:24: runtime error: division by zero
Priority: P4
Type: Bug
Component: hotspot
Description: When running with ubsan-enabled binaries, the test
gc/shenandoah/oom/TestAllocLargeObj.jtr
reports this issue :
src/hotspot/share/gc/shenandoah/shenandoahFreeSet.cpp:1347:24: runtime error: division by zero
#0 0x7fc1d3ec6ec7 in ShenandoahFreeSet::internal_fragmentation() src/hotspot/share/gc/shenandoah/shenandoahFreeSet.cpp:1347
#1 0x7fc1d6f4a516 in ShenandoahMetricsSnapshot::snap_before() src/hotspot/share/gc/shenandoah/shenandoahMetrics.cpp:37
#2 0x7fc1d6e39c95 in ShenandoahDegenGC::op_degenerated() src/hotspot/share/gc/shenandoah/shenandoahDegeneratedGC.cpp:86
#3 0x7fc1d6e3b1e8 in ShenandoahDegenGC::entry_degenerated() src/hotspot/share/gc/shenandoah/shenandoahDegeneratedGC.cpp:74
#4 0x7fc1d6fde7cb in VM_ShenandoahDegeneratedGC::doit() src/hotspot/share/gc/shenandoah/shenandoahVMOperations.cpp:84
#5 0x7fc1d75dd0dd in VM_Operation::evaluate() src/hotspot/share/runtime/vmOperations.cpp:75
#6 0x7fc1d75eba41 in VMThread::evaluate_operation(VM_Operation*) src/hotspot/share/runtime/vmThread.cpp:283
#7 0x7fc1d75eda4f in VMThread::inner_execute(VM_Operation*) src/hotspot/share/runtime/vmThread.cpp:427
#8 0x7fc1d75ee5b9 in VMThread::loop() src/hotspot/share/runtime/vmThread.cpp:493
#9 0x7fc1d75ee6a7 in VMThread::run() src/hotspot/share/runtime/vmThread.cpp:177
#10 0x7fc1d737e6ca in Thread::call_run() src/hotspot/share/runtime/thread.cpp:225
#11 0x7fc1d69ca311 in thread_native_entry src/hotspot/os/linux/os_linux.cpp:846
#12 0x7fc1dc7846e9 in start_thread (/lib64/libpthread.so.0+0xa6e9) (BuildId: 2f8d3c2d0f4d7888c2598d2ff6356537f5708a73)
#13 0x7fc1dbd1550e in clone (/lib64/libc.so.6+0x11850e) (BuildId: f732026552f6adff988b338e92d466bc81a01c37)
OS: linux

-----
Title: [JDK-8333754] Add a Test against ECDSA and ECDH NIST Test vector
Priority: P3
Type: Bug
Component: security-libs

-----
Title: [JDK-8333824] Unused ClassValue in VarHandles
Priority: P5
Type: Bug
Component: core-libs
Description: VarHandles defines the static ClassValue ADDRESS_FACTORIES, which appears to be completely unused. Likely a leftover.

-----
Title: [JDK-8334057] JLinkReproducibleTest.java support receive test.tool.vm.opts
Priority: P4
Type: Sub-task
Component: tools
Description: Currently, the testcase test/jdk/tools/jlink/JLinkReproducibleTest.java doesn't receive jvm options from jtreg.
I think it's necessory to receive jvm options from jtreg.
In the process of verifying the JDK-8321509 problem fix solutions, we need to configure jvm options to verify the effectiveness of some of the fixe solutions. During the verification process, we found that the test case would start a new java process during the test, but the started java child process did not receive the jvm options configured from the parent process, resulting in the failure of the fix verification to continue normally. Therefore, it is necessary to pass in the jvm options configured from the parent process when starting the child java process.
On the other hand, during the jtreg test execution process, if a java child process is started, under normal circumstances, the started child process should pass in the jvm options configured from jtreg by default, such as the -vmoption option value configured by jtreg. If the test case does not support or does not want to receive the jvm options configured from jtreg, the '@requires vm.flagless' tag should be configured in the test case. If the child java process wants to ignore the   jvm options from parent process, there should add some comments to explain the ignore reason.
This fix similar to JDK-8157850, no risk.
OS: generic

-----
Title: [JDK-8334405] java/nio/channels/Selector/SelectWithConsumer.java#id0 failed in testWakeupDuringSelect
Priority: P4
Type: Bug
Component: core-libs
Description: ...
test SelectWithConsumer.testTwoChannels(): success
test SelectWithConsumer.testWakeupBeforeSelect(): success
test SelectWithConsumer.testWakeupDuringSelect(): failure
java.lang.AssertionError: select took -958 ms expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at SelectWithConsumer.testWakeupDuringSelect(SelectWithConsumer.java:361)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:102)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.Thread.run(Thread.java:1575)
test SelectWithConsumer.testWritable(): success
config SelectWithConsumer.shutdownThreadPool(): success
OS: os_x

-----
Title: [JDK-8334475] UnsafeIntrinsicsTest.java#ZGenerationalDebug assert(!assert_on_failure) failed: Has low-order bits set
Priority: P4
Type: Bug
Component: hotspot
Description: The test compiler/gcbarriers/UnsafeIntrinsicsTest.java#ZGenerationalDebug fails by assert on Windows aarch64 on fastdebug binaries as follows
```
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (s\src\hotspot\share\gc/z/zAddress.inline.hpp:300), pid=5296, tid=4352
#  assert(!assert_on_failure) failed: Has low-order bits set: 0xbdbd323532317063
#
# JRE version:  (24.0+2) (fastdebug build )
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 24+2-b3, mixed mode, tiered, compressed class ptrs, z gc, windows-aarch64)
# CreateCoredumpOnCrash turned off, no core file dumped
#
#
---------------  S U M M A R Y ------------
Command Line: -Dtest.vm.opts= -Dtest.tool.vm.opts= -Dtest.compiler.opts= -Dtest.java.opts=-Djbr.catch.SIGABRT=true -Dtest.jdk=D:\BuildAgent\work\a4596779d36397b2\jbrsdk-24-windows-aarch64-fastdebug-b3 -Dcompile.jdk=D:\BuildAgent\work\a4596779d36397b2\jbrsdk-24-windows-aarch64-fastdebug-b3 -Dtest.timeout.factor=2.0 -Dtest.nativepath=D:\BuildAgent\work\a4596779d36397b2\support\test\hotspot\jtreg\native -Dtest.root=D:\BuildAgent\work\a4596779d36397b2\test\hotspot\jtreg -Dtest.name=compiler/gcbarriers/UnsafeIntrinsicsTest.java#ZGenerationalDebug -Dtest.file=D:\BuildAgent\work\a4596779d36397b2\test\hotspot\jtreg\compiler\gcbarriers\UnsafeIntrinsicsTest.java -Dtest.src=D:\BuildAgent\work\a4596779d36397b2\test\hotspot\jtreg\compiler\gcbarriers -Dtest.src.path=D:\BuildAgent\work\a4596779d36397b2\test\hotspot\jtreg\compiler\gcbarriers;D:\BuildAgent\work\a4596779d36397b2\test\lib -Dtest.classes=D:\BuildAgent\work\a4596779d36397b2\JTwork\classes\0\compiler\gcbarriers\UnsafeIntrinsicsTest_ZGenerationalDebug.d -Dtest.class.path=D:\BuildAgent\work\a4596779d36397b2\JTwork\classes\0\compiler\gcbarriers\UnsafeIntrinsicsTest_ZGenerationalDebug.d;D:\BuildAgent\work\a4596779d36397b2\JTwork\classes\0\test\lib -Dtest.modules=java.base/jdk.internal.misc:+open --add-modules=java.base --add-exports=java.base/jdk.internal.misc=ALL-UNNAMED --add-opens=java.base/jdk.internal.misc=ALL-UNNAMED -Djbr.catch.SIGABRT=true -Djava.library.path=D:\BuildAgent\work\a4596779d36397b2\support\test\hotspot\jtreg\native -XX:+UseZGC -XX:+ZGenerational -XX:+UnlockDiagnosticVMOptions -XX:+ZVerifyOops -XX:ZCollectionInterval=1 -XX:-CreateCoredumpOnCrash -XX:CompileCommand=dontinline,*::mergeImpl* com.sun.javatest.regtest.agent.MainWrapper D:\BuildAgent\work\a4596779d36397b2\JTwork\compiler\gcbarriers\UnsafeIntrinsicsTest_ZGenerationalDebug.d\main.1.jta
Host: jre-w11a-azr1, Ampere(R) Altra(R) Processor, 4 cores, 15G,  Windows 11 , 64 bit Build 22621 (10.0.22621.3672)
Time: Tue Jun 18 11:30:48 2024 Coordinated Universal Time elapsed time: 0.114944 seconds (0d 0h 0m 0s)
---------------  T H R E A D  ---------------
Current thread (0x000002c97529a200):  JavaThread "main"             [_thread_in_vm, id=4352, stack(0x000000d1e0f00000,0x000000d1e1000000) (1024K)]
Stack: [0x000000d1e0f00000,0x000000d1e1000000]
Native frames:
Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  java.lang.Object.clone()Ljava/lang/Object;+0 java.base
j  java.util.Arrays.copyOfRange([BII)[B+11 java.base
j  java.lang.String.(Ljava/lang/AbstractStringBuilder;Ljava/lang/Void;)V+32 java.base
j  java.lang.StringBuilder.toString()Ljava/lang/String;+16 java.base
j  sun.nio.cs.StandardCharsets.toLower(Ljava/lang/String;)Ljava/lang/String;+121 java.base
j  sun.nio.cs.StandardCharsets.lookup(Ljava/lang/String;)Ljava/nio/charset/Charset;+44 java.base
j  sun.nio.cs.StandardCharsets.charsetForName(Ljava/lang/String;)Ljava/nio/charset/Charset;+6 java.base
j  java.nio.charset.Charset.lookup2(Ljava/lang/String;)Ljava/nio/charset/Charset;+39 java.base
j  java.nio.charset.Charset.lookup(Ljava/lang/String;)Ljava/nio/charset/Charset;+40 java.base
j  java.nio.charset.Charset.isSupported(Ljava/lang/String;)Z+1 java.base
j  java.lang.System.initPhase1()V+37 java.base
v  ~StubRoutines::call_stub 0x000002c907530180
Lock stack of current Java thread (top to bottom):
LockStack[0]: sun.nio.cs.StandardCharsets
{0x0000040000017ed0} - klass: 'sun/nio/cs/StandardCharsets'
- ---- fields (total size 5 words):
- private 'classMap' 'Ljava/util/Map;' @16  null (0x0000000000000000)
- private 'aliasMap' 'Ljava/util/Map;' @24  null (0x0000000000000000)
- private 'cache' 'Ljava/util/Map;' @32  null (0x0000000000000000)
```
see the attached hs_err.txt
The failure was observed on jdk24, jdk21
Reproducibility: 100%
OS: windows

-----
Title: [JDK-8334560] [PPC64]: postalloc_expand_java_dynamic_call_sched does not copy all fields
Priority: P4
Type: Bug
Component: hotspot
Description: postalloc_expand_java_dynamic_call_sched should copy also MachSafePointNode::_has_ea_local_in_scope
If the information is not propagated then it can happen that C2 optimizations based on escape analysis are not reverted when an object reference escapes because an JVMTI agent reads it.
OS: generic

-----
Title: [JDK-8334562] Automate com/sun/security/auth/callback/TextCallbackHandler/Default.java test
Priority: P4
Type: Bug
Component: security-libs
Description: The test: com/sun/security/auth/callback/TextCallbackHandler/Default.java is currently marked to be run manually because user console inputs are required, but it can be automated by providing a custom inputStream to System.in in the actual test instead to simulate sequential user input.

-----
Title: [JDK-8334567] [test] runtime/os/TestTracePageSizes move ppc handling
Priority: P4
Type: Bug
Component: hotspot
Description: The handling of ppc platforms should be moved to the test headers.
This is done for x86_64 too in some case, make it more consistent.
OS: linux

-----
Title: [JDK-8334719] (se) Deferred close of SelectableChannel may result in a Selector doing the final close before concurrent I/O on channel has completed
Priority: P3
Type: Bug
Component: core-libs
Description: The hs_err_.log shows:
Event: 5.943 Thread 0x0000023ed289e5f0 Exception  (0x00000000dbd53808)
thrown [s\open\src\hotspot\share\prims\jni.cpp, line 539]
This happens intermittently (and relatively rarely) but even if the channel is in non-blocking mode.
Work arounds:
- Use non-blocking IO and a RW lock to control receive/send/close and avoid concurrent calls to close
- or make sure everything happens in the selector thread
- or use VirtualThread for sending and receiving - but that can lead to hangs due to JDK-8334574

-----
Title: [JDK-8335142] compiler/c1/TestTraceLinearScanLevel.java occasionally times out with -Xcomp
Priority: P5
Type: Bug
Component: hotspot
Description: compiler/c1/TestTraceLinearScanLevel is occasionally timing out on macosx-x64 when running with -Xcomp.
The test's purpose is to sanity check the TraceLinearScanLevel flag with a hello world like test. It runs with -XX:TestTraceLinearScanLevel=4 which prints quite a lot of data. It becomes even more when running with -Xcomp. Since we only want to sanity check, there is not much benefit in running this test with -Xcomp which only unnecessarily increases the time to run this test.
I suggest to exclude this test with -Xcomp but instead add -Xbatch to at least wait until all the C2 compilations are finished in the start-up.

-----
Title: [JDK-8335172] Add manual steps to run security/auth/callback/TextCallbackHandler/Password.java test
Priority: P4
Type: Bug
Component: security-libs
Description: The test com/sun/security/auth/callback/TextCallbackHandler/Password.java is in the problem list, but it is not actually failing. It requires some manual user input and the issue is that there are no steps on how to run it. Adding a small section with steps will help running this test properly. Also, move it from the jdk_security_manual_no_input to jdk_security_manual_interactive

-----
Title: [JDK-8335267] [XWayland] move screencast tokens from .awt to .java folder
Priority: P4
Type: Bug
Component: client-libs
Description: Currently the screencast tokens are stored in
.awt/robot/screencast-tokens.properties
when they should be in the .java folder
e.g. in  .java/robot/screencast-tokens.properties

-----
Title: [JDK-8335344] test/jdk/sun/security/tools/keytool/NssTest.java fails to compile
Priority: P3
Type: Bug
Component: security-libs
Description: There is a compilation issue in the test test/jdk/sun/security/tools/keytool/NssTest.java because the HumanInputStream class was moved from KeyToolTest to a library class.
open/test/jdk/sun/security/tools/keytool/KeyToolTest.java:1820: error: cannot find symbol
HumanInputStream.test();
To fix it, include the library in the test

-----
Title: [JDK-8335449] runtime/cds/DeterministicDump.java fails with File content different at byte ...
Priority: P3
Type: Bug
Component: hotspot
Description: java.lang.RuntimeException: File content different at byte #4, b0 = -87, b1 = 77
at DeterministicDump.compare(DeterministicDump.java:114)
at DeterministicDump.doTest(DeterministicDump.java:66)
at DeterministicDump.main(DeterministicDump.java:42)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.Thread.run(Thread.java:1575)
OS: os_x

-----
Title: [JDK-8335530] Java file extension missing in AuthenticatorTest
Priority: P4
Type: Bug
Component: core-libs
Description: The `.java` file extension is missing for https://github.com/openjdk/jdk/blob/master/test/jdk/com/sun/net/httpserver/AuthenticatorTest
The test also fails due to principal.getName() needs to be replaced with principal.getUsername() at line 57.
It would be also good to refactor the test to use JUnit Jupiter API.

-----
Title: [JDK-8335664] Parsing jsr broken: assert(bci>= 0 && bci < c->method()->code_size()) failed: index out of bounds
Priority: P4
Type: Bug
Component: hotspot
Description: If you fix this bug: please mention me, I spent quite some time extracting the JASM file for you to have a simple reproducer ;)
Affected:
JDK23 - JDK11, maybe further back (did not check more).
Product gives us:
Error: Unable to initialize main class TestClassNew
Caused by: java.lang.LinkageError: Illegal class file encountered. Try running with -Xverify:all in method main
Debug reproduces/asserts immediately.
emanuel@emanuel-oracle:xyz$ java -jar ~/Documents/asmtools-7.0-build/release/lib/asmtools.jar jasm Test.jasm
emanuel@emanuel-oracle:xyz$ /oracle-work/jdk-fork2/build/linux-x64-debug/jdk/bin/java Test
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle-work/jdk-fork2/open/src/hotspot/share/oops/generateOopMap.cpp:401), pid=3707675, tid=3707676
#  assert(bci= 0 && bci method()-code_size()) failed: index out of bounds
#
# JRE version: Java(TM) SE Runtime Environment (24.0) (fastdebug build 24-internal-2024-06-13-1913126.emanuel...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 24-internal-2024-06-13-1913126.emanuel..., mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xd5b5c8]  GenerateOopMap::bb_mark_fct(GenerateOopMap*, int, int*) [clone .part.0]+0x28
#
# Core dump will be written. Default location: Core dumps may be processed with "/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E" (or dumping to /oracle-work/???/files-for-report/24-13/core.3707675)
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
bci = 39, c-method()-code_size() = 39
We are at bci 36, where the jsr bytecode is. Then, we want to step the length of that bytecode forward, i.e. +3, and mark the bci there as a block header. But that is the end of the code, i.e. there is nothing after the jsr.
I extracted a simple JASM test:
super public class Test
{
public static Method main:"([Ljava/lang/String;)V"
stack 100 locals 100
{
return;
LABEL:
nop;
jsr LABEL; // bci=2. Compute bci + length(jsr) - bci = 5 accessed, out of bounds.
}
}

-----
Title: [JDK-8335709] C2: assert(!loop->is_member(get_loop(useblock))) failed: must be outside loop
Priority: P3
Type: Bug
Component: hotspot
Description: I would really appreciate a mention in the PR: I extracted the JASM file from a class-file, reduced it, and was able to recreate a JAVA file from that. This simplifies the debug job and the triaging (class-file would have been limited to JDK22 and newer).
Affected: 23, 22, 21, 17 (did not reproduce with 11)
Assert in debug. Product: infinite loop as expected, but not sure if there is no wrong result possible.
Only reproduced with JDK17 and newer, but you will have to see why it does not reproduce with JDK11.
Looks like a problem with infinite-loops, see java code and the NeverBranch as evidence that there is no loop exit:
(rr) p x_ctrl-dump_bfs(100,x_ctrl,"#cA")
dist apd dump
---------------------------------------------
7  14   84  IfFalse  === 82  [[ 87 91 ]] #0 !jvms: Test::test @ bci:4 (line 12)
6   7   87  Region  === 87 84 83  [[ 87 112 92 105 107 130 ]] #reducible  !jvms: Test::test @ bci:11 (line 15)
5   7  107  SafePoint  === 87 1 108 1 1 112 106  [[ 73 ]]  SafePoint  !jvms: Test::test @ bci:24 (line 16)
4   7   73  Region  === 73 107 72  [[ 73 119 77 118 117 ]] #reducible  !jvms: Test::test @ bci:2 (line 12)
3   7  119  NeverBranch  === 73  [[ 120 121 ]]
2   7  120  CProj  === 119  [[ 82 ]] #0
1   7   82  If  === 120 81  [[ 83 84 ]] P=0.500000, C=-1.000000 !jvms: Test::test @ bci:4 (line 12)
0   0   83  IfTrue  === 82  [[ 87 ]] #1 !jvms: Test::test @ bci:4 (line 12)
We have had many open bugs with infinite-loops: they are quite rare in the wild but tricky to get right with loop-opts.
JDK-8308749: C2 failed: regular loops only (counted loop inside infinite loop)
JDK-8296389: C2: PhaseCFG::convert_NeverBranch_to_Goto must handle both orders of successors
JDK-8297642: PhaseIdealLoop::only_has_infinite_loops must detect all loops that never lead to termination
JDK-8296318: use-def assert: special case undetected loops nested in infinite loops
JDK-8296412: Special case infinite loops with unmerged backedges in IdealLoopTree::check_safepts
Maybe we should just disable PhaseIdealLoop::try_sink_out_of_loop  for infinite loops: they never terminate anyway, and thus their performance is not very important.
/oracle-work/jdk-fork2/build/linux-x64-debug/jdk/bin/java -Xcomp -XX:CompileCommand=compileonly,Test::* -XX:CompileCommand=printcompilation,Test::* -XX:+TraceLoopOpts Test.java
CompileCommand: compileonly Test.* bool compileonly = true
CompileCommand: PrintCompilation Test.* bool PrintCompilation = true
36751   97    b  3       Test::main (4 bytes)
36773   99    b  4       Test::main (4 bytes)
36775  100 %  b  4       Test::test @ 2 (27 bytes)
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle-work/jdk-fork2/open/src/hotspot/share/opto/loopopts.cpp:1266), pid=4119505, tid=4119519
#  assert(!loop-is_member(get_loop(useblock))) failed: must be outside loop
#
# JRE version: Java(TM) SE Runtime Environment (24.0) (fastdebug build 24-internal-2024-07-04-1039391.emanuel...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 24-internal-2024-07-04-1039391.emanuel..., compiled mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x12a2718]  PhaseIdealLoop::place_outside_loop(Node*, IdealLoopTree*) const+0x348
#
# Core dump will be written. Default location: Core dumps may be processed with "/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E" (or dumping to /oracle-work/xyz/core.4119505)
#
# An error report file with more information is saved as:
# /oracle-work/xyz/hs_err_pid4119505.log
#
# Compiler replay data is saved as:
# /oracle-work/xyz/replay_pid4119505.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
Current CompileTask:
C2:36803  100 %  b  4       Test::test @ 2 (27 bytes)
Stack: [0x00007f4fc436f000,0x00007f4fc4470000],  sp=0x00007f4fc446ad80,  free space=1007k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x12a2718]  PhaseIdealLoop::place_outside_loop(Node*, IdealLoopTree*) const+0x348  (loopopts.cpp:1266)
V  [libjvm.so+0x12a5bd6]  PhaseIdealLoop::try_sink_out_of_loop(Node*)+0x376  (loopopts.cpp:1753)
V  [libjvm.so+0x12a6603]  PhaseIdealLoop::split_if_with_blocks_post(Node*)+0x83  (loopopts.cpp:1531)
V  [libjvm.so+0x12a6ec6]  PhaseIdealLoop::split_if_with_blocks(VectorSet&, Node_Stack&)+0x96  (loopopts.cpp:1964)
V  [libjvm.so+0x1299519]  PhaseIdealLoop::build_and_optimize()+0xee9  (loopnode.cpp:4815)
V  [libjvm.so+0x9e4770]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x390  (loopnode.hpp:1117)
V  [libjvm.so+0x9df283]  Compile::Optimize()+0x4c3  (compile.cpp:2366)
V  [libjvm.so+0x9e3326]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1b06  (compile.cpp:852)
V  [libjvm.so+0x835575]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1d5  (c2compiler.cpp:142)
V  [libjvm.so+0x9eef68]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x928  (compileBroker.cpp:2303)
V  [libjvm.so+0x9efbf8]  CompileBroker::compiler_thread_loop()+0x478  (compileBroker.cpp:1961)
V  [libjvm.so+0xe994dc]  JavaThread::thread_main_inner()+0xcc  (javaThread.cpp:757)
V  [libjvm.so+0x17b9076]  Thread::call_run()+0xb6  (thread.cpp:225)
V  [libjvm.so+0x14a1717]  thread_native_entry(Thread*)+0x127  (os_linux.cpp:858)

-----
Title: [JDK-8335912] Add an operation mode to the jar command when extracting to not overwriting existing files
Priority: P5
Type: Enhancement
Component: core-libs
Description: the jar command currently does not provide a means to warn/ask the user what to do when extracting a file and it already exists.

-----
Title: [JDK-8336240] Test com/sun/crypto/provider/Cipher/DES/PerformanceTest.java fails with java.lang.ArithmeticException
Priority: P5
Type: Bug
Component: security-libs
Description: The manual test Cipher/DES/PerformanceTest.java  fails because in the following lines end - start could be zero, and then that value is used in division:
''
start = System.currentTimeMillis();
//operations
end = System.currentTimeMillis();
int speed = (int)((data.length * count)/(end - start));
''
Error thrown:
(1).Failed Automatically and thrown java.lang.ArithmeticException.
(2)Exception:
java.lang.ArithmeticException:
at PerformanceTest.runTest(PerformanceTest.java:187)
at PerformanceTest.run(PerformanceTest.java:126)
at PerformanceTest.main(PerformanceTest.java:77)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
atsun.reflect.DelegatingMethodAccessorImpl.invoke (DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:484)
at com.sun.javatest.regtest.MainWrapper$MainThread.run(MainWrapper.java:94)
at java.lang.Thread.run(Thread.java:744)
JavaTest Message: Test threw exception: java.lang.ArithmeticException: / by zero
JavaTest Message: shutting down test
STATUS:Failed.`main' threw exception: java.lang.ArithmeticException: / by zero
result: Failed. Execution failed: `main' threw exception: java.lang.ArithmeticException: / by zero

-----
Title: [JDK-8336257] Additional tests in jmxremote/startstop to match on PID not app name
Priority: P2
Type: Bug
Component: core-svc
Description: Since
8207908: JMXStatusTest.java fails assertion intermittently
which updates:
test/jdk/sun/management/jmxremote/startstop/JMXStatusTest.java
test/jdk/sun/management/jmxremote/startstop/ManagementAgentJcmd.java
the related tests:
test/jdk/sun/management/jmxremote/startstop/JMXStartStopTest.java
test/sun/management/jmxremote/startstop/JMXStatusPerfCountersTest.java
...fail to compile:
test/jdk/sun/management/jmxremote/startstop/JMXStartStopTest.java:75: error: incompatible types: String cannot be converted to Process
private static ManagementAgentJcmd jcmd = new ManagementAgentJcmd(TEST_APP_NAME, verbose);
These tests also use jcmd using an application name pattern and presume they see output from the program they started, and not some other concurrent test invocation.

-----
Title: [JDK-8336315] tools/jpackage/windows/WinChildProcessTest.java Failed: Check is calculator process is alive
Priority: P4
Type: Bug
Component: tools
Description: The following test failed in the JDK24 CI:
tools/jpackage/windows/WinChildProcessTest.java
Here's a snippet from the log file:
#section:main
----------messages:(7/458)----------
command: main -Xmx512m jdk.jpackage.test.Main --jpt-run=WinChildProcessTest
reason: User specified action: run main/othervm -Xmx512m jdk.jpackage.test.Main --jpt-run=WinChildProcessTest
started: Fri Jul 12 11:44:51 UTC 2024
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.jpackage --add-exports jdk.jpackage/jdk.jpackage.internal=ALL-UNNAMED
finished: Fri Jul 12 11:45:00 UTC 2024
elapsed time (seconds): 9.127
----------configuration:(4/129)----------
Boot Layer
add modules: jdk.jpackage
add exports: jdk.jpackage/jdk.jpackage.internal ALL-UNNAMED
----------System.out:(55/6211)*----------
[11:44:51.924] Parsing [--jpt-run=WinChildProcessTest]...
[11:44:51.987] WinChildProcessTest.test - [public static void WinChildProcessTest.test() throws java.lang.Throwable]
[11:44:52.002] Create: WinChildProcessTest.test
[11:44:52.018] [ RUN      ] WinChildProcessTest.test
[11:44:52.127] Running candle.exe
[11:44:52.190] Running light.exe
[11:44:52.284] Running wix.exe
[11:44:52.299] TRACE: Bundler msi supported
[11:44:52.299] Running candle.exe
[11:44:52.377] Running light.exe
[11:44:52.471] Running wix.exe
[11:44:52.471] TRACE: Bundler exe supported
[11:44:52.518] TRACE: exec: Execute tool provider [javac -d .\\test\\jar-workdir .\\test\\src\\Hello.java](4)...
[11:44:53.237] TRACE: exec: Done. Exit code: 0
[11:44:53.237] TRACE: assertEquals(0): Check command tool provider [javac -d .\\test\\jar-workdir .\\test\\src\\Hello.java](4) exited with 0 code
[11:44:53.237] TRACE: exec: Execute tool provider [jar -c -f .\\test\\input\\hello.jar -C .\\test\\jar-workdir .](7)...
[11:44:53.315] TRACE: exec: Done. Exit code: 0
[11:44:53.315] TRACE: assertEquals(0): Check command tool provider [jar -c -f .\\test\\input\\hello.jar -C .\\test\\jar-workdir .](7) exited with 0 code
[11:44:53.330] TRACE: exec: Execute [c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-24+7-647\\windows-x64.jdk\\jdk-24\\bin\\jpackage.exe --input .\\test\\input --dest .\\test\\output --name WinChildProcessTest --type app-image --main-jar hello.jar --main-class Hello --win-console -J-Djlink.debug=true --verbose](16); inherit I/O...
[11:44:53.737] Creating app package: WinChildProcessTest in C:\\sb\\prod\\1720781149\\testoutput\\test-support\\jtreg_open_test_jdk_tier3\\scratch\\3\\.\\test\\output
[11:45:00.096] Command [PID: -1]:
jlink --output .\\test\\output\\WinChildProcessTest\\runtime --module-path c:\\\\ade\\\\mesos\\\\work_dir\\\\jib-master\\\\install\\\\jdk-24+7-647\\\\windows-x64.jdk\\\\jdk-24\\\\jmods --add-modules java.rmi,jdk.management.jfr,jdk.jdi,jdk.charsets,jdk.xml.dom,java.xml,java.datatransfer,jdk.jstatd,jdk.httpserver,java.desktop,java.security.sasl,jdk.zipfs,java.base,jdk.javadoc,jdk.management.agent,jdk.jshell,jdk.editpad,jdk.jsobject,java.sql.rowset,jdk.sctp,java.smartcardio,jdk.jlink,jdk.unsupported,java.security.jgss,jdk.nio.mapmode,java.compiler,jdk.dynalink,jdk.unsupported.desktop,jdk.accessibility,jdk.security.jgss,jdk.incubator.vector,java.sql,java.logging,java.transaction.xa,java.xml.crypto,jdk.jfr,jdk.internal.md,jdk.crypto.cryptoki,jdk.net,java.naming,jdk.internal.ed,java.prefs,java.net.http,jdk.compiler,jdk.naming.rmi,jdk.internal.opt,jdk.jconsole,jdk.attach,jdk.crypto.mscapi,jdk.internal.le,java.management,jdk.jdwp.agent,jdk.internal.jvmstat,java.instrument,jdk.management,jdk.security.auth,java.scripting,jdk.jdeps,jdk.jartool,jdk.jpackage,java.management.rmi,jdk.naming.dns,jdk.localedata --strip-native-commands --strip-debug --no-man-pages --no-header-files
[11:45:00.096] Output:
WARNING: Using incubator modules: jdk.incubator.vector
[11:45:00.096] Returned: 0
[11:45:00.112] Using default package resource JavaApp.ico [icon] (add WinChildProcessTest.ico to the resource-dir to customize).
[11:45:00.112] Warning: Windows Defender may prevent jpackage from functioning. If there is an issue, it can be addressed by either disabling realtime monitoring, or adding an exclusion for the directory "c:\\sb\\prod\\1720781149\\testoutput\\test-support\\jtreg_open_test_jdk_tier3\\tmp\\jdk.jpackage17972536289581077334".
[11:45:00.127] Using default package resource WinLauncher.template [Template for creating executable properties file] (add WinChildProcessTest.properties to the resource-dir to customize).
[11:45:00.174] Succeeded in building Windows Application Image package
[11:45:00.268] TRACE: exec: Done. Exit code: 0
[11:45:00.268] TRACE: assertEquals(0): Check command [c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-24+7-647\\windows-x64.jdk\\jdk-24\\bin\\jpackage.exe --input .\\test\\input --dest .\\test\\output --name WinChildProcessTest --type app-image --main-jar hello.jar --main-class Hello --win-console -J-Djlink.debug=true --verbose](16) exited with 0 code
[11:45:00.284] TRACE: assertStringListEquals(): Check there is only one file with [.jpackage.xml] name in the package
[11:45:00.284] TRACE: assertStringListEquals(1, .\\test\\output\\WinChildProcessTest\\app\\.jpackage.xml)
[11:45:00.284] TRACE: assertStringListEquals(): Check there are no files with [.package] name in the package
[11:45:00.284] TRACE: assertTrue(): Check [.\\test\\output\\WinChildProcessTest\\runtime] path exists
[11:45:00.284] TRACE: assertTrue(): Check [.\\test\\output\\WinChildProcessTest\\runtime] is a directory
[11:45:00.284] TRACE: assertTrue(): Check [.\\test\\output\\WinChildProcessTest\\WinChildProcessTest.exe] path exists
[11:45:00.284] TRACE: assertTrue(): Check [.\\test\\output\\WinChildProcessTest\\WinChildProcessTest.exe] is a file
[11:45:00.299] TRACE: assertTrue(): Check [.\\test\\output\\WinChildProcessTest\\WinChildProcessTest.exe] file is executable
[11:45:00.299] TRACE: assertTrue(): Check [.\\test\\output\\WinChildProcessTest\\app\\WinChildProcessTest.cfg] path exists
[11:45:00.299] TRACE: assertTrue(): Check [.\\test\\output\\WinChildProcessTest\\app\\WinChildProcessTest.cfg] is a file
[11:45:00.299] TRACE: exec: Execute [C:\\sb\\prod\\1720781149\\testoutput\\test-support\\jtreg_open_test_jdk_tier3\\scratch\\3\\.\\test\\output\\WinChildProcessTest\\WinChildProcessTest.exe](1); save output...
Calc id=43708
[11:45:00.763] TRACE: exec: Done. Exit code: 0
[11:45:00.763] TRACE: assertEquals(0): Check command [C:\\sb\\prod\\1720781149\\testoutput\\test-support\\jtreg_open_test_jdk_tier3\\scratch\\3\\.\\test\\output\\WinChildProcessTest\\WinChildProcessTest.exe](1) exited with 0 code
Is Alive false
[11:45:00.763] ERROR: Failed: Check is calculator process is alive
[11:45:00.779] [  FAILED  ] WinChildProcessTest.test; checks=14
[11:45:00.779] [==========] 1 tests ran
[11:45:00.779] [  PASSED  ] 0 tests
[11:45:00.779] [  FAILED  ] 1 test, listed below
[11:45:00.779] [  FAILED  ] WinChildProcessTest.test; workDir=[.\\test]
[11:45:00.779] 1 FAILED TEST
----------System.err:(42/2704)----------
java.lang.AssertionError: Failed: Check is calculator process is alive
at jdk.jpackage.test.TKit.error(TKit.java:273)
at jdk.jpackage.test.TKit.assertTrue(TKit.java:653)
at jdk.jpackage.test.TKit.assertTrue(TKit.java:640)
at WinChildProcessTest.test(WinChildProcessTest.java:82)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at jdk.jpackage.test.MethodCall.accept(MethodCall.java:145)
at jdk.jpackage.test.TestInstance.run(TestInstance.java:230)
at jdk.jpackage.test.TKit.lambda$ignoreExceptions$5(TKit.java:141)
at jdk.jpackage.test.TKit.lambda$runTests$3(TKit.java:126)
at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)
at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:807)
at jdk.jpackage.test.TKit.lambda$runTests$4(TKit.java:123)
at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:109)
at jdk.jpackage.test.TKit.runTests(TKit.java:122)
at jdk.jpackage.test.Main.runTests(Main.java:79)
at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:109)
at jdk.jpackage.test.Main.main(Main.java:75)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1575)
java.lang.RuntimeException: 1 FAILED TEST
at jdk.jpackage.test.Main.reportSummary(Main.java:130)
at jdk.jpackage.test.Main.runTests(Main.java:90)
at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:109)
at jdk.jpackage.test.Main.main(Main.java:75)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1575)
JavaTest Message: Test threw exception: java.lang.RuntimeException: 1 FAILED TEST
JavaTest Message: shutting down test
STATUS:Failed.`main' threw exception: java.lang.RuntimeException: 1 FAILED TEST
----------rerun:(45/6577)*----------
OS: windows

-----
Title: [JDK-8336413] gtk headers : Fix typedef redeclaration of GMainContext and GdkPixbuf
Priority: P4
Type: Bug
Component: client-libs
Description: The following typedef redeclaration warnings were seen on Solaris in 11u but on examination it seems it is an issue in all releases including mainline, but only the Solaris compiler warns.
Two typedef declarations are causing this issue - GMainContext, GdkPixbuf
The problem is that they are defined in gtk_interface.h but then redefined in gtk2_interface.h and gtk3_interface.h
The fix is to remove the redeclarations in gtk2_interface.h and gtk3_interface.h
[2024-07-14T16:49:41,763Z] === Output from failing command(s) repeated here ===
[2024-07-14T16:49:41,767Z] * For target support_native_java.desktop_libawt_xawt_gtk2_interface.o:
[2024-07-14T16:49:41,772Z] "open/src/java.desktop/unix/native/libawt_xawt/awt/gtk2_interface.h", line 53: error: typedef redeclared: GMainContext (E_TYPEDEF_REDECLARED)
[2024-07-14T16:49:41,772Z] cc: acomp failed for ./open/src/java.desktop/unix/native/libawt_xawt/awt/gtk2_interface.c
[2024-07-14T16:49:41,782Z] * For target support_native_java.desktop_libawt_xawt_gtk3_interface.o:
[2024-07-14T16:49:41,787Z] "open/src/java.desktop/unix/native/libawt_xawt/awt/gtk3_interface.h", line 179: error: typedef redeclared: GMainContext (E_TYPEDEF_REDECLARED)
OS: linux

-----
Title: [JDK-8336640] Shenandoah: Parallel worker use in parallel_heap_region_iterate
Priority: P4
Type: Enhancement
Component: hotspot
Description: Shenandoah init mark is supposed to be very fast, on the order of a few hundreds microseconds. We do most of the work right in the VM thread that executes the safepoint. Yet, we have a block here that involves workers:
https://github.com/openjdk/jdk/blob/d41d2a7a82cb6eff17396717e2e14139ad8179ba/src/hotspot/share/gc/shenandoah/shenandoahConcurrentGC.cpp#L555-L559
It goes for parallel walk when the number of regions is 1024 (see ShenandoahParallelRegionStride), which is below the usual Shenandoah target of 2048 regions. Which means we are likely always going into that path.
It might cause some trouble, if the number of parallel GC workers is high: we wake up lots of GC threads without having most them do any useful work:
[info ][gc,start         ] GC(163) Pause Init Mark (unload classes)
[info ][gc,task          ] GC(163) Using 16 of 16 workers for init marking
[info ][gc               ] GC(163) Pause Init Mark (unload classes) 0.116ms
[info ][safepoint        ] Safepoint "ShenandoahInitMark", Time since last: 10717617218 ns, Reaching safepoint: 157434 ns, Cleanup: 27282 ns, At safepoint: 202251 ns, Total: 386967 ns
We need to see if: a) this is actually a problem; b) default ShenandoahParallelRegionStride is too low; c) whether we should limit the number of active worker around that block by `num_regions() / stride`; d) whether we should just ditch this code and do a single-threaded walk always.
Not limited to init mark, parallel_heap_region_iterate is used by 4 others GC phases to apply lightweight operation on heap regions, if possible/needed, we should optimize parallel_heap_region_iterate which generally benefits all the 5 places using parallel_heap_region_iterate to walk and apply operation on heap regions.
Assuming the overhead to orchestrate worker threads for parallel interaction is `n`, the cost to process 1024 heap region is `m`(assuming total cost is linear in single thread), we could test and collect the value of `n` and `m` them  calculate the threshold, below the threshold simply use single thread, otherwise use parallel walk.  Threshold should be roughly `(n/m + 1) * 1024`

-----
Title: [JDK-8336854] CAInterop.java#actalisauthenticationrootca conflicted with /manual and /timeout
Priority: P4
Type: Bug
Component: security-libs
Description: This manual test is failing with
test result: Error. Parse Exception: `/manual' disables use of `/timeout'
It is failing as timeout cannot work with manual.
This. change is  done in this bug JDK-8334441

-----
Title: [JDK-8336911] ZGC: Division by zero in heuristics after JDK-8332717
Priority: P4
Type: Bug
Component: hotspot
Description: when running with ubsan enabled binaries, the following issue is reported,
e.g. in test
compiler/uncommontrap/TestDeoptOOM_ZGenerational.jtr
also in gc/z/TestSmallHeap.jtr
jdk/src/hotspot/share/gc/z/zDirector.cpp:537:84: runtime error: division by zero
#0 0x7f422495bd1f in calculate_young_to_old_worker_ratio src/hotspot/share/gc/z/zDirector.cpp:537
#1 0x7f422495bd1f in select_worker_threads src/hotspot/share/gc/z/zDirector.cpp:694
#2 0x7f42282a0d97 in select_worker_threads src/hotspot/share/gc/z/zDirector.cpp:689
#3 0x7f42282a0d97 in initial_workers src/hotspot/share/gc/z/zDirector.cpp:784
#4 0x7f42282a2485 in initial_workers src/hotspot/share/gc/z/zDirector.cpp:795
#5 0x7f42282a2485 in start_minor_gc src/hotspot/share/gc/z/zDirector.cpp:797
#6 0x7f42282a2485 in start_gc src/hotspot/share/gc/z/zDirector.cpp:826
#7 0x7f42282a2485 in ZDirector::run_thread() src/hotspot/share/gc/z/zDirector.cpp:912
#8 0x7f422840bdd8 in ZThread::run_service() src/hotspot/share/gc/z/zThread.cpp:29
#9 0x7f4225ab6979 in ConcurrentGCThread::run() src/hotspot/share/gc/shared/concurrentGCThread.cpp:48
#10 0x7f4227e1137a in Thread::call_run() src/hotspot/share/runtime/thread.cpp:225
#11 0x7f42274619b1 in thread_native_entry src/hotspot/os/linux/os_linux.cpp:858
#12 0x7f422c8d36e9 in start_thread (/lib64/libpthread.so.0+0xa6e9) (BuildId: 9a146bd267419cb6a8cf08d7c602953a0f2e12c5)
#13 0x7f422c1dc58e in clone (/lib64/libc.so.6+0x11858e) (BuildId: f2d1cb1ef49f8c47d43a4053910ba6137673ccce)

-----
Title: [JDK-8332717] ZGC: Division by zero in heuristics
Priority: P3
Type: Bug
Component: hotspot
Description: When running hs :tier1 tests, with ubsan enabled (configure flag --enable-ubsan), in a couple of  ZGC tests like
compiler/uncommontrap/TestDeoptOOM_ZGenerational.jtr
gc/stringdedup/TestStringDeduplicationInterned_ZGenerational.jtr
this division by zero is reported :
/jdk/src/hotspot/share/gc/z/zDirector.cpp:531:87: runtime error: division by zero
#0 0x7f34901420b0 in calculate_young_to_old_worker_ratio /jdk/src/hotspot/share/gc/z/zDirector.cpp:531
#1 0x7f34901420b0 in select_worker_threads /jdk/src/hotspot/share/gc/z/zDirector.cpp:690
#2 0x7f34944021d3 in select_worker_threads /jdk/src/hotspot/share/gc/z/zDirector.cpp:685
#3 0x7f34944021d3 in initial_workers /jdk/src/hotspot/share/gc/z/zDirector.cpp:780
#4 0x7f34944034d5 in initial_workers /jdk/src/hotspot/share/gc/z/zLock.inline.hpp:114
#5 0x7f34944034d5 in start_major_gc /jdk/src/hotspot/share/gc/z/zDirector.cpp:784
#6 0x7f34944034d5 in start_gc /jdk/src/hotspot/share/gc/z/zDirector.cpp:812
#7 0x7f34944034d5 in ZDirector::run_thread() /jdk/src/hotspot/share/gc/z/zDirector.cpp:908
#8 0x7f34945831f8 in ZThread::run_service() /jdk/src/hotspot/share/gc/z/zThread.cpp:29
#9 0x7f34917e4f89 in ConcurrentGCThread::run() /jdk/src/hotspot/share/gc/shared/concurrentGCThread.cpp:48
#10 0x7f3493ee8b0f in Thread::call_run() /jdk/src/hotspot/share/runtime/thread.cpp:225
#11 0x7f34933dae75 in thread_native_entry /jdk/src/hotspot/os/linux/os_linux.cpp:846
#12 0x7f349991c6e9 in start_thread (/lib64/libpthread.so.0+0xa6e9) (BuildId: 2f8d3c2d0f4d7888c2598d2ff6356537f5708a73)
#13 0x7f3498f1550e in clone (/lib64/libc.so.6+0x11850e) (BuildId: f732026552f6adff988b338e92d466bc81a01c37)
OS: linux

-----
Title: [JDK-8337066] Repeated call of StringBuffer.reverse with double byte string returns wrong result
Priority: P2
Type: Bug
Component: hotspot
Description: When calling StringBuffer/StringBuilder.reverse with 2byte string repeatedly, the API returns wrong result.

-----
Title: [JDK-8337067] Test runtime/classFileParserBug/Bad_NCDFE_Msg.java won't compile
Priority: P4
Type: Bug
Component: hotspot
Description: The test
runtime/classFileParserBug/Bad_NCDFE_Msg.java
was broken by a bad merge commit:
https://github.com/openjdk/jdk/commit/d4b040f42dd0a9100ad1ffa55de4ae4f20e9f182#diff-9984e56122c1411fcf16852d6030bce3409fa38fd5e56ec59fe8ffeccdf65e1e
way back in June 2022!
This was never noticed because jtreg just ignores the file when running all the tests in the directory, because it does not appear to be a test file due to the missing terminator on the test-block-comment. Only if you try to run the test by itself directly will you get an error.

-----
Title: [JDK-8337320] Update ProblemList.txt with tests known to fail on XWayland
Priority: P3
Type: Bug
Component: client-libs
Description: There are a few jtreg tests known to fail on XWayland
In order to be able to routinely test on this environment we need to add them to the ProblemList.txt
Specifically :
java/awt/Mouse/EnterExitEvents/ResizingFrameTest.java 8332158 linux-x64
java/awt/FullScreen/FullscreenWindowProps/FullscreenWindowProps.java 8280991 linux-x64
java/awt/FullScreen/SetFullScreenTest.java 8332155 linux-x64
There is also :-
java/awt/Focus/VetoableChangeListenerLoopTest.java 8279256 linux-x64
but that bug is closed with a comment that it will be resolved by the fix
for https://bugs.openjdk.org/browse/JDK-8280988 which is fixed.
We should not add a problem list entry referencing a closed bug so either 8279256 should be re-opened or this problem list entry is not needed.

-----
Title: [JDK-8337331] crash: pinned virtual thread will lead to jvm crash when running with the javaagent option
Priority: P3
Type: Bug
Component: hotspot
Description: JDK HEAD commit: 476d2ae69d6
Testcase:
1. Add javaagent which will change the class file (CFLH will be touched)
2. A virtual thread need to be pinned
3. Add the option `-Djdk.tracePinnedThreads=full`
I add the testcase in the attachment.
I think this and is_in_any_VTMS_transition()) failed" class="issue-link" data-issue-key="JDK-8330146"JDK-8330146  should be backport for JDK21. JDK21 will run into deadlock now.
Update: I pull some new commits and now HEAD is 657c0bddf90. The release version will run into deadlock instead of causing jvm crash. The slowdebug version will run into jvm crash.
Cause:
When the virtual thread is pinned, it will use the class `PinnedThreadPrinter` to report. When loading this class, javaagent will change its content and post the CFLH. However, JvmtiClassFileLoadHookPoster should not call `post` for vthreads which are in VTMS transition.
Solution:
Add condition judegement for `JvmtiClassFileLoadHookPoster::post`
The crash log:
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f861178c8b1, pid=41748, tid=41772
#
# JRE version: OpenJDK Runtime Environment (24.0) (build 24-internal-adhoc.tjw378335.jdk)
# Java VM: OpenJDK 64-Bit Server VM (24-internal-adhoc.tjw378335.jdk, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x2f58b1]  AccessInternal::PostRuntimeDispatch, (AccessInternal::BarrierType)2, 548964ul::oop_access_barrier(void*)+0x1
#
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try "ulimit -c unlimited" before starting Java again
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
---------------  S U M M A R Y ------------
Host: Intel(R) Xeon(R) Platinum 8163 CPU @ 2.50GHz, 96 cores, 503G, Alibaba Group Enterprise Linux Server release 7.2 (Paladin)
Time: Mon Jul 29 15:08:54 2024 CST elapsed time: 0.128565 seconds (0d 0h 0m 0s)
---------------  T H R E A D  ---------------
Current thread (0x00007f8528061400):  JavaThread "pool-1-thread-1"        [_thread_in_vm, id=41772, stack(0x00007f85ab13a000,0x00007f85ab23b000) (1028K)]
Stack: [0x00007f85ab13a000,0x00007f85ab23b000],  sp=0x00007f85ab237c10,  free space=1015k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x2f58b1]  AccessInternal::PostRuntimeDispatch, (AccessInternal::BarrierType)2, 548964ul::oop_access_barrier(void*)+0x1  (access.inline.hpp:81)
V  [libjvm.so+0xb2e933]  JvmtiClassFileLoadHookPoster::post_to_env(JvmtiEnv*, bool)+0x163  (jvmtiExport.cpp:270)
V  [libjvm.so+0xb23ce5]  JvmtiExport::post_class_file_load_hook(Symbol*, Handle, Handle, unsigned char**, unsigned char**, JvmtiCachedClassFileData**)+0x1d5  (jvmtiExport.cpp:987)
V  [libjvm.so+0xb53c26]  KlassFactory::create_from_stream(ClassFileStream*, Symbol*, ClassLoaderData*, ClassLoadInfo const&, JavaThread*)+0x176  (klassFactory.cpp:148)
V  [libjvm.so+0x62e33e]  ClassLoader::load_class(Symbol*, PackageEntry*, bool, JavaThread*)+0x24e  (classLoader.cpp:1205)
V  [libjvm.so+0xf707f5]  SystemDictionary::load_instance_class_impl(Symbol*, Handle, JavaThread*)+0x235  (systemDictionary.cpp:1279)
V  [libjvm.so+0xf6f148]  SystemDictionary::load_instance_class(Symbol*, Handle, JavaThread*)+0x18  (systemDictionary.cpp:1343)
V  [libjvm.so+0xf6f80f]  SystemDictionary::resolve_instance_class_or_null(Symbol*, Handle, Handle, JavaThread*)+0x5ef  (systemDictionary.cpp:702)
V  [libjvm.so+0xf6fc50]  SystemDictionary::resolve_or_null(Symbol*, Handle, Handle, JavaThread*)+0x40  (systemDictionary.cpp:343)
V  [libjvm.so+0xf6fdae]  SystemDictionary::resolve_or_fail(Symbol*, Handle, Handle, bool, JavaThread*)+0x1e  (systemDictionary.cpp:321)
V  [libjvm.so+0x6b2616]  ConstantPool::klass_ref_at(int, Bytecodes::Code, JavaThread*)+0x296  (constantPool.cpp:599)
V  [libjvm.so+0xb83726]  LinkInfo::LinkInfo(constantPoolHandle const&, int, Bytecodes::Code, JavaThread*)+0x46  (linkResolver.cpp:278)
V  [libjvm.so+0xb8fcaa]  LinkResolver::resolve_invoke(CallInfo&, Handle, constantPoolHandle const&, int, Bytecodes::Code, JavaThread*)+0x28a  (linkResolver.cpp:1745)
V  [libjvm.so+0x9155e6]  InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code)+0x1c6  (interpreterRuntime.cpp:842)
V  [libjvm.so+0x915ab5]  InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)+0xd5  (interpreterRuntime.cpp:1004)
j  java.lang.VirtualThread$VThreadContinuation.onPinned(Ljdk/internal/vm/Continuation$Pinned;)V+42 java.base@24-internal
j  jdk.internal.vm.Continuation.onPinned0(I)V+5 java.base@24-internal
j  jdk.internal.vm.Continuation.yield0(Ljdk/internal/vm/ContinuationScope;Ljdk/internal/vm/Continuation;)Z+325 java.base@24-internal
j  jdk.internal.vm.Continuation.yield(Ljdk/internal/vm/ContinuationScope;)Z+69 java.base@24-internal
j  java.lang.VirtualThread.yieldContinuation()Z+8 java.base@24-internal
j  java.lang.VirtualThread.parkNanos(J)V+64 java.base@24-internal
j  java.lang.VirtualThread.sleepNanos(J)V+70 java.base@24-internal
j  java.lang.Thread.sleepNanos(J)V+26 java.base@24-internal
j  java.lang.Thread.sleep(J)V+25 java.base@24-internal
j  TestPinCaseWithTrace.native2Java(I)I+11
v  ~StubRoutines::call_stub 0x00007f85fb9b5c86
V  [libjvm.so+0x91e014]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x2f4  (javaCalls.cpp:415)
V  [libjvm.so+0x9d3241]  jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, JavaThread*) [clone .isra.148] [clone .constprop.253]+0x161  (jni.cpp:888)
V  [libjvm.so+0x9d3d5f]  jni_CallStaticIntMethod+0x14f  (jni.cpp:1580)
C  [libPinJNI.so+0x677]  Java_TestPinCaseWithTrace_nativeFuncPin+0x47  (libPinJNI.c:29)
j  TestPinCaseWithTrace.nativeFuncPin(I)I+0
j  TestPinCaseWithTrace.lambda$main$0()V+4
j  TestPinCaseWithTrace$$Lambda+0x00007f856b003438.run()V+0
j  java.lang.Thread.runWith(Ljava/lang/Object;Ljava/lang/Runnable;)V+5 java.base@24-internal
j  java.lang.VirtualThread.run(Ljava/lang/Runnable;)V+66 java.base@24-internal
j  java.lang.VirtualThread$VThreadContinuation$1.run()V+8 java.base@24-internal
j  jdk.internal.vm.Continuation.enter0()V+4 java.base@24-internal
j  jdk.internal.vm.Continuation.enter(Ljdk/internal/vm/Continuation;Z)V+1 java.base@24-internal
J 240  jdk.internal.vm.Continuation.enterSpecial(Ljdk/internal/vm/Continuation;ZZ)V java.base@24-internal (0 bytes) @ 0x00007f85fc22445c [0x00007f85fc224320+0x000000000000013c]
j  jdk.internal.vm.Continuation.run()V+122 java.base@24-internal
j  java.lang.VirtualThread.runContinuation()V+72 java.base@24-internal
j  java.lang.VirtualThread$$Lambda+0x00007f856b064cb8.run()V+4 java.base@24-internal
j  java.util.concurrent.ThreadPoolExecutor.runWorker(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V+92 java.base@24-internal
j  java.util.concurrent.ThreadPoolExecutor$Worker.run()V+5 java.base@24-internal
j  java.lang.Thread.runWith(Ljava/lang/Object;Ljava/lang/Runnable;)V+5 java.base@24-internal
j  java.lang.Thread.run()V+19 java.base@24-internal
v  ~StubRoutines::call_stub 0x00007f85fb9b5c86
V  [libjvm.so+0x91e014]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x2f4  (javaCalls.cpp:415)
V  [libjvm.so+0x91fc43]  JavaCalls::call_virtual(JavaValue*, Handle, Klass*, Symbol*, Symbol*, JavaThread*)+0x223  (javaCalls.cpp:329)
V  [libjvm.so+0x9fa5d3]  thread_entry(JavaThread*, JavaThread*)+0x73  (jvm.cpp:2910)
V  [libjvm.so+0x937c0c]  JavaThread::run()+0x15c  (javaThread.cpp:757)
V  [libjvm.so+0xfbd18f]  Thread::call_run()+0x9f  (thread.cpp:225)
V  [libjvm.so+0xd160aa]  thread_native_entry(Thread*)+0xda  (os_linux.cpp:858)
Java frames: (J=compiled Java code, j=interpreted, Vv=VM code)
j  java.lang.VirtualThread$VThreadContinuation.onPinned(Ljdk/internal/vm/Continuation$Pinned;)V+42 java.base@24-internal
j  jdk.internal.vm.Continuation.onPinned0(I)V+5 java.base@24-internal
j  jdk.internal.vm.Continuation.yield0(Ljdk/internal/vm/ContinuationScope;Ljdk/internal/vm/Continuation;)Z+325 java.base@24-internal
j  jdk.internal.vm.Continuation.yield(Ljdk/internal/vm/ContinuationScope;)Z+69 java.base@24-internal
j  java.lang.VirtualThread.yieldContinuation()Z+8 java.base@24-internal
j  java.lang.VirtualThread.parkNanos(J)V+64 java.base@24-internal
j  java.lang.VirtualThread.sleepNanos(J)V+70 java.base@24-internal
j  java.lang.Thread.sleepNanos(J)V+26 java.base@24-internal
j  java.lang.Thread.sleep(J)V+25 java.base@24-internal
j  TestPinCaseWithTrace.native2Java(I)I+11
v  ~StubRoutines::call_stub 0x00007f85fb9b5c86
j  TestPinCaseWithTrace.nativeFuncPin(I)I+0
j  TestPinCaseWithTrace.lambda$main$0()V+4
j  TestPinCaseWithTrace$$Lambda+0x00007f856b003438.run()V+0
j  java.lang.Thread.runWith(Ljava/lang/Object;Ljava/lang/Runnable;)V+5 java.base@24-internal
j  java.lang.VirtualThread.run(Ljava/lang/Runnable;)V+66 java.base@24-internal
j  java.lang.VirtualThread$VThreadContinuation$1.run()V+8 java.base@24-internal
j  jdk.internal.vm.Continuation.enter0()V+4 java.base@24-internal
j  jdk.internal.vm.Continuation.enter(Ljdk/internal/vm/Continuation;Z)V+1 java.base@24-internal
J 240  jdk.internal.vm.Continuation.enterSpecial(Ljdk/internal/vm/Continuation;ZZ)V java.base@24-internal (0 bytes) @ 0x00007f85fc22445c [0x00007f85fc224320+0x000000000000013c]
j  jdk.internal.vm.Continuation.run()V+122 java.base@24-internal
j  java.lang.VirtualThread.runContinuation()V+72 java.base@24-internal
j  java.lang.VirtualThread$$Lambda+0x00007f856b064cb8.run()V+4 java.base@24-internal
j  java.util.concurrent.ThreadPoolExecutor.runWorker(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V+92 java.base@24-internal
j  java.util.concurrent.ThreadPoolExecutor$Worker.run()V+5 java.base@24-internal
j  java.lang.Thread.runWith(Ljava/lang/Object;Ljava/lang/Runnable;)V+5 java.base@24-internal
j  java.lang.Thread.run()V+19 java.base@24-internal
v  ~StubRoutines::call_stub 0x00007f85fb9b5c86
---------------  Dead Lock Stack Trace (the other condition)  ------------
The deadlock related stacktrace:
Thread 24 "pool-1-thread-1" hit Breakpoint 5, JvmtiVTMSTransitionDisabler::JvmtiVTMSTransitionDisabler (this=0x7fff8fde5940, thread=0x0) at src/hotspot/share/prims/jvmtiThreadState.cpp:256
256     JvmtiVTMSTransitionDisabler::JvmtiVTMSTransitionDisabler(jthread thread)
(gdb) bt
#0  JvmtiVTMSTransitionDisabler::JvmtiVTMSTransitionDisabler (this=0x7fff8fde5940, thread=0x0) at src/hotspot/share/prims/jvmtiThreadState.cpp:256
#1  0x00007ffff64c691d in JvmtiEnv::SetThreadLocalStorage (this=this@entry=0x7ffff001a2a0, thread=thread@entry=0x0, data=data@entry=0x7effc0bb) at src/hotspot/share/prims/jvmtiEnv.cpp:152
#2  0x00007ffff6479b8e in jvmti_SetThreadLocalStorage (env=0x7ffff001a2a0, thread=0x0, data=0x7effc0bb) at build/linux-x86_64-server-release/hotspot/variant-server/gensrc/jvmtifiles/jvmtiEnter.cpp:1049
#3  0x00007ffff508ab0f in confirmingTLSSet (jvmtienv=jvmtienv@entry=0x7ffff001a2a0, thread=thread@entry=0x0, newValue=newValue@entry=0x7effc0bb) at src/java.instrument/share/native/libinstrument/Reentrancy.c:73
#4  0x00007ffff508abbc in tryToAcquireReentrancyToken (jvmtienv=0x7ffff001a2a0, thread=thread@entry=0x0) at src/java.instrument/share/native/libinstrument/Reentrancy.c:130
#5  0x00007ffff50883c2 in transformClassFile (agent=0x7ffff001a8e0, jnienv=jnienv@entry=0x7ffff02a89a0, loaderObject=loaderObject@entry=0x0, name=name@entry=0x7fff24105478 "java/lang/PinnedThreadPrinter",
classBeingRedefined=classBeingRedefined@entry=0x0, protectionDomain=protectionDomain@entry=0x0, class_data_len=8100, class_data=0x7fff241034a0 "\312\376\272\276", new_class_data_len=0x7fff8fde5c64, new_class_data=0x7fff8fde5c68,
is_retransformer=0 '\000') at src/java.instrument/share/native/libinstrument/JPLISAgent.c:829
#6  0x00007ffff50872ef in eventHandlerClassFileLoadHook (jvmtienv=, jnienv=0x7ffff02a89a0, class_being_redefined=0x0, loader=0x0, name=0x7fff24105478 "java/lang/PinnedThreadPrinter", protectionDomain=0x0,
class_data_len=8100, class_data=0x7fff241034a0 "\312\376\272\276", new_class_data_len=0x7fff8fde5c64, new_class_data=0x7fff8fde5c68) at src/java.instrument/share/native/libinstrument/InvocationAdapter.c:650
#7  0x00007ffff64ec742 in JvmtiClassFileLoadHookPoster::post_to_env (this=0x7fff8fde5d80, env=0x7ffff001a2a0, caching_needed=) at src/hotspot/share/prims/jvmtiExport.cpp:1014
#8  0x00007ffff64e1965 in JvmtiClassFileLoadHookPoster::post_all_envs (this=0x7fff8fde5d80) at src/hotspot/share/prims/jvmtiExport.cpp:987
#9  JvmtiClassFileLoadHookPoster::post (this=0x7fff8fde5d80) at src/hotspot/share/prims/jvmtiExport.cpp:971
#10 JvmtiExport::post_class_file_load_hook (h_name=h_name@entry=0x7fffac09c2d8, class_loader=..., h_protection_domain=..., data_ptr=data_ptr@entry=0x7fff8fde5e90, end_ptr=end_ptr@entry=0x7fff8fde5e98,
cache_ptr=cache_ptr@entry=0x7fff8fde5e88) at src/hotspot/share/prims/jvmtiExport.cpp:1105
#11 0x00007ffff65119d6 in check_class_file_load_hook (__the_thread__=0x7ffff02a85e0, cached_class_file=0x7fff8fde5e88, protection_domain=..., loader_data=0x7ffff0205b60, name=0x7fffac09c2d8, stream=0x7fff24105448)
at src/hotspot/share/classfile/klassFactory.cpp:148
#12 KlassFactory::create_from_stream (stream=0x7fff24105448, name=name@entry=0x7fffac09c2d8, loader_data=0x7ffff0205b60, cl_info=..., __the_thread__=__the_thread__@entry=0x7ffff02a85e0)
at src/hotspot/share/classfile/klassFactory.cpp:189
#13 0x00007ffff5fea6de in ClassLoader::load_class (name=name@entry=0x7fffac09c2d8, pkg_entry=pkg_entry@entry=0x7ffff02128e0, search_append_only=search_append_only@entry=false, __the_thread__=__the_thread__@entry=0x7ffff02a85e0)
at src/hotspot/share/classfile/classLoader.cpp:1205
#14 0x00007ffff6928a35 in SystemDictionary::load_instance_class_impl (class_name=class_name@entry=0x7fffac09c2d8, class_loader=..., __the_thread__=__the_thread__@entry=0x7ffff02a85e0)
at src/hotspot/share/classfile/systemDictionary.cpp:1279
#15 0x00007ffff6927388 in SystemDictionary::load_instance_class (name=name@entry=0x7fffac09c2d8, class_loader=class_loader@entry=..., __the_thread__=__the_thread__@entry=0x7ffff02a85e0)
at src/hotspot/share/classfile/systemDictionary.cpp:1343
#16 0x00007ffff6927a4f in SystemDictionary::resolve_instance_class_or_null (name=name@entry=0x7fffac09c2d8, class_loader=..., class_loader@entry=..., protection_domain=..., __the_thread__=0x7ffff02a85e0)
at src/hotspot/share/classfile/systemDictionary.cpp:702
#17 0x00007ffff6927e90 in SystemDictionary::resolve_or_null (class_name=class_name@entry=0x7fffac09c2d8, class_loader=..., protection_domain=..., __the_thread__=__the_thread__@entry=0x7ffff02a85e0)
at src/hotspot/share/classfile/systemDictionary.cpp:343
#18 0x00007ffff6927fee in SystemDictionary::resolve_or_fail (class_name=class_name@entry=0x7fffac09c2d8, class_loader=..., class_loader@entry=..., protection_domain=..., throw_error=throw_error@entry=true,
__the_thread__=__the_thread__@entry=0x7ffff02a85e0) at src/hotspot/share/classfile/systemDictionary.cpp:321
#19 0x00007ffff606e526 in ConstantPool::klass_at_impl (__the_thread__=0x7ffff02a85e0, cp_index=44, this_cp=...) at src/hotspot/share/oops/constantPool.cpp:599
#20 ConstantPool::klass_at (__the_thread__=0x7ffff02a85e0, cp_index=44, this=) at src/hotspot/share/oops/constantPool.hpp:381
#21 ConstantPool::klass_ref_at (this=, which=which@entry=5, code=code@entry=Bytecodes::_invokestatic, __the_thread__=__the_thread__@entry=0x7ffff02a85e0) at src/hotspot/share/oops/constantPool.cpp:840
#22 0x00007ffff6541216 in LinkInfo::LinkInfo (this=0x7fff8fde6830, pool=..., index=5, code=Bytecodes::_invokestatic, __the_thread__=0x7ffff02a85e0) at src/hotspot/share/interpreter/linkResolver.cpp:278
#23 0x00007ffff654d79a in LinkResolver::resolve_invokestatic (__the_thread__=0x7ffff02a85e0, index=-1881247760, pool=..., result=...) at src/hotspot/share/interpreter/linkResolver.cpp:1745
#24 LinkResolver::resolve_invoke (result=..., recv=recv@entry=..., pool=..., index=index@entry=5, byte=byte@entry=Bytecodes::_invokestatic, __the_thread__=__the_thread__@entry=0x7ffff02a85e0)
at src/hotspot/share/interpreter/linkResolver.cpp:1705
#25 0x00007ffff62d2556 in InterpreterRuntime::resolve_invoke (current=0x7ffff02a85e0, bytecode=Bytecodes::_invokestatic) at src/hotspot/share/interpreter/interpreterRuntime.cpp:842
#26 0x00007ffff62d2a25 in InterpreterRuntime::resolve_from_cache (current=0x7ffff02a85e0, bytecode=) at src/hotspot/share/interpreter/interpreterRuntime.cpp:1004
The `JvmtiVTMSTransitionDisabler::JvmtiVTMSTransitionDisabler` cannot jump out the loop since the vthread-1 itself is in VTMS Transition. (VTMS_transition_mark is true)
OS: linux

-----
Title: [JDK-8337410] The makefiles should set problemlist and adjust timeout basing on the given VM flags
Priority: P4
Type: Enhancement
Component: hotspot
Description: The certain testing like Xcomp/ZGC assume that corresponding problem lists are used. It does make sense to treat them exaclty like ProblemList.txt and use them by default.
There are following lists to be set:
ProblemList-Virtual.txt
ProblemList-Xcomp.txt
ProblemList-generational-zgc.txt
ProblemList-zgc.txt
Also using "-Xcomp" might automatically increase timeoutFactor to 10.

-----
Title: [JDK-8337780] RISC-V: C2: Change C calling convention for sp to NS
Priority: P4
Type: Enhancement
Component: hotspot
Description: We can change the C calling convention for sp to NS as sp is always saved and restored by the prolog/epilog code.
This could reduce the frame size by 16 bytes for each C2 runtime stub as we do not have to save sp on the method entry.
Here is an example, when sp is SOE, the generated code would be:
```
Decoding RuntimeStub - _complete_monitor_locking_Java 0x0000003f676d6a08 [0x0000003f676d6a80, 0x0000003f676d6b08] (136 bytes)
--------------------------------------------------------------------------------
0x0000003f676d6a80:   nop
0x0000003f676d6a84:   addi    sp,sp,-32
0x0000003f676d6a86:   sd      s0,16(sp)
0x0000003f676d6a88:   sd      ra,24(sp)
0x0000003f676d6a8a:   sd      sp,0(sp)
0x0000003f676d6a8c:   sd      sp,928(s7)
0x0000003f676d6a90:   mv      a0,a1
0x0000003f676d6a92:   mv      a1,a2
0x0000003f676d6a94:   mv      a2,s7
0x0000003f676d6a96:   auipc   t1,0x0
0x0000003f676d6a9a:   addi    t1,t1,44 # 0x0000003f676d6ac2
0x0000003f676d6a9e:   lui     t0,0x1fc
0x0000003f676d6aa2:   addi    t0,t0,-108 # 0x00000000001fbf94
0x0000003f676d6aa6:   slli    t0,t0,0xb
0x0000003f676d6aaa:   addi    t0,t0,1589
0x0000003f676d6aae:   slli    t0,t0,0x6
0x0000003f676d6ab2:   addi    t0,t0,14
0x0000003f676d6ab6:   addi    sp,sp,-16
0x0000003f676d6aba:   sd      t1,8(sp)
0x0000003f676d6abe:   jalr    t0
0x0000003f676d6ac2:   nop
0x0000003f676d6ac6:   lui     zero,0x0
0x0000003f676d6aca:   sext.w  zero,zero
0x0000003f676d6ace:   addi    sp,sp,16
0x0000003f676d6ad2:   sd      zero,928(s7)
0x0000003f676d6ad6:   sd      zero,936(s7)
0x0000003f676d6ada:   ld      t2,8(s7)
0x0000003f676d6ade:   bnez    t2,0x0000003f676d6aec
0x0000003f676d6ae2:   ld      sp,0(sp)
0x0000003f676d6ae4:   ld      s0,16(sp)
0x0000003f676d6ae6:   ld      ra,24(sp)
0x0000003f676d6ae8:   addi    sp,sp,32
0x0000003f676d6aea:   ret
0x0000003f676d6aec:   li      t6,0
0x0000003f676d6af0:   lui     t2,0x3f67
0x0000003f676d6af4:   addiw   t2,t2,1487 # 0x0000000003f675cf
0x0000003f676d6af8:   slli    t2,t2,0xc
0x0000003f676d6afa:   addi    t2,t2,832
0x0000003f676d6afe:   ld      sp,0(sp)
0x0000003f676d6b00:   ld      s0,16(sp)
0x0000003f676d6b02:   ld      ra,24(sp)
0x0000003f676d6b04:   addi    sp,sp,32
0x0000003f676d6b06:   jr
```
after we change to NS, it only generates the following code:
```
Decoding RuntimeStub - _complete_monitor_locking_Java 0x0000003f676d6688 [0x0000003f676d6700, 0x0000003f676d6788] (136 bytes)
--------------------------------------------------------------------------------
0x0000003f676d6700:   nop
0x0000003f676d6704:   addi    sp,sp,-16
0x0000003f676d6706:   sd      s0,0(sp)
0x0000003f676d6708:   sd      ra,8(sp)
0x0000003f676d670a:   sd      sp,928(s7)
0x0000003f676d670e:   mv      a0,a1
0x0000003f676d6710:   mv      a1,a2
0x0000003f676d6712:   mv      a2,s7
0x0000003f676d6714:   auipc   t1,0x0
0x0000003f676d6718:   addi    t1,t1,44 # 0x0000003f676d6740
0x0000003f676d671c:   lui     t0,0x1fc
0x0000003f676d6720:   addi    t0,t0,-107 # 0x00000000001fbf95
0x0000003f676d6724:   slli    t0,t0,0xb
0x0000003f676d6728:   addi    t0,t0,316
0x0000003f676d672c:   slli    t0,t0,0x6
0x0000003f676d6730:   addi    t0,t0,12
0x0000003f676d6734:   addi    sp,sp,-16
0x0000003f676d6738:   sd      t1,8(sp)
0x0000003f676d673c:   jalr    t0
0x0000003f676d6740:   nop
0x0000003f676d6744:   lui     zero,0x0
0x0000003f676d6748:   sext.w  zero,zero
0x0000003f676d674c:   addi    sp,sp,16
0x0000003f676d6750:   sd      zero,928(s7)
0x0000003f676d6754:   sd      zero,936(s7)
0x0000003f676d6758:   ld      t2,8(s7)
0x0000003f676d675c:   bnez    t2,0x0000003f676d6768
0x0000003f676d6760:   ld      s0,0(sp)
0x0000003f676d6762:   ld      ra,8(sp)
0x0000003f676d6764:   addi    sp,sp,16
0x0000003f676d6766:   ret
0x0000003f676d6768:   li      t6,0
0x0000003f676d676c:   lui     t2,0x3f67
0x0000003f676d6770:   addiw   t2,t2,1487 # 0x0000000003f675cf
0x0000003f676d6774:   slli    t2,t2,0xc
0x0000003f676d6776:   addi    t2,t2,832
0x0000003f676d677a:   ld      s0,0(sp)
0x0000003f676d677c:   ld      ra,8(sp)
0x0000003f676d677e:   addi    sp,sp,16
0x0000003f676d6780:   jr      t2
```
We also checked the calling convention type for sp on other platforms (AArch64, PPC, x86, x64, S390), and they are all treated as NS.
OS: linux

-----
Title: [JDK-8337810] ProblemList BasicDirectoryModel/LoaderThreadCount.java on Windows
Priority: P4
Type: Sub-task
Component: client-libs
Description: The test BasicDirectoryModel/LoaderThreadCount.java fails rather often in our CI, exclude it for now.

-----
Title: [JDK-8337826] Improve logging in OCSPTimeout and SimpleOCSPResponder to help diagnose JDK-8309754
Priority: P3
Type: Enhancement
Component: security-libs
Description: The OCSPTimeout test introduced in JDK-8179502 had windows that were too tightly bound for some CI infrastructures.  This was largely corrected in JDK-8309740, but OCSPTimeout still has occasional failures, but they are much more rare and very difficult to reproduce.  They may not even be timing related any longer.
This enhancement seeks to add some more detailed log messages on the cert path validator (client) and SimpleOCSPServer (server) sides to the OCSP test so when the issue does happen again we can hopefully get more information to help diagnose or reproduce the failure.

-----
Title: [JDK-8309754] java/security/cert/CertPathValidator/OCSP/OCSPTimeout.java failed with "Expected to pass, found 1 soft fail exceptions"
Priority: P3
Type: Bug
Component: security-libs
Description: The following test failed in the JDK22 CI:
java/security/cert/CertPathValidator/OCSP/OCSPTimeout.java
Here's a snippet from the log file:
#section:main
----------messages:(7/575)----------
command: main -Dcom.sun.security.ocsp.readtimeout=2750ms OCSPTimeout 2000 true
reason: User specified action: run main/othervm -Dcom.sun.security.ocsp.readtimeout=2750ms OCSPTimeout 2000 true
started: Fri Jun 09 21:20:32 UTC 2023
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base --add-exports java.base/sun.security.x509=ALL-UNNAMED --add-exports java.base/sun.security.provider.certpath=ALL-UNNAMED --add-exports java.base/sun.security.util=ALL-UNNAMED
finished: Fri Jun 09 21:20:38 UTC 2023
elapsed time (seconds): 5.427
----------configuration:(6/279)----------
Boot Layer
add modules: java.base
add exports: java.base/sun.security.provider.certpath ALL-UNNAMED
java.base/sun.security.util              ALL-UNNAMED
java.base/sun.security.x509              ALL-UNNAMED
----------System.out:(19/658)----------
Generated Root CA KeyPair
Generated End Entity KeyPair
Root CA Created:
Issuer: CN=Root CA Cert, O=SomeCompany
Subject: CN=Root CA Cert, O=SomeCompany
Serial: 1
[MainThread]: nextUpdate set to Fri Jun 09 22:20:34 UTC 2023
[MainThread]: Response Content-Length field disabled
[pool-1-thread-1]: Listening on 0.0.0.0/0.0.0.0:63089
Root OCSP Responder URI is http://localhost:63089
SSL Certificate Created:
Issuer: CN=Root CA Cert, O=SomeCompany
Subject: CN=SSLCertificate, O=SomeCompany
Serial: 4096
[MainThread]: Added entry for serial 4096(CERT_STATUS_GOOD)
[MainThread]: OCSP latency set to 2000 milliseconds.
Test case expects to pass
----------System.err:(11/700)----------
java.lang.RuntimeException: Expected to pass, found 1 soft fail exceptions
at OCSPTimeout.main(OCSPTimeout.java:116)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1583)
JavaTest Message: Test threw exception: java.lang.RuntimeException: Expected to pass, found 1 soft fail exceptions
JavaTest Message: shutting down test
STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Expected to pass, found 1 soft fail exceptions
----------rerun:(46/6462)*----------
OS: windows

-----
Title: [JDK-8337851] Some tests have name which confuse jtreg
Priority: P4
Type: Bug
Component: tools
Description: When running test/langtools/tools/javac/warnings/Serial.java with `-retain:all`, the ".jtr" files inside the `Serial` directory (e.g., test/langtools/tools/javac/warnings/Serial/Extern.jtr) are deleted. This issue also occurs for test/langtools/tools/javac/generics/ParametricException.java (on case-insensitive file systems) and test/jdk/java/awt/dnd/URLDragTest.java.
This issue occurs when there is a test directory whose name is the same as the test name (without extension).
This behaviour is similar to that reported in https://bugs.openjdk.org/browse/JDK-8318689, and a similar fix should be applied.
OS: generic

-----
Title: [JDK-8337876] [IR Framework] Add support for IR tests with @Stable
Priority: P4
Type: Enhancement
Component: hotspot
Description: It is currently not possible to write IR tests with @Stable because one need to somehow add the IR test classes to the boot classpath.
This RFE should provide easy support to enable that and is motivated by JDK-8333791.

-----
Title: [JDK-8337966] (fs) Files.readAttributes fails with Operation not permitted on older docker releases
Priority: P4
Type: Bug
Component: core-libs
Description: JDK fails with java.nio.file.FileSystemException: Operation not permitted
on the old docker versions (before v19)
Regression is introduced by JDK-8316304 adding a statx syscall
On the old docker versions, statx is not added to the default seccomp white list ( https://github.com/moby/moby/blob/00c1c604d08bbceb73a680d37d7428e6a4e986af/profiles/seccomp/default.json ) It causes EPERM in some systems even if the container image is updated.
```
root@88d002f4c30b:/# /jdk/bin/java -Xdiag -jar ../apps/customjsse.jar
Error: An unexpected error occurred while trying to open file ../apps/customjsse.jar
java.nio.file.FileSystemException: ../apps/customjsse.jar: Operation not permitted
at java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:100)
at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:106)
at java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111)
at java.base/sun.nio.fs.UnixFileAttributeViews$Basic.readAttributes(UnixFileAttributeViews.java:56)
at java.base/sun.nio.fs.UnixFileSystemProvider.readAttributes(UnixFileSystemProvider.java:163)
at java.base/sun.nio.fs.LinuxFileSystemProvider.readAttributes(LinuxFileSystemProvider.java:99)
at java.base/java.nio.file.Files.readAttributes(Files.java:1865)
at java.base/java.util.zip.ZipFile$Source.get(ZipFile.java:1512)
at java.base/java.util.zip.ZipFile$CleanableResource.(ZipFile.java:744)
at java.base/java.util.zip.ZipFile.(ZipFile.java:254)
at java.base/java.util.zip.ZipFile.(ZipFile.java:181)
at java.base/java.util.jar.JarFile.(JarFile.java:345)
at java.base/java.util.jar.JarFile.(JarFile.java:316)
at java.base/java.util.jar.JarFile.(JarFile.java:255)
at java.base/sun.launcher.LauncherHelper.loadMainClass(LauncherHelper.java:834)
at java.base/sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:736)
```
OS: linux

-----
Title: [JDK-8338058] map_or_reserve_memory_aligned Windows enhance remap assertion
Priority: P4
Type: Enhancement
Component: hotspot
Description: In method map_or_reserve_memory_aligned on Windows we should enhance the output in the  remap assertion, to get more details in case of failures.
OS: windows

-----
Title: [JDK-8338101] remove old remap assertion in map_or_reserve_memory_aligned  after JDK-8338058
Priority: P4
Type: Enhancement
Component: hotspot
Description: After JDK-8338058 by mistake an old assertion remained in map_or_reserve_memory_aligned; this has to be removed.
OS: windows

-----
Title: [JDK-8338109] java/awt/Mouse/EnterExitEvents/ResizingFrameTest.java duplicate in ProblemList
Priority: P4
Type: Bug
Component: client-libs
Description: JDK-8337320 regression
java/awt/Mouse/EnterExitEvents/ResizingFrameTest.java 8005021 macosx-all
java/awt/Mouse/EnterExitEvents/ResizingFrameTest.java 8332158 linux-x64

-----
Title: [JDK-8338110] Exclude Fingerprinter::do_type from ubsan checks
Priority: P4
Type: Sub-task
Component: hotspot
Description: For now we still have undefined behavior in Fingerprinter::do_type reorted by ubsan ;  exclude the method from ubsan checks until the signature handling code is adjusted .
OS: generic

-----
Title: [JDK-8338112] Test testlibrary_tests/ir_framework/tests/TestPrivilegedMode.java fails with release build
Priority: P4
Type: Bug
Component: hotspot
Description: Test log snippet:
STDOUT:
IR verification disabled due to not running a debug build (required for PrintIdealand PrintOptoAssembly), running with -Xint, or -Xcomp (use warm-up of 0 instead)
Skip Flag VM due to not performing IR verification.
Run Test VM:
Command line: [/var/tmp/tone/run/jtreg/jdk-repo/build/linux-x86_64-server-release/images/jdk/bin/java -cp /var/tmp/tone/run/jtreg/jt-work/jtreg/hotspot_jtreg/classes/11/testlibrary_tests/ir_framework/tests/TestPrivilegedMode.d:/var/tmp/tone/run/jtreg/jdk-repo/test/hotspot/jtreg/testlibrary_tests/ir_framework/tests:/var/tmp/tone/run/jtreg/jt-work/jtreg/hotspot_jtreg/classes/11/test/lib:/var/tmp/tone/run/jtreg/jdk-repo/test/lib:/var/tmp/tone/run/jtreg/jt-work/jtreg/hotspot_jtreg/classes/11:/var/tmp/tone/run/jtreg/jdk-repo/test/hotspot/jtreg:/var/tmp/tone/run/jtreg/jtreg/lib/javatest.jar:/var/tmp/tone/run/jtreg/jtreg/lib/jtreg.jar -Djava.library.path=/var/tmp/tone/run/jtreg/test-images/hotspot/jtreg/native -Xbootclasspath/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Djdk.lang.processReaperUseDefaultStackSize=true -Dtest.wisp.socketAddress=www.alibabacloud.com -Xmixed -ea -esa -Dir.framework.server.port=39067 -XX:-BackgroundCompilation -XX:CompileCommand=quiet compiler.lib.ir_framework.test.TestVM ir_framework.tests.TestPrivilegedMode ]
[2024-08-09T10:45:33.519775771Z] Gathering output for process 1022474
[2024-08-09T10:45:33.531373782Z] Waiting for completion for process 1022474
[2024-08-09T10:45:33.863238320Z] Waiting for completion finished for process 1022474
Output and diagnostic info for process 1022474 was saved into 'pid-1022474-output.log'
IR verification disabled either due to no @IR annotations, through explicitly setting -DVerify=false, due to not running a debug build, using a non-whitelisted JTreg VM or Javaopts flag like -Xint, or running the test VM with other VM flags added by user code that make the IR verification impossible (e.g. -XX:-UseCompile, -XX:TieredStopAtLevel=[1,2,3], etc.).
STDERR:
java.lang.RuntimeException: should not reach
at jdk.test.lib.Asserts.fail(Asserts.java:691)
at ir_framework.tests.TestPrivilegedMode.main(TestPrivilegedMode.java:47
OS: generic

-----
Title: [JDK-8338344] Test TestPrivilegedMode.java intermittent fails java.lang.NoClassDefFoundError: jdk/test/lib/Platform
Priority: P4
Type: Bug
Component: hotspot
Description: Command Line:
/var/tmp/tone/run/jtreg/jdk-repo/build/linux-x86_64-server-fastdebug/images/jdk/bin/java -DReproduce=true -cp /var/tmp/tone/run/jtreg/jt-work/jtreg/hotspot_jtreg/classes/5/testlibrary_tests/ir_framework/tests/TestPrivilegedMode.d:/var/tmp/tone/run/jtreg/jdk-repo/test/hotspot/jtreg/testlibrary_tests/ir_framework/tests:/var/tmp/tone/run/jtreg/jt-work/jtreg/hotspot_jtreg/classes/5/test/lib:/var/tmp/tone/run/jtreg/jdk-repo/test/lib:/var/tmp/tone/run/jtreg/jt-work/jtreg/hotspot_jtreg/classes/5:/var/tmp/tone/run/jtreg/jdk-repo/test/hotspot/jtreg:/var/tmp/tone/run/jtreg/jtreg/lib/javatest.jar:/var/tmp/tone/run/jtreg/jtreg/lib/jtreg.jar -Djava.library.path=/var/tmp/tone/run/jtreg/test-images/hotspot/jtreg/native -Xbootclasspath/a:.:/var/tmp/tone/run/jtreg/jt-work/jtreg/hotspot_jtreg/classes/5/testlibrary_tests/ir_framework/tests/TestPrivilegedMode.d -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Djdk.lang.processReaperUseDefaultStackSize=true -Dtest.wisp.socketAddress=www.alibabacloud.com -Xmixed -ea -esa -Dir.framework.server.port=37957 -XX:+PrintCompilation -XX:+UnlockDiagnosticVMOptions -XX:+LogCompilation -XX:CompilerDirectivesFile=test-vm-compile-commands-pid-2568528.log -XX:CompilerDirectivesLimit=11 -XX:-OmitStackTraceInFastThrow -DShouldDoIRVerification=true -XX:-BackgroundCompilation -XX:CompileCommand=quiet compiler.lib.ir_framework.test.TestVM ir_framework.tests.TestPrivilegedMode
Error Output
------------
Exception in thread "main" java.lang.NoClassDefFoundError: jdk/test/lib/Platform
at compiler.lib.ir_framework.test.TestVM.(TestVM.java:78)
OS: linux

-----
Title: [JDK-8338380] Update TLSCommon/interop/AbstractServer to specify an interface to listen for connections
Priority: P4
Type: Bug
Component: security-libs
Description: test/jdk/javax/net/ssl/TLSCommon/interop/AbstractServer.java it can be useful to allow tests to specify a specific interface on which to listen for incoming connections.
Default should be the loopback interface.

-----
Title: [JDK-8338389] [JFR] Long strings should be added to the string pool
Priority: P3
Type: Bug
Component: hotspot
Description: When committing JFR events with string data longer than 128 characters, the string isn't added to the JFR string pool.
In scenarios with many events containing large string values, this can lead to very large JFR recordings. This is mostly the case for custom events, containing f.i. SQL strings, or other data. In the case where the string data consist of mostly duplicate data, adding them to the string pool has been shown to reduce the recording size by a factor of 10.
The current scheme for adding strings to the pool adheres to strings 16-128 characters long. In order for a string to be pooled, potential duplicates are cached and checked in a set of four. With this change, the current scheme still holds for lengths 16-128, but strings longer than 128 characters are always pooled.

-----
Title: [JDK-8338402] GHA: some of bundles may not get removed
Priority: P4
Type: Bug
Component: infrastructure
Description: Some of bundles may not get removed. This is follows JDK-8336928. Problem does not always show up, so I have not seen it in my test runs, but since then I have  seen some GHA runs affected by this.
Details:
Turns out, that call to list artifacts is by default limited to first 30 artifacts. GHA of openjdk currently produces 75 artifacts of which 10 are bundles (built jdk). Problem happens if build on some platform takes too long and enough test results (other platforms) got uploaded in meantime. Bundle can then be shifted down in list and not fall into list of first 30 artifacts. Problem can be fixed by increasing per_page limit (API allows up to 100).

-----
Title: [JDK-8338449] ubsan: division by zero in sharedRuntimeTrans.cpp
Priority: P4
Type: Bug
Component: hotspot
Description: When running with ubsan enabled binaries on Linux ppc64le, these  divisions by zero are detected.
test
java/lang/Math/Log10Tests.java: Tests for {Math, StrictMath}.log10
----------stderr:(4/324)----------
/jdk/src/hotspot/share/runtime/sharedRuntimeTrans.cpp:219:27: runtime error: division by zero
#0 0x7fffa7e14abc in SharedRuntime::dlog10(double) (/build_ubsan/images/jdk/lib/server/libjvm.so+0x69f4abc)
#1 0x7fff8b8fc8e8  ()
test
java/lang/Math/LogTests.java: Tests for {Math, StrictMath}.log
/jdk/src/hotspot/share/runtime/sharedRuntimeTrans.cpp:125:27: runtime error: division by zero
#0 0x7fff887f48bc in __ieee754_log(double) (/build_ubsan/images/jdk/lib/server/libjvm.so+0x69f48bc)
#1 0x7fff6b8fc768  ()
test
java/lang/Math/PowTests.java: Tests for {Math, StrictMath}.pow
/jdk/src/hotspot/share/runtime/sharedRuntimeTrans.cpp:508:23: runtime error: division by zero
#0 0x7fff92fd61f0 in SharedRuntime::dpow(double, double) (/build_ubsan/images/jdk/lib/server/libjvm.so+0x69f61f0)
#1 0x7fff7701c8ec  ()
Might be that these divisions are desired so we could consider excluding the code from ubsan checks.
For some reason I do not see the failures on Linux x86_64 when running those tests .

-----
Title: [JDK-8338550] Do libubsan1 installation in test container only if requested
Priority: P4
Type: Bug
Component: hotspot
Description: After JDK-8333144 docker related tests do not work on manually configured distros other than the 'standard' Ubuntu. This is because the basic generated Dockerfile with the change from JDK-8333144 assumes 'apt-get' being available, which is not the case when one runs the testing on RPM based distributions. This isn't easily noticeable unless one inspects the skipped status of a test or looks at the corresponding jtr file. When the basic container image isn't buildable, the test is skipped and not run at all.
So it is necessary to make the libubsan1 installation optional.
OS: linux

-----
Title: [JDK-8338748] [17u,21u] Test Disconnect.java compile error: cannot find symbol after JDK-8299813
Priority: P3
Type: Bug
Component: core-libs
Description: STDERR:
/var/tmp/tone/run/jtreg/jdk-repo/test/jdk/java/nio/channels/DatagramChannel/Disconnect.java:55: error: cannot find symbol
InetAddress lo4 = InetAddress.ofLiteral("127.0.0.1");
^
symbol:   method ofLiteral(String)
location: class InetAddress
/var/tmp/tone/run/jtreg/jdk-repo/test/jdk/java/nio/channels/DatagramChannel/Disconnect.java:65: error: cannot find symbol
InetAddress lo6 = InetAddress.ofLiteral("::1");
^
symbol:   method ofLiteral(String)
location: class InetAddress
2 errors
TEST RESULT: Failed. Compilation failed: Compilation failed
There is no InetAddress.ofLiteral API in jdk21u and jdk17u, the InetAddress.ofLiteral API was added by JDK-8272215 in jdk22.  Thus the fix applies only to 21 and older.
OS: generic

-----
Title: [JDK-8299813] java/nio/channels/DatagramChannel/Disconnect.java fails with jtreg test timeout due to lost datagram
Priority: P4
Type: Bug
Component: core-libs
Description: ----------messages:(10/289)----------
command: main Disconnect
reason: User specified action: run main Disconnect
started: Mon Jan 09 13:23:41 GMT 2023
Mode: agentvm
Agent id: 15
Timeout refired 480 times
Timeout information:
--- Timeout information end.
finished: Mon Jan 09 13:32:25 GMT 2023
elapsed time (seconds): 524.117
The test is stuck in receive:
"AgentVMThread" #438 [39687] prio=5 os_prio=31 cpu=17.81ms elapsed=490.77s allocated=94064B defined_classes=7 tid=0x00007facbf020000 nid=39687 runnable  [0x000070000b18a000]
java.lang.Thread.State: RUNNABLE
at sun.nio.ch.DatagramChannelImpl.receive0(java.base@21-ea/Native Method)
at sun.nio.ch.DatagramChannelImpl.receiveIntoNativeBuffer(java.base@21-ea/DatagramChannelImpl.java:789)
at sun.nio.ch.DatagramChannelImpl.receive(java.base@21-ea/DatagramChannelImpl.java:773)
at sun.nio.ch.DatagramChannelImpl.receive(java.base@21-ea/DatagramChannelImpl.java:577)
at Disconnect.test(Disconnect.java:81)
at Disconnect.main(Disconnect.java:45)
at java.lang.invoke.LambdaForm$DMH/0x00000007c0001c00.invokeStatic(java.base@21-ea/LambdaForm$DMH)
at java.lang.invoke.LambdaForm$MH/0x00000007c00cd800.invoke(java.base@21-ea/LambdaForm$MH)
at java.lang.invoke.Invokers$Holder.invokeExact_MT(java.base@21-ea/Invokers$Holder)
at jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(java.base@21-ea/DirectMethodHandleAccessor.java:155)
at jdk.internal.reflect.DirectMethodHandleAccessor.invoke(java.base@21-ea/DirectMethodHandleAccessor.java:104)
at java.lang.reflect.Method.invoke(java.base@21-ea/Method.java:578)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
at java.lang.Thread.runWith(java.base@21-ea/Thread.java:1636)
at java.lang.Thread.run(java.base@21-ea/Thread.java:1623)
OS: os_x

-----
Title: [JDK-8338751] ConfigureNotify behavior has changed in KWin 6.2
Priority: P4
Type: Bug
Component: client-libs
Description: A DESCRIPTION OF THE PROBLEM :
According to https://github.com/openjdk/jdk/blob/285ceb9ee51e064687da6fc3fbed984e34cf02e6/src/java.desktop/unix/classes/sun/awt/X11/XWindowPeer.java#L766, it appears like KWin is assumed to always send synthetic ConfigureNotify events. However, the internal KWin implementation details have/will be changed in 6.2 to match the behavior described in ICCCM 4.1.5, i.e. if the client window is resized, no synthetic configure notify event will be sent. The reason for that was to fix some issues during interactive resize.
Unfortunately, it breaks pointer input under certain circumstances.
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Have a machine running KWin 6.2, it can be either built from source code (https://develop.kde.org/docs/getting-started/building/kdesrc-build-compile/) or one can download the KDE Neon Testing or Developer edition.
- download JDownloader2 app, and open it
- right click anywhere in the download list, dismiss the popup
- maximize the JDownloader2 window
- right click again, and hover entries in the popup window
- the context menu entries are not highlighted as expected and pointer events have an offset
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
pointer input has some offset after maximizing JDownloader2 window
ACTUAL -
no issues with pointer input
CUSTOMER SUBMITTED WORKAROUND :
If KWin is forced to pretend to be Mutter by changing the WMName property, then the issue cannot be reproduced. The issue is reproducible both in Plasma X11 and Plasma Wayland sessions.
FREQUENCY : always
OS: linux

-----
Title: [JDK-8338759] Add extra diagnostic to java/net/InetAddress/ptr/Lookup.java
Priority: P4
Type: Bug
Component: core-libs
Description: An intermittent failure has been observed in SBR JDK23 b36 run where the test  java/net/InetAddress/ptr/Lookup.java  fails with
java.lang.RuntimeException: Mismatch between default and java.net.preferIPv4Stack=true results
This is due to the java.net.preferIPv4Stack IP reverse  lookup doesn't match that of the dual stack IP reverse lookup.
A possible cause of this is that there is network infra glitch during the dual stack IP reverse lookup, such that the DNS is not available and the hostname of the created InetAddress is populated with the IP address.
The test provides very good diagnostics, but doesn't provide details of the dual stack IP reverse lookup, which is an essential aspect of the test.
Add a diagnostic to output the InetAddress details retrieved for the dual stack lookup
OS: linux_oracle

-----
Title: [JDK-8338924] C1: assert(0 <= i && i < _len) failed: illegal index 5 for length 5
Priority: P4
Type: Bug
Component: hotspot
Description: The following test failed in the JDK24 CI:
runtime/interpreter/LastJsrTest.java
Here's a snippet from the log file:
#section:main
----------messages:(6/230)----------
command: main LastJsrTest
reason: User specified action: run main/othervm LastJsrTest
started: Fri Aug 23 18:24:08 UTC 2024
Mode: othervm [/othervm specified]
finished: Fri Aug 23 18:24:38 UTC 2024
elapsed time (seconds): 30.094
----------configuration:(0/0)----------
----------System.out:(22/2123)----------
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/a20696e7-ae7d-4d37-8e9c-83f99ef002cb-S2259/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/7ca5078e-c5e9-48af-ba7c-18c19669cc97/runs/a4e5ab2e-466e-4fe1-a5bc-3627013e5c55/workspace/open/src/hotspot/share/utilities/growableArray.hpp:142), pid=3237428, tid=3237445
#  assert(0 ::at(int) [clone .part.0]+0x24
#
# Core dump will be written. Default location: Core dumps may be processed with "/opt/core.sh %p" (or dumping to /opt/mach5/mesos/work_dir/slaves/a20696e7-ae7d-4d37-8e9c-83f99ef002cb-S5256/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/43d4584c-fdc2-416a-989e-b7a6f6e01ad4/runs/d58513c5-3dcb-47fb-9de8-37c18ba4f338/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_runtime/scratch/1/core.3237428)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/a20696e7-ae7d-4d37-8e9c-83f99ef002cb-S5256/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/43d4584c-fdc2-416a-989e-b7a6f6e01ad4/runs/d58513c5-3dcb-47fb-9de8-37c18ba4f338/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_runtime/scratch/1/hs_err_pid3237428.log
#
# Compiler replay data is saved as:
# /opt/mach5/mesos/work_dir/slaves/a20696e7-ae7d-4d37-8e9c-83f99ef002cb-S5256/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/43d4584c-fdc2-416a-989e-b7a6f6e01ad4/runs/d58513c5-3dcb-47fb-9de8-37c18ba4f338/testoutput/test-support/jtreg_open_test_hotspot_jtreg_tier1_runtime/scratch/1/replay_pid3237428.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
----------System.err:(0/0)----------
----------rerun:(42/7298)*----------
OS: linux

-----
Title: [JDK-8339080] Bump update version for OpenJDK: jdk-21.0.6
Priority: P4
Type: Enhancement
Component: infrastructure
Description: Development of update 21.0.6 starts in repository jdk21u-dev on Wednesday August 28th, 2024. The first change should be to bump the version.
Release of 21.0.6 is planned for Tuesday January 21th, 2025.
For the date, see also https://wiki.openjdk.org/display/JDKUpdates/JDK%2021u or https://www.oracle.com/security-alerts/

-----
Title: [JDK-8339248] RISC-V: Remove li64 macro assembler routine and related code
Priority: P4
Type: Enhancement
Component: hotspot
Description: The macro assembler routine li64 and related code (is_li64_at, patch_imm_in_li64, get_target_of_li64 and check_li64_data_dependency) is unused for now.
We should remove these unused code, which will save us some unnecessary runtime checks. We can add them back when needed again someday.
OS: linux

-----
Title: [JDK-8339384] Unintentional IOException in jdk.jdi module when JDWP end of stream occurs
Priority: P5
Type: Bug
Component: hotspot
Description: The block of code in com.sun.tools.jdi.TargetVM has a logic error which leads to an IOException being raised every time the JDWP stream that it is parsing reaches the end of stream:
public void run() {
if ((vm.traceFlags & VirtualMachine.TRACE_SENDS) != 0) {
vm.printTrace("Target VM interface thread running");
}
Packet p=null,p2;
String idString;
while (shouldListen) {
boolean done = false;
try {
byte b[] = connection.readPacket();
if (b.length == 0) {
done = true;
}
p = Packet.fromByteArray(b);
} catch (IOException e) {
done = true;
}
The fix for the unintentional IOException is to add an else case if the readPacket() returns 0 length

-----
Title: [JDK-8339386] Assertion on AIX - original PC must be in the main code section of the compiled method
Priority: P4
Type: Bug
Component: hotspot
Description: The test jdk/jfr/tool/TestMetadata.java triggered the following assertion on AIX :
#  Internal Error (/priv/jenkins/client-home/workspace/openjdk-jdk-aix_ppc64-dbg/jdk/src/hotspot/cpu/ppc/frame_ppc.inline.hpp:69), pid=14942644, tid=6948
#  assert(_cb == nullptr || _cb-as_nmethod()-insts_contains_inclusive(_pc)) failed: original PC must be in the main code section of the compiled method (or must be immediately following it)
---------------  T H R E A D  ---------------
Current thread (0x00000001178f4370):  JfrThreadSampler "JFR Thread Sampler" [id=6948, stack(0x000000011a640000,0x000000011a85b888) (2158K)] _threads_hazard_ptr=0x0000000116367cb0, _nested_threads_hazard_ptr_cnt=0
Stack: [0x000000011a640000,0x000000011a85b888],  sp=0x000000011a859c80,  free space=2151k
No context given, using current context.
Native frame:
iar:  0x09000000167b35d8 libjvm.so::AixNativeCallstack::print_callstack_for_context(outputStream*, ucontext_t const*, bool, char*, unsigned long)+0x4cc  (C++ uses_alloca saves_cr saves_lr stores_bc gpr_saved:18 fixedparms:5 parmsonstk:1)
lr:   0x00000000000007d0 (unknown module)::(unknown function)+?
sp:   0x000000011a858f40 (base - 0x2948)
rtoc: 0x08001000a03d9a40
|---stackaddr----|   |----lrsave------|:
0x000000011a859330 - 0x09000000167b3098 libjvm.so::os::Aix::platform_print_native_stack(outputStream*, void const*, char*, int, unsigned char*&)+0x24  (C++ uses_alloca saves_lr stores_bc gpr_saved:1 fixedparms:5 parmsonstk:1)
0x000000011a8593b0 - 0x09000000165438d0 libjvm.so::VMError::report(outputStream*, bool)+0x1c0c  (C++ fp_present uses_alloca saves_cr saves_lr stores_bc gpr_saved:18 fixedparms:2 parmsonstk:1)
0x000000011a859c90 - 0x090000001652deb0 libjvm.so::VMError::report_and_die(int, char const*, char const*, char*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x72c  (C++ uses_alloca saves_lr stores_bc gpr_saved:18 fixedparms:8 parmsonstk:1)
0x000000011a859ea0 - 0x090000001652d738 libjvm.so::VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, char*)+0x58  (C++ uses_alloca saves_lr stores_bc gpr_saved:2 fixedparms:7 parmsonstk:1)
0x000000011a859f40 - 0x090000001652d418 libjvm.so::report_vm_error(char const*, int, char const*, char const*, ...)+0x8c  (C++ uses_alloca saves_lr stores_bc gpr_saved:5 fixedparms:4 parmsonstk:1)
0x000000011a859fe0 - 0x0900000016531f28 libjvm.so::frame::setup(frame::kind)+0x28c  (C++ uses_alloca saves_lr stores_bc gpr_saved:3 fixedparms:2 parmsonstk:1)
0x000000011a85a070 - 0x09000000165d77e8 libjvm.so::frame::safe_for_sender(JavaThread*)+0x28c  (C++ fp_present uses_alloca saves_cr saves_lr stores_bc gpr_saved:9 fixedparms:2 parmsonstk:1)
0x000000011a85a170 - 0x09000000165dda7c libjvm.so::JfrVframeStream::next_vframe()+0x130  (C++ fp_present uses_alloca saves_lr stores_bc gpr_saved:8 fixedparms:1 parmsonstk:1)
0x000000011a85a260 - 0x0900000016b2a7ec libjvm.so::JfrStackTrace::record_async(JavaThread*, frame const&)+0x314  (C++ uses_alloca saves_cr saves_lr stores_bc gpr_saved:18 fixedparms:3 parmsonstk:1)
0x000000011a85aaf0 - 0x0900000016b29764 libjvm.so::OSThreadSampler::protected_task(SuspendedThreadTaskContext const&)+0x124  (C++ fp_present uses_alloca saves_lr stores_bc gpr_saved:4 fixedparms:2 parmsonstk:1)
0x000000011a85abd0 - 0x0900000016b294e8 libjvm.so::OSThreadSampler::do_task(SuspendedThreadTaskContext const&)+0xd8  (C++ uses_alloca saves_lr stores_bc gpr_saved:3 fixedparms:2 parmsonstk:1)
0x000000011a85af20 - 0x0900000016b2ae30 libjvm.so::SuspendedThreadTask::internal_do_task()+0x6c  (C++ uses_alloca saves_lr stores_bc gpr_saved:2 fixedparms:1 parmsonstk:1)
0x000000011a85afb0 - 0x0900000016b2ad68 libjvm.so::SuspendedThreadTask::run()+0x20  (C++ uses_alloca saves_lr stores_bc gpr_saved:2 fixedparms:1 parmsonstk:1)
0x000000011a85b030 - 0x0900000016b292c0 libjvm.so::JfrThreadSampleClosure::sample_thread_in_java(JavaThread*, JfrStackFrame*, unsigned int)+0xa8  (C++ uses_alloca saves_cr saves_lr stores_bc gpr_saved:7 fixedparms:4 parmsonstk:1)
0x000000011a85b140 - 0x0900000016b28ef4 libjvm.so::JfrThreadSampleClosure::do_sample_thread(JavaThread*, JfrStackFrame*, unsigned int, JfrSampleType)+0x1a8  (C++ uses_alloca saves_cr saves_lr stores_bc gpr_saved:9 fixedparms:5 parmsonstk:1)
0x000000011a85b200 - 0x0900000016b281a4 libjvm.so::JfrThreadSampler::task_stacktrace(JfrSampleType, JavaThread**)+0x464  (C++ fp_present uses_alloca saves_cr saves_lr stores_bc gpr_saved:14 fixedparms:3 parmsonstk:1)
0x000000011a85b570 - 0x0900000016b27ca0 libjvm.so::JfrThreadSampler::run()+0x198  (C++ uses_alloca saves_cr saves_lr stores_bc gpr_saved:12 fixedparms:1 parmsonstk:1)
0x000000011a85b640 - 0x0900000016650b68 libjvm.so::Thread::call_run()+0x128  (C++ uses_alloca saves_lr stores_bc gpr_saved:3 fixedparms:1 parmsonstk:1)
0x000000011a85b6d0 - 0x09000000166500c8 libjvm.so::thread_native_entry(Thread*)+0x214  (C++ uses_alloca saves_lr stores_bc gpr_saved:10 fixedparms:1 parmsonstk:1)
0x000000011a85b7a0 - 0x090000000056204c libpthreads.a::_pthread_body+0xec  (C saves_lr stores_bc gpr_saved:1 fixedparms:1 )
0x000000011a85b820 - 0x0000000000000000
*** end of backchain ***
-----------------------
OS: aix

-----
Title: [JDK-8339416] [s390x] Provide implementation for resolve_global_jobject
Priority: P4
Type: Enhancement
Component: hotspot
Description: JDK-8299089 port for s390x is missing and method being implemented in that Port is going to be beneficial for JDK-8337753 Port for s390x. So it will be good to have this method and referenced a call to it instead of resolve_jobject in the JDK-8337753 port.
OS: linux

-----
Title: [JDK-8339487] ProcessHandleImpl os_getChildren sysctl call - retry in case of ENOMEM and enhance exception message
Priority: P4
Type: Bug
Component: core-libs
Description: In jtreg test java/lang/ProcessHandle/PermissionTest.java on macOS we ran a few times into this error :
java.lang.RuntimeException: Cannot allocate memory
at java.base/java.lang.ProcessHandleImpl.getProcessPids0(Native Method)
at java.base/java.lang.ProcessHandleImpl.children(ProcessHandleImpl.java:456)
at java.base/java.lang.ProcessHandleImpl.children(ProcessHandleImpl.java:434)
at PermissionTest.childrenWithPermission(PermissionTest.java:84)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:573)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
Probably sysctl fails here, but it is not fully clear; it would help to change the exception so that the standard text is shown too.
Also in case of ENOMEM, we can retry the failing sysctl call a few times.
OS: generic

-----
Title: [JDK-8339548] GHA: RISC-V: Use Debian snapshot archive for bootstrap
Priority: P4
Type: Bug
Component: infrastructure
Description: Debian "sid" or "unstable" (https://httpredir.debian.org/debian) that we use for debootstrapping RISC-V breaks very often. Currently, the GHA linux-cross-build for RISC-V would not continue and is simply skipped when this debootstrap for "sid" repos fails. (See JDK-8326960 for more details). This is affecting GHA linux-cross-build for RISC-V for quite some time. As a result, we failed to catch some early build issues.
But I don't think we need to catch up with the latest Debian "unstable" for our GHA verification purpose. So one way would be using some older but working Debian shapshot [1] [2] for our purpose. I find the most recent usable shapshot is https://snapshot.debian.org/archive/debian/20240228T034848Z/. We can switch back to more stable Debian repo once it graduates.
[1] https://snapshot.debian.org/
[2] https://lists.debian.org/debian-snapshot/
OS: linux

-----
Title: [JDK-8339560] Unaddressed comments during code review of JDK-8337664
Priority: P4
Type: Bug
Component: security-libs
Description: During the review, Rajan and Sean had several comments that I was unable to address because of time constraints. Nothing was urgent so it was decided to file a follow-on bug.
1. test/jdk/sun/security/ssl/X509TrustManagerImpl/Entrust/Distrust.java, line 113:
Rajan - "Please update this and other Exception thrown in loadCertificateChain and testTM function to RuntimeException."
2. test/jdk/sun/security/ssl/X509TrustManagerImpl/Entrust/Distrust.java, line 141:
Rajan - "Should this be updated to throw SkippedException so we know that certificates are expired?"
3. Sean - "I noticed we could combine some of the Symantec and Entrust tests, but I think it is too risky at this point."

-----
Title: [JDK-8337664] Distrust TLS server certificates issued after Oct 2024 and anchored by Entrust Root CAs
Priority: P3
Type: Enhancement
Component: security-libs
Description: Google [1] and Mozilla [2] have announced plans to distrust TLS Server certificates issued by Entrust.
This enhancement will implement similar restrictions in the JDK.
The restrictions will be enforced in the SunJSSE Provider of the Java Secure Socket Extension (JSSE) API. A TLS session will not be negotiated if the server's certificate chain is anchored by any of the Certificate Authorities in the table below and the certificate's notBefore date is after October 31, 2024. An application will receive an Exception with a message indicating the trust anchor (root) is not trusted, ex:
"TLS Server certificate issued after 2024-10-31 and anchored by a distrusted legacy Entrust root CA: CN=Entrust.net Certification Authority (2048), OU=(c) 1999 Entrust.net Limited, OU=www.entrust.net/CPS_2048 incorp. by ref. (limits liab.), O=Entrust.net"
If necessary, you can work around the restrictions by removing "ENTRUST_TLS" from the "jdk.security.caDistrustPolicies" security property.
The restrictions will be imposed on the following Entrust Root certificates (identified by Distinguished Name) included in the JDK (note that AffirmTrust are Entrust CAs):
1. CN=Entrust Root Certification Authority, OU="(c) 2006 Entrust, Inc.",
OU=www.entrust.net/CPS is incorporated by reference, O="Entrust, Inc.", C=US
2. CN=Entrust Root Certification Authority - EC1, OU="(c) 2012 Entrust, Inc. - for authorized use only",
OU=See www.entrust.net/legal-terms, O="Entrust, Inc.", C=US
3. CN=Entrust Root Certification Authority - G2, OU="(c) 2009 Entrust, Inc. - for authorized use only",
OU=See www.entrust.net/legal-terms, O="Entrust, Inc.", C=US
4. CN=Entrust Root Certification Authority - G4, OU="(c) 2015 Entrust, Inc. - for authorized use only",
OU=See www.entrust.net/legal-terms, O="Entrust, Inc.", C=US
5. CN=Entrust.net Certification Authority (2048), OU=(c) 1999 Entrust.net Limited,
OU=www.entrust.net/CPS_2048 incorp. by ref. (limits liab.), O=Entrust.net
6. CN=AffirmTrust Commercial, O=AffirmTrust, C=US
7. CN=AffirmTrust Networking, O=AffirmTrust, C=US
8. CN=AffirmTrust Premium, O=AffirmTrust, C=US
9. CN=AffirmTrust Premium ECC, O=AffirmTrust, C=US
[1] https://security.googleblog.com/2024/06/sustaining-digital-certificate-security.html
[2] https://groups.google.com/a/mozilla.org/g/dev-security-policy/c/jCvkhBjg9Yw

-----
Title: [JDK-8339591] Mark jdk/jshell/ExceptionMessageTest.java intermittent
Priority: P4
Type: Bug
Component: infrastructure
Description: The test  jdk/jshell/ExceptionMessageTest.java has quite a few intermittent errors/timeouts etc. , so mark the test intermittent .
OS: generic

-----
Title: [JDK-8339637] (tz) Update Timezone Data to 2024b
Priority: P3
Type: Enhancement
Component: core-libs
Description: The 2024b release of the tz code and data is available.
This release is prompted by the accumulated weight of many non-urgent
changes to both code and data.  It changes one timestamp abbreviation,
for the long-obsolete System V setting TZ='MET'; see below.
Otherwise, the timestamps affected by this release all predate April
2008, so you can skip this release if your application uses only
tzdata and does not use older timestamps.
This release contains the following changes:
Briefly:
Improve historical data for Mexico, Mongolia, and Portugal.
System V names are now obsolescent.
The main data form now uses %z.
The code now conforms to RFC 8536 for early timestamps.
Support POSIX.1-2024, which removes asctime_r and ctime_r.
Assume POSIX.2-1992 or later for shell scripts.
SUPPORT_C89 now defaults to 1.
Changes to past timestamps
Asia/Choibalsan is now an alias for Asia/Ulaanbaatar rather than
being a separate Zone with differing behavior before April 2008.
This seems better given our wildly conflicting information about
Mongolia's time zone history.  (Thanks to Heitor David Pinto.)
Historical transitions for Mexico have been updated based on
official Mexican decrees.  The affected timestamps occur during
the years 1921-1927, 1931, 1945, 1949-1970, and 1981-1997.
The affected zones are America/Bahia_Banderas, America/Cancun,
America/Chihuahua, America/Ciudad_Juarez, America/Hermosillo,
America/Mazatlan, America/Merida, America/Mexico_City,
America/Monterrey, America/Ojinaga, and America/Tijuana.
(Thanks to Heitor David Pinto.)
Historical transitions for Portugal, represented by Europe/Lisbon,
Atlantic/Azores, and Atlantic/Madeira, have been updated based on a
close reading of old Portuguese legislation, replacing previous data
mainly originating from Whitman and Shanks & Pottenger.  These
changes affect a few transitions in 1917-1921, 1924, and 1940
throughout these regions by a few hours or days, and various
timestamps between 1977 and 1993 depending on the region.  In
particular, the Azores and Madeira did not observe DST from 1977 to
1981.  Additionally, the adoption of standard zonal time in former
Portuguese colonies have been adjusted: Africa/Maputo in 1909, and
Asia/Dili by 22 minutes at the start of 1912.
(Thanks to Tim Parenti.)
Changes to past tm_isdst flags
The period from 1966-04-03 through 1966-10-02 in Portugal is now
modeled as DST, to more closely reflect how contemporaneous changes
in law entered into force.
Changes to data
Names present only for compatibility with UNIX System V
(last released in the 1990s) have been moved to 'backward'.
These names, which for post-1970 timestamps mostly just duplicate
data of geographical names, were confusing downstream uses.
Names moved to 'backward' are now links to geographical names.
This affects behavior for TZ='EET' for some pre-1981 timestamps,
for TZ='CET' for some pre-1947 timestamps, and for TZ='WET' for
some pre-1996 timestamps.  Also, TZ='MET' now behaves like
TZ='CET' and so uses the abbreviation "CET" rather than "MET".
Those needing the previous TZDB behavior, which does not match any
real-world clocks, can find the old entries in 'backzone'.
(Problem reported by Justin Grant.)
The main source files' time zone abbreviations now use %z,
supported by zic since release 2015f and used in vanguard form
since release 2022b.  For example, America/Sao_Paulo now contains
the zone continuation line "-3:00 Brazil %z", which is less error
prone than the old "-3:00 Brazil -03/-02".  This does not change
the represented data: the generated TZif files are unchanged.
Rearguard form still avoids %z, to support obsolescent parsers.
Asia/Almaty has been removed from zonenow.tab as it now agrees
with Asia/Tashkent for future timestamps, due to Kazakhstan's
2024-02-29 time zone change.  Similarly, America/Scoresbysund
has been removed, as it now agrees with America/Nuuk due to
its 2024-03-31 time zone change.
Changes to code
localtime.c now always uses a TZif file's time type 0 to handle
timestamps before the file's first transition.  Formerly,
localtime.c sometimes inferred a different time type, in order to
handle problematic data generated by zic 2018e or earlier.  As it
is now safe to assume more recent versions of zic, there is no
longer a pressing need to fail to conform RFC 8536 section 3.2,
which requires using time type 0 in this situation.  This change
does not affect behavior when reading TZif files generated by zic
2018f and later.
POSIX.1-2024 removes asctime_r and ctime_r and does not let
libraries define them, so remove them except when needed to
conform to earlier POSIX.  These functions are dangerous as they
can overrun user buffers.  If you still need them, add
-DSUPPORT_POSIX2008 to CFLAGS.
The SUPPORT_C89 option now defaults to 1 instead of 0, fixing a
POSIX-conformance bug introduced in 2023a.
tzselect now supports POSIX.1-2024 proleptic TZ strings.  Also, it
assumes POSIX.2-1992 or later, as practical porting targets now
all support that, and it uses some features from POSIX.1-2024 if
available.
Changes to build procedure
'make check' no longer requires curl and Internet access.
The build procedure now assumes POSIX.2-1992 or later, to simplify
maintenance.  To build on Solaris 10, the only extant system still
defaulting to pre-POSIX, prepend /usr/xpg4/bin to PATH.
Changes to documentation
The documentation now reflects POSIX.1-2024.
Changes to commentary
Commentary about historical transitions in Portugal and her former
colonies has been expanded with links to many relevant legislation.
(Thanks to Tim Parenti.)
Here are links to the release files:
https://www.iana.org/time-zones/repository/releases/tzcode2024b.tar.gz
https://www.iana.org/time-zones/repository/releases/tzdata2024b.tar.gz
https://www.iana.org/time-zones/repository/releases/tzdb-2024b.tar.lz
The following convenience links are also available, although they may
point to the previous release until the relevant caches are refreshed:
https://www.iana.org/time-zones/repository/tzcode-latest.tar.gz
https://www.iana.org/time-zones/repository/tzdata-latest.tar.gz
https://www.iana.org/time-zones/repository/tzdb-latest.tar.lz
Links are also available via plain HTTP, and via FTP from
ftp://ftp.iana.org/tz/releases with the same basenames as above.
Each release file has a GPG signature, which can be retrieved by
appending ".asc" to the above URLs. Copies of these signatures are
appended to this message.
This release corresponds to commit
6903dde39ed637adaafc352c4b6993739253f058 dated 2024-09-04 12:27:47 -0700
and tagged '2024b' in the development GitHub repository at
https://github.com/eggert/tz.

-----
Title: [JDK-8339644] Improve parsing of Day/Month in tzdata rules
Priority: P4
Type: Bug
Component: core-libs
Description: TzdbZoneRulesProvider currently parses tzdata rules with the assumption that the shortened Day or Month values will be used (e.g. "Mon" instead of "Monday")
According to the zic man page, which the tzdata format adheres to, the long or short name may be used:
===
IN     Names the month in which the rule takes effect.  Month
names may be abbreviated.
ON     Gives the day on which the rule takes effect.  Recognized
forms include:
5        the fifth of the month
lastSun  the last Sunday in the month
lastMon  the last Monday in the month
Sun=8   first Sunday on or after the eighth
Sun

-----
Title: [JDK-8339648] ZGC: Division by zero in rule_major_allocation_rate
Priority: P4
Type: Enhancement
Component: hotspot
Description: The HS jtreg test gc/stringdedup/TestStringDeduplicationAgeThreshold_ZGenerational
shows this error when running with ubsan enabled :
const double current_old_gc_time_per_bytes_freed = double(old_gc_time) / double(reclaimed_per_old_gc);
gc/stringdedup/TestStringDeduplicationAgeThreshold_ZGenerational.jtr
src/hotspot/share/gc/z/zDirector.cpp:491:74: runtime error: division by zero
#0 0x7f09886401d4 in rule_major_allocation_rate src/hotspot/share/gc/z/zDirector.cpp:491
#1 0x7f09886401d4 in start_gc src/hotspot/share/gc/z/zDirector.cpp:822
#2 0x7f09886401d4 in ZDirector::run_thread() src/hotspot/share/gc/z/zDirector.cpp:912
#3 0x7f098c1404e8 in ZThread::run_service() src/hotspot/share/gc/z/zThread.cpp:29
#4 0x7f09897cac19 in ConcurrentGCThread::run() src/hotspot/share/gc/shared/concurrentGCThread.cpp:48
#5 0x7f098bb46b0a in Thread::call_run() src/hotspot/share/runtime/thread.cpp:225
#6 0x7f098b1a9881 in thread_native_entry src/hotspot/os/linux/os_linux.cpp:858
OS: generic

-----
Title: [JDK-8339725] Concurrent GC crashed due to GetMethodDeclaringClass
Priority: P3
Type: Bug
Component: hotspot
Description: Here is a reproduced test case from async profiler:
https://github.com/async-profiler/async-profiler/pull/981
Both G1 and ZGC crash. The stack traces are G1/ZGC concurrent marking or G1 full gc marking.
Main.java:
===========================================================
import java.util.Base64;
public class Main extends Thread {
public static void main(String[] args) throws Exception {
long last = System.nanoTime();
for (int i = 0;; i++) {
CustomClassLoader loader = new CustomClassLoader();
Class k = loader.findClass("TemplateFFFFFFFF");
Object o = k.getDeclaredConstructor().newInstance();
// call gc every ~1 second.
if ((System.nanoTime() - last) = 1e9) {
System.gc();
last = System.nanoTime();
}
}
}
}
class CustomClassLoader extends ClassLoader {
@Override
public Class findClass(String name) throws ClassNotFoundException {
/*
* Bytecode for:
* public class TemplateFFFFFFFF {
*   public void doTemplateFFFFFFFF() {
*     return;
*   }
* }
*/
byte[] b = Base64.getDecoder()
.decode("yv66vgAAADQADgoAAwALBwAMBwANAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJU" +
"YWJsZQEAEmRvVGVtcGxhdGVGRkZGRkZGRgEAClNvdXJjZUZpbGUBABVUZW1wbGF0ZUZGRkZGRkZG" +
"LmphdmEMAAQABQEAEFRlbXBsYXRlRkZGRkZGRkYBABBqYXZhL2xhbmcvT2JqZWN0ACEAAgADAAAA" +
"AAACAAEABAAFAAEABgAAAB0AAQABAAAABSq3AAGxAAAAAQAHAAAABgABAAAAAQABAAgABQABAAYA" +
"AAAZAAAAAQAAAAGxAAAAAQAHAAAABgABAAAAAwABAAkAAAACAAo=");
return defineClass(name, b, 0, b.length);
}
}
=========================================================
repro.cpp:
=========================================================
#include
#include
#include
#include
#include
#include
static jvmtiEnv *jvmti;
static JavaVM *_jvm;
static JNIEnv *_rb_env;
#ifndef WITH_GetClassSignature
#define WITH_GetClassSignature 1
#endif
#ifndef WITH_DeleteLocalRef
#define WITH_DeleteLocalRef 0
#endif
#define BUFFER_SIZE 100000
static size_t ring_buffer[BUFFER_SIZE] = {0};
static volatile int ring_buffer_idx = 0;
static int reader_created = 0;
void *get_method_details(void *arg)
{
jmethodID method = (jmethodID)arg;
jclass method_class;
char *class_name = NULL;
jvmtiError err = JVMTI_ERROR_NONE;
// For JVM 17, 21, 22 calling GetMethodDeclaringClass is enough.
if ((err = jvmti-GetMethodDeclaringClass(method, &method_class)) == 0)
{
if (WITH_DeleteLocalRef)
{
_rb_env-DeleteLocalRef(method_class);
}
if (WITH_GetClassSignature)
{
// JVM 8 needs this to crash
jvmti-GetClassSignature(method_class, &class_name, NULL);
jvmti-Deallocate((unsigned char *)class_name);
}
}
}
void *read_ringbuffer(void *arg)
{
JNIEnv *env;
_jvm-AttachCurrentThread((void **)&env, NULL);
_rb_env = env;
for (;;)
{
size_t id = ring_buffer[rand() % BUFFER_SIZE];
if (id  0)
{
get_method_details((void *)id);
}
}
}
static void JNICALL ClassPrepareCallback(jvmtiEnv *jvmti_env,
JNIEnv *jni_env,
jthread thread,
jclass klass)
{
if (reader_created == 0)
{
pthread_t tid;
pthread_create(&tid, NULL, read_ringbuffer, NULL);
reader_created = 1;
}
// Get the list of methods
jint method_count;
jmethodID *methods;
if (jvmti_env-GetClassMethods(klass, &method_count, &methods) == JVMTI_ERROR_NONE)
{
for (int i = 0; i Deallocate((unsigned char *)methods);
}
}
JNIEXPORT jint JNICALL Agent_OnLoad(JavaVM *jvm, char *options, void *reserved)
{
jvmtiEventCallbacks callbacks;
jvmtiError error;
_jvm = jvm;
if (jvm-GetEnv((void **)&jvmti, JVMTI_VERSION_1_0) != JNI_OK)
{
fprintf(stderr, "Unable to access JVMTI!\n");
return JNI_ERR;
}
// Set up the event callbacks
memset(&callbacks, 0, sizeof(callbacks));
callbacks.ClassPrepare = &ClassPrepareCallback;
// Register the callbacks
error = jvmti-SetEventCallbacks(&callbacks, sizeof(callbacks));
if (error != JVMTI_ERROR_NONE)
{
fprintf(stderr, "Error setting event callbacks: %d\n", error);
return JNI_ERR;
}
// Enable the ClassPrepare event
error = jvmti-SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_CLASS_PREPARE, NULL);
if (error != JVMTI_ERROR_NONE)
{
fprintf(stderr, "Error enabling ClassPrepare event: %d\n", error);
return JNI_ERR;
}
return JNI_OK;
}
=============================================================
Steps to reproduce:
javac Main.java
gcc -shared -I"$JAVA_HOME/include" -I"$JAVA_HOME/include/linux" -fPIC repro.cpp -orepro.so
# Low Xmx to pressure GC into unloading classes sooner.
java -agentpath:"$(pwd)/repro.so" -Xmx100m Main

-----
Title: [JDK-8339731] java.desktop/share/classes/javax/swing/text/html/default.css typo in margin settings
Priority: P4
Type: Bug
Component: client-libs
Description: java.desktop/share/classes/javax/swing/text/html/default.css:105:    margin-rigth: 0;
seems to be a typo (must be right).
OS: generic

-----
Title: [JDK-8339741] RISC-V: C ABI breakage for integer on stack
Priority: P3
Type: Bug
Component: hotspot
Description: When passing any integer shorter than XLEN(/64) on stack it must be enlarged and sign extended to XLEN(/64).
These are now passed as 32-bit.
Only reason why this is only P3 is because how gcc 'happens' to load integer shorter than XLEN(/64). (lw/lh/lb).
While LLVM uses ld for these thus we immediately get into trouble when calling a native method with enough arguments.

-----
Title: [JDK-8339787] Add some additional diagnostic output to java/net/ipv6tests/UdpTest.java
Priority: P4
Type: Enhancement
Component: core-libs
Description: amendments to open/test/jdk/java/net/ipv6tests/Tests.java
add a diagnostics to print the ports of the two endpoints involved in the datagramEcho test scenario
public static void datagramEcho (DatagramSocket s1, DatagramSocket s2,
InetAddress ia2)
throws Exception {
byte[] ba = "Hello world".getBytes();
DatagramPacket p1;
SocketAddress dest2 = null;
if (ia2 != null) {
dest2 = new InetSocketAddress (ia2, s2.getLocalPort());
p1 = new DatagramPacket (ba, ba.length, dest2);
} else {
p1 = new DatagramPacket (ba, ba.length);
}
dprintln ("dest2 == " + dest2);
dprintln ("sender  endpoint == " + s1.getLocalSocketAddress());
dprintln ("echo endpoint == " + s2.getLocalSocketAddress());
DatagramPacket r1 = new DatagramPacket (new byte[256], 256);
DatagramPacket r2 = new DatagramPacket (new byte[256], 256);
s1.send (p1);
s2.receive (r1);
s2.send (r1);
s1.receive (r2);
comparePackets (p1, r1);
comparePackets (p1, r2);
}

-----
Title: [JDK-8339803] Acknowledge case insensitive unambiguous keywords in tzdata files
Priority: P4
Type: Bug
Component: core-libs
Description: TZDB spec allows not only month/weekday names, but the keywords themselves can be case-insensitive and unambiguous abbreviations.
OS: generic

-----
Title: [JDK-8339892] Several security shell tests don't set TESTJAVAOPTS
Priority: P4
Type: Sub-task
Component: security-libs
Description: The tests
java/security/Security/ClassLoaderDeadlock/ClassLoaderDeadlock.sh
java/security/Security/ClassLoaderDeadlock/Deadlock.sh
java/security/cert/CertificateFactory/slowstream.sh
sun/security/krb5/runNameEquals.sh
sun/security/pkcs11/Provider/MultipleLogins.sh
sun/security/provider/PolicyFile/getinstance/getinstance.sh
sun/security/ssl/SSLSocketImpl/NotifyHandshakeTest.sh
sun/security/util/Pem/encoding.sh
sun/security/validator/certreplace.sh
sun/security/validator/samedn.sh
set TESTVMOPTS only and don't use TESTJAVAOPTS
so ignore the test.java.opts that are -javaoption of jtreg
The CI is set java optsion and not vm options so they should be accepted by all tests.

-----
Title: [JDK-8340007] Refactor KeyEvent/FunctionKeyTest.java
Priority: P4
Type: Bug
Component: client-libs
Description: The java/awt/event/KeyEvent/FunctionKeyTest.java test can be improved:
The class FunctionKeyTester should be moved into FunctionKeyTest;
The constants in switch statement 403, 404 should be replaced with KEY_PRESSED and KEY_RELEASED which are more descriptive;
The `failures` field is of type StringBuilder which is not thread-safe, but it's accessed from two threads.

-----
Title: [JDK-8340008] KeyEvent/KeyTyped/Numpad1KeyTyped.java has 15 seconds timeout
Priority: P4
Type: Bug
Component: client-libs
Description: The java/awt/event/KeyEvent/KeyTyped/Numpad1KeyTyped.java has a timeout of 15 seconds to wait for a key press to be processed. It is an overkill, 2 seconds is plenty enough.

-----
Title: [JDK-8340109] Ubsan: ciEnv.cpp:1660:65: runtime error: member call on null pointer of type 'struct CompileTask'
Priority: P4
Type: Bug
Component: hotspot
Description: When running ubsan-enabled optimized  binaries on Linux x86_64, test
compiler/startup/StartupOutput.java
triggers this ubsan issue :
jdk/src/hotspot/share/ci/ciEnv.cpp:1660:65: runtime error: member call on null pointer of type 'struct CompileTask'
#0 0x7fe7443fc88d in ciEnv::dump_replay_data_helper(outputStream*) src/hotspot/share/ci/ciEnv.cpp:1660
#1 0x7fe746c22047 in VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long) src/hotspot/share/utilities/vmError.cpp:1872
#2 0x7fe7447dd429 in report_fatal(VMErrorType, char const*, int, char const*, ...) src/hotspot/share/utilities/debug.cpp:214
#3 0x7fe7445c614d in RuntimeStub::new_runtime_stub(char const*, CodeBuffer*, short, int, OopMapSet*, bool, bool) src/hotspot/share/code/codeBlob.cpp:413
#4 0x7fe744259ceb in Runtime1::generate_blob(BufferBlob*, int, char const*, bool, StubAssemblerCodeGenClosure*) src/hotspot/share/c1/c1_Runtime1.cpp:230
#5 0x7fe74425a273 in Runtime1::generate_blob_for(BufferBlob*, Runtime1::StubID) src/hotspot/share/c1/c1_Runtime1.cpp:259
#6 0x7fe74425a273 in Runtime1::initialize(BufferBlob*) src/hotspot/share/c1/c1_Runtime1.cpp:268
#7 0x7fe743fc04a1 in Compiler::init_c1_runtime() src/hotspot/share/c1/c1_Compiler.cpp:53
#8 0x7fe743fc04a1 in Compiler::initialize() src/hotspot/share/c1/c1_Compiler.cpp:74
#9 0x7fe7446aaad7 in CompileBroker::init_compiler_runtime() src/hotspot/share/compiler/compileBroker.cpp:1771
#10 0x7fe7446b83cf in CompileBroker::compiler_thread_loop() src/hotspot/share/compiler/compileBroker.cpp:1913
#11 0x7fe74516edca in JavaThread::thread_main_inner() src/hotspot/share/runtime/javaThread.cpp:758
#12 0x7fe7469d3c9a in Thread::call_run() src/hotspot/share/runtime/thread.cpp:225
#13 0x7fe746048cd1 in thread_native_entry src/hotspot/os/linux/os_linux.cpp:858
#14 0x7fe74b1e66e9 in start_thread (/lib64/libpthread.so.0+0xa6e9) (BuildId: 052f7e2a0045f08cb7e7a291f8066a4b7be2521d)
#15 0x7fe74aaf158e in clone (/lib64/libc.so.6+0x11858e) (BuildId: cfb059a57e69ac95d5dadab831626b3bd48a4309)
OS: linux

-----
Title: [JDK-8340210] Add positionTestUI() to PassFailJFrame.Builder
Priority: P4
Type: Enhancement
Component: client-libs
Description: We are seeing more instances of multiple test UI in manual test. This requires positioning of the test UI w.r.t instruction frame. positionTestUI() provides a way to add the positioning implementation using the builder pattern and using the functional interface - PositionWindows.

-----
Title: [JDK-8340214] C2 compilation asserts with "no node with a side effect" in PhaseIdealLoop::try_sink_out_of_loop
Priority: P2
Type: Bug
Component: hotspot
Description: ADDITIONAL SYSTEM INFORMATION :
OpenJDK 64-Bit Server VM (fastdebug 21.0.5+5-Nightly) for linux-amd64
Redhat 8.9
A DESCRIPTION OF THE PROBLEM :
While we were upgrading from java 8 to java 21, we encountered an issue where some of the files that our code writes were corrupted. We traced that to a small method that transfers bytes from an Unsafe based Buffer to java.nioByteBuffer. This was happening right after the method got compiled by C2. We believe that after inlining and loop optimizations, the generated code is incorrect (the update positionAddress instruction was likely moved out of the loop). I think we've confirmed that when we got a crash report by using a fastdebug build of the Java21.
REGRESSION : Last worked in version 8u421
ACTUAL -
# A fatal error has been detected by the Java Runtime Environment:
#
# Internal Error (/home/jenkins/node/workspace/Corretto21/generic_linux/x64/build/Corretto21Src/installers/linux/universal/tar/corretto-build/buildRoot/src/hotspot/share/opto/loopopts.cpp:1643), pid=3104989, tid=3105002
# assert(!n-is_Store() && !n-is_LoadStore()) failed: no node with a side effect
#
# JRE version: OpenJDK Runtime Environment Corretto-21.0.5.5.1 (21.0.5+5) (fastdebug build 21.0.5+5-Nightly)
# Java VM: OpenJDK 64-Bit Server VM Corretto-21.0.5.5.1 (fastdebug 21.0.5+5-Nightly, mixed mode, compressed oops, compressed class ptrs, parallel gc, linux-amd64)
# Problematic frame:
# V [libjvm.so+0x11fb779] PhaseIdealLoop::try_sink_out_of_loop(Node*)+0xc89
#
# Core dump will be written. Default location: Core dumps may be processed with "/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h %e" (or dumping to xxx/core.3104989)
#
# If you would like to submit a bug report, please visit:
# https://github.com/corretto/corretto-21/issues/
#
---------- BEGIN SOURCE ----------
I haven't been able to create a small reproducer that doesn't use any of our internal code yet. The bug is pretty subtle. I am hoping that the hs_err report file could give us more insight into when it happens so that I can make a small executable test case. Is there any easy way to produce this, perhaps using the compiler replay functionality?
---------- END SOURCE ----------
CUSTOMER SUBMITTED WORKAROUND :
Using either -XX:-SplitIfBlocks or -XX:CompileCommand=exclude,methodname
We also rewrote the code in a slightly different way so it no longer happens.
FREQUENCY : always
OS: generic

-----
Title: [JDK-8340230] Tests crash: assert(is_in_encoding_range || k->is_interface() || k->is_abstract()) failed: sanity
Priority: P2
Type: Bug
Component: hotspot
Description: Test compiler/arraycopy/TestObjectArrayClone.java
CompileCommand: compileonly compiler/arraycopy/TestObjectArrayClone.testClone* bool compileonly = true
CompileCommand: compileonly jdk/internal/reflect/GeneratedMethodAccessor*.invoke bool compileonly = true
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/a4a7850a-7c35-410a-b879-d77fbb2f6087-S144935/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/1a4487ac-c1a9-48f2-a0e2-2fb14ee558dc/runs/2bb98958-12aa-4165-b8b3-ef1d44c4a59d/workspace/open/src/hotspot/share/ci/ciKlass.hpp:113), pid=1791476, tid=1791492
#  assert(is_in_encoding_range || k-is_interface() || k-is_abstract()) failed: sanity
#
# JRE version: Java(TM) SE Runtime Environment (24.0+16) (fastdebug build 24-ea+16-1711)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 24-ea+16-1711, mixed mode, compressed oops, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x8b39c4]  Compile::final_graph_reshaping_main_switch(Node*, Final_Reshape_Counts&, unsigned int, Unique_Node_List&)+0x22b4
---------------  T H R E A D  ---------------
Current thread (0x0000ffffa42a0da0):  JavaThread "C2 CompilerThread0" daemon [_thread_in_native, id=1791492, stack(0x0000ffff88aa8000,0x0000ffff88ca6000) (2040K)]
Current CompileTask:
C2:5081   29             compiler.arraycopy.TestObjectArrayClone::testCloneShortObjectArray (47 bytes)
Stack: [0x0000ffff88aa8000,0x0000ffff88ca6000],  sp=0x0000ffff88ca07c0,  free space=2017k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x8b39c4]  Compile::final_graph_reshaping_main_switch(Node*, Final_Reshape_Counts&, unsigned int, Unique_Node_List&)+0x22b4  (ciKlass.hpp:113)
V  [libjvm.so+0x8b4140]  Compile::final_graph_reshaping_impl(Node*, Final_Reshape_Counts&, Unique_Node_List&) [clone .part.0]+0x160  (compile.cpp:3155)
V  [libjvm.so+0x8b49e8]  Compile::final_graph_reshaping_walk(Node_Stack&, Node*, Final_Reshape_Counts&, Unique_Node_List&)+0x148  (compile.cpp:3104)
V  [libjvm.so+0x8bfd08]  Compile::final_graph_reshaping()+0x4b8  (compile.cpp:4012)
V  [libjvm.so+0x8c1444]  Compile::Optimize()+0xb04  (compile.cpp:2486)
V  [libjvm.so+0x8c4150]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x14b0  (compile.cpp:852)
V  [libjvm.so+0x7187b0]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x17c  (c2compiler.cpp:142)
V  [libjvm.so+0x8cff94]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x864  (compileBroker.cpp:2303)
V  [libjvm.so+0x8d0b44]  CompileBroker::compiler_thread_loop()+0x514  (compileBroker.cpp:1961)
V  [libjvm.so+0xd2ed70]  JavaThread::thread_main_inner()+0xcc  (javaThread.cpp:758)
V  [libjvm.so+0x15a9500]  Thread::call_run()+0xac  (thread.cpp:225)
V  [libjvm.so+0x12fc9f4]  thread_native_entry(Thread*)+0x130  (os_linux.cpp:858)
C  [libc.so.6+0x806b8]  start_thread+0x2d8

-----
Title: [JDK-8340306] Add border around instructions in PassFailJFrame
Priority: P4
Type: Enhancement
Component: client-libs
Description: Adding a border around instructions in PassFailJFrame makes them easier to read.

-----
Title: [JDK-8340308] PassFailJFrame: Make rows default to number of lines in instructions
Priority: P4
Type: Enhancement
Component: client-libs
Description: It has become quite common to use the following code
.rows((int) INSTRUCTIONS.lines().count() + 1)
to set the number of rows for PassFailJFrame.
This can be made the default.
Examples of the files where the above is used:
test/jdk/java/awt/print/PageFormat/Orient.java
test/jdk/java/awt/print/PageFormat/SetOrient.java
test/jdk/java/awt/print/PrinterJob/Cancel/PrinterJobCancel.java

-----
Title: [JDK-8340365] Position the first window of a window list
Priority: P4
Type: Bug
Component: client-libs
Description: Support of multiple test UI windows in PassFailJFrame is still evolving. After JDK-8340210, the Builder has a method `positionTestUI` to supply an implementation of PositionWindows interface which should handle the positioning of all test UI windows created.
If PositionWindows is not provided, all the test UI windows are left with the default coordinates: 0, 0.
If PassFailJFrame called positionTestWindow for the first window, it would allow the test developer to position other windows based on the position of the first one.
See https://github.com/openjdk/jdk/pull/21029#discussion_r1763744407

-----
Title: [JDK-8340383] VM issues warning failure to find kernel32.dll on Windows nanoserver
Priority: P3
Type: Bug
Component: hotspot
Description: When trying to run jdk-23+37 on Windows nanoserver container, the VM
initilization throws up the warning:
OpenJDK 64-Bit Server VM warning: Failed to determine whether the OS can retrieve version information from kernel32.dll: The system cannot find the file specified
To recreate, start a Windows nanoserver:
docker run -it mcr.microsoft.com/windows/nanoserver:ltsc2022 cmd.exe
# download jdk-23+37...
java -version
I am unclear of the consequences of this warning, or usability of the VM??
I suspect this is because on Windows nanoserver kernel32.dll is not within the
System32 directory itself but within the "forwarders" sub-folder.
Thus this logic probably needs fixing: https://github.com/openjdk/jdk/blob/08a2f841ec78a10f8d6d54b2ac3a92e89f765f14/src/hotspot/os/windows/os_windows.cpp#L4101
OS: windows

-----
Title: [JDK-8340387] Update OS detection code to recognize Windows Server 2025
Priority: P3
Type: Bug
Component: hotspot
Description: Windows Server 2025 will be released in a few months.
The OS detection code of the JVM/JDK should recognize the new Windows server 2025 version.
(currently  Windows server 2022  is printed, that is wrong)
The build numbers of some recent previews documented here
https://learn.microsoft.com/en-us/windows-server/get-started/whats-new-windows-server-2025
are 26080 and 26085 .
The final release version of Windows Server 2025 from Nov 1st, 2025 has an official build number 26100 .
OS: windows

-----
Title: [JDK-8340398] [JVMCI] Unintuitive behavior of UseJVMCICompiler option
Priority: P4
Type: Bug
Component: hotspot
Description: Disabling the JVMCI compiler with `-XX:-UseJVMCICompiler` not only deactivates JVMCI-based CompileBroker compilations but also prevents the loading of the libjvmci compiler. While this works as expected for CompileBroker compilations, it poses issues for the Truffle compiler. When `-XX:-UseJVMCICompiler` is used, Truffle falls back to the jargraal compiler, if available. This behavior may be confusing for Truffle users.
Expected behavior:
With `-XX:+UseGraalJIT`, both CompileBroker compilations and Truffle compilations should utilize the libjvmci compiler, if available.
With `-XX:+EnableJVMCI`, CompileBroker compilations should use the C2 compiler, while only Truffle compilations should leverage the libjvmci compiler, if available.
OS: generic

-----
Title: [JDK-8340418] GHA: MacOS AArch64 bundles can be removed prematurely
Priority: P4
Type: Enhancement
Component: infrastructure
Description: remove-bundles step does not depend on test-macos-aarch64, which means it can run before macos-aarch64 tests start to run, which would fail those steps. This is not frequent, but will happen if macos-aarch64 runners are lagging behind to pick up the jobs.

-----
Title: [JDK-8340461] Amend description for logArea
Priority: P4
Type: Sub-task
Component: client-libs
Description: When generating javadoc for PassFailJFrame, there's an error reported:
PassFailJFrame.java:161: error: text not allowed in  element
*     to add a log area,
The comma has to be inside  elements.
Description of the methods looks overly verbose:
Clears the log area, if enabled by PassFailJFrame.Builder.logArea() or PassFailJFrame.Builder.logArea(int).

-----
Title: [JDK-8340466] Add description for PassFailJFrame constructors
Priority: P4
Type: Sub-task
Component: client-libs
Description: Write missing descriptions for PassFailJFrame constructors.
Perhaps, deprecate the constructors in favour of Builder?

-----
Title: [JDK-8340552] Harden TzdbZoneRulesCompiler against missing zone names
Priority: P5
Type: Bug
Component: infrastructure
Description: If zone names are missing, negative results from the binarySearch() call are written to the output file. This results in an ArrayIndexOutOfBoundsException during loading.
OS: generic

-----
Title: [JDK-8340590] RISC-V: C2: Small improvement to vector gather load and scatter store
Priority: P4
Type: Enhancement
Component: hotspot
Description: This is a small improvement for RISC-V C2 vector gather load and scattter store nodes. There is no need to emit whole vector register move for this nodes. Instead normal vmv.v.v would do here and is more reasonable (moving vector idx to a temp vector register).
OS: generic

-----
Title: [JDK-8340632] ProblemList java/nio/channels/DatagramChannel/ for Macos
Priority: P4
Type: Sub-task
Component: core-libs
Description: ProblemList open/test/jdk/java/nio/channels/DatagramChannel/ for Macos-aarch64 and macos-x64
we are problemlisting this 6 tests
java/nio/channels/DatagramChannel/Promiscuous.java
java/nio/channels/DatagramChannel/MulticastSendReceiveTests.java
java/nio/channels/DatagramChannel/BasicMulticastTests.java
java/nio/channels/DatagramChannel/AdaptorMulticasting.java
java/net/DatagramSocket/DatagramSocketMulticasting.java
java/net/DatagramSocket/DatagramSocketExample.java
----------System.out:(4/90)----------
Test family=INET
dc1 joining [225.4.5.6]:61479 @ en0
dc2 joining [225.4.6.6]:61479 @ en0
----------System.err:(17/1013)----------
java.net.SocketException: Exec format error
at java.base/sun.nio.ch.Net.joinOrDrop4(Native Method)
at java.base/sun.nio.ch.Net.join4(Net.java:543)
at java.base/sun.nio.ch.DatagramChannelImpl.innerJoin(DatagramChannelImpl.java:1002)
at java.base/sun.nio.ch.DatagramChannelImpl.join(DatagramChannelImpl.java:1020)
at Promiscuous.test(Promiscuous.java:176)
at Promiscuous.main(Promiscuous.java:223)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.Thread.run(Thread.java:834)
JavaTest Message: Test threw exception: java.net.SocketException
JavaTest Message: shutting down test
result: Failed. Execution failed: `main' threw exception: java.net.SocketException: Exec format error
test result: Failed. Execution failed: `main' threw exception: java.net.SocketException: Exec format error
OS: os_x

-----
Title: [JDK-8340657] [PPC64] SA determines wrong unextendedSP
Priority: P4
Type: Bug
Component: hotspot
Description: adjustUnextendedSP() determines a wrong value for raw_unextendedSP. It uses the FP which basically pops the frame, so we end up in the wrong frame.
This causes errors like JDK-8339772.

-----
Title: [JDK-8340684] Reading from an input stream backed by a closed ZipFile has no test coverage
Priority: P4
Type: Enhancement
Component: core-libs
Description: While behavior when reading from an input stream backed by a closed ZipFile is not specified, the long standing behavior is to throw an exception.
OpenJDK currently has no test coverage for this behavior, so a test should be added for this.

-----
Title: [JDK-8340785] Update description of PassFailJFrame and samples
Priority: P4
Type: Sub-task
Component: client-libs
Description: Expand the description of PassFailJFrame, add sections, and update samples.
Provide more detailed description of the PassFailJFrame features, reference Builder methods to configure the framework.
The samples should use method references. Mark SampleOldManualTest as obsolete.

-----
Title: [JDK-8340799] Add border inside instruction frame in PassFailJFrame
Priority: P4
Type: Enhancement
Component: client-libs
Description: The instruction frame in PassFailJFrame looks very tight without any white-space separating components from the frame edge and each other.
This is especially noticeable with split UI where the border of JSplitPane clashes with the border of JScrollPane that hosts a text component with instructions.

-----
Title: [JDK-8340801] Disable ubsan checks in some awt/2d coding
Priority: P4
Type: Bug
Component: client-libs
Description: There is some old awt/2d coding where warnings occur when running with ubsan enabled binaries.
However at most of these locations the coding should work (at least on our supported platform set) so the warnings can be disabled at least for now.
OS: generic

-----
Title: [JDK-8340804] doc/building.md update Xcode instructions to note that full install is required
Priority: P4
Type: Bug
Component: infrastructure
Description: Since JDK17 there has been a dependency on metal in the macOS builds which is only available as part of the full Xcode IDE (rather than command-line tools). We currently recommend only installing the command-line tools in the building.md doc which is incorrect.
OS: os_x

-----
Title: [JDK-8340812] LambdaForm customization via MethodHandle::updateForm is not thread safe
Priority: P2
Type: Bug
Component: core-libs
Description: This issue originally manifested as intermittent NPEs in invokeBasic with an Oracle internal test:
Stack: [0x0000ffff37606000,0x0000ffff37804000], sp=0x0000ffff37802330, free space=2032k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V [libjvm.so+0x677c28] Exceptions::debug_check_abort(char const*, char const*)+0xc8 (exceptions.cpp:569)
V [libjvm.so+0x677e80] Exceptions::debug_check_abort_helper(Handle, char const*)+0x9c (exceptions.cpp:591)
V [libjvm.so+0x678310] Exceptions::_throw(JavaThread*, char const*, int, Handle, char const*)+0xb0 (exceptions.cpp:579)
V [libjvm.so+0xc42d04] SharedRuntime::throw_NullPointerException_at_call(JavaThread*)+0x44 (sharedRuntime.cpp:853)
v ~RuntimeStub::NullPointerException at call throw_exception 0x0000ffff90096eb4
J 112 c2 MemAccessStressModule.test(Ljava/lang/invoke/VarHandle;Ljava/lang/Object;I)V (23 bytes) @ 0x0000ffff901164c8 [0x0000ffff90116400+0x00000000000000c8]
J 1098 c2 java.lang.Thread.run()V java.base@24-ea (23 bytes) @ 0x0000ffff90258514 [0x0000ffff90258440+0x00000000000000d4]
v ~StubRoutines::call_stub 0x0000ffff9005a114
0x0000ffff901164a4: ; implicit exception: dispatches to 0x0000ffff90116fb0
0x0000ffff901164a4: 4b1d 40b9 | 8b07 0034 | f403 00f9 | ec0b 00f9 | 64fe 40d3 | e20f 40a9 | e10b 40f9 | e503 04aa
0x0000ffff901164c4: ; ImmutableOopMap {[0]=Oop [8]=Oop }
;*invokevirtual invokeBasic {reexecute=0 rethrow=0 return_oop=0}
; - java.lang.invoke.LambdaForm$VH/0x0000000201006000::invoke_MT@34
; - MemAccessStressModule::test@8 (line 18)
; {optimized virtual_call}
0x0000ffff901164c4: 6fb9 ff97
0x0000ffff901164c8: ; {post_call_nop}
0x0000ffff901164c8: 1f20 03d5 | 1f68 80f2 | 1f00 80f2 | f403 40f9
Event: 14.595 Thread 0x0000ffff3c238600 NullPointerException in MH adapter 0x0000ffff90104a8c
Event: 14.595 Thread 0x0000ffff3c1cd5d0 NullPointerException in MH adapter 0x0000ffff90104a8c
Event: 14.595 Thread 0x0000ffff3c21efd0 NullPointerException in MH adapter 0x0000ffff90104a8c
I'm starting to suspect that the VarHandle implementation is not thread safe on AArch64 and as a result some internal data structure is not completely initialized. -XX:+VerifyMethodHandles does not reveal anything though.
I disabled the exception handler in SharedRuntime::continuation_for_implicit_exception to enforce an early crash and as expected we SIGSEGV here:
Stack: [0x0000ffff34ec0000,0x0000ffff350be000], sp=0x0000ffff350bc2f0, free space=2032k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
J 54 java.lang.invoke.MethodHandle.invokeBasic(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V java.base@24-internal (0 bytes) @ 0x0000ffffa0bbb88c [0x0000ffffa0bbb880+0x000000000000000c]
siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x0000000000000024
0x0000000000000000: 1F 20 03 D5 nop
0x0000000000000004: 2C 14 40 B9 ldr w12, [x1, #0x14]
0x0000000000000008: 8C 29 40 B9 ldr w12, [x12, #0x28]
0x000000000000000c: 8C 25 40 B9 ldr w12, [x12, #0x24]  a 'java/lang/invoke/MemberName'{0x00000000a5323fd0} = {method} {0x0000ffff70905f18} 'invoke' '(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V' in 'java/lang/invoke/LambdaForm$MH+0x0000ffff70906068' (0x8760f900)
- private 'asTypeCache' 'Ljava/lang/invoke/MethodHandle;' @24 null (0x00000000)
- private 'asTypeSoftCache' 'Ljava/lang/ref/SoftReference;' @28 null (0x00000000)
- final 'argL0' 'Ljava/lang/Object;' @32 a 'java/lang/invoke/DirectMethodHandle'{0x000000008768f698} (0x8768f698)
- final 'argL1' 'Ljava/lang/Object;' @36 a 'java/lang/invoke/BoundMethodHandle$Species_LL'{0x000000008768f6c0} (0x8768f6c0)
R12=0x0 is null
So we read the 'form' field from a 'BoundMethodHandle$Species_LL' and then another field from that 'LambdaForm' object at offset 0x28 which is unexpectedly null.
This is code from MethodHandles::jump_to_lambda_form and the second read is from the java_lang_invoke_LambdaForm::vmentry_offset(). I verified this by adding a null check and it triggers.
For some reason LambdaForm::vmentry is null. Maybe a race condition during initialization due to the weak memory model on AArch64.
The vmentry field is not null anymore at the time the hs_err file is generated:
"a 'java/lang/invoke/MemberName'{0x00000000a5323fd0} = {method} {0x0000ffff70905f18} 'invoke' "
Which suggests that this is indeed a race condition.
After digging around in the MethodHandle implementation, I found this suspicious code in MethodHandle::updateForm:
newForm.prepare(); // as in MethodHandle.
UNSAFE.putReference(this, FORM_OFFSET, newForm);
UNSAFE.fullFence();
https://github.com/openjdk/jdk/blob/36314a90c15e2ab2a9b32c2e471655c1b07d452c/src/java.base/share/classes/java/lang/invoke/MethodHandle.java#L1883
The LambdaForm 'newForm' can have 'vmentry`set to null and the field is then set in 'newForm.prepare()'. The LambdaForm is then published by the 'UNSAFE.putReference' store but there is nothing that prevents another thread from observing a not fully initialized object. I.e., another thread can observe 'vmentry == null'. Maybe the 'UNSAFE.fullFence()' was supposed to fix this but then it's at the wrong place. A 'UNSAFE.storeStoreFence()' before publishing should be sufficient. Running more tests to confirm.

-----
Title: [JDK-8340815] Add SECURITY.md file
Priority: P4
Type: Enhancement
Component: infrastructure
Description: Currently the security tab on the GitHub repos is empty with no clear information or links on where to report security vulnerabilities.

-----
Title: [JDK-8340899] Remove wildcard bound in PositionWindows.positionTestWindows
Priority: P3
Type: Bug
Component: client-libs
Description: Currently, PassFailJFrame.PositionWindows.positionTestWindows declares its testWindows parameter with the type of List which was introduced in JDK-8294156 and later made available in JDK-8340210.
Internally, the window list is a simple List.
The wildcard is useful for the return type of the createTestUI method in WindowListCreator so that the code in a test could use List instead of List as well as pass Frame or JFrame.
By the time, PositionWindows.positionTestWindows comes into play, List is enough.
The type of PositionWindows.positionTestWindows can be changed to List.
It is a backwards compatible change, any test which declared its method for positionTestWindows with List continues to compile successfully.
Yet the opposite is not true: List isn't compatible with the current List.

-----
Title: [JDK-8340923] The class LogSelection copies uninitialized memory
Priority: P4
Type: Bug
Component: hotspot
Description: The class LogSelection's custom constructor does not initialize the whole _tags array but is lacking a custom copy constructor and assignment operator. This means that any copy will technically copy uninitialized memory, which is technically undefined behavior.
We fill the whole array to avoid this issue.

-----
Title: [JDK-8341024] [test] build/AbsPathsInImage.java fails with OOM when using ubsan-enabled binaries
Priority: P4
Type: Bug
Component: infrastructure
Description: The jtreg test build/AbsPathsInImage.java fails with OOM when using ubsan-enabled binaries.
Reason seems to be that the ubsan-enabled binaries are much larger than normal product binaries.
(for debug binaries the test is already disabled)
Error is :
java.lang.OutOfMemoryError: Java heap space
at java.base/java.nio.file.Files.read(Files.java:3242)
at java.base/java.nio.file.Files.readAllBytes(Files.java:3299)
at AbsPathsInImage.scanFile(AbsPathsInImage.java:181)
at AbsPathsInImage$1.visitFile(AbsPathsInImage.java:173)
at AbsPathsInImage$1.visitFile(AbsPathsInImage.java:153)
at java.base/java.nio.file.Files.walkFileTree(Files.java:2810)
at java.base/java.nio.file.Files.walkFileTree(Files.java:2881)
at AbsPathsInImage.scanFiles(AbsPathsInImage.java:153)
at AbsPathsInImage.main(AbsPathsInImage.java:119)
at java.base/java.lang.invoke.LambdaForm$DMH/0x00007fb6087003a8.invokeStatic(LambdaForm$DMH)
at java.base/java.lang.invoke.LambdaForm$MH/0x00007fb608a2f3d8.invoke(LambdaForm$MH)
at java.base/java.lang.invoke.Invokers$Holder.invokeExact_MT(Invokers$Holder)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invokeImpl(DirectMethodHandleAccessor.java:154)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:573)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.Thread.runWith(Thread.java:1589)
at java.base/java.lang.Thread.run(Thread.java:1576)
We could disable the test for ubsanized binaries, or add higher Xmx settings to the test.
OS: linux

-----
Title: [JDK-8341146] RISC-V: Unnecessary fences used for load-acquire in template interpreter
Priority: P4
Type: Enhancement
Component: hotspot
Description: RISC-V does not currently have plain load and store opcodes with aq or rl annotations, load-acquire and
store-release operations are implemented using fences instead. Initially, we followed the RISC-V spec
and placed FENCE RW,RW fence in front of load-acquire operation when porting the template interpreter.
The purpose is to enforce a store-release-to-load-acquire ordering (where there must be a FENCE RW,RW
between the store-release and load-acquire). But it turns out these fences are unnecessary for our use
cases in the template interpreter. In fact, we only need to do a single FENCE R,RW after a normal memory
load in order to implement a load-acquire operation. We should remove those unnecessary fences for both
performance reasons and for consistency with the rest of the port (i.e., C1 and C2 JIT).
OS: linux

-----
Title: [JDK-8341235] Improve default instruction frame title in PassFailJFrame
Priority: P4
Type: Enhancement
Component: client-libs
Description: The default title for the instruction frame is "Test Instruction Frame".
Most tests change this default to "Test Instructions" which describes the content and purpose of the frame better.
At the same time, jtreg has a property which describes the test name. Thus, the title could be more specific: " - Test Instructions".

-----
Title: [JDK-8341261] Tests assume UnlockExperimentalVMOptions is disabled by default
Priority: P4
Type: Enhancement
Component: hotspot
Description: My organization is testing a bespoke JDK distribution that includes `libgraal` and GraalJS, which require experimental launch flags to enable. To make this easy for customers to pick up, we have overridden the defaults to set `+UnlockExperimentalVMOptions`, `+EnableJVMCI`, and `+UseJVMCINativeLibrary`. The JDK then "just works" for them by swapping in the custom JDK, without any changes to the code launching their system. On the whole, this is working great.
However, this configuration breaks several jtreg test cases that make assumptions about the default options. It seems reasonable that these assumptions be declared in `@require`, but not all of the right properties are avaliable.
In the draft PR https://github.com/openjdk/jdk/pull/21233 I add a jtreg `@require` property to surface the value of `UnlockExperimentalVMOptions`  and update two tests that assume the flag is false. This makes these tests resilient to changes to the default state of that flag. (I have one or two similar changes in the works for assumptions about the other flags.)
Before taking that PR out of draft, its worth ensuring alignment on the overall approach. My perspective is that centrally encoding such assumptions into the tests is more robust than maintaining problem lists within each distro that diverges from the defaults.

-----
Title: [JDK-8341562] RISC-V: Generate comments in -XX:+PrintInterpreter to link to source code
Priority: P4
Type: Enhancement
Component: hotspot
Description: The command "java -XX:+UnlockDiagnosticVMOptions -XX:+PrintInterpreter" can be used to print a disassembly of the HotSpot interpreter.
In JDK-8204267, the interpreter generate comments to link the instructions back to the C++ source code that generates them, but the releated PR only support x86 backend, I think it's doable on RISC-V either.
OS: generic

-----
Title: [JDK-8341688] Aarch64: Generate comments in -XX:+PrintInterpreter to link to source code
Priority: P4
Type: Enhancement
Component: hotspot
Description: The command "java -XX:+UnlockDiagnosticVMOptions -XX:+PrintInterpreter" can be used to print a disassembly of the HotSpot interpreter.
In JDK-8204267, the interpreter generate comments to link the instructions back to the C++ source code that generates them, but the releated PR only support x86 backend, I think it's doable on aarch64 either.
OS: linux

-----
Title: [JDK-8341722] Fix some warnings as errors when building on Linux with toolchain clang
Priority: P4
Type: Bug
Component: hotspot
Description: There are a few warnings as errors occurring when building on Linux with clang (clang15).  Mostly these are some kind of "unused" warnings.
Examples :
src/jdk.hotspot.agent/linux/native/libsaproc/LinuxDebuggerLocal.cpp:423:7: error: unused variable 'i' [-Werror,-Wunused-variable]
int i;
jdk/src/jdk.hotspot.agent/linux/native/libsaproc/symtab.c:359:11: error: variable 'rslt' set but not used [-Werror,-Wunused-but-set-variable]
int rslt;
jdk/src/jdk.jpackage/share/native/common/Log.cpp:46:28: error: unused variable 'defaultLogLevel' [-Werror,-Wunused-const-variable]
const Logger::LogLevel defaultLogLevel = Logger::LOG_TRACE;
OS: linux

-----
Title: [JDK-8341806] Gcc version detection failure on Alinux3
Priority: P4
Type: Bug
Component: infrastructure
Description: Auto detection gcc version result:
* Toolchain:      gcc (GNU Compiler Collection)
* C Compiler:     Version 2.32 (at /usr/bin/gcc)
* C++ Compiler:   Version 2.32 (at /usr/bin/g++)
The following warnings were produced. Repeated here for convenience:
WARNING: You are using gcc 2.32 which is older than 10.0. This is not a supported configuration.
configure command:
bash configure --with-jobs=128 --prefix=/home/yansendao/git/jdk/install-slowdebug --verbose --with-debug-level=slowdebug --enable-unlimited-crypto --with-vendor-name=yansendao --with-vendor-url=https://github.com/sendaoYan --with-vendor-bug-url=mailto:yansendao.ysd@alibaba-inc.com --with-vendor-vm-bug-url=mailto:yansendao.ysd@alibaba-inc.com --with-jvm-variants=server --with-boot-jdk=/home/yansendao/software/jdk/openjdk/jdk-binary --with-gtest=/home/yansendao/git/googletest-v1.14.x --with-jtreg=/home/yansendao/software/jdk/jtreg-7.4 --with-jmh=build/jmh/jars    --with-version-pre='' --with-version-opt=7a1e832e --with-zlib=system --enable-ccache
gcc version:
gcc -v
Using built-in specs.
COLLECT_GCC=gcc
COLLECT_LTO_WRAPPER=/usr/libexec/gcc/x86_64-redhat-linux/10/lto-wrapper
Target: x86_64-redhat-linux
Configured with: ../configure --enable-bootstrap --enable-languages=c,c++,fortran,lto --prefix=/usr --mandir=/usr/share/man --infodir=/usr/share/info --with-bugurl=http://bugzilla.redhat.com/bugzilla --enable-shared --enable-threads=posix --enable-checking=release --disable-multilib --with-system-zlib --enable-__cxa_atexit --disable-libunwind-exceptions --enable-gnu-unique-object --enable-linker-build-id --with-gcc-major-version-only --with-linker-hash-style=gnu --enable-plugin --enable-initfini-array --with-isl --enable-gnu-indirect-function --enable-cet --with-tune=generic --with-arch_32=x86-64 --build=x86_64-redhat-linux
Thread model: posix
Supported LTO compression algorithms: zlib zstd
gcc version 10.2.1 20200825 (Alibaba 10.2.1-3.8 2.32) (GCC)
gcc --version
gcc (GCC) 10.2.1 20200825 (Alibaba 10.2.1-3.8 2.32)
Copyright (C) 2020 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
OS: linux

-----
Title: [JDK-8341927] Replace hardcoded security providers with new test.provider.name system property
Priority: P2
Type: Enhancement
Component: security-libs
Description: Few tests hardcode "SunJCE" provider name restricting test execution to only SunJCE. This task is filed to utilize test.provider.name property to read provider to test against and default to "SunJCE" if none specified.
For instance -
-        Cipher c = Cipher.getInstance("AES/GCM/NoPadding", "SunJCE");
+        Cipher c = Cipher.getInstance("AES/GCM/NoPadding", System.getProperty("test.provider.name", "SunJCE"));

-----
Title: [JDK-8341997] Tests create files in src tree instead of scratch dir
Priority: P2
Type: Bug
Component: core-libs
Description: There are a handful of nio/io tests that create temporary files in the source tree instead of using the provided jtreg scratch dir. This prevents these tests from running successfully when the src tree is read-only.
This is the list of tests found in current tier2:
java/nio/MappedByteBuffer/ForceViews.java
java/nio/MappedByteBuffer/ForceException.java
java/io/FileInputStream/ReadXBytes.java

-----
Title: [JDK-8342014] RISC-V: ZStoreBarrierStubC2 clobbers rflags
Priority: P4
Type: Bug
Component: hotspot
Description: ZStoreBarrierStubC2 (ZBarriersetAssembler::generate_c2_store_barrier_stub) clobbers rflags (the t1 register) on riscv [1].
And ZStoreBarrierStubC2 is used by z_store_barrier in file gc/z/z_riscv.ad. But the calling instructs in the same ad file
didn't list the rflags as being killed. As the call chain is not simple, this kind of problem could go silently unnoticed.
I would suggest we add clobbering of rflags for all gc-related C2 instructs. This would help reduce the risk of another
PR: https://github.com/openjdk/jdk/pull/21406 which touches g1/x/z prefering t1 for performance reasons.
[1] https://github.com/openjdk/jdk/blob/master/src/hotspot/cpu/riscv/gc/z/zBarrierSetAssembler_riscv.cpp#L746
OS: linux

-----
Title: [JDK-8342063] [21u][aix] Backport introduced redundant line in ProblemList
Priority: P4
Type: Bug
Component: core-libs
Description: Bakcport of  https://bugs.openjdk.org/browse/JDK-8316387: Exclude more failing multicast tests on AIX after JDK-8315651 introduced a second line for java/nio/channels/DatagramChannel/AfterDisconnect.java. Remove.

-----
Title: [JDK-8342181] Update tests to use stronger Key and Salt size
Priority: P2
Type: Sub-task
Component: security-libs
Description: Some tests are identified to use weak key sizes and salt in the tests. If the test purpose is not to test with weak keys then these tests should be updated to use stronger key. If the key cannot be updated unless the algorithm is also updated, do not change.

-----
Title: [JDK-8342183] Update tests to use stronger algorithms and keys
Priority: P2
Type: Sub-task
Component: security-libs
Description: Some tests are identified to use weak/legacy algorithms in the tests. If the test purpose is not to test with weak algorithms then these tests should be updated to use stronger algorithms. If the test uses a weak key, update as well.

-----
Title: [JDK-8342188] Update tests to use stronger key parameters and certificates
Priority: P2
Type: Sub-task
Component: security-libs
Description: Some tests are identified to use weak key parameters in the tests (prime modulus, private/public values), tests:
open/test/jdk/com/sun/crypto/provider/Cipher/RSA/TestRSA.java
open/test/jdk/com/sun/crypto/provider/KeyAgreement/DHGenSharedSecret.java
open/test/jdk/com/sun/crypto/provider/KeyAgreement/DHKeyAgreement2.java
open/test/jdk/com/sun/crypto/provider/KeyAgreement/DHKeyAgreement3.java
open/test/jdk/com/sun/crypto/provider/KeyAgreement/DHKeyFactory.java
open/test/jdk/com/sun/crypto/provider/KeyAgreement/DHKeyGenSpeed.java
open/test/jdk/sun/security/pkcs11/KeyAgreement/TestInterop.java
open/test/jdk/com/sun/crypto/provider/TLS/TestLeadingZeroes.java
open/test/jdk/java/security/KeyRep/Serial.java
Also, some tests certificates were generated using weak keys/algorithms, tests:
open/test/jdk/sun/security/ssl/X509TrustManagerImpl/PKIXExtendedTM.java
open/test/jdk/sun/security/ssl/X509TrustManagerImpl/SunX509ExtendedTM.java
open/test/jdk/sun/security/x509/X509CRLImpl/Verify.java
open/test/jdk/sun/security/x509/X509CertImpl/Verify.java

-----
Title: [JDK-8342409] [s390x] C1 unwind_handler fails to unlock synchronized methods with LM_MONITOR
Priority: P4
Type: Bug
Component: hotspot
Description: LIR_Assembler::emit_unwind_handler() calls C1_MacroAssembler::unlock_object() to unlock synchronized methods but there LM_MONITOR is not handled.
OS: linux

-----
Title: [JDK-8342496] C2/Shenandoah: SEGV in compiled code when running jcstress
Priority: P3
Type: Bug
Component: hotspot
Description: $ JAVA_TOOL_OPTIONS="-XX:+UnlockDiagnosticVMOptions -XX:+UnlockExperimentalVMOptions -XX:+UseShenandoahGC -XX:StressSeed=2039903058" java -jar ./jcstress.jar -c 2 -t org.openjdk.jcstress.tests.copy.manual.objects.plain.StringTest
...
VM output stream:
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fa668d00ab0, pid=3266827, tid=3267280
#
# JRE version: OpenJDK Runtime Environment (17.0.14) (build 17.0.14-internal+0-adhoc.roland.jdk17u-dev)
# Java VM: OpenJDK 64-Bit Server VM (17.0.14-internal+0-adhoc.roland.jdk17u-dev, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, shenandoah gc, linux-amd64)
# Problematic frame:
# J 385 c2 org.openjdk.jcstress.tests.copy.manual.objects.plain.StringTest_jcstress$JcstressThread_ResourceCheck_actor2.jcstress_check_actor2([Lorg/openjdk/jcstress/tests/copy/manual/objects/plain/StringTest;[Lorg/openjdk/jcstress/infra/results/L_Result;I)V (27 bytes) \
@ 0x00007fa668d00ab0 [0x00007fa668d009a0+0x0000000000000110]
We've only seen this with jdk 17 but I wrote a test case and could reproduce it with jdk 24.

-----
Title: [JDK-8342578] GHA: RISC-V: Bootstrap using Debian snapshot is still failing
Priority: P4
Type: Bug
Component: infrastructure
Description: In JDK-8339548, we switched to use Debian snapshot (https://snapshot.debian.org/archive/debian/20240228T034848Z/) for bootstrap.
The reason is that we don't have a stable Debian release for RISC-V yet. And Debian "sid" (https://httpredir.debian.org/debian)
that we use for debootstrapping RISC-V breaks at that time. This works as expected for about one month. But bad news is that GHA
linux-cross-build job for RISC-V starts to fail again this week. Sigh! I guess there might be some change on the distro running
on GHA test machines as same debootstrap command still works on my Ubuntu 22.04.
Good news is that that Debian "sid" can now bootstrap for RISC-V. So one way would be simply switches back to Debian "sid". As the version
of dpkg command on GHA machines is old (1.21.1), we will need one extra option --no-merged-usr for bootstrap command to work.
This is not necessary for newer dpkg versions like 1.22.6.

-----
Title: [JDK-8342607] Enhance register printing on x86_64 platforms
Priority: P4
Type: Enhancement
Component: hotspot
Description: os::print_context prints some registers like RAX.
We could add more registers like XMM0, ..., XMM15 that play a role in the JVM too, maybe also MXCSR.
OS: generic

-----
Title: [JDK-8342669] [21u] Fix TestArrayAllocatorMallocLimit after backport of JDK-8315097
Priority: P4
Type: Bug
Component: hotspot
Description: I had to extend the changes of 8315097 to this file that was removed in head before the original 8315097 was applied. I got one call wrong.
See also https://github.com/openjdk/jdk21u-dev/commit/1f38afa6c6fa7949c5d7171b817f1d7883987cf4#diff-21d07968b5ddcf0fc75f2b6b8c9e05935fe19a819397c6a17a9f4798a0007b85

-----
Title: [JDK-8315097] Rename createJavaProcessBuilder
Priority: P4
Type: Sub-task
Component: hotspot
Description: Rename createJavaProcessBuilder so that it is not used by mistake instead of createTestJvm

-----
Title: [JDK-8342681] TestLoadBypassesNullCheck.java fails improperly specified VM option
Priority: P3
Type: Bug
Component: hotspot
Description: Newly added test gc/shenandoah/compiler/TestLoadBypassesNullCheck.java fails, the test log snippet:
Error: VM option 'StressGCM' is diagnostic and must be enabled via -XX:+UnlockDiagnosticVMOptions.
Error: The unlock option must precede 'StressGCM'.
Improperly specified VM option 'StressGCM'
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.
OS: generic

-----
Title: [JDK-8342701] [PPC64] TestOSRLotsOfLocals.java crashes
Priority: P3
Type: Bug
Component: hotspot
Description: PPC64 is affected by the same issue as aarch64 (JDK-8335662).
The new test runs into
assert(nbits == 32 || (-(1

-----
Title: [JDK-8342765] [21u] RTM tests assume UnlockExperimentalVMOptions is disabled by default
Priority: P4
Type: Enhancement
Component: hotspot
Description: Distros with Graal integration will have `UnlockExperimentalVMOptions` enabled, causing several RTM tests to fail:
compiler/rtm/cli/TestRTMAbortThresholdOption.java
compiler/rtm/cli/TestRTMLockingCalculationDelayOption.java
compiler/rtm/cli/TestRTMLockingThresholdOption.java
compiler/rtm/cli/TestRTMSpinLoopCountOption.java
compiler/rtm/cli/TestUseRTMForStackLocksOptionOnUnsupportedConfig.java
compiler/rtm/cli/TestUseRTMXendForLockBusyOption.java
Note that this directory of tests was removed by https://bugs.openjdk.org/browse/JDK-8329141 as part of JDK24.

-----
Title: [JDK-8342823] Ubsan: ciEnv.cpp:1614:65: runtime error: member call on null pointer of type 'struct CompileTask'
Priority: P4
Type: Bug
Component: hotspot
Description: When running with ubsanized binaries on Linux x86_64,
test compiler/startup/StartupOutput.java
shows this issue
jdk/src/hotspot/share/ci/ciEnv.cpp:1614:65: runtime error: member call on null pointer of type 'struct CompileTask'
#0 0x7fcea0810117 in ciEnv::dump_replay_data_helper(outputStream*) src/hotspot/share/ci/ciEnv.cpp:1614
#1 0x7fcea3123577 in VMError::report_and_die(int, char const*, char const*, __va_list_tag*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long) src/hotspot/share/utilities/vmError.cpp:1872
#2 0x7fcea0c01499 in report_fatal(VMErrorType, char const*, int, char const*, ...) src/hotspot/share/utilities/debug.cpp:214
#3 0x7fcea09e9d85 in RuntimeStub::new_runtime_stub(char const*, CodeBuffer*, short, int, OopMapSet*, bool, bool) src/hotspot/share/code/codeBlob.cpp:413
#4 0x7fcea066da1d in Runtime1::generate_blob(BufferBlob*, C1StubId, char const*, bool, StubAssemblerCodeGenClosure*) src/hotspot/share/c1/c1_Runtime1.cpp:233
#5 0x7fcea066dfb0 in Runtime1::generate_blob_for(BufferBlob*, C1StubId) src/hotspot/share/c1/c1_Runtime1.cpp:262
#6 0x7fcea066dfb0 in Runtime1::initialize(BufferBlob*) src/hotspot/share/c1/c1_Runtime1.cpp:272
#7 0x7fcea03d2be1 in Compiler::init_c1_runtime() src/hotspot/share/c1/c1_Compiler.cpp:53
#8 0x7fcea03d2be1 in Compiler::initialize() src/hotspot/share/c1/c1_Compiler.cpp:74
#9 0x7fcea0acc0c2 in CompileBroker::init_compiler_runtime() src/hotspot/share/compiler/compileBroker.cpp:1771
#10 0x7fcea0ad9a3f in CompileBroker::compiler_thread_loop() src/hotspot/share/compiler/compileBroker.cpp:1913
#11 0x7fcea161264a in JavaThread::thread_main_inner() src/hotspot/share/runtime/javaThread.cpp:759
#12 0x7fcea2ec739a in Thread::call_run() src/hotspot/share/runtime/thread.cpp:234
#13 0x7fcea251e1d2 in thread_native_entry src/hotspot/os/linux/os_linux.cpp:858
#14 0x7fcea7c6c6e9 in start_thread (/lib64/libpthread.so.0+0xa6e9) (BuildId: 1b515766201d47a183932ba0c8c8bd0d9ee8755b)
#15 0x7fcea730f58e in clone (/lib64/libc.so.6+0x11858e) (BuildId: 448a3ddd22596e1adb8fb3dec8921ed5b9d54dc2)
OS: linux

-----
Title: [JDK-8342905] Thread.setContextClassloader from thread in FJP commonPool task no longer works after JDK-8327501 redux
Priority: P4
Type: Bug
Component: core-libs
Description: See JDK-8328366 for more details.

-----
Title: [JDK-8327501] Common ForkJoinPool prevents class unloading in some cases
Priority: P4
Type: Bug
Component: core-libs
Description: When the ForkJoinPool.commonPool() creates new worker threads, they capture an AccessControlContext from the location where they were created, which means that the class won't get unloaded for the lifetime of that worker thread.

-----
Title: [JDK-8342962] [s390x] TestOSRLotsOfLocals.java crashes
Priority: P3
Type: Bug
Component: hotspot
Description: s390x might be affected by the same issue as aarch64 (JDK-8335662).
The new test runs into
assert(nbits == 32 || (-(1
OS: linux

-----
Title: [JDK-8343285] java.lang.Process is unresponsive and CPU usage spikes to 100%
Priority: P3
Type: Bug
Component: hotspot
Description: ADDITIONAL SYSTEM INFORMATION :
A DESCRIPTION OF THE PROBLEM :
In JDK 8, using the Process class to execute the command "/Applications/LibreOffice.app/Contents/MacOS/soffice --help"works as expected. However, after switching to JDK 21, the thread executing the command becomes unresponsive, and the forked process causes CPU usage to spike to 100%.
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. install soffice
2. run code
3. switch jdk
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
return immediately
ACTUAL -
no result
---------- BEGIN SOURCE ----------
ProcessBuilder processBuilder = new ProcessBuilder(
"/Applications/LibreOffice.app/Contents/MacOS/soffice",
"--help"
);
Process process = processBuilder.start();
BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
String line;
while ((line = reader.readLine()) != null) {
System.out.println(line);
}
int exitCode = process.waitFor();
System.out.println("Process exited with code: " + exitCode);
---------- END SOURCE ----------
OS: os_x

-----
Title: [JDK-8343474] [updates] Customize README.md to specifics of update project
Priority: P4
Type: Bug
Component: infrastructure
Description: Add some project specific information to README.md, among others to better guide new contributors.
Let’s keep this sufficiently generic so that the information holds for jdkXu and jdkXu-dev
and that the change can easily be backported (by adapting 21-17 etc.).

-----
Title: [JDK-8343506] [s390x] multiple test failures with ubsan
Priority: P4
Type: Bug
Component: hotspot
Description: When enabled UBSAN and fired up tier1, on s390x, you will see multiple test failures with this error:
bt:
/home/amit/ubsan/jdk/src/hotspot/cpu/s390/s390.ad:2550:20: runtime error: signed integer overflow: -9223372036854775808 - 1 cannot be represented in type ‘long int'
#0 0x3ff8e49009b in State::_sub_Op_ConL(Node const*) /home/amit/ubsan/jdk/src/hotspot/cpu/s390/s390.ad:2550
#1 0x3ff8e4b38c9 in State::DFA(int, Node const*) /home/amit/ubsan/jdk/make/hotspot/dfa_s390.cpp:11680
#2 0x3ff8f667853 in Matcher::Label_Root(Node const*, State*, Node*, Node*&) /home/amit/ubsan/jdk/src/hotspot/share/opto/matcher.cpp:1752
#3 0x3ff8f667a2d in Matcher::Label_Root(Node const*, State*, Node*, Node*&) /home/amit/ubsan/jdk/src/hotspot/share/opto/matcher.cpp:1746
#4 0x3ff8f668ef3 in Matcher::match_tree(Node const*) /home/amit/ubsan/jdk/src/hotspot/share/opto/matcher.cpp:1548
#5 0x3ff8f6751ab in Matcher::xform(Node*, int) /home/amit/ubsan/jdk/src/hotspot/share/opto/matcher.cpp:1158
#6 0x3ff8f67c8e3 in Matcher::match() /home/amit/ubsan/jdk/src/hotspot/share/opto/matcher.cpp:368
#7 0x3ff8e28a529 in Compile::Code_Gen() /home/amit/ubsan/jdk/src/hotspot/share/opto/compile.cpp:2935
#8 0x3ff8e294219 in Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*) /home/amit/ubsan/jdk/src/hotspot/share/opto/compile.cpp:885
#9 0x3ff8ddf6f33 in C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*) /home/amit/ubsan/jdk/src/hotspot/share/opto/c2compiler.cpp:142
#10 0x3ff8e2b22b3 in CompileBroker::invoke_compiler_on_method(CompileTask*) /home/amit/ubsan/jdk/src/hotspot/share/compiler/compileBroker.cpp:2303
#11 0x3ff8e2b3f3d in CompileBroker::compiler_thread_loop() /home/amit/ubsan/jdk/src/hotspot/share/compiler/compileBroker.cpp:1961
#12 0x3ff8ed01181 in JavaThread::thread_main_inner() /home/amit/ubsan/jdk/src/hotspot/share/runtime/javaThread.cpp:759
#13 0x3ff901169c9 in Thread::call_run() /home/amit/ubsan/jdk/src/hotspot/share/runtime/thread.cpp:234
#14 0x3ff8fa105e7 in thread_native_entry /home/amit/ubsan/jdk/src/hotspot/os/linux/os_linux.cpp:858
#15 0x3ff93316295 in start_thread nptl/pthread_create.c:442
#16 0x3ff9338ff8d  (/lib/s390x-linux-gnu/libc.so.6+0x10ff8d)
OS: linux

-----
Title: [JDK-8343724] [PPC64] Disallow OptoScheduling
Priority: P4
Type: Bug
Component: hotspot
Description: The JVM currently allows switching on -XX:+OptoScheduling.
This should not be allowed because the required information in ppc.ad file is neither accurate nor complete.
JDK-8338446 shows that it implies Undefined Behavior.
We could implement support for OptoScheduling in the future, but the benefit is questionable because modern Power processors use out-of-order scheduling.

-----
Title: [JDK-8343848] Fix typo of property name in TestOAEPPadding after 8341927
Priority: P5
Type: Bug
Component: security-libs
Description: test/jdk/com/sun/crypto/provider/Cipher/RSA/TestOAEPPadding.java
has a typo: "test.providername"
Test executes correct anyways.
Thanks to Lutz for spotting this in review https://github.com/openjdk/jdk21u-dev/pull/1138

-----
Title: [JDK-8343877] Test AsyncClose.java intermittent fails - Socket.getInputStream().read() wasn't preempted
Priority: P3
Type: Bug
Component: core-libs
Description: Test java/net/Socket/asyncClose/AsyncClose.java intermittent fails with VM options -Xcomp -XX:TieredStopAtLevel=1, the test log snippet:
command: main -Djava.net.preferIPv4Stack=true AsyncClose
reason: User specified action: run main/othervm -Djava.net.preferIPv4Stack=true AsyncClose
started: Fri Nov 08 21:07:06 CST 2024
Mode: othervm [/othervm specified]
finished: Fri Nov 08 21:07:12 CST 2024
elapsed time (seconds): 6.014
configuration:
STDOUT:
******************************
Test: Socket.getInputStream().read()
Failed:
- Socket.getInputStream().read() returned unexpectedly!!
- Socket.getInputStream().read() wasn't preempted
OS: linux

-----
Title: [JDK-8343884] [s390x]  Disallow OptoScheduling
Priority: P4
Type: Bug
Component: hotspot
Description: The JVM currently allows switching on -XX:+OptoScheduling.
This should not be allowed because the required information in s390x is not complete.
Till now I have only one test failure: gc/g1/TestFromCardCacheIndex.java
Be noted that I only tested tier1 on fastdebug vm.
This might be targeted in future but benefit is questionable to the effort it will take.
OS: linux

-----
Title: [JDK-8343923] GHA: Switch to Xcode 15 on MacOS AArch64 runners
Priority: P4
Type: Enhancement
Component: infrastructure
Description: We use macos-14 images for macos-aarch64 runners. We use Xcode 14.3.1 there. Xcode 14 goes away from those runners, as per: https://github.com/actions/runner-images/issues/10703. Current GH runner docs say macos-14 image defaults to Xcode 15.4: https://github.com/actions/runner-images/blob/main/images/macos/macos-14-Readme.md. We can switch to that.
I think this policy change is why we started seeing GHA failures like:
```
Run # On macOS we need to install some dependencies for testing
== Downloading https://ghcr.io/v2/homebrew/core/make/manifests/4.4.1-1
== Fetching make
== Downloading https://ghcr.io/v2/homebrew/core/make/blobs/sha256:94377dc5a364da305c75fd7aa923a42897993de9edd1eb074428e13c3f2aaf93
== Pouring make--4.4.1.arm64_sonoma.bottle.1.tar.gz
== Caveats
GNU "make" has been installed as "gmake".
If you need to use it as "make", you can add a "gnubin" directory
to your PATH from your bashrc like:
PATH="/opt/homebrew/opt/make/libexec/gnubin:$PATH"
== Summary
🍺  /opt/homebrew/Cellar/make/4.4.1: 17 files, 1.3MB
xcode-select: error: invalid developer directory '/Applications/Xcode_14.3.1.app/Contents/Developer'
Error: Process completed with exit code 1.
```

-----
Title: [JDK-8344164] [s390x] ProblemList hotspot/jtreg/runtime/NMT/VirtualAllocCommitMerge.java
Priority: P4
Type: Sub-task
Component: hotspot
Description: The failure is weird. It appeared suddenly on all of the jdk versions. I can see it on jdk 21, 23, 24. Till now no reason were found why this is failing at all. No idea if we it could be found any time soon. So I am problemlisting it to make the CI clean.
OS: linux

-----
Title: [JDK-8344628] Test TestEnableJVMCIProduct.java run with virtual thread intermittent fails
Priority: P4
Type: Bug
Component: hotspot
Description: Test compiler/jvmci/TestEnableJVMCIProduct.java intermittent fails when run with virtual thread. Failure probability about 20/10k.
The test log snippet:
jvmci.CompilerCannot use JVMCI compiler: JVMCI compiler 'graal' specified by jvmci.Compiler not found
Cannot use JVMCI compiler: JVMCI compiler 'graal' specified by jvmci.Compiler not found
java.lang.RuntimeException: 'jvmci.Compiler=graal' missing from stdout/stderr
at jdk.test.lib.process.OutputAnalyzer.shouldContain(OutputAnalyzer.java:253)
at TestEnableJVMCIProduct.test(TestEnableJVMCIProduct.java:106)
at TestEnableJVMCIProduct.main(TestEnableJVMCIProduct.java:71)
Reproduce test command:
export test=test/hotspot/jtreg/compiler/jvmci/TestEnableJVMCIProduct.java
function runJtreg() { jtreg -J-Djavatest.maxOutputSize=999999999 -testThreadFactoryPath:$PWD/build/linux-`arch`-server-release/images/test/jtreg_test_thread_factory/jtregTestThreadFactory.jar -testThreadFactory:Virtual -ea -esa -timeoutFactor:4 -v:fail,error,time,nopass -nr -w $dir/index-$1 $test & $dir/$1.log ; if [[ 0 -ne $? ]] ; then echo -n "$1 " ; else rm -rf $dir/index-$1 $dir/$1.log ; fi ; } ; export -f runJtreg ; export dir="tmp-jtreg-"`basename ${test##* } .java | sed "s|#|_|"` ; rm -rf $dir ; mkdir -p $dir ; time seq 50000 | xargs -i -n 1 -P `nproc` bash -c "runJtreg {}" ; echo total fail number: `ls $dir/*.log 2 /dev/null | wc | awk '{print $1}'`
OS: linux

-----
Title: [JDK-8344993] [21u] [REDO] Backport JDK-8327501 and JDK-8328366 to JDK 21
Priority: P4
Type: Bug
Component: core-libs
Description: JDK-8327501 and JDK-8328366 got backported to OpenJDK 21.0.5 and backed out with JDK-8341989 in the same release 21.0.5. This is a redo bug for a new attempt to fix the class unloading issue described in JDK-8327501 in a future version of OpenJDK 21.
By backing out JDK-8341989, we plan to re-introduce JDK-8327501 and JDK-8328366 to JDK 21u. Contrary to the initial attempt to have JDK-8327501 and JDK-8328366 in JDK 21u, we will now also backport JDK-8342905 that fixes the issue observed with the previous attempt.
OS: generic

-----
Title: [JDK-8328366] Thread.setContextClassloader from thread in FJP commonPool task no longer works after JDK-8327501
Priority: P3
Type: Bug
Component: core-libs
Description: Christian Wimmer in JDK-8327501 writes:
The fix for JDK-8327501 has a compatibility impact that has been overlooked: Using `InnocuousForkJoinWorkerThread` means that any task that runs in the common pool can no longer use `Thread.currentThread().setContextClassLoader(...)` - that unconditionally throws a `SecurityException`.
This breaks many existing Java libraries and frameworks. One example is Quarkus. See:
https://github.com/quarkusio/quarkus/issues/39526
OS: generic

-----
Title: [JDK-8345055] [21u] ProblemList failing rtm tests on ppc platforms
Priority: P4
Type: Sub-task
Component: hotspot
Description: Exclude  some rtm related test which we see currently failing on some ppc64 platforms.
OS: linux, aix

-----
Title: [JDK-8347010] [21u] Remove designator DEFAULT_PROMOTED_VERSION_PRE=ea for release 21.0.6
Priority: P4
Type: Bug
Component: infrastructure
Description: As discussed in https://github.com/openjdk/jdk17u-dev/pull/307, we'd like to have DEFAULT_PROMOTED_VERSION_PRE set to 'ea' in dev source trees and remove it for GA tagged source levels.

-----
Title: [JDK-8198237] [macos] Test java/awt/Frame/ExceptionOnSetExtendedStateTest/ExceptionOnSetExtendedStateTest.java fails
Priority: P4
Type: Bug
Component: client-libs
Description: Fails on 10.13.3 with RuntimeException: Frame state was not changed, currentState = 0
OS: os_x

-----
Title: [JDK-8211851] (ch) java/nio/channels/AsynchronousSocketChannel/StressLoopback.java times out (aix)
Priority: P4
Type: Bug
Component: core-libs
Description: Test /jdk/java/nio/channels/AsynchronousSocketChannel/StressLoopback.java times out on aix. Is there a problem
with the support of propery jdk.net.useFastTcpLoopback?
OS: aix

-----
Title: [JDK-8226933] [TEST_BUG]GTK L&F: There is no swatches or RGB tab in JColorChooser
Priority: P4
Type: Bug
Component: client-libs
Description: Testsuite: Regression manual
Test name(s):javax/swing/JColorChooser/Test4887836.java
Product(s) tested: JDK 8u231b01 (64bit)
OS/architecture: Ubuntu19.04-x64/Jtreg4.2b14
option:-Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel -Djdk.gtk.version=3 -Djdk.gtk.verbose=true
Actual behavior:
1)There is no swatches tab in JColorChooser applet for GTK LAF,please refer to Test4887836.png
2)There is no such issue without option,please refer to Test4887836-without-option.png.
Affect Test:
closed/javax/swing/plaf/basic/BasicSliderUI/4419255/bug4419255.java:
There is no RGB tab please refer to bug4419255.png
OS: linux_ubuntu

-----
Title: [JDK-8226938] [TEST_BUG]GTK L&F: There is no Details button in FileChooser Dialog
Priority: P4
Type: Bug
Component: client-libs
Description: Testsuite: Regression manual
Test name(s):closed/javax/swing/JFileChooser/4587721/bug4587721.java
Product(s) tested: JDK 8u231b01 (64bit)
OS/architecture: Ubuntu19.04-x64/Jtreg4.2b14
option:-Dswing.defaultlaf=com.sun.java.swing.plaf.gtk.GTKLookAndFeel -Djdk.gtk.version=3 -Djdk.gtk.verbose=true
Actual behavior:
1)There is no Details button in FileChooser Dialog for GTK LAF,please refer to bug4587721.png
2)There is no such issue without option,please refer to bug4587721-no-option.png.
OS: linux_ubuntu

-----
Title: [JDK-8227529] With malformed --app-image the error messages are awful
Priority: P4
Type: Bug
Component: tools
Description: jpackage --app-image /tmp does not provide a helpful message with a malformed app-image.
Example 1:
jpackage --app-image /tmp --package-type deb  --output x
Output:
Bundler DEB Installer skipped because of a configuration problem: java.lang.NullPointerException.
Example 2:
jpackage --app-image /tmp
Output:
Error: Option [--app-image] is not valid with package-type [null].
Example 3:
mkdir /tmp/x
touch /tmp/x/y
jpackage --app-image /tmp/x --package-type deb  --output x --name xxxx
Output 3:
java.nio.file.NoSuchFileException: /tmp/jdk.jpackage13842042862336393495/images/linux-deb.image/xxxx-1.0/opt/xxxx/bin/xxxx.png
Example 4:  (Even with a well formed app image) if the --name is missing the message is poor.
jpackage -o out --app-image out/skara --package-type deb
Output 4:
Bundler DEB Installer skipped because of a configuration problem: java.lang.NullPointerException.

-----
Title: [JDK-8277240] java/awt/Graphics2D/ScaledTransform/ScaledTransform.java dialog does not get disposed
Priority: P4
Type: Bug
Component: client-libs
Description: java/awt/Graphics2D/ScaledTransform/ScaledTransform.java test passes but Dialog does not get disposed even after test suite gets completed.
Attached the screen shot of the same. Dialog gets dispose on mac but not on Ubuntu 20.04
OS: linux_ubuntu

-----
Title: [JDK-8283664] Remove jtreg tag manual=yesno for java/awt/print/PrinterJob/PrintTextTest.java
Priority: P4
Type: Bug
Component: client-libs
Description: There are multiple issue with this test case
1) Parser error due to yesno in @run main/manual=yesno
2) User can only compare the UI rendering and compare with the print out. User can't mark the test as pass or fail due to pass or fail buttons are missing.
3) When the test is executed using jtreg after user click on the print button on the print dialog the whole test UIs ( frames) gets dispose and user cannot compare the printout with the UI.  But this works as expected in test is running individually using java PrintTextTest
OS: generic

-----
Title: [JDK-8286875] ProgrammableUpcallHandler::on_entry/on_exit access thread fields from native
Priority: P4
Type: Bug
Component: core-libs
Description: ProgrammableUpcallHandler::on_entry modifies:
context-new_handles = JNIHandleBlock::allocate_block(thread);
thread-clear_pending_exception();
Before transitioning to Java. Which means there can be a concurrent safepoint/handshake.
ProgrammableUpcallHandler::on_exit modify and access same fields here:
JNIHandleBlock::release_block(context-new_handles, thread);
assert(!thread-has_pending_exception(), "Upcall can not throw an exception");
After transitioning back to native.
E.g. _free_handle_block, _pending_exception.
This have two issues:
- Is it safe today? I traced some code and FAICT it is.
- These fields are now only allowed to be modified in a safepoint/handshake if target thread is waiting for the safepoint/handshake or by the thread it self. (I.e. it is not enough that thread is safepoint safe, it must actively be waiting for the safepoint/handshake)
Is this a restriction that we want, and am I correct in saying that is safe?

-----
Title: [JDK-8293345] SunPKCS11 provider checks on PKCS11 Mechanism are problematic
Priority: P3
Type: Enhancement
Component: security-libs
Description: ADDITIONAL SYSTEM INFORMATION :
Windows 10 64 bits / CentOS 7 64 bits
A DESCRIPTION OF THE PROBLEM :
In France, french healthcare professionals use a card to authenticate and sign.
Since jdk8 322 we have a problem.
PKCS11 have been disabled : https://bugs.openjdk.org/browse/JDK-8176837
The problem is that the card mechanism is considered legacy and therefore disabled.
This check needs a little more flexibility.
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
SunPKCS11 loading ---DummyConfig-1---
Information for provider SunPKCS11-VitCo-0
Library info:
cryptokiVersion: 2.20
manufacturerID: ANS
flags: 0
libraryDescription: CPS3 PKCS#11 WIN 64
libraryVersion: 2.13
sunpkcs11: Initializing PKCS#11 library C:\Windows\System32\cps3_pkcs11_w64.dll
All slots: 0, 1
Slots with tokens: 0
Slot info for slot 0:
slotDescription: KAPELSE 00026351 KAP-LINK 0 0
manufacturerID:
flags: CKF_TOKEN_PRESENT | CKF_REMOVABLE_DEVICE | CKF_HW_SLOT
hardwareVersion: 0.00
firmwareVersion: 0.00
Token info for token in slot 0:
label: CPS3v3-2800638708
manufacturerID: ASIP SANTE
model: IAS ECC
serialNumber: 99231175
flags: CKF_RNG | CKF_LOGIN_REQUIRED | CKF_USER_PIN_INITIALIZED | CKF_TOKEN_INITIALIZED
ulMaxSessionCount: CK_EFFECTIVELY_INFINITE
ulSessionCount: 0
ulMaxRwSessionCount: CK_EFFECTIVELY_INFINITE
ulRwSessionCount: 0
ulMaxPinLen: 4
ulMinPinLen: 4
ulTotalPublicMemory: CK_UNAVAILABLE_INFORMATION
ulFreePublicMemory: CK_UNAVAILABLE_INFORMATION
ulTotalPrivateMemory: CK_UNAVAILABLE_INFORMATION
ulFreePrivateMemory: CK_UNAVAILABLE_INFORMATION
hardwareVersion: 0.00
firmwareVersion: 0.00
utcTime:
Mechanism CKM_SHA_1:
ulMinKeySize: 0
ulMaxKeySize: 0
flags: 1024 = CKF_DIGEST
Mechanism CKM_SHA256:
ulMinKeySize: 0
ulMaxKeySize: 0
flags: 1024 = CKF_DIGEST
Mechanism CKM_RSA_X_509:
ulMinKeySize: 512
ulMaxKeySize: 2048
flags: 272897 = CKF_HW | CKF_DECRYPT | CKF_SIGN | CKF_VERIFY | CKF_UNWRAP
DISABLED due to legacy
Mechanism CKM_RSA_PKCS:
ulMinKeySize: 512
ulMaxKeySize: 2048
flags: 272897 = CKF_HW | CKF_DECRYPT | CKF_SIGN | CKF_VERIFY | CKF_UNWRAP
DISABLED due to legacy
Mechanism CKM_SHA1_RSA_PKCS:
ulMinKeySize: 512
ulMaxKeySize: 2048
flags: 10240 = CKF_SIGN | CKF_VERIFY
Mechanism CKM_SHA256_RSA_PKCS:
ulMinKeySize: 512
ulMaxKeySize: 2048
flags: 10240 = CKF_SIGN | CKF_VERIFY
DISABLED in configuration
sunpkcs11: login succeeded
sunpkcs11: user already logged in
ACTUAL -
javax.net.ssl.SSLException: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_KEY_TYPE_INCONSISTENT
at org.apache.hc.core5.reactor.ssl.SSLIOSession.convert(SSLIOSession.java:265)
at org.apache.hc.core5.reactor.ssl.SSLIOSession.doWrap(SSLIOSession.java:272)
at org.apache.hc.core5.reactor.ssl.SSLIOSession.doHandshake(SSLIOSession.java:319)
at org.apache.hc.core5.reactor.ssl.SSLIOSession.access$300(SSLIOSession.java:71)
at org.apache.hc.core5.reactor.ssl.SSLIOSession$1.inputReady(SSLIOSession.java:175)
at org.apache.hc.core5.reactor.InternalDataChannel.onIOEvent(InternalDataChannel.java:124)
at org.apache.hc.core5.reactor.InternalChannel.handleIOEvent(InternalChannel.java:51)
at org.apache.hc.core5.reactor.SingleCoreIOReactor.processEvents(SingleCoreIOReactor.java:179)
at org.apache.hc.core5.reactor.SingleCoreIOReactor.doExecute(SingleCoreIOReactor.java:128)
at org.apache.hc.core5.reactor.AbstractSingleCoreIOReactor.execute(AbstractSingleCoreIOReactor.java:85)
at org.apache.hc.core5.reactor.IOReactorWorker.run(IOReactorWorker.java:44)
at java.lang.Thread.run(Thread.java:750)
Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_KEY_TYPE_INCONSISTENT
at sun.security.pkcs11.wrapper.PKCS11.C_SignFinal(Native Method)
at sun.security.pkcs11.P11Signature.engineSign(P11Signature.java:608)
at java.security.Signature$Delegate.engineSign(Signature.java:1382)
at java.security.Signature.sign(Signature.java:698)
at sun.security.ssl.CertificateVerify$T12CertificateVerifyMessage.(CertificateVerify.java:609)
at sun.security.ssl.CertificateVerify$T12CertificateVerifyProducer.produce(CertificateVerify.java:761)
at sun.security.ssl.SSLHandshake.produce(SSLHandshake.java:421)
at sun.security.ssl.ServerHelloDone$ServerHelloDoneConsumer.consume(ServerHelloDone.java:182)
at sun.security.ssl.SSLHandshake.consume(SSLHandshake.java:377)
at sun.security.ssl.HandshakeContext.dispatch(HandshakeContext.java:444)
at sun.security.ssl.SSLEngineImpl$DelegatedTask$DelegatedAction.run(SSLEngineImpl.java:981)
at sun.security.ssl.SSLEngineImpl$DelegatedTask$DelegatedAction.run(SSLEngineImpl.java:968)
at java.security.AccessController.doPrivileged(Native Method)
at sun.security.ssl.SSLEngineImpl$DelegatedTask.run(SSLEngineImpl.java:915)
at org.apache.hc.core5.reactor.ssl.SSLIOSession.doRunTask(SSLIOSession.java:288)
at org.apache.hc.core5.reactor.ssl.SSLIOSession.doHandshake(SSLIOSession.java:362)
... 9 common frames omitted
FREQUENCY : always
OS: generic

-----
Title: [JDK-8294316] SA core file support is broken on macosx-x64 starting with macOS 12.x
Priority: P4
Type: Bug
Component: hotspot
Description: It appears that SA no longer works with core files on macosx-x64, I believe starting with macOS 12.x.  macosx-aarch64 seems to be fine, as are earlier versions of macosx-x64. The failure that happens with all the SA core file tests in test/hotspot/jtreg/serviceability/sa is:
ERROR: failed to workaround classshareing
Unable to open core file
I added some debugging code to SA's init_classsharing_workaround(), and it indicated that the cause was related to the fetching of the value of SharedArchivePath from the core file. This is suppose to point to a cstring containing the classes.jsa path, but instead seemed to contain garbage. I modified hotspot to print out  &SharedArchivePath, SharedArchivePath, and the cstring it points to:
log_info(cds)("Got default archive path: %p %p %s", &SharedArchivePath, SharedArchivePath, SharedArchivePath);
When SA fails to open the core file, I see:
[0.003s][info][cds] Got default archive path: 0x10faccb30 0x6000008b8010 /System/Volumes/Data/mesos/work_dir/jib-master/install/2022-09-22-2232312.chris.plummer.jdk/macosx-x64-debug.jdk/jdk-20/fastdebug/lib/server/classes.jsa
This all looks fine. However, SA looks up the "SharedArchivePath" symbol to get its address, so in turn it can get its value, which then points to the classes.jsa path. So I also modified SA to print out this info:
printf("sharedArchivePathAddrAddr(%p)\n", (void*)sharedArchivePathAddrAddr);
printf("sharedArchivePathAddr        (%p)\n", (void*)sharedArchivePathAddr);
In the passing test cases it would match up with the CDS log output above. When it fails you get something different:
Opening core file, please wait...
hsdb
sharedArchivePathAddrAddr(0x10f881b30)
sharedArchivePathAddr        (0x7364616572687420)
sharedArchivePathAddrAddr should match the hotspot &SharedArchivePath output, but it doesn't. SA is doing a symbol table lookup to get this value, so there appears to be a bug in SA's mach-o symbol table handling code.
This problem has gone unnoticed because we have problem listed all core file testing on macoxx-x64 for probably a year now due to occasional issues with timeouts (slow core dumps). This issue seems to only be happening on 12.3.1, 12.4 and 12.5.1 host, and happens every time on these hosts, so likely the issue was introduced with  macOS 12.
I'm not seeing this on macos-aarch64, although on occasion I was seeing the same "ERROR: failed to workaround classshareing" failure message. However, I believe it was for a different reason. From what I could tell with some debugging I did with lldb, it looked like the memory where SharedArchivePath pointed to was not in the core file. However, for some reason I can't reproduce this anymore. It could be related to JDK-8293563, which is caused by the java heap not being in the core file. Possibly sometimes other areas of memory are also missing.
Note if you try using -Xshare:off, you still see this same issue with SharedArchivePath, even though SA should not need to access it. This is because SA first accesses UseSharedSpaces to see if it is 0 or 1. It should be 0, but due to the same issue we see with SharedArchivePath (symbol lookup not working properly), UseSharedSpaces could contain anything, and usually it is not 0. To work around this I forced SA to just quickly exit init_classsharing_workaround() no matter what UseSharedSpaces is set to. This caused SA to instead fail at a later point during intialization when trying to lookup some hotspot types. It does so through vmstructs, which SA accesses via other global symbols that it appears SA is not looking up properly. So it appears that in general SA's symbol table lookups are broken with core files on 12.x, and it is not just just some global symbosl.
OS: os_x

-----
Title: [JDK-8295159] DSO created with -ffast-math breaks Java floating-point arithmetic
Priority: P4
Type: Bug
Component: hotspot
Description: A bug in GCC causes shared libraries linked with -ffast-math to disable denormal arithmetic. This breaks Java's floating-point semantics.
The bug is https://gcc.gnu.org/bugzilla/show_bug.cgi?id=55522
One solution is to save and restore the floating-point control word around System.loadLibrary(). This isn't perfect, because some shared library might load another shared library at runtime, but it's a lot better than what we do now.

-----
Title: [JDK-8302111] Serialization considerations
Priority: P4
Type: Bug
Component: security-libs
Description: While addressing JDK-8286503, it was noted that there may be other S11N issues which are more of a functional/data consistency nature.
Essentially, deserialization is a form of object construction and should enforce the same data validation and consistency checks as enforced by the constructor(s). Thus, additional checks may be needed when deserializing the objects to ensure that values failing the constructor check are rejected during deserialization as well.
OS: generic

-----
Title: [JDK-8304701] Request with timeout aborts later in-flight request on HTTP/1.1 cxn
Priority: P3
Type: Bug
Component: core-libs
Description: ADDITIONAL SYSTEM INFORMATION :
macOS 12.6.3 (21G419)
openjdk version "20" 2023-03-21
OpenJDK Runtime Environment (build 20+36-2344)
OpenJDK 64-Bit Server VM (build 20+36-2344, mixed mode, sharing)
A DESCRIPTION OF THE PROBLEM :
This was originally encountered and reported as https://github.com/SeleniumHQ/selenium/issues/11798, until it was determined to be a JDK issue.
When an java.net.http.HttpRequest is sent with a specific timeout over a persistent HTTP/1.1 connection, the ResponseTimerEvent appears to be unconditionally handle()'d once its deadline elapses (regardless of whether
the request has completed), forcing the connection to be promptly and unnecessarily closed.  If there is another request in-flight on the connection at this moment, then it will fail with a "java.io.IOException: connection closed locally" error.
This issue is readily reproducible by sending requests in a tight loop to a server with non-trivial latency or that returns a large response having a non-trivial transfer time.  This issue does appear to arise with HTTP/2 connections or if the connection is idle at the moment the timer elapses.
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
javac JavaExample.java && java JavaExample
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The process should run to completion with a few successful requests over ~15 seconds.
ACTUAL -
The process sends a few successful requests, but at ~10 seconds throws an exception like:
```
Exception in thread "main" java.io.IOException: fixed content-length: 28490775, bytes received: 17112264
at java.net.http/jdk.internal.net.http.HttpClientImpl.send(HttpClientImpl.java:586)
at java.net.http/jdk.internal.net.http.HttpClientFacade.send(HttpClientFacade.java:123)
at example.JavaExample.main(JavaExample.java:28)
Caused by: java.io.IOException: fixed content-length: 28490775, bytes received: 17112264
at java.net.http/jdk.internal.net.http.common.Utils.wrapWithExtraDetail(Utils.java:351)
at java.net.http/jdk.internal.net.http.Http1Response$BodyReader.onReadError(Http1Response.java:760)
at java.net.http/jdk.internal.net.http.Http1AsyncReceiver.checkForErrors(Http1AsyncReceiver.java:302)
at java.net.http/jdk.internal.net.http.Http1AsyncReceiver.flush(Http1AsyncReceiver.java:268)
at java.net.http/jdk.internal.net.http.common.SequentialScheduler$LockingRestartableTask.run(SequentialScheduler.java:205)
at java.net.http/jdk.internal.net.http.common.SequentialScheduler$CompleteRestartableTask.run(SequentialScheduler.java:149)
at java.net.http/jdk.internal.net.http.common.SequentialScheduler$SchedulableTask.run(SequentialScheduler.java:230)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: java.io.IOException: connection closed locally
at java.net.http/jdk.internal.net.http.SocketTube.signalClosed(SocketTube.java:159)
at java.net.http/jdk.internal.net.http.PlainHttpConnection.close(PlainHttpConnection.java:372)
at java.net.http/jdk.internal.net.http.AsyncSSLConnection.close(AsyncSSLConnection.java:111)
at java.net.http/jdk.internal.net.http.Http1Exchange.cancelImpl(Http1Exchange.java:492)
at java.net.http/jdk.internal.net.http.Http1Exchange.cancel(Http1Exchange.java:427)
at java.net.http/jdk.internal.net.http.Exchange.cancel(Exchange.java:238)
at java.net.http/jdk.internal.net.http.MultiExchange.cancel(MultiExchange.java:260)
at java.net.http/jdk.internal.net.http.ResponseTimerEvent.handle(ResponseTimerEvent.java:71)
at java.net.http/jdk.internal.net.http.HttpClientImpl.purgeTimeoutsAndReturnNextDeadline(HttpClientImpl.java:1270)
at java.net.http/jdk.internal.net.http.HttpClientImpl$SelectorManager.run(HttpClientImpl.java:899)
```
---------- BEGIN SOURCE ----------
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.time.Instant;
import static java.net.http.HttpClient.Redirect.ALWAYS;
import static java.net.http.HttpClient.Version.HTTP_1_1;
public class JavaExample {
public static void main(String[] args) throws Exception {
int timeoutSeconds = 10;
HttpClient client = HttpClient.newBuilder()
.followRedirects(ALWAYS)
.build();
for (Instant start = Instant.now(), now = start; now.isBefore(start.plusSeconds(timeoutSeconds * 3 / 2)); now = Instant.now()) {
HttpRequest request = HttpRequest.newBuilder().uri(URI.create("https://github.com/SeleniumHQ/selenium/releases/download/selenium-4.8.0/selenium-java-4.8.1.zip"))
.GET()
.version(HTTP_1_1)
.timeout(Duration.ofSeconds(timeoutSeconds))
.build();
HttpResponse response = client.send(request, HttpResponse.BodyHandlers.discarding());
System.out.println(now + " - " + response.headers().firstValue("date"));
}
}
}
---------- END SOURCE ----------
CUSTOMER SUBMITTED WORKAROUND :
Use HTTP/2 if available
Add "Connection: close" header to request if possible (requires jdk.httpclient.allowRestrictedHeaders customization)
Avoid using request timeouts if feasible
FREQUENCY : often
OS: generic

-----
Title: [JDK-8309841] Jarsigner should print a warning if an entry is removed
Priority: P3
Type: Enhancement
Component: security-libs
Description: If an entry is removed after a JAR file is signed, running `jarsigner -verify` on the file does not show any error info.

-----
Title: [JDK-8311546] Certificate name constraints improperly validated with leading period
Priority: P3
Type: Bug
Component: security-libs
Description: A DESCRIPTION OF THE PROBLEM :
When a CA certificate contains a name constraint that begins with a period, `.`, an end entity certificate will be improperly rejected with `java.security.cert.CertPathValidatorException: name constraints check failed`.
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Create a CA certificate with `nameConstraints = critical,permitted;DNS:.example.com`
Sign a certificate for `demo.example.com` with the CA
Load CA certificate into keystore / as a TrustAnchor directly
Attempt to validate end entity certificate
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Certificate validates successfully
ACTUAL -
`java.security.cert.CertPathValidatorException: name constraints check failed` is thrown
---------- BEGIN SOURCE ----------
See attached zip file.
---------- END SOURCE ----------
FREQUENCY : always
OS: generic

-----
Title: [JDK-8312570] [TESTBUG] Jtreg compiler/loopopts/superword/TestDependencyOffsets.java fails on 512-bit SVE
Priority: P4
Type: Bug
Component: hotspot
Description: In our recent tests on AArch64 CPUs with 512-bit SVE, we see Hotspot jtreg `compiler/loopopts/superword/TestDependencyOffsets.java` has a large number of IR check failures. The reason is that many of the test loops in the jtreg cannot be vectorized on 512-bit SVE due to data dependence but the test code assumes they can.
OS: generic

-----
Title: [JDK-8313633] [macOS] java/awt/dnd/NextDropActionTest/NextDropActionTest.java fails with java.lang.RuntimeException: wrong next drop action!
Priority: P4
Type: Bug
Component: client-libs
Description: java/awt/dnd/NextDropActionTest/NextDropActionTest.java fails with
DropTargetListener.drop(): accepting the user drop action=1
DragSourseListener.dragDropEnd():  firstCall=true drop action=1
DropTargetListener.drop(): accepting the user drop action=1
DragSourseListener.dragDropEnd():  firstCall=false drop action=1
FAILURE: wrong drop action:1
java.lang.RuntimeException: wrong next drop action!
at NextDropActionTest.start(NextDropActionTest.java:165)
at NextDropActionTest.main(NextDropActionTest.java:67)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1570)
JavaTest Message: Test threw exception: java.lang.RuntimeException: wrong next drop action!
JavaTest Message: shutting down test
OS: os_x

-----
Title: [JDK-8313905] Checked_cast assert in CDS compare_by_loader
Priority: P3
Type: Bug
Component: hotspot
Description: Test: runtime/cds/appcds/loaderConstraints/DynamicLoaderConstraintsTest.java#custom-cl-zgc-generational
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (c:\sb\prod\1691399875\workspace\open\src\hotspot\share\utilities/globalDefinitions.hpp:505), pid=8704, tid=9196
#  assert(static_cast(result) == thing) failed: must be
#
# JRE version: Java(TM) SE Runtime Environment (22.0+10) (fastdebug build 22-ea+10-667)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 22-ea+10-667, mixed mode, sharing, tiered, compressed class ptrs, z gc, windows-amd64)
# Core dump will be written. Default location: C:\sb\prod\1691408103\testoutput\test-support\jtreg_open_test_hotspot_jtreg_hotspot_runtime\scratch\0\hs_err_pid8704.mdmp
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
---------------  S U M M A R Y ------------
Command Line: -XX:MaxRAMPercentage=4.16667 -Dtest.boot.jdk=c:\ade\mesos\work_dir\jib-master\install\jdk\20\36\bundles\windows-x64\jdk-20_windows-x64_bin.zip\jdk-20 -Djava.io.tmpdir=c:\sb\prod\1691408103\testoutput\test-support\jtreg_open_test_hotspot_jtreg_hotspot_runtime\tmp -XX:+CreateCoredumpOnCrash -XX:+CreateCoredumpOnCrash -XX:+UseZGC -XX:ArchiveClassesAtExit=C:\sb\prod\1691408103\testoutput\test-support\jtreg_open_test_hotspot_jtreg_hotspot_runtime\scratch\0\appcds-11h39m27s403.jsa -Xshare:auto --add-modules=java.base,jdk.httpserver --add-exports=java.base/jdk.internal.misc=ALL-UNNAMED -Xlog:cds=debug,class+load,class+loader+constraints -XX:+UseZGC -XX:+ZGenerational -XX:ZCollectionInterval=0.01 CustomAppLoader C:\sb\prod\1691408103\testoutput\test-support\jtreg_open_test_hotspot_jtreg_hotspot_runtime\scratch\0\loader_constraints.jar LoaderConstraintsApp 3
Host:  AMD EPYC 7J13 64-Core Processor                , 12 cores, 23G,  Windows Server 2019 , 64 bit Build 17763 (10.0.17763.475)
Time: Mon Aug  7 12:39:28 2023 /GM elapsed time: 0.964540 seconds (0d 0h 0m 0s)
---------------  T H R E A D  ---------------
Current thread (0x000002617efab810):  VMThread "VM Thread"          [id=9196, stack(0x000000d942d00000,0x000000d942e00000) (1024K)]
Stack: [0x000000d942d00000,0x000000d942e00000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xc6b5b1]  os::win32::platform_print_native_stack+0x101  (os_windows_x86.cpp:236)
V  [jvm.dll+0xf0bbfc]  VMError::report+0x146c  (vmError.cpp:997)
V  [jvm.dll+0xf0e055]  VMError::report_and_die+0x645  (vmError.cpp:1811)
V  [jvm.dll+0xf0e764]  VMError::report_and_die+0x64  (vmError.cpp:1576)
V  [jvm.dll+0x549b2b]  report_vm_error+0x5b  (debug.cpp:191)
V  [jvm.dll+0xe40356]  UnregisteredClassesDuplicationChecker::compare_by_loader+0x86  (systemDictionaryShared.cpp:602)
C  [ucrtbase.dll+0xedea]  (no source info available)
V  [jvm.dll+0xe3f01e]  SystemDictionaryShared::check_excluded_classes+0x25e  (systemDictionaryShared.cpp:634)
V  [jvm.dll+0x5fb011]  DynamicArchiveBuilder::doit+0xc1  (dynamicArchive.cpp:115)
V  [jvm.dll+0x5fba2f]  VM_PopulateDynamicDumpSharedSpace::doit+0x4f  (dynamicArchive.cpp:393)
V  [jvm.dll+0xf15903]  VM_Operation::evaluate+0xd3  (vmOperations.cpp:72)
V  [jvm.dll+0xf172c6]  VMThread::evaluate_operation+0x96  (vmThread.cpp:282)
V  [jvm.dll+0xf17a23]  VMThread::inner_execute+0x253  (vmThread.cpp:438)
V  [jvm.dll+0xf17dc4]  VMThread::run+0x104  (vmThread.cpp:175)
V  [jvm.dll+0xe760dd]  Thread::call_run+0x1cd  (thread.cpp:222)
V  [jvm.dll+0xc69892]  os::win32::thread_native_entry+0xa2  (os_windows.cpp:554)
C  [ucrtbase.dll+0x2268a]  (no source info available)
C  [KERNEL32.DLL+0x17974]  (no source info available)
C  [ntdll.dll+0x5a0b1]  (no source info available)
VM_Operation (0x000000d9417ff4c0): PopulateDumpSharedSpace, mode: safepoint, requested by thread 0x0000025d7378cb20

-----
Title: [JDK-8314752] Use google test string comparison macros
Priority: P4
Type: Enhancement
Component: hotspot
Description: The google test suite offers some neat macros for comparing strings. We should use those instead of raw strcmp or strstr where possible. Code is more readable. Also, the macros print out the values of the strings automatically in case of a failure, which saves having to add them via "

-----
Title: [JDK-8314909] tools/jpackage/windows/Win8282351Test.java fails with java.lang.AssertionError: Expected [0]. Actual [1618]:
Priority: P4
Type: Bug
Component: tools
Description: [21:31:17.345] Succeeded in building MSI Installer Package package
[21:31:17.551] TRACE: exec: Done. Exit code: 0
[21:31:17.552] TRACE: assertEquals(0): Check command [c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-21+27-2343\\windows-x64.jdk\\jdk-21\\bin\\jpackage.exe --dest .\\test\\output --name Win8282351Test$-$$-$$$ --type msi --app-image .\\test\\appimage\\Win8282351Test --win-menu --win-shortcut -J-Djlink.debug=true --verbose](13) exited with 0 code
[21:31:17.553] TRACE: assertTrue(): Check [.\\test\\output\\Win8282351Test$-$$-$$$-1.0.msi] path exists
[21:31:17.554] TRACE: assertTrue(): Check [.\\test\\output\\Win8282351Test$-$$-$$$-1.0.msi] is a file
[21:31:17.559] TRACE: Create [C:\\sb\\prod\\1688159313\\testoutput\\test-support\\jtreg_open_test_jdk_tier2\\scratch\\23\\test\\unpacked-msi\\unpack.bat] text file...
[21:31:17.560] TRACE: icacls ".\\test\\unpacked-msi" /inheritance:e /grant Users:M
[21:31:17.560] TRACE: msiexec /a "test\\output\\Win8282351Test$-$$-$$$-1.0.msi" /qn TARGETDIR="C:\\sb\\prod\\1688159313\\testoutput\\test-support\\jtreg_open_test_jdk_tier2\\scratch\\23\\test\\unpacked-msi\\Program Files"
[21:31:17.566] TRACE: Done
[21:31:17.569] TRACE: exec: Execute [cmd /c .\\test\\unpacked-msi\\unpack.bat](3); discard I/O...
[21:31:29.245] TRACE: exec: Done. Exit code: 1618
[21:31:32.247] TRACE: exec: Execute [cmd /c .\\test\\unpacked-msi\\unpack.bat](3); discard I/O...
[21:31:36.672] TRACE: exec: Done. Exit code: 1618
[21:31:40.677] TRACE: exec: Execute [cmd /c .\\test\\unpacked-msi\\unpack.bat](3); discard I/O...
[21:31:51.174] TRACE: exec: Done. Exit code: 1618
[21:31:56.176] TRACE: exec: Execute [cmd /c .\\test\\unpacked-msi\\unpack.bat](3); discard I/O...
[21:32:00.017] TRACE: exec: Done. Exit code: 1618
[21:32:06.023] TRACE: exec: Execute [cmd /c .\\test\\unpacked-msi\\unpack.bat](3); discard I/O...
[21:32:09.202] TRACE: exec: Done. Exit code: 1618
[21:32:16.205] TRACE: exec: Execute [cmd /c .\\test\\unpacked-msi\\unpack.bat](3); discard I/O...
[21:32:21.330] TRACE: exec: Done. Exit code: 1618
[21:32:29.342] TRACE: exec: Execute [cmd /c .\\test\\unpacked-msi\\unpack.bat](3); discard I/O...
[21:32:32.799] TRACE: exec: Done. Exit code: 1618
[21:32:41.801] TRACE: exec: Execute [cmd /c .\\test\\unpacked-msi\\unpack.bat](3); discard I/O...
[21:32:46.092] TRACE: exec: Done. Exit code: 1618
[21:32:56.103] ERROR: Expected [0]. Actual [1618]: Check command [cmd /c .\\test\\unpacked-msi\\unpack.bat](3) exited with 0 code
[21:32:56.104] [  FAILED  ] Win8282351Test.test; checks=7
[21:32:56.107] [==========] 1 tests ran
[21:32:56.107] [  PASSED  ] 0 tests
[21:32:56.110] [  FAILED  ] 1 test, listed below
[21:32:56.111] [  FAILED  ] Win8282351Test.test; workDir=[.\\test]
[21:32:56.111] 1 FAILED TEST
----------System.err:(57/3896)*----------
java.lang.AssertionError: Expected [0]. Actual [1618]: Check command [cmd /c .\\test\\unpacked-msi\\unpack.bat](3) exited with 0 code
at jdk.jpackage.test.TKit.error(TKit.java:273)
at jdk.jpackage.test.TKit.assertEquals(TKit.java:576)
at jdk.jpackage.test.Executor$Result.assertExitCodeIs(Executor.java:186)
at jdk.jpackage.test.Executor$Result.assertExitCodeIsZero(Executor.java:193)
at jdk.jpackage.test.WindowsHelper.runMsiexecWithRetries(WindowsHelper.java:104)
at jdk.jpackage.test.WindowsHelper.lambda$createMsiPackageHandlers$4(WindowsHelper.java:141)
at jdk.jpackage.test.PackageTest$2.lambda$accept$1(PackageTest.java:469)
at jdk.jpackage.test.PackageTest$2.handleAction(PackageTest.java:521)
at jdk.jpackage.test.PackageTest$2.accept(PackageTest.java:463)
at jdk.jpackage.test.PackageTest$2.accept(PackageTest.java:411)
at jdk.jpackage.test.Functional$ThrowingConsumer.lambda$toConsumer$0(Functional.java:41)
at java.base/java.lang.Iterable.forEach(Iterable.java:75)
at jdk.jpackage.test.PackageTest.lambda$runActions$24(PackageTest.java:381)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1593)
at jdk.jpackage.test.PackageTest.lambda$runActions$25(PackageTest.java:380)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1593)
at jdk.jpackage.test.PackageTest.runActions(PackageTest.java:379)
at jdk.jpackage.test.RunnablePackageTest.run(RunnablePackageTest.java:58)
at Win8282351Test.test(Win8282351Test.java:104)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at jdk.jpackage.test.MethodCall.accept(MethodCall.java:145)
at jdk.jpackage.test.TestInstance.run(TestInstance.java:230)
at jdk.jpackage.test.TKit.lambda$ignoreExceptions$5(TKit.java:141)
at jdk.jpackage.test.TKit.lambda$runTests$3(TKit.java:126)
at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1707)
at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
at jdk.jpackage.test.TKit.lambda$runTests$4(TKit.java:123)
at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:109)
at jdk.jpackage.test.TKit.runTests(TKit.java:122)
at jdk.jpackage.test.Main.runTests(Main.java:79)
at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:109)
at jdk.jpackage.test.Main.main(Main.java:75)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1583)
java.lang.RuntimeException: 1 FAILED TEST
at jdk.jpackage.test.Main.reportSummary(Main.java:130)
at jdk.jpackage.test.Main.runTests(Main.java:90)
at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:109)
at jdk.jpackage.test.Main.main(Main.java:75)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1583)
JavaTest Message: Test threw exception: java.lang.RuntimeException: 1 FAILED TEST
JavaTest Message: shutting down test
STATUS:Failed.`main' threw exception: java.lang.RuntimeException: 1 FAILED TEST
OS: windows

-----
Title: [JDK-8315486] vmTestbase/nsk/jdwp/ThreadReference/ForceEarlyReturn/forceEarlyReturn002/forceEarlyReturn002.java timed out
Priority: P4
Type: Bug
Component: core-svc
Description: The following test failed in the JDK22 CI:
vmTestbase/nsk/jdwp/ThreadReference/ForceEarlyReturn/forceEarlyReturn002/forceEarlyReturn002.java
Here's a snippet from the log file:
#section:main
----------messages:(8/1260)----------
command: main nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002 -arch=linux-aarch64 -verbose -waittime=5 -debugee.vmkind=java -transport.address=dynamic -debugee.vmkeys="-XX:MaxRAMPercentage=6.25 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/20/36/bundles/linux-aarch64/jdk-20_linux-aarch64_bin.tar.gz/jdk-20 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S152533/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8611eaf9-de0a-4f95-baa6-82686a11fbb6/runs/61ff66a5-0237-488a-a072-83c1b0bd38d9/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdwp/tmp -Duse.JTREG_TEST_THREAD_FACTORY=Virtual -XX:+UseZGC -XX:+ZGenerational -XX:-VerifyContinuations"
reason: User specified action: run main/othervm/native nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002 -arch=${os.family}-${os.simpleArch} -verbose -waittime=5 -debugee.vmkind=java -transport.address=dynamic -debugee.vmkeys="${test.vm.opts} ${test.java.opts}"
started: Thu Aug 31 21:24:05 UTC 2023
Mode: othervm [/othervm specified]
Timeout information:
--- Timeout information end.
finished: Thu Aug 31 21:38:01 UTC 2023
elapsed time (seconds): 835.49
----------configuration:(0/0)----------
----------System.out:(340/14325)----------
Preparing debugee for testing
Launching debugee
transport port == 0, disabling SO_REUSEADDR
Debugee Starting java process:
"/opt/mach5/mesos/work_dir/jib-master/install/jdk-22+14-966/linux-aarch64-debug.jdk/jdk-22/fastdebug/bin/java" "-XX:MaxRAMPercentage=6.25" "-Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/20/36/bundles/linux-aarch64/jdk-20_linux-aarch64_bin.tar.gz/jdk-20" "-Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S152533/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8611eaf9-de0a-4f95-baa6-82686a11fbb6/runs/61ff66a5-0237-488a-a072-83c1b0bd38d9/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdwp/tmp" "-Duse.JTREG_TEST_THREAD_FACTORY=Virtual" "-XX:+UseZGC" "-XX:+ZGenerational" "-XX:-VerifyContinuations" "-Xrunjdwp:server=n,transport=dt_socket,address=localhost:37871,includevirtualthreads=y" "nsk.share.MainWrapper" "Virtual" "nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002a" "-arch=linux-aarch64" "-verbose" "-waittime=5" "-debugee.vmkind=java" "-transport.address=dynamic" "-debugee.vmkeys="-XX:MaxRAMPercentage=6.25 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/20/36/bundles/linux-aarch64/jdk-20_linux-aarch64_bin.tar.gz/jdk-20 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/cd627e65-f015-4fb1-a1d2-b6c9b8127f98-S152533/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/8611eaf9-de0a-4f95-baa6-82686a11fbb6/runs/61ff66a5-0237-488a-a072-83c1b0bd38d9/testoutput/test-support/jtreg_open_test_hotspot_jtreg_vmTestbase_nsk_jdwp/tmp -Duse.JTREG_TEST_THREAD_FACTORY=Virtual -XX:+UseZGC -XX:+ZGenerational -XX:-VerifyContinuations"" "-pipe.port=43471"
Debugee Establishing JDWP socket connection
Debugee Listening from debugee
Waiting for VM_INIT event
Querying for IDSizes
Resuming debugee VM
Waiting for signal from debugee: ready
debugee.stderr Debuggee nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002a : sending the command: ready
Received signal from debugee: ready
Create command: ThreadReference.ForceEarlyReturn
threadID = -1
Value = (INT)0
Sending command packet:
Packet header (11 bytes):
0000 (length) : 0x00000018 (24)
0004 (id)     : 0x00000003 (3)
0008 (flags)  : 0x00 (0)
0009 (cmd set): 0x0b (11)
000a (command): 0x0e (14)
Entire packet (24 bytes):
0000: 00 00 00 18 00 00 00 03 00 0b 0e ff ff ff ff ff   ................
0010: ff ff ff 49 00 00 00 00                           ...I....
Packet end
Waiting for reply packet
Reply packet received:
Packet header (11 bytes):
0000 (length) : 0x0000000b (11)
0004 (id)     : 0x00000003 (3)
0008 (flags)  : 0x80 (-128)
000a (error)  : 0x0014 (20)
Entire packet (11 bytes):
0000: 00 00 00 0b 00 00 00 03 80 00 14                  ...........
Packet end
Expected error: 20
debugee.stderr Debuggee: received the command: createStateTestThread
debugee.stderr Debuggee nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002a : sending the command: ready
Received signal from debugee: ready
debugee.stderr Debuggee: received the command: stateTestThreadNextState
debugee.stderr Debuggee nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002a : sending the command: ready
Received signal from debugee: ready
Create command: ThreadReference.ForceEarlyReturn
threadID = 19
Value = (INT)0
Sending command packet:
Packet header (11 bytes):
0000 (length) : 0x00000018 (24)
0004 (id)     : 0x00000018 (24)
0008 (flags)  : 0x00 (0)
0009 (cmd set): 0x0b (11)
000a (command): 0x0e (14)
Entire packet (24 bytes):
0000: 00 00 00 18 00 00 00 18 00 0b 0e 00 00 00 00 00   ................
0010: 00 00 13 49 00 00 00 00                           ...I....
Packet end
Waiting for reply packet
Reply packet received:
Packet header (11 bytes):
0000 (length) : 0x0000000b (11)
0004 (id)     : 0x00000018 (24)
0008 (flags)  : 0x80 (-128)
000a (error)  : 0x000d (13)
Entire packet (11 bytes):
0000: 00 00 00 0b 00 00 00 18 80 00 0d                  ...........
Packet end
Expected error: 13
debugee.stderr Debuggee: received the command: stateTestThreadNextState
Received signal from debugee: ready
debugee.stderr Debuggee nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002a : sending the command: ready
Create command: ThreadReference.ForceEarlyReturn
threadID = 19
Value = (INT)0
Sending command packet:
Packet header (11 bytes):
0000 (length) : 0x00000018 (24)
0004 (id)     : 0x00000019 (25)
0008 (flags)  : 0x00 (0)
0009 (cmd set): 0x0b (11)
000a (command): 0x0e (14)
Entire packet (24 bytes):
0000: 00 00 00 18 00 00 00 19 00 0b 0e 00 00 00 00 00   ................
0010: 00 00 13 49 00 00 00 00                           ...I....
Packet end
Waiting for reply packet
Reply packet received:
Packet header (11 bytes):
0000 (length) : 0x0000000b (11)
0004 (id)     : 0x00000019 (25)
0008 (flags)  : 0x80 (-128)
000a (error)  : 0x000d (13)
Entire packet (11 bytes):
0000: 00 00 00 0b 00 00 00 19 80 00 0d                  ...........
Packet end
Expected error: 13
debugee.stderr Debuggee: received the command: stateTestThreadNextState
debugee.stderr Debuggee nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002a : sending the command: ready
Received signal from debugee: ready
Create command: ThreadReference.ForceEarlyReturn
threadID = 19
Value = (INT)0
Sending command packet:
Packet header (11 bytes):
0000 (length) : 0x00000018 (24)
0004 (id)     : 0x0000001a (26)
0008 (flags)  : 0x00 (0)
0009 (cmd set): 0x0b (11)
000a (command): 0x0e (14)
Entire packet (24 bytes):
0000: 00 00 00 18 00 00 00 1a 00 0b 0e 00 00 00 00 00   ................
0010: 00 00 13 49 00 00 00 00                           ...I....
Packet end
Waiting for reply packet
Reply packet received:
Packet header (11 bytes):
0000 (length) : 0x0000000b (11)
0004 (id)     : 0x0000001a (26)
0008 (flags)  : 0x80 (-128)
000a (error)  : 0x000d (13)
Entire packet (11 bytes):
0000: 00 00 00 0b 00 00 00 1a 80 00 0d                  ...........
Packet end
Expected error: 13
debugee.stderr Debuggee: received the command: stateTestThreadNextState
debugee.stderr Debuggee nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002a : sending the command: ready
Received signal from debugee: ready
Create command: ThreadReference.ForceEarlyReturn
threadID = 19
Value = (INT)0
Sending command packet:
Packet header (11 bytes):
0000 (length) : 0x00000018 (24)
0004 (id)     : 0x0000001b (27)
0008 (flags)  : 0x00 (0)
0009 (cmd set): 0x0b (11)
000a (command): 0x0e (14)
Entire packet (24 bytes):
0000: 00 00 00 18 00 00 00 1b 00 0b 0e 00 00 00 00 00   ................
0010: 00 00 13 49 00 00 00 00                           ...I....
Packet end
Waiting for reply packet
Reply packet received:
Packet header (11 bytes):
0000 (length) : 0x0000000b (11)
0004 (id)     : 0x0000001b (27)
0008 (flags)  : 0x80 (-128)
000a (error)  : 0x000d (13)
Entire packet (11 bytes):
0000: 00 00 00 0b 00 00 00 1b 80 00 0d                  ...........
Packet end
Expected error: 13
debugee.stderr Debuggee: received the command: stateTestThreadNextState
debugee.stderr Debuggee nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002a : sending the command: ready
Received signal from debugee: ready
Create command: ThreadReference.ForceEarlyReturn
threadID = 19
Value = (INT)0
Sending command packet:
Packet header (11 bytes):
0000 (length) : 0x00000018 (24)
0004 (id)     : 0x0000001c (28)
0008 (flags)  : 0x00 (0)
0009 (cmd set): 0x0b (11)
000a (command): 0x0e (14)
Entire packet (24 bytes):
0000: 00 00 00 18 00 00 00 1c 00 0b 0e 00 00 00 00 00   ................
0010: 00 00 13 49 00 00 00 00                           ...I....
Packet end
Waiting for reply packet
Reply packet received:
Packet header (11 bytes):
0000 (length) : 0x0000000b (11)
0004 (id)     : 0x0000001c (28)
0008 (flags)  : 0x80 (-128)
000a (error)  : 0x000a (10)
Entire packet (11 bytes):
0000: 00 00 00 0b 00 00 00 1c 80 00 0a                  ...........
Packet end
Expected error: 10
Create command: ThreadReference.ForceEarlyReturn
threadID = 19
Value = (INT)0
Sending command packet:
Packet header (11 bytes):
0000 (length) : 0x00000018 (24)
0004 (id)     : 0x0000001e (30)
0008 (flags)  : 0x00 (0)
0009 (cmd set): 0x0b (11)
000a (command): 0x0e (14)
Entire packet (24 bytes):
0000: 00 00 00 18 00 00 00 1e 00 0b 0e 00 00 00 00 00   ................
0010: 00 00 13 49 00 00 00 00                           ...I....
Packet end
Waiting for reply packet
Reply packet received:
Packet header (11 bytes):
0000 (length) : 0x0000000b (11)
0004 (id)     : 0x0000001e (30)
0008 (flags)  : 0x80 (-128)
000a (error)  : 0x000a (10)
Entire packet (11 bytes):
0000: 00 00 00 0b 00 00 00 1e 80 00 0a                  ...........
Packet end
Expected error: 10
debugee.stderr Debuggee: received the command: stopInNative
debugee.stderr Enter native method
debugee.stderr Debuggee nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002a : sending the command: ready
Received signal from debugee: ready
Create command: ThreadReference.ForceEarlyReturn
threadID = 20
Value = (INT)0
Sending command packet:
Packet header (11 bytes):
0000 (length) : 0x00000018 (24)
0004 (id)     : 0x00000033 (51)
0008 (flags)  : 0x00 (0)
0009 (cmd set): 0x0b (11)
000a (command): 0x0e (14)
Entire packet (24 bytes):
0000: 00 00 00 18 00 00 00 33 00 0b 0e 00 00 00 00 00   .......3........
0010: 00 00 14 49 00 00 00 00                           ...I....
Packet end
Waiting for reply packet
Reply packet received:
Packet header (11 bytes):
0000 (length) : 0x0000000b (11)
0004 (id)     : 0x00000033 (51)
0008 (flags)  : 0x80 (-128)
000a (error)  : 0x000d (13)
Entire packet (11 bytes):
0000: 00 00 00 0b 00 00 00 33 80 00 0d                  .......3...
Packet end
Expected error: 13
Create command: ThreadReference.ForceEarlyReturn
threadID = 20
Value = (INT)0
Sending command packet:
Packet header (11 bytes):
0000 (length) : 0x00000018 (24)
0004 (id)     : 0x00000035 (53)
0008 (flags)  : 0x00 (0)
0009 (cmd set): 0x0b (11)
000a (command): 0x0e (14)
Entire packet (24 bytes):
0000: 00 00 00 18 00 00 00 35 00 0b 0e 00 00 00 00 00   .......5........
0010: 00 00 14 49 00 00 00 00                           ...I....
Packet end
Waiting for reply packet
Reply packet received:
Packet header (11 bytes):
0000 (length) : 0x0000000b (11)
0004 (id)     : 0x00000035 (53)
0008 (flags)  : 0x80 (-128)
000a (error)  : 0x0020 (32)
Entire packet (11 bytes):
0000: 00 00 00 0b 00 00 00 35 80 00 20                  .......5..
Packet end
Expected error: 32
Waiting for reply packet
debugee.stderr Debuggee: received the command: exitInNative
debugee.stderr Debuggee nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002a : sending the command: ready
Reply packet received:
Packet header (11 bytes):
0000 (length) : 0x0000000f (15)
0004 (id)     : 0x00000036 (54)
0008 (flags)  : 0x80 (-128)
000a (error)  : 0x0000 (0)
Entire packet (15 bytes):
0000: 00 00 00 0f 00 00 00 36 80 00 00 00 00 00 02      .......6.......
Packet end
Checking reply packet header
Parsing reply packet:
debugee.stderr Debuggee: received the command: startNewThread
debugee.stderr Debuggee nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002a : sending the command: ready
Create command: ThreadReference.ForceEarlyReturn
threadID = 21
Value = (VOID)0
Sending command packet:
Packet header (11 bytes):
0000 (length) : 0x00000014 (20)
0004 (id)     : 0x00000037 (55)
0008 (flags)  : 0x00 (0)
0009 (cmd set): 0x0b (11)
000a (command): 0x0e (14)
Entire packet (20 bytes):
0000: 00 00 00 14 00 00 00 37 00 0b 0e 00 00 00 00 00   .......7........
0010: 00 00 15 56                                       ...V
Packet end
Waiting for reply packet
Reply packet received:
Packet header (11 bytes):
0000 (length) : 0x0000000b (11)
0004 (id)     : 0x00000037 (55)
0008 (flags)  : 0x80 (-128)
000a (error)  : 0x001f (31)
Entire packet (11 bytes):
0000: 00 00 00 0b 00 00 00 37 80 00 1f                  .......7...
Packet end
Expected error: 31
Waiting for reply packet
Reply packet received:
Packet header (11 bytes):
0000 (length) : 0x0000000b (11)
0004 (id)     : 0x00000038 (56)
0008 (flags)  : 0x80 (-128)
000a (error)  : 0x0000 (0)
Entire packet (11 bytes):
0000: 00 00 00 0b 00 00 00 38 80 00 00                  .......8...
Packet end
Checking reply packet header
Parsing reply packet:
Received signal from debugee: ready
Sending signal to debugee: quit
Waiting for debugee exits
Timeout signalled after 480 seconds
# ERROR: Debugee FAILED with exit code: 134
The following stacktrace is for failure analysis.
nsk.share.TestFailure: Debugee FAILED with exit code: 134
at nsk.share.Log.logExceptionForFailureAnalysis(Log.java:431)
at nsk.share.Log.complain(Log.java:402)
at nsk.share.jdwp.TestDebuggerType1.quitDebugee(TestDebuggerType1.java:191)
at nsk.share.jdwp.TestDebuggerType1.runIt(TestDebuggerType1.java:131)
at nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002.run(forceEarlyReturn002.java:103)
at nsk.jdwp.ThreadReference.ForceEarlyReturn.forceEarlyReturn002.forceEarlyReturn002.main(forceEarlyReturn002.java:99)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.VirtualThread.run(VirtualThread.java:309)
TEST FAILED
#
#  SUMMARY: Following errors occured
#      during test execution:
#
# ERROR: Debugee FAILED with exit code: 134
----------System.err:(0/0)----------
----------rerun:(42/11323)*----------
result: Error. Program `/opt/mach5/mesos/work_dir/jib-master/install/jdk-22+14-966/linux-aarch64-debug.jdk/jdk-22/fastdebug/bin/java' timed out (timeout set to 480000ms, elapsed time including timeout handling was 835480ms).
The test timed out, but it appears to have happened because
the debuggee failed with "exit code: 134". I don't see any
hs_err_pid files in the artifacts for this test run.
OS: linux

-----
Title: [JDK-8315825] Open some swing tests
Priority: P4
Type: Bug
Component: client-libs
Description: Opening some closed swing tests
test/jdk/javax/swing/JComponent/bug4765272.java
test/jdk/javax/swing/JComponent/bug4979794.java
test/jdk/javax/swing/JPanel/bug4907772.java
test/jdk/javax/swing/RootPaneChecking/RootPaneChecking.java
OS: generic

-----
Title: [JDK-8315882] Open some swing tests 2
Priority: P4
Type: Bug
Component: client-libs
Description: Opening some closed swing tests
OS: generic

-----
Title: [JDK-8315883] Open source several Swing JToolbar tests
Priority: P4
Type: Bug
Component: client-libs
Description: Convert JToolbar applet based tests into main

-----
Title: [JDK-8315952] Open source several Swing JToolbar JTooltip JTree tests
Priority: P4
Type: Bug
Component: client-libs
Description: Convert JToolbar, JTooltip, and JTree applet based tests into main

-----
Title: [JDK-8316056] Open source several Swing JTree tests
Priority: P4
Type: Bug
Component: client-libs
Description: Convert JTree applet based tests into main

-----
Title: [JDK-8316146] Open some swing tests 4
Priority: P4
Type: Bug
Component: client-libs
Description: Opening some closed swing tests
OS: generic

-----
Title: [JDK-8316149] Open source several Swing JTree JViewport KeyboardManager tests
Priority: P4
Type: Bug
Component: client-libs
Description: Convert JTree, JViewport, and KeyboardManager applet based tests into main

-----
Title: [JDK-8316218] Open some swing tests 5
Priority: P4
Type: Bug
Component: client-libs
Description: Opening some closed swing tests
OS: generic

-----
Title: [JDK-8316371] Open some swing tests 6
Priority: P4
Type: Bug
Component: client-libs
Description: Opening some closed swing tests
OS: generic

-----
Title: [JDK-8316627] JViewport Test headless failure
Priority: P2
Type: Bug
Component: client-libs
Description: The following test failed in the JDK22 CI:
javax/swing/JViewport/bug4546474.java
test result: Failed. Execution failed: `main' threw exception: java.awt.AWTException: headless environment

-----
Title: [JDK-8316885] jcmd: Compiler.CodeHeap_Analytics cmd does not inform about missing aggregate
Priority: P4
Type: Enhancement
Component: hotspot
Description: If jcmd users want to print statistical data about a specific property of the code heap (instead of requesting "all"), they first have to aggregate such data. If this step was forgotten, the requested function just returns. This should be improved.
------ Output before enhancement --------
bin/jcmd  Compiler.CodeHeap_Analytics FreeSpace
:
__ CodeHeapStateAnalytics lock wait took      0.000 seconds _________
__ CodeHeapStateAnalytics total duration      0.000 seconds _________
------ Output after enhancement --------
bin/jcmd  Compiler.CodeHeap_Analytics FreeSpace
:
__ CodeHeapStateAnalytics lock wait took      0.000 seconds _________
No aggregated data available for heap CodeHeap. Run function aggregate first.
__ CodeHeapStateAnalytics total duration      0.000 seconds _________
OS: generic

-----
Title: [JDK-8317283] jpackage tests run osx-specific checks on windows and linux
Priority: P4
Type: Bug
Component: tools
Description: In all app image packaging tests output of on all platforms:
---
[17:31:52.845] TRACE: assertTrue(): Unexptected value in app image file for
[17:31:52.860] TRACE: assertTrue(): Unexptected value in app image file for
---
These checks were introduced in JDK-8293462. Commit - https://github.com/openjdk/jdk/commit/1e222bccd3807c1be0d1d824e0ff9745751d8375#diff-1c3ecd7a8a4a4125f52b6f7a7d4f83a050b5f3603d074151ab946f877e6c6d9fR845
The checks are harmless but should be executed only on osx.
OS: generic

-----
Title: [JDK-8317636] Improve heap walking API tests to verify correctness of field indexes
Priority: P4
Type: Enhancement
Component: hotspot
Description: Need to improve heap function tests to verify correctness of  field indexes (jvmtiHeapReferenceInfoField::index) for JVMTI_HEAP_REFERENCE_FIELD and JVMTI_HEAP_REFERENCE_STATIC_FIELD references for different object hierarchy as described in jvmtiHeapReferenceInfoField spec
OS: generic

-----
Title: [JDK-8317808] HTTP/2 stream cancelImpl may leave subscriber registered
Priority: P4
Type: Bug
Component: core-libs
Description: Some of the ThrowingSubscriberXxx tests (typically those that use a streaming body) have been observed failing intermittently (though rarely) in timeout. The error message printed at the end showed that some HTTP/2 stream subscribers had not been properly deregistered when an exception was thrown in GET_BODY.
The issue appears to be a race condition between cancelImpl and schedule where the scheduler `sched` may get stopped before the subscriber is exceptionally completed.
A simple fix is to ensure that cancelImpl will complete the subscriber, if needed.

-----
Title: [JDK-8317919] pthread_attr_init handle return value and destroy pthread_attr_t object
Priority: P4
Type: Bug
Component: hotspot
Description: Seems we miss on AIX and Linux the handling of pthread_attr_init  return value and sometimes in special cases destroying the related pthread_attr_t object.

-----
Title: [JDK-8319233] AArch64: Build failure with clang due to -Wformat-nonliteral warning
Priority: P4
Type: Bug
Component: hotspot
Description: I tested both {release, fastdebug} on {clang-11, clang-12, clang-14, clang-15} + aarch64 + ubuntu-22.04. The following error log would be generated.
=== Output from failing command(s) repeated here ===
* For target hotspot_variant-server_libjvm_objs_os_linux_aarch64.o:
~/jdk_src/src/hotspot/os_cpu/linux_aarch64/os_linux_aarch64.cpp:266:62: error: format string is not a string literal [-Werror,-Wformat-nonliteral]
VMError::report_and_die(thread, uc, nullptr, 0, msg, detail_msg, va_dummy);
^~~~~~~~~~
1 error generated.
* All command lines available in ~/build-fastdebug/make-support/failure-logs.
=== End of repeated output ===
Note-1: I tested on clang-14+aarch64+macos, and the JDK build can pass.
Note-2: I think it's a common issue. ppc or riscv should be affected as well. Unfortunately, I didn't have the hardware on hand.

-----
Title: [JDK-8320372] test/jdk/sun/security/x509/DNSName/LeadingPeriod.java validity check failed
Priority: P2
Type: Bug
Component: security-libs
Description: The test has started to fail on all platforms with:
CertificateExpiredException: NotAfter: Sat Nov 18 20:51:45 UTC 2023
java.security.cert.CertPathValidatorException: validity check failed
at java.base/sun.security.provider.certpath.PKIXMasterCertPathValidator.validate(PKIXMasterCertPathValidator.java:135)
at java.base/sun.security.provider.certpath.PKIXCertPathValidator.validate(PKIXCertPathValidator.java:224)
at java.base/sun.security.provider.certpath.PKIXCertPathValidator.validate(PKIXCertPathValidator.java:144)
at java.base/sun.security.provider.certpath.PKIXCertPathValidator.engineValidate(PKIXCertPathValidator.java:83)
at java.base/java.security.cert.CertPathValidator.validate(CertPathValidator.java:309)
at LeadingPeriod.main(LeadingPeriod.java:97)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.Thread.run(Thread.java:1570)
Caused by: java.security.cert.CertificateExpiredException: NotAfter: Sat Nov 18 20:51:45 UTC 2023
at java.base/sun.security.x509.CertificateValidity.valid(CertificateValidity.java:182)
at java.base/sun.security.x509.X509CertImpl.checkValidity(X509CertImpl.java:534)
at java.base/sun.security.provider.certpath.BasicChecker.verifyValidity(BasicChecker.java:190)
at java.base/sun.security.provider.certpath.BasicChecker.check(BasicChecker.java:144)
at java.base/sun.security.provider.certpath.PKIXMasterCertPathValidator.validate(PKIXMasterCertPathValidator.java:125)
... 9 more

-----
Title: [JDK-8320676] Manual printer tests have no Pass/Fail buttons, instructions close set 1
Priority: P4
Type: Bug
Component: client-libs
Description: The following manual printer tests use Sysout framework/classes to display its UI; it was used with applets but the tests are now converted to standalone apps, and there are no Pass or Fail buttons displayed. The instructions quickly appear on the screen and close quickly; in some cases they close after you click Print/OK in a displayed dialog.
This is not the intended behaviour.
The list of tests:
test/jdk/java/awt/print/PageFormat/PageSetupDialog.java
test/jdk/java/awt/print/PrinterJob/Cancel/PrinterJobCancel.java
test/jdk/java/awt/print/PrinterJob/Collate2DPrintingTest.java
test/jdk/java/awt/print/PrinterJob/DrawImage.java
test/jdk/java/awt/print/PrinterJob/DrawStringMethods.java
test/jdk/java/awt/print/PrinterJob/InvalidPage.java
test/jdk/java/awt/print/PrinterJob/JobName/PrinterJobName.java
test/jdk/java/awt/print/PrinterJob/NumCopies.java
test/jdk/java/awt/print/PrinterJob/PageDlgPrnButton.java
test/jdk/java/awt/print/PrinterJob/PrintCompoundString.java
test/jdk/java/awt/print/PrinterJob/PrintImage.java
test/jdk/java/awt/print/PrinterJob/PrintNullString.java
test/jdk/java/awt/print/PrinterJob/PrintParenString.java
test/jdk/java/awt/print/PrinterJob/PrintTranslatedFont.java
test/jdk/java/awt/print/PrinterJob/raster/RasterTest.java
test/jdk/java/awt/print/PrinterJob/ValidatePage/ValidatePage.java
I also attached as sysout.testlist file to this bug.
You can run the entire set by using a command-line like this:
java -jar jtreg.jar -nr -v $(cat sysout.testlist)

-----
Title: [JDK-8320691] Timeout handler on Windows takes 2 hours to complete
Priority: P4
Type: Bug
Component: infrastructure
Description: With latest MSVC toolchain, the timeout handler takes 2 hours to complete. Checking the process.html file, we can find the following text:
0:048 cdb: Reading initial command '.dump /f core.46216;qd'
*****************************************************************************
* .dump /f is not supported on a user mode process.                         *
*                                                                           *
* .dump /ma creates a complete memory dump of a user mode process.          *
*****************************************************************************
...
^ Extra character error in '.dump /f core.46216;qd'
0:048 WARNING: tool timed out: killed process after 3600000 ms
----------------------------------------
[2023-11-22 22:36:16] exit code: -2 time: 3599998 ms
This is repeated twice for two processes, taking up a total of 2 hours.
We should update the dump command to use /ma instead of /f.
OS: windows

-----
Title: [JDK-8320706] RuntimePackageTest.testUsrInstallDir test fails on Linux
Priority: P4
Type: Bug
Component: tools
Description: When running the test with the installation of .deb and .rpm packages produced by jpackage the test throws an exception:
---
java.lang.NullPointerException: Cannot invoke "java.nio.file.Path.equals(Object)" because the return value of "java.nio.file.Path.getFileName()" is null
at jdk.jpackage.test.JPackageCommand.lambda$assertFileInAppImage$37(JPackageCommand.java:900)
at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:178)
at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)
at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:517)
at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:507)
at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:583)
at java.base/java.util.stream.AbstractPipeline.evaluateToArrayNode(AbstractPipeline.java:252)
at java.base/java.util.stream.ReferencePipeline.toArray(ReferencePipeline.java:616)
at java.base/java.util.stream.ReferencePipeline.toArray(ReferencePipeline.java:622)
at java.base/java.util.stream.ReferencePipeline.toList(ReferencePipeline.java:627)
at jdk.jpackage.test.JPackageCommand.assertFileInAppImage(JPackageCommand.java:901)
at jdk.jpackage.test.JPackageCommand.assertFileInAppImage(JPackageCommand.java:884)
at jdk.jpackage.test.JPackageCommand.assertAppImageFile(JPackageCommand.java:834)
at jdk.jpackage.test.JPackageCommand.assertAppLayout(JPackageCommand.java:808)
at jdk.jpackage.test.PackageTest$Handler.verifyPackageInstalled(PackageTest.java:656)
at jdk.jpackage.test.PackageTest$Handler.accept(PackageTest.java:592)
at jdk.jpackage.test.PackageTest$2.accept(PackageTest.java:504)
at jdk.jpackage.test.PackageTest$2.accept(PackageTest.java:411)
at jdk.jpackage.test.Functional$ThrowingConsumer.lambda$toConsumer$0(Functional.java:41)
at java.base/java.lang.Iterable.forEach(Iterable.java:75)
at jdk.jpackage.test.PackageTest.lambda$runActions$24(PackageTest.java:381)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
at jdk.jpackage.test.PackageTest.lambda$runActions$25(PackageTest.java:380)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
at jdk.jpackage.test.PackageTest.runActions(PackageTest.java:379)
at jdk.jpackage.test.RunnablePackageTest.run(RunnablePackageTest.java:58)
at RuntimePackageTest.testUsrInstallDir(RuntimePackageTest.java:91)
---
OS: linux

-----
Title: [JDK-8320916] jdk/jfr/event/gc/stacktrace/TestParallelMarkSweepAllocationPendingStackTrace.java failed with "OutOfMemoryError: GC overhead limit exceeded"
Priority: P4
Type: Bug
Component: hotspot
Description: The following test failed in the JDK22 CI:
jdk/jfr/event/gc/stacktrace/TestParallelMarkSweepAllocationPendingStackTrace.java
Here's a snippet from the log file:
#section:main
----------messages:(7/558)----------
command: main -XX:MaxNewSize=10M -Xmx64M -XX:+UseParallelGC -Xlog:gc* jdk.jfr.event.gc.stacktrace.TestParallelMarkSweepAllocationPendingStackTrace
reason: User specified action: run main/othervm -XX:MaxNewSize=10M -Xmx64M -XX:+UseParallelGC -Xlog:gc* jdk.jfr.event.gc.stacktrace.TestParallelMarkSweepAllocationPendingStackTrace
started: Tue Nov 28 14:42:35 GMT 2023
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.jfr,java.management,jdk.management
finished: Tue Nov 28 14:42:38 GMT 2023
elapsed time (seconds): 3.116
----------configuration:(3/66)----------
[3.047s][info][gc,heap        ] GC(55) PSYoungGen: 4096K(7168K)-2394K(7168K) Eden: 4096K(4096K)-2394K(4096K) From: 0K(3072K)-0K(3072K)
[3.047s][info][gc,heap        ] GC(55) ParOldGen: 54863K(55296K)-54894K(55296K)
[3.047s][info][gc,metaspace   ] GC(55) Metaspace: 6549K(6912K)-6547K(6912K) NonClass: 5863K(6080K)-5861K(6080K) Class: 685K(832K)-685K(832K)
[3.047s][info][gc             ] GC(55) Pause Full (Ergonomics) 57M-55M(61M) 30.770ms
[3.047s][info][gc,cpu         ] GC(55) User=0.05s Sys=0.00s Real=0.03s
[3.059s][info][gc,heap,exit   ] Heap
[3.059s][info][gc,heap,exit   ]  PSYoungGen      total 7168K, used 2621K [0x00000007ff600000, 0x0000000800000000, 0x0000000800000000)
[3.059s][info][gc,heap,exit   ]   eden space 4096K, 63% used [0x00000007ff600000,0x00000007ff88f440,0x00000007ffa00000)
[3.059s][info][gc,heap,exit   ]   from space 3072K, 0% used [0x00000007ffa00000,0x00000007ffa00000,0x00000007ffd00000)
[3.059s][info][gc,heap,exit   ]   to   space 3072K, 0% used [0x00000007ffd00000,0x00000007ffd00000,0x0000000800000000)
[3.059s][info][gc,heap,exit   ]  ParOldGen       total 55296K, used 54894K [0x00000007fc000000, 0x00000007ff600000, 0x00000007ff600000)
[3.059s][info][gc,heap,exit   ]   object space 55296K, 99% used [0x00000007fc000000,0x00000007ff59ba90,0x00000007ff600000)
[3.059s][info][gc,heap,exit   ]  Metaspace       used 6601K, committed 6976K, reserved 1114112K
[3.059s][info][gc,heap,exit   ]   class space    used 696K, committed 896K, reserved 1048576K
----------System.err:(38/2923)----------
java.lang.OutOfMemoryError: GC overhead limit exceeded
at java.base/jdk.internal.util.ReferencedKeyMap.lookupKey(ReferencedKeyMap.java:176)
at java.base/jdk.internal.util.ReferencedKeyMap.get(ReferencedKeyMap.java:209)
at java.base/jdk.internal.util.ReferencedKeySet.get(ReferencedKeySet.java:173)
at java.base/java.lang.invoke.MethodType.makeImpl(MethodType.java:401)
at java.base/java.lang.invoke.MethodType.methodType(MethodType.java:382)
at java.base/java.lang.invoke.MethodTypeForm.canonicalize(MethodTypeForm.java:253)
at java.base/java.lang.invoke.MethodTypeForm.findForm(MethodTypeForm.java:220)
at java.base/java.lang.invoke.MethodType.makeImpl(MethodType.java:416)
at java.base/java.lang.invoke.MethodType.methodType(MethodType.java:382)
at java.base/java.lang.invoke.MethodType.changeReturnType(MethodType.java:704)
at java.base/java.lang.invoke.InnerClassLambdaMetafactory.(InnerClassLambdaMetafactory.java:174)
at java.base/java.lang.invoke.LambdaMetafactory.metafactory(LambdaMetafactory.java:336)
at java.base/java.lang.invoke.DirectMethodHandle$Holder.invokeStatic(DirectMethodHandle$Holder)
at java.base/java.lang.invoke.Invokers$Holder.invokeExact_MT(Invokers$Holder)
at java.base/java.lang.invoke.BootstrapMethodInvoker.invoke(BootstrapMethodInvoker.java:134)
at java.base/java.lang.invoke.CallSite.makeSite(CallSite.java:316)
at java.base/java.lang.invoke.MethodHandleNatives.linkCallSiteImpl(MethodHandleNatives.java:275)
at java.base/java.lang.invoke.MethodHandleNatives.linkCallSite(MethodHandleNatives.java:265)
at jdk.jfr/jdk.jfr.internal.consumer.ConstantMap.resolve(ConstantMap.java:131)
at jdk.jfr/jdk.jfr.internal.consumer.ChunkParser.lambda$new$2(ChunkParser.java:143)
at jdk.jfr/jdk.jfr.internal.consumer.ChunkParser$$Lambda/0x00000001250adc58.accept(Unknown Source)
at jdk.jfr/jdk.jfr.internal.LongMap.forEach(LongMap.java:246)
at jdk.jfr/jdk.jfr.internal.consumer.ChunkParser.(ChunkParser.java:143)
at jdk.jfr/jdk.jfr.internal.consumer.ChunkParser.(ChunkParser.java:109)
at jdk.jfr/jdk.jfr.internal.consumer.ChunkParser.(ChunkParser.java:105)
at jdk.jfr/jdk.jfr.consumer.RecordingFile.createChunkParser(RecordingFile.java:318)
at jdk.jfr/jdk.jfr.consumer.RecordingFile.findNext(RecordingFile.java:294)
at jdk.jfr/jdk.jfr.consumer.RecordingFile.(RecordingFile.java:89)
at jdk.jfr/jdk.jfr.consumer.RecordingFile.readAllEvents(RecordingFile.java:271)
at jdk.test.lib.jfr.Events.fromRecording(Events.java:275)
at jdk.jfr.event.gc.stacktrace.AllocationStackTrace.allocAndCheck(AllocationStackTrace.java:386)
at jdk.jfr.event.gc.stacktrace.AllocationStackTrace.testAllocEvent(AllocationStackTrace.java:343)
JavaTest Message: Test threw exception: java.lang.OutOfMemoryError: GC overhead limit exceeded
JavaTest Message: shutting down test
STATUS:Failed.`main' threw exception: java.lang.OutOfMemoryError: GC overhead limit exceeded
----------rerun:(41/8701)*----------
OS: os_x

-----
Title: [JDK-8321818] vmTestbase/nsk/stress/strace/strace015.java failed with 'Cannot read the array length because "<local4>" is null'
Priority: P4
Type: Bug
Component: hotspot
Description: The following test failed in the JDK22 CI:
vmTestbase/nsk/stress/strace/strace015.java
Here's a snippet from the log file:
#section:main
----------messages:(6/268)----------
command: main nsk.stress.strace.strace015
reason: User specified action: run main/othervm/native nsk.stress.strace.strace015
started: Fri Dec 08 07:21:40 UTC 2023
Mode: othervm [/othervm specified]
finished: Fri Dec 08 07:21:41 UTC 2023
elapsed time (seconds): 1.142
----------configuration:(0/0)----------
----------System.out:(0/0)----------
----------System.err:(12/806)----------
java.lang.NullPointerException: Cannot read the array length because "" is null
at nsk.stress.strace.strace015.makeSnapshot(strace015.java:141)
at nsk.stress.strace.strace015.main(strace015.java:78)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1570)
JavaTest Message: Test threw exception: java.lang.NullPointerException: Cannot read the array length because "" is null
JavaTest Message: shutting down test
STATUS:Failed.`main' threw exception: java.lang.NullPointerException: Cannot read the array length because "" is null
----------rerun:(36/8488)*----------
OS: linux

-----
Title: [JDK-8322983] Virtual Threads: exclude 2 tests
Priority: P4
Type: Bug
Component: hotspot
Description: Tests
runtime/classFileParserBug/TestEmptyBootstrapMethodsAttr.java
runtime/logging/LoaderConstraintsTest.java
fail with virtual threads. Shouldn't be executed in this mode.

-----
Title: [JDK-8324672] Update jdk/java/time/tck/java/time/TCKInstant.java now() to be more robust
Priority: P4
Type: Bug
Component: core-libs
Description: Test
jdk/java/time/tck/java/time/TCKInstant.java::now()
checks that time between 2 invocations is less than 0.1 sec.
It works usually but might fail with heavy load like batch compilation or STW gc.
Need to update it to use at least 10 seconds.

-----
Title: [JDK-8324807] Manual printer tests have no Pass/Fail buttons, instructions close set 2
Priority: P4
Type: Bug
Component: client-libs
Description: The following manual printer tests use Sysout framework/classes to display its UI; it was used with applets but the tests are now converted to standalone apps, and there are no Pass or Fail buttons displayed. The instructions quickly appear on the screen and close quickly; in some cases they close after you click Print/OK in a displayed dialog.
This is not the intended behaviour.
The list of tests:
test/jdk/java/awt/print/PrinterJob/Collate2DPrintingTest.java
test/jdk/java/awt/print/PrinterJob/DrawImage.java
test/jdk/java/awt/print/PrinterJob/DrawStringMethods.java
test/jdk/java/awt/print/PrinterJob/InvalidPage.java
test/jdk/java/awt/print/PrinterJob/NumCopies.java
test/jdk/java/awt/print/PrinterJob/JobName/PrinterJobName.java

-----
Title: [JDK-8324838] test_nmt_locationprinting.cpp broken in the gcc windows build
Priority: P4
Type: Bug
Component: hotspot
Description: test_nmt_locationprinting.cpp defines method test_for_dead_c_heap_block unconditionally, but this method is only ever used on Linux. In the gcc windows build this fires an unused method warning and breaks the gtest suite. Since this is never used outside of Linux, make this method's definition only appear on Linux to avoid polluting code on other platforms

-----
Title: [JDK-8325042] Remove unused JVMDITools test files
Priority: P4
Type: Sub-task
Component: core-svc
Description: The files
test/hotspot/jtreg/vmTestbase/nsk/share/JVMDITools.h
test/hotspot/jtreg/vmTestbase/nsk/share/JVMDITools.cpp
are no longer used.  They are lingering leftovers from the long-ago removal of JVMDI.  They should be removed.

-----
Title: [JDK-8325529] Remove unused imports from `ModuleGenerator` test file
Priority: P4
Type: Bug
Component: tools
Description: The file open/test/langtools/jdk/javadoc/tool/sampleapi/lib/sampleapi/generator/ModuleGenerator.java
has unused imports.
Fixing them in other PRs clutters up those PRs.  They should be removed.

-----
Title: [JDK-8325659] Normalize Random usage by incubator vector tests
Priority: P4
Type: Enhancement
Component: hotspot
Description: Our tests (test/jdk/jdk/incubator/vector) now have a number of issues in their approach to use randomisation:
1. The seed for RNG is taken from a dedicated property, the 'jdk.test.lib.random.seed'. If the property is not set, a default value of 1337 is used. Effectively, that means that by default the tests do always run with the same value, which is unacceptable.
2. I see no reason against using the standard Utils.getRandomInstance (and @key randomness) there.
Superficially, the loopopts/superword/TestAlignVectorFuzzer.java presents a nice example.
3. Many tests create their own ad-hoc RNGs like this:
int origin = (new java.util.Random()).nextInt(SPECIES.length());
int part = (new java.util.Random()).nextInt(2);
I suggest to change all those occurrences to use the standard AbstractVectorTest.RAND field. Or Utils.getRandomInstance if the former is not handy enough.

-----
Title: [JDK-8325937] runtime/handshake/HandshakeDirectTest.java causes "monitor end should be strictly below the frame pointer" assertion failure on AArch64
Priority: P2
Type: Bug
Component: hotspot
Description: This test fails intermittently (maybe 1 in 50 attempts) in our CI, but so far only on one type of machine (CPU is Arm Neoverse N2).
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/home/ent-user/jdk_src/src/hotspot/cpu/aarch64/frame_aarch64.cpp:348), pid=1299863, tid=1299905
#  assert((intptr_t*) result
OS: linux

-----
Title: [JDK-8326421] Add jtreg test for large arrayCopy disjoint case.
Priority: P4
Type: Enhancement
Component: hotspot
Description: This will test byte array copy operation for aligned and non aligned cases with array length greater than 2.5MB.

-----
Title: [JDK-8326525] com/sun/tools/attach/BasicTests.java does not verify AgentLoadException case
Priority: P4
Type: Bug
Component: hotspot
Description: from BasicTests.java:
// Test 2 - attempt to load an agent that does not exist
System.out.println(" - Test: Load an agent that does not exist");
try {
vm.loadAgent("SilverBullet.jar");
} catch (AgentLoadException x) {
System.out.println(" - AgentLoadException thrown as expected!");
}
The test does not verify that AgentLoadException is thrown

-----
Title: [JDK-8327098] GTest needs larger combination limit
Priority: P4
Type: Bug
Component: hotspot
Description: GHA pre-integration tests have been observed to fail with the following error:
```
----------System.err:(10/590)----------
java.lang.AssertionError: gtest execution failed; exit code = 2. the failed tests: [LogSelectionList::combination_limit]
at GTestWrapper.main(GTestWrapper.java:98)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.Thread.run(Thread.java:1575)
JavaTest Message: Test threw exception: java.lang.AssertionError
JavaTest Message: shutting down test
```
which derives from:
```
TEST(LogSelectionList, combination_limit) {
size_t max_combinations = LogSelectionList::MaxSelections;
EXPECT_GT(max_combinations, LogTagSet::ntagsets())

-----
Title: [JDK-8327390] JitTester: Implement temporary folder functionality
Priority: P4
Type: Enhancement
Component: hotspot
Description: The JITTester relies on standard OS / Java library functionality to create temporary folders and never cleans them.
This creates problems in CI machines and also complicates problems investigation. We need to have a dedicated TempDir entity that we could adjust during problems investigations and development. It can also be a home for various file-related activities, like executing FailureHandler.

-----
Title: [JDK-8327460] Compile tests with the same visibility rules as product code
Priority: P3
Type: Bug
Component: infrastructure
Description: Currently, our symbol visibility handling for tests are sloppy; we only handle it properly on Windows. We need to bring it up to the same levels as product code. This is a prerequisite for JDK-8327045, which in turn is a building block for Hermetic Java.

-----
Title: [JDK-8327476] Upgrade JLine to 3.26.1
Priority: P4
Type: Task
Component: tools
Description: The JLine inside the JDK should be upgraded to JLine 3.26.1.

-----
Title: [JDK-8327505] Test com/sun/jmx/remote/NotificationMarshalVersions/TestSerializationMismatch.java fails
Priority: P4
Type: Bug
Component: core-svc
Description: Test: com/sun/jmx/remote/NotificationMarshalVersions/TestSerializationMismatch.java
This test has started failing fairly regularly in our CI. A typical failure looks like:
starting server
server started and listening on service:jmx:rmi:///jndi/rmi://localhost:12345/test
starting client
client connected
client invoking foo (10 times)
..........
waiting for 10 notifications to arrive
ERROR: notification processing thread interrupted
----------System.err:(22/1474)----------
java.lang.reflect.InvocationTargetException
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:118)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at TestSerializationMismatch.startClient(TestSerializationMismatch.java:122)
at TestSerializationMismatch.main(TestSerializationMismatch.java:66)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: java.lang.Error: notification thread interrupted unexpectedly
at Client.run(Client.java:97)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
... 7 more
Mar 06, 2024 9:59:22 AM com.sun.jmx.remote.internal.ClientNotifForwarder$NotifFetcher fetchOneNotif
WARNING: Failed to deserialize a notification: java.io.NotSerializableException
JavaTest Message: Test threw exception: java.lang.reflect.InvocationTargetException
JavaTest Message: shutting down test
STATUS:Failed.`main' threw exception: java.lang.reflect.InvocationTargetException
Mar 06, 2024 9:59:55 AM com.sun.jmx.remote.internal.ClientNotifForwarder$NotifFetcher fetchOneNotif
WARNING: Failed to deserialize a notification: java.io.NotSerializableException

-----
Title: [JDK-8327857] Remove applet usage from JColorChooser tests Test4222508
Priority: P4
Type: Bug
Component: client-libs
Description: Removing deprecated applet usage from JColorChooser tests
open/test/jdk/javax/swing/JColorChooser/Test4222508.java

-----
Title: [JDK-8327859] Remove applet usage from JColorChooser tests Test4319113
Priority: P4
Type: Bug
Component: client-libs
Description: Removing deprecated applet usage from JColorChooser tests
open/test/jdk/javax/swing/JColorChooser/Test4319113.java

-----
Title: [JDK-8327986] ASAN reports use-after-free in DirectivesParserTest.empty_object_vm
Priority: P4
Type: Bug
Component: hotspot
Description: ASAN reports a use-after-free, because we feed the string we got from `setlocale` back to `setlocale`, but this string is owned by the libc, and the libc decided to free it in the meantime.
```
[ RUN      ] DirectivesParserTest.empty_object_vm
=================================================================
==347387==ERROR: AddressSanitizer: heap-use-after-free on address 0x60200000ee10 at pc 0x7f54badf2ffd bp 0x7ffff2dd8410 sp 0x7ffff2dd7bb8
READ of size 2 at 0x60200000ee10 thread T0
#0 0x7f54badf2ffc in __interceptor_setlocale ../../../../src/libsanitizer/sanitizer_common/sanitizer_common_interceptors.inc:3254
#1 0x7f54b2a320a6 in DirectivesParserTest::~DirectivesParserTest() /shared/projects/openjdk/jdk-jdk/source/test/hotspot/gtest/compiler/test_directivesParser.cpp:42
#2 0x7f54b2a320a6 in DirectivesParserTest_empty_object_vm_Test::~DirectivesParserTest_empty_object_vm_Test() /shared/projects/openjdk/jdk-jdk/source/test/hotspot/gtest/compiler/test_directivesParser.cpp:62
#3 0x7f54b2a320a6 in DirectivesParserTest_empty_object_vm_Test::~DirectivesParserTest_empty_object_vm_Test() /shared/projects/openjdk/jdk-jdk/source/test/hotspot/gtest/compiler/test_directivesParser.cpp:62
#4 0x7f54b86dab8d in testing::Test::DeleteSelf_() /shared/projects/openjdk/gtest/googletest-1.14.0/googletest/include/gtest/gtest.h:336
#5 0x7f54b86dab8d in void testing::internal::HandleExceptionsInMethodIfSupported(testing::Test*, void (testing::Test::*)(), char const*) /shared/projects/openjdk/gtest/googletest-1.14.0/googletest/src/gtest.cc:2670
#6 0x7f54b86dab8d in testing::TestInfo::Run() /shared/projects/openjdk/gtest/googletest-1.14.0/googletest/src/gtest.cc:2842
#7 0x7f54b8711861 in testing::TestSuite::Run() /shared/projects/openjdk/gtest/googletest-1.14.0/googletest/src/gtest.cc:3015
#8 0x7f54b8711861 in testing::TestSuite::Run() /shared/projects/openjdk/gtest/googletest-1.14.0/googletest/src/gtest.cc:2968
#9 0x7f54b8713140 in testing::internal::UnitTestImpl::RunAllTests() /shared/projects/openjdk/gtest/googletest-1.14.0/googletest/src/gtest.cc:5920
#10 0x7f54b8713e43 in bool testing::internal::HandleExceptionsInMethodIfSupported(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) /shared/projects/openjdk/gtest/g
oogletest-1.14.0/googletest/src/gtest.cc:2670
#11 0x7f54b8713e43 in testing::UnitTest::Run() /shared/projects/openjdk/gtest/googletest-1.14.0/googletest/src/gtest.cc:5484
#12 0x7f54b25eec15 in RUN_ALL_TESTS() /shared/projects/openjdk/gtest/googletest-1.14.0/googletest/include/gtest/gtest.h:2317
#13 0x7f54b25eec15 in runUnitTestsInner /shared/projects/openjdk/jdk-jdk/source/test/hotspot/gtest/gtestMain.cpp:290
#14 0x7f54b25ef430 in runUnitTests /shared/projects/openjdk/jdk-jdk/source/test/hotspot/gtest/gtestMain.cpp:371
#15 0x561fec59123d in main /shared/projects/openjdk/jdk-jdk/source/test/hotspot/gtest/gtestLauncher.cpp:40
#16 0x7f54b1013082 in __libc_start_main ../csu/libc-start.c:308
#17 0x561fec59110d in _start (/shared/projects/openjdk/jdk-jdk/output-fastdebug/hotspot/variant-server/libjvm/gtest/gtestLauncher+0x110d)
0x60200000ee10 is located 0 bytes inside of 12-byte region [0x60200000ee10,0x60200000ee1c)
freed by thread T0 here:
#0 0x7f54bae8040f in __interceptor_free ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:122
#1 0x7f54b101fc48 in setname /build/glibc-wuryBv/glibc-2.31/locale/setlocale.c:199
#2 0x7f54b101fc48 in __GI_setlocale /build/glibc-wuryBv/glibc-2.31/locale/setlocale.c:452
#3 0x7f54b101fc48 in __GI_setlocale /build/glibc-wuryBv/glibc-2.31/locale/setlocale.c:217
previously allocated by thread T0 here:
#0 0x7f54bae80808 in __interceptor_malloc ../../../../src/libsanitizer/asan/asan_malloc_linux.cc:144
#1 0x7f54b108e38e in __GI___strdup /build/glibc-wuryBv/glibc-2.31/string/strdup.c:42
```

-----
Title: [JDK-8327994] Update code gen in CallGeneratorHelper
Priority: P5
Type: Enhancement
Component: core-libs
Description: The code in test/jdk/java/foreign/CallGeneratorHelper used to generate native test libraries is out of date. There are several issues:
- We no longer generate header files, so the code for that is dead
- The code was never updated to generate the *Stack.c test files
- The code was never updated to generate the shared.h file
The native test libraries that are generated closely correspond to the test cases that are generated by the actual TestNG tests (the former uses the same DataProvier as the latter). So, I think it is worthwhile to keep around/update the native test file generation code, in case we ever need to tweak the test case generation logic (which would then require re-generating the native test files).

-----
Title: [JDK-8328005] Convert java/awt/im/JTextFieldTest.java applet test to main
Priority: P4
Type: Bug
Component: client-libs
Description: Convert java/awt/im/JTextFieldTest.java applet test to main using PassFailJFrame

-----
Title: [JDK-8328085] C2: Use after free in PhaseChaitin::Register_Allocate()
Priority: P3
Type: Bug
Component: hotspot
Description: We have seen the assertion
assert(idx
0x0000000125949580 - 0x0900000003eddc2c libjvm.so::os::Aix::platform_print_native_stack(outputStream*, void const*, char*, int, unsigned char*&)+0x24  (C++ uses_alloca saves_lr stores_bc gpr_saved:1 fixedparms:5 parmsonstk:1)
0x0000000125949600 - 0x09000000039cd348 libjvm.so::VMError::report(outputStream*, bool)+0x1c0c  (C++ fp_present uses_alloca saves_cr saves_lr stores_bc gpr_saved:18 fixedparms:2 parmsonstk:1)
0x0000000125949ee0 - 0x09000000039bbdc8 libjvm.so::VMError::report_and_die(int, char const*, char const*, char*, Thread*, unsigned char*, void*, void*, char const*, int, unsigned long)+0x7cc  (C++ uses_alloca saves_lr stores_bc gpr_saved:18 fixedparms:8 parmsonstk:1)
0x000000012594a0d0 - 0x09000000039bb5b0 libjvm.so::VMError::report_and_die(Thread*, void*, char const*, int, char const*, char const*, char*)+0x58  (C++ uses_alloca saves_lr stores_bc gpr_saved:2 fixedparms:7 parmsonstk:1)
0x000000012594a170 - 0x09000000039bb290 libjvm.so::report_vm_error(char const*, int, char const*, char const*, ...)+0x8c  (C++ uses_alloca saves_lr stores_bc gpr_saved:5 fixedparms:4 parmsonstk:1)
0x000000012594a210 - 0x09000000047807ec libjvm.so::PhaseChaitin::Register_Allocate()+0x10a0  (C++ fp_present uses_alloca saves_lr stores_bc gpr_saved:18 fixedparms:1 parmsonstk:1)
0x000000012594a5c0 - 0x090000000475fc64 libjvm.so::Compile::Code_Gen()+0x21c  (C++ uses_alloca saves_lr stores_bc gpr_saved:6 fixedparms:1 parmsonstk:1)
0x000000012594b200 - 0x09000000047dd12c libjvm.so::Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x16c4  (C++ fp_present uses_alloca saves_cr saves_lr stores_bc gpr_saved:18 fixedparms:6 parmsonstk:1)
0x000000012594be70 - 0x09000000049ec7a8 libjvm.so::C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x25c  (C++ uses_alloca saves_cr saves_lr stores_bc gpr_saved:18 fixedparms:6 parmsonstk:1)
0x000000012594ca90 - 0x0900000003cffb44 libjvm.so::CompileBroker::invoke_compiler_on_method(CompileTask*)+0xcb4  (C++ fp_present uses_alloca saves_cr saves_lr stores_bc gpr_saved:18 fixedparms:1 parmsonstk:1)
0x000000012594d210 - 0x0900000003cf0264 libjvm.so::CompileBroker::compiler_thread_loop()+0x4c0  (C++ fp_present uses_alloca saves_cr saves_lr stores_bc gpr_saved:18 parmsonstk:1)
0x000000012594d460 - 0x0900000003cefd24 libjvm.so::CompilerThread::thread_entry(JavaThread*, JavaThread*)+0x58  (C++ uses_alloca saves_lr stores_bc gpr_saved:1 fixedparms:2 parmsonstk:1)
0x000000012594d4e0 - 0x0900000003b8ef84 libjvm.so::JavaThread::thread_main_inner()+0x1f8  (C++ uses_alloca saves_lr stores_bc gpr_saved:4 fixedparms:1 parmsonstk:1)
0x000000012594d5b0 - 0x0900000003b8d06c libjvm.so::JavaThread::run()+0x214  (C++ uses_alloca saves_lr stores_bc gpr_saved:5 fixedparms:1 parmsonstk:1)
0x000000012594d650 - 0x0900000003abb85c libjvm.so::Thread::call_run()+0x128  (C++ uses_alloca saves_lr stores_bc gpr_saved:3 fixedparms:1 parmsonstk:1)
0x000000012594d6e0 - 0x0900000003abad50 libjvm.so::thread_native_entry(Thread*)+0x194  (C++ uses_alloca saves_lr stores_bc gpr_saved:9 fixedparms:1 parmsonstk:1)
0x000000012594d7a0 - 0x090000000056204c libpthreads.a::_pthread_body+0xec  (C saves_lr stores_bc gpr_saved:1 fixedparms:1 )
0x000000012594d820 - 0x0000000000000000
*** end of backchain ***
*UPDATE 2024-10-04*
Several crash logs show the  badResourceValue pattern (abababab r7 below). That indicates a use-after-free issue with memory allocated from the ResourceArea similar to JDK-8336095.
pc =0x00007fffa8a3ed70  lr =0x00007fffa8a545b4  ctr=0x00007fffaaef89b0
r0 =0x00007fffa8a545b4  r1 =0x00007ffe2a9faf00  r2 =0x00007fffaa8b0f00
r3 =0x00007fffaa1e0448  r4 =0x0000000000000127  r5 =0x00007fffaa1e0428
r6 =0x00007fffaa1e0400  r7 =0x00000000abababab  r8 =0x0000000000000058
r9 =0x00007ffe2a9fb0c0  r10=0x00007fffaae50000  r11=0x00007fffa9a599a0
r12=0x00007fffaaef89b0  r13=0x00007ffe2aa068e0  r14=0x0000000000000003
r15=0x0000000000000010  r16=0x0000000000000000  r17=0x00007fffaa964bb0
r18=0x00007ffe2a9fb638  r19=0x00007ffe2a9fb080  r20=0x00007fffaa1e22f0
r21=0x00007ffe2a9fb4f0  r22=0x0000000000000001  r23=0x00007ffe2a9fb010
r24=0x00007ffe2a9fb088  r25=0x00007fffaa93ff20  r26=0x0000000000000000
r27=0x000000000000002f  r28=0x00007fffaa932170  r29=0x00007ffe2a9fb048
r30=0x00007ffe2a9fb4c8  r31=0x00007ffe2a9faf00
*UPDATE 2024-11-04*
Several crash logs have messages similar to
#  assert(idx

-----
Title: [JDK-8328121] Remove applet usage from JColorChooser tests Test4759306
Priority: P4
Type: Bug
Component: client-libs
Description: Removing deprecated applet usage from JColorChooser tests
open/test/jdk/javax/swing/JColorChooser/Test4759306.java

-----
Title: [JDK-8328130] Remove applet usage from JColorChooser tests Test4759934
Priority: P4
Type: Bug
Component: client-libs
Description: Removing deprecated applet usage from JColorChooser tests
open/test/jdk/javax/swing/JColorChooser/Test4759934.java

-----
Title: [JDK-8328185] Convert java/awt/image/MemoryLeakTest/MemoryLeakTest.java applet test to main
Priority: P4
Type: Bug
Component: client-libs
Description: Convert java/awt/image/MemoryLeakTest/MemoryLeakTest.java applet test to main using PassFailJFrame

-----
Title: [JDK-8328227] Remove applet usage from JColorChooser tests Test4887836
Priority: P4
Type: Bug
Component: client-libs
Description: Removing deprecated applet usage from JColorChooser tests
open/test/jdk/javax/swing/JColorChooser/Test4887836.java

-----
Title: [JDK-8328368] Convert java/awt/image/multiresolution/MultiDisplayTest/MultiDisplayTest.java applet test to main
Priority: P4
Type: Bug
Component: client-libs
Description: Convert java/awt/image/multiresolution/MultiDisplayTest/MultiDisplayTest.java applet test to main using PassFailJFrame

-----
Title: [JDK-8328370] Convert java/awt/print/Dialog/PrintApplet.java applet test to main
Priority: P4
Type: Bug
Component: client-libs
Description: Convert java/awt/print/Dialog/PrintApplet.java applet test to main using PassFailJFrame

-----
Title: [JDK-8328380] Remove applet usage from JColorChooser tests Test6348456
Priority: P4
Type: Bug
Component: client-libs
Description: Removing deprecated applet usage from JColorChooser tests
open/test/jdk/javax/swing/JColorChooser/Test6348456.java

-----
Title: [JDK-8328387] Convert java/awt/Frame/FrameStateTest/FrameStateTest.html applet test to main
Priority: P4
Type: Bug
Component: client-libs

-----
Title: [JDK-8328403] Remove applet usage from JColorChooser tests Test6977726
Priority: P4
Type: Bug
Component: client-libs
Description: Removing deprecated applet usage from JColorChooser tests
open/test/jdk/javax/swing/JColorChooser/Test6977726.java

-----
Title: [JDK-8328553] Get rid of JApplet in test/jdk/sanity/client/lib/SwingSet2/src/DemoModule.java
Priority: P3
Type: Bug
Component: client-libs

-----
Title: [JDK-8328558] Convert javax/swing/JCheckBox/8032667/bug8032667.java applet test to main
Priority: P4
Type: Bug
Component: client-libs
Description: Convert javax/swing/JCheckBox/8032667/bug8032667.java applet test to main using PassFailJFrame

-----
Title: [JDK-8328717] Convert javax/swing/JColorChooser/8065098/bug8065098.java applet test to main
Priority: P4
Type: Bug
Component: client-libs
Description: Convert javax/swing/JColorChooser/8065098/bug8065098.java applet test to main using PassFailJFrame

-----
Title: [JDK-8328719] Convert java/awt/print/PageFormat/SetOrient.html applet test to main
Priority: P4
Type: Bug
Component: client-libs
Description: Convert java/awt/print/PageFormat/SetOrient.html applet test to main using PassFailJFrame

-----
Title: [JDK-8328730] Convert java/awt/print/bug8023392/bug8023392.html applet test to main
Priority: P4
Type: Bug
Component: client-libs
Description: Convert java/awt/print/bug8023392/bug8023392.html applet test to main using PassFailJFrame

-----
Title: [JDK-8328753] Open source few Undecorated Frame tests
Priority: P4
Type: Bug
Component: client-libs
Description: Open source few Undecorated Frame tests.
OS: generic

-----
Title: [JDK-8328819] Remove applet usage from JFileChooser tests bug6698013
Priority: P4
Type: Bug
Component: client-libs
Description: Removing deprecated applet usage from JFileChooser tests
open/test/jdk/javax/swing/JFileChooser/6698013/bug6698013.java

-----
Title: [JDK-8328827] Convert java/awt/print/PrinterJob/PrinterDialogsModalityTest/PrinterDialogsModalityTest.html applet test to main
Priority: P4
Type: Bug
Component: client-libs
Description: Convert java/awt/print/PrinterJob/PrinterDialogsModalityTest/PrinterDialogsModalityTest.html applet test to main using PassFailJFrame

-----
Title: [JDK-8329210] Delete Redundant Printer Dialog Modality Test
Priority: P4
Type: Bug
Component: client-libs
Description: test/jdk/java/awt/print/Dialog/PrintModalDialog.java is too similar in functionality to test/jdk/java/awt/print/PrinterJob/PrinterDialogsModalityTest.java.
One test was originally for modality in web browsers, while the other was for modality in Windows OS printer dialogs, but after the updates, they both check for modality on print and page dialogs for all OSs.
Since PrinterDialogsModalityTest.java is the preferred test, this is to remove PrintModalDialog.java as a test. In addition, the bugID in the jtreg tags from PrintModalDialog.java will be added to PrinterDialogsModalityTest.java's tags to maintain a link to its original bug.

-----
Title: [JDK-8329320] Simplify awt/print/PageFormat/NullPaper.java test
Priority: P4
Type: Bug
Component: client-libs
Description: The  java/awt/print/PageFormat/NullPaper.java contains lots of unnecessary code which is a leftover from "standard instructions" machinery.
The test itself is basically two lines of code.

-----
Title: [JDK-8329322] Convert PageFormat/Orient.java to use PassFailJFrame
Priority: P4
Type: Bug
Component: client-libs
Description: The jdk/java/awt/print/PageFormat/Orient.java test is a manual printer test which uses an old framework which duplicates code in each test.
Covert Orient.java to use PassFailJFrame.

-----
Title: [JDK-8329692] Add more details to FrameStateTest.java test instructions
Priority: P4
Type: Bug
Component: client-libs
Description: Frame does not restore to normal after iconfied state in windows 10 & windows 11
Step to reproduce
----------------------------------
1) Run the manual https://github.com/openjdk/jdk/blob/master/test/jdk/java/awt/Frame/FrameStateTest/FrameStateTest.java state
2) Select Frame state NORMAL & Frame non-resizable checkbox
3) Click on "Create Frame" button.
4) "Frame State Test ( Window 2) test frame should be visible
5) Click on "Iconify & restore" button - "Frame State Test ( Window 2) test frame is iconified and restored
6) Click on "hide & show" button -  "Frame State Test ( Window 2) test frame" gets hidden and shown
7) Click on "hide, iconfify and show" button - "Frame State Test ( Window 2) test frame" is
a) Hidden
b) Iconified
c) "Frame State Test ( Window 2) test fram"  is not "showed" . User has to manually click on the iconified and select the "Frame State Test ( Window 2) test frame" to restore the frame.
If you see the same then the bug is reproduced.
NOTE: This is not an issue but ambiguity in test instructions. The test instructions will be updated for clarity.
OS: windows_10

-----
Title: [JDK-8330647] Two CDS tests fail with -UseCompressedOops and UseSerialGC/UseParallelGC
Priority: P4
Type: Bug
Component: hotspot
Description: The following CDS tests fail deterministically when using -XX:-UseCompressedOops and -Dtest.cds.runtime.options=-XX:+UseSerialGC or -Dtest.cds.runtime.options=-XX:+UseParallelGC:
test/hotspot/jtreg/runtime/cds/appcds/cacheObject/ArchiveHeapTestClass.java
test/hotspot/jtreg/runtime/cds/serviceability/ReplaceCriticalClassesForSubgraphs.java
A possible fix is to simply require that either UseCompressedOops is set or Serial/ParallelGC are not selected in these tests (assuming the combination of +SerialGC/+ParallelGC and -UseCompressedOops is unsupported).

-----
Title: [JDK-8330702] Update failure handler to don't generate Error message if cores actions are empty
Priority: P4
Type: Bug
Component: hotspot
Description: The cores section is empty (no exist) on windows and it is not an Error.
No need to generate Error messages in this case.
It is about
' ```ERROR: 'cores' property is empty```'
Probably it is better to be able to have empty cores and ensure it is not a mistake.

-----
Title: [JDK-8331735] UpcallLinker::on_exit races with GC when copying frame anchor
Priority: P3
Type: Bug
Component: core-libs
Description: A fatal error has been detected by the Java Runtime Environment:
SIGSEGV (0xb) at pc=0x0000ffff67e651a8, pid=1499163, tid=1499236
JRE version: Java(TM) SE Runtime Environment (23.0+22) (build 23-ea+22-1781)
Java VM: Java HotSpot(TM) 64-Bit Server VM (23-ea+22-1781, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
Problematic frame:
j  java.awt.Font.getFont2D()Lsun/font/Font2D;+0 java.desktop@23-ea
....
....
[warning][os] Loading hsdis library failed

-----
Title: [JDK-8331959] Update PKCS#11 Cryptographic Token Interface to v3.1
Priority: P4
Type: Enhancement
Component: security-libs
Description: Header files are at: http://docs.oasis-open.org/pkcs11/pkcs11-spec/v3.1/os/include/pkcs11-v3.1/
OS: generic

-----
Title: [JDK-8331977] Crash: SIGSEGV in dlerror()
Priority: P2
Type: Bug
Component: tools
Description: Test:  tools/jpackage/share/jdk/jpackage/tests/MainClassTest.java
[23:08:47.438] TRACE: exec: Execute [/opt/mach5/mesos/work_dir/slaves/f8dfb4e7-ae2d-48ec-aec1-afff79404935-S31203/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/f927ceb2-8f2f-40e3-988c-207f210132bf/runs/85774163-597d-4c86-8558-8b853edef678/testoutput/test-support/jtreg_open_test_jdk_tier3/scratch/5/./test.f20c824a/output/MainClassTest/bin/MainClassTest](1); save output; in directory [./test.f20c824a/output]...
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f59a64d5424, pid=28546, tid=28556
#
# JRE version: OpenJDK Runtime Environment (23.0+22) (build 23-ea+22-1820)
# Java VM: OpenJDK 64-Bit Server VM (23-ea+22-1820, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# C  [libdl.so.2+0x1424]  dlerror+0xe4
---------------  T H R E A D  ---------------
Current thread (0x00007f59a002b180):  JavaThread "main"             [_thread_in_vm, id=28556, stack(0x00007f59a67d7000,0x00007f59a68d8000) (1028K)]
Stack: [0x00007f59a67d7000,0x00007f59a68d8000],  sp=0x00007f59a68d50f0,  free space=1016k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
C  [libdl.so.2+0x1424]  dlerror+0xe4
V  [libjvm.so+0xc83058]  NativeLookup::lookup_style(methodHandle const&, char*, char const*, int, bool, JavaThread*)+0x268  (nativeLookup.cpp:267)
V  [libjvm.so+0xc8364c]  NativeLookup::lookup_base(methodHandle const&, JavaThread*)+0xac  (nativeLookup.cpp:336)
V  [libjvm.so+0xc838bb]  NativeLookup::lookup(methodHandle const&, JavaThread*)+0x4b  (nativeLookup.cpp:423)
V  [libjvm.so+0x8ca35d]  InterpreterRuntime::prepare_native_call(JavaThread*, Method*)+0x6d  (interpreterRuntime.cpp:1458)
j  sun.nio.fs.UnixNativeDispatcher.init()I+0 java.base
j  sun.nio.fs.UnixNativeDispatcher.()V+5 java.base
v  ~StubRoutines::call_stub 0x00007f598fe6bc86
V  [libjvm.so+0x8d3a1b]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x2db  (javaCalls.cpp:415)
V  [libjvm.so+0x8ab0bf]  InstanceKlass::call_class_initializer(JavaThread*)+0x2ef  (instanceKlass.cpp:1630)
V  [libjvm.so+0x8ac021]  InstanceKlass::initialize_impl(JavaThread*)+0x5b1  (instanceKlass.cpp:1214)
V  [libjvm.so+0xb590aa]  LinkResolver::resolve_static_call(CallInfo&, LinkInfo const&, bool, JavaThread*)+0x19a  (linkResolver.cpp:1101)
V  [libjvm.so+0xb5978b]  LinkResolver::resolve_invoke(CallInfo&, Handle, constantPoolHandle const&, int, Bytecodes::Code, JavaThread*)+0x16b  (linkResolver.cpp:1689)
V  [libjvm.so+0x8cbc77]  InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code)+0x1b7  (interpreterRuntime.cpp:853)
V  [libjvm.so+0x8cc1f7]  InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)+0x37  (interpreterRuntime.cpp:980)
j  sun.nio.fs.UnixFileSystem.(Lsun/nio/fs/UnixFileSystemProvider;Ljava/lang/String;)V+79 java.base
j  sun.nio.fs.LinuxFileSystem.(Lsun/nio/fs/UnixFileSystemProvider;Ljava/lang/String;)V+3 java.base
j  sun.nio.fs.LinuxFileSystemProvider.newFileSystem(Ljava/lang/String;)Lsun/nio/fs/LinuxFileSystem;+6 java.base
j  sun.nio.fs.LinuxFileSystemProvider.newFileSystem(Ljava/lang/String;)Lsun/nio/fs/UnixFileSystem;+2 java.base
j  sun.nio.fs.UnixFileSystemProvider.()V+9 java.base
j  sun.nio.fs.LinuxFileSystemProvider.()V+1 java.base
j  sun.nio.fs.DefaultFileSystemProvider.()V+4 java.base
v  ~StubRoutines::call_stub 0x00007f598fe6bc86
V  [libjvm.so+0x8d3a1b]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x2db  (javaCalls.cpp:415)
V  [libjvm.so+0x8ab0bf]  InstanceKlass::call_class_initializer(JavaThread*)+0x2ef  (instanceKlass.cpp:1630)
V  [libjvm.so+0x8ac021]  InstanceKlass::initialize_impl(JavaThread*)+0x5b1  (instanceKlass.cpp:1214)
V  [libjvm.so+0xb590aa]  LinkResolver::resolve_static_call(CallInfo&, LinkInfo const&, bool, JavaThread*)+0x19a  (linkResolver.cpp:1101)
V  [libjvm.so+0xb5978b]  LinkResolver::resolve_invoke(CallInfo&, Handle, constantPoolHandle const&, int, Bytecodes::Code, JavaThread*)+0x16b  (linkResolver.cpp:1689)
V  [libjvm.so+0x8cbc77]  InterpreterRuntime::resolve_invoke(JavaThread*, Bytecodes::Code)+0x1b7  (interpreterRuntime.cpp:853)
V  [libjvm.so+0x8cc1f7]  InterpreterRuntime::resolve_from_cache(JavaThread*, Bytecodes::Code)+0x37  (interpreterRuntime.cpp:980)
j  java.nio.file.FileSystems.getDefault()Ljava/nio/file/FileSystem;+10 java.base
j  java.nio.file.Path.of(Ljava/lang/String;[Ljava/lang/String;)Ljava/nio/file/Path;+0 java.base
j  jdk.internal.module.ModuleBootstrap.finderFor(Ljava/lang/String;)Ljava/lang/module/ModuleFinder;+65 java.base
j  jdk.internal.module.ModuleBootstrap.boot2()Ljava/lang/ModuleLayer;+8 java.base
j  jdk.internal.module.ModuleBootstrap.boot()Ljava/lang/ModuleLayer;+64 java.base
j  java.lang.System.initPhase2(ZZ)I+0 java.base
v  ~StubRoutines::call_stub 0x00007f598fe6bc86
V  [libjvm.so+0x8d3a1b]  JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*)+0x2db  (javaCalls.cpp:415)
V  [libjvm.so+0x8d3deb]  JavaCalls::call_static(JavaValue*, Klass*, Symbol*, Symbol*, JavaCallArguments*, JavaThread*)+0x10b  (javaCalls.cpp:329)
V  [libjvm.so+0xeb9c0c]  Threads::create_vm(JavaVMInitArgs*, bool*)+0x76c  (threads.cpp:316)
V  [libjvm.so+0x97756e]  JNI_CreateJavaVM+0x4e  (jni.cpp:3581)
C  [libjli.so+0x3c2f]  JavaMain+0x8f  (java.c:1550)
C  [libjli.so+0x7ee9]  ThreadJavaMain+0x9  (java_md.c:642)
OS: linux

-----
Title: [JDK-8331993] Add counting leading/trailing zero tests for Integer
Priority: P4
Type: Enhancement
Component: hotspot
Description: Currently, in hotspot/jtreg/compiler/vectorization/TestNumberOfContinuousZeros.java, there is only tests for Long, not for Integer

-----
Title: [JDK-8332158] [XWayland] test/jdk/java/awt/Mouse/EnterExitEvents/ResizingFrameTest.java
Priority: P3
Type: Bug
Component: client-libs
Description: The test ResizingFrameTest fails with:
java.lang.RuntimeException: No Mouse Entered/Exited events!
at ResizingFrameTest.main(ResizingFrameTest.java:155)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1575)
It looks like the mouse pointer is no longer in the right place from the XWayland server's point of view after calling
frame.setExtendedState(Frame.MAXIMIZED_BOTH);
E.g we have
```
robot.mouseMove(500, 500);
...
System.out.println(MouseInfo.getPointerInfo().getLocation()); // java.awt.Point[x=500,y=500]
...
frame.setExtendedState(Frame.MAXIMIZED_BOTH);
...
System.out.println(MouseInfo.getPointerInfo().getLocation()); // java.awt.Point[x=856,y=463] or other location depending on actual mouse cursor position on system
...
robot.mouseMove(500, 500); // has no effect
...
System.out.println(MouseInfo.getPointerInfo().getLocation()); // still doesn't print 500, 500
```
OS: linux

-----
Title: [JDK-8332494] java/util/zip/EntryCount64k.java failing with java.lang.RuntimeException: '\\A\\Z' missing from stderr
Priority: P4
Type: Bug
Component: hotspot
Description: The following test is failing in the JDK23 CI:
java/util/zip/EntryCount64k.java
Here's a snippet from the linux-x64 log file:
#section:main
----------messages:(6/233)----------
command: main EntryCount64k
reason: User specified action: run main/othervm EntryCount64k
started: Fri May 17 19:44:18 UTC 2024
Mode: othervm [/othervm specified]
finished: Fri May 17 19:44:21 UTC 2024
elapsed time (seconds): 2.774
----------configuration:(0/0)----------
----------System.out:(5/1855)----------
Command line: [/opt/mach5/mesos/work_dir/jib-master/install/jdk-23+23-1890/linux-x64-debug.jdk/jdk-23/fastdebug/bin/java -cp /opt/mach5/mesos/work_dir/slaves/a4a7850a-7c35-410a-b879-d77fbb2f6087-S15509/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/ce0e5d10-174f-45de-bc3d-8c5debd321ac/runs/44ca1ee7-8959-4d3e-8707-f1edafdc0b1a/testoutput/test-support/jtreg_open_test_jdk_jdk_util/classes/3/java/util/zip/EntryCount64k.d:/opt/mach5/mesos/work_dir/jib-master/install/jdk-23+23-1890/src.full/open/test/jdk/java/util/zip:/opt/mach5/mesos/work_dir/slaves/a4a7850a-7c35-410a-b879-d77fbb2f6087-S15509/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/ce0e5d10-174f-45de-bc3d-8c5debd321ac/runs/44ca1ee7-8959-4d3e-8707-f1edafdc0b1a/testoutput/test-support/jtreg_open_test_jdk_jdk_util/classes/3/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jdk-23+23-1890/src.full/open/test/lib:/opt/mach5/mesos/work_dir/jib-master/install/jtreg/7.3.1/1/bundles/jtreg-7.3.1+1.zip/jtreg/lib/jtreg.jar -Xmx768m -XX:MaxRAMPercentage=4.16667 -Dtest.boot.jdk=/opt/mach5/mesos/work_dir/jib-master/install/jdk/22/36/bundles/linux-x64/jdk-22_linux-x64_bin.tar.gz/jdk-22 -Djava.io.tmpdir=/opt/mach5/mesos/work_dir/slaves/a4a7850a-7c35-410a-b879-d77fbb2f6087-S15509/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/ce0e5d10-174f-45de-bc3d-8c5debd321ac/runs/44ca1ee7-8959-4d3e-8707-f1edafdc0b1a/testoutput/test-support/jtreg_open_test_jdk_jdk_util/tmp -ea -esa -XX:+UseZGC -XX:-ZGenerational -jar EntryCount64k-tmp.zip ]
[2024-05-17T19:44:21.103006907Z] Gathering output for process 1234778
[2024-05-17T19:44:21.256628108Z] Waiting for completion for process 1234778
[2024-05-17T19:44:21.396841417Z] Waiting for completion finished for process 1234778
Output and diagnostic info for process 1234778 was saved into 'pid-1234778-output.log'
----------System.err:(24/1383)*----------
Java HotSpot(TM) 64-Bit Server VM warning: Option ZGenerational was deprecated in version 23.0 and will likely be removed in a future release.
Java HotSpot(TM) 64-Bit Server VM warning: Non-generational ZGC is deprecated.
entryCount=65533 shouldUseZip64=false usesZip64=false zipSize=6797033
stdout: [Main];
stderr: [Java HotSpot(TM) 64-Bit Server VM warning: Option ZGenerational was deprecated in version 23.0 and will likely be removed in a future release.
Java HotSpot(TM) 64-Bit Server VM warning: Non-generational ZGC is deprecated.
]
exitValue = 0
java.lang.RuntimeException: '\\A\\Z' missing from stderr
at jdk.test.lib.process.OutputAnalyzer.stderrShouldMatch(OutputAnalyzer.java:407)
at EntryCount64k.checkCanRead(EntryCount64k.java:166)
at EntryCount64k.test(EntryCount64k.java:108)
at EntryCount64k.main(EntryCount64k.java:64)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1575)
JavaTest Message: Test threw exception: java.lang.RuntimeException: '\\A\\Z' missing from stderr
JavaTest Message: shutting down test
STATUS:Failed.`main' threw exception: java.lang.RuntimeException: '\\A\\Z' missing from stderr
----------rerun:(39/6874)*----------
The following output on stderr might be the root cause here:
stderr: [Java HotSpot(TM) 64-Bit Server VM warning: Option ZGenerational was deprecated in version 23.0 and will likely be removed in a future release.
Java HotSpot(TM) 64-Bit Server VM warning: Non-generational ZGC is deprecated.
]
This test failure has happened on macosx-x64, windows-x64
and linux-x64 in jdk-23+23-1890-tier8 and that build-ID includes
the fix for:
JDK-8326957 Implement JEP 474: ZGC: Generational Mode by Default
The test task's JVM args are: -XX:+UseZGC -XX:-ZGenerational
Should these task definitions have been modified by JDK-8326957?
OS: generic

-----
Title: [JDK-8332917] failure_handler should execute gdb "info threads" command on linux
Priority: P5
Type: Enhancement
Component: hotspot
Description: On linux, failure_handler dumps all threads, but this dump does not include the name of each thread. The gdb "info threads" command will give a summary of all threads, and if debugging process, the summary will include each thread's name. If debugging a core file for some reason the thread name is not included, but the summary is still useful. Here's some output for each:
Process:
Id   Target Id                                             Frame
* 1    Thread 0xffff7fcf2a50 (LWP 2749191) "java"            0x0000ffff7fc22ba8 in __pthread_timedjoin_ex () from /lib64/libpthread.so.0
2    Thread 0xffff7d9f31d0 (LWP 2749192) "old-m-a-i-n"     0x0000ffff7fc27d70 in pthread_cond_wait@@GLIBC_2.17 () from /lib64/libpthread.so.0
3    Thread 0xffff7c51e1d0 (LWP 2749193) "GC Thread#0"     0x0000ffff7fc2a820 in do_futex_wait.constprop () from /lib64/libpthread.so.0
4    Thread 0xffff7c31f1d0 (LWP 2749194) "G1 Main Marker"  0x0000ffff7fc27d70 in pthread_cond_wait@@GLIBC_2.17 () from /lib64/libpthread.so.0
5    Thread 0xffff5ea991d0 (LWP 2749195) "G1 Conc#0"       0x0000ffff7fc2a820 in do_futex_wait.constprop () from /lib64/libpthread.so.0
...
Core File:
Id   Target Id                           Frame
* 1    Thread 0xffff7fcf2a50 (LWP 2749191) 0x0000ffff7fc22ba8 in __pthread_timedjoin_ex () from /lib64/libpthread.so.0
2    Thread 0xffff7d9f31d0 (LWP 2749192) 0x0000ffff7fc27d70 in pthread_cond_wait@@GLIBC_2.17 () from /lib64/libpthread.so.0
3    Thread 0xffff4ffff1d0 (LWP 2749196) 0x0000ffff7fc27d70 in pthread_cond_wait@@GLIBC_2.17 () from /lib64/libpthread.so.0
4    Thread 0xffff7c51e1d0 (LWP 2749193) 0x0000ffff7fc2a820 in do_futex_wait.constprop () from /lib64/libpthread.so.0
5    Thread 0xffff5ea991d0 (LWP 2749195) 0x0000ffff7fc2a820 in do_futex_wait.constprop () from /lib64/libpthread.so.0
...

-----
Title: [JDK-8333116] test/jdk/tools/jpackage/share/ServiceTest.java test fails
Priority: P4
Type: Bug
Component: tools
Description: When running test/jdk/tools/jpackage/share/ServiceTest.java in full test mode including installation of the msi the test fails:
[22:09:20.347] TRACE: assertFalse(): Check [C:\Program Files\UpdateServiceTest\foo.ico] path doesn't exist
[22:09:20.375] [  FAILED  ] ServiceTest.testUpdate; checks=60
java.lang.ExceptionInInitializerError
at jdk.jpackage.test.LauncherIconVerifier.applyTo(LauncherIconVerifier.java:70)
at jdk.jpackage.test.AdditionalLauncher.verifyIcon(AdditionalLauncher.java:298)
at jdk.jpackage.test.AdditionalLauncher.verify(AdditionalLauncher.java:363)
at jdk.jpackage.test.LauncherAsServiceVerifier$1.verify(LauncherAsServiceVerifier.java:261)
at jdk.jpackage.test.Functional$ThrowingConsumer.lambda$toConsumer$0(Functional.java:41)
at jdk.jpackage.test.PackageTest$Handler.lambda$verifyPackageInstalled$6(PackageTest.java:660)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
at jdk.jpackage.test.PackageTest$Handler.verifyPackageInstalled(PackageTest.java:660)
at jdk.jpackage.test.PackageTest$Handler.accept(PackageTest.java:594)
at jdk.jpackage.test.PackageTest$2.accept(PackageTest.java:504)
at jdk.jpackage.test.PackageTest$2.accept(PackageTest.java:411)
at jdk.jpackage.test.Functional$ThrowingConsumer.lambda$toConsumer$0(Functional.java:41)
at java.base/java.lang.Iterable.forEach(Iterable.java:75)
at jdk.jpackage.test.PackageTest$Group.lambda$runAction$0(PackageTest.java:364)
at java.base/java.lang.Iterable.forEach(Iterable.java:75)
at jdk.jpackage.test.PackageTest$Group.runAction(PackageTest.java:364)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
at jdk.jpackage.test.RunnablePackageTest.runActions(RunnablePackageTest.java:66)
at jdk.jpackage.test.RunnablePackageTest.run(RunnablePackageTest.java:58)
at ServiceTest.testUpdate(ServiceTest.java:132)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at jdk.jpackage.test.MethodCall.accept(MethodCall.java:145)
at jdk.jpackage.test.TestInstance.run(TestInstance.java:230)
at jdk.jpackage.test.TKit.lambda$ignoreExceptions$5(TKit.java:141)
at jdk.jpackage.test.TKit.lambda$runTests$3(TKit.java:126)
at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1709)
at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:807)
at jdk.jpackage.test.TKit.lambda$runTests$4(TKit.java:123)
at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:105)
at jdk.jpackage.test.TKit.runTests(TKit.java:122)
at jdk.jpackage.test.Main.runTests(Main.java:79)
at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:109)
at jdk.jpackage.test.Main.main(Main.java:75)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make private static native long jdk.jpackage.internal.ExecutableRebrander.lockResource(java.lang.String) accessible: module jdk.jpackage does not "opens jdk.jpackage.internal" to unnamed module @3761e16e
at java.base/java.lang.reflect.AccessibleObject.throwInaccessibleObjectException(AccessibleObject.java:388)
at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:364)
You need to set "jpackage.test.ServiceTest.service-installer" property to reproduce the issue.
OS: windows

-----
Title: [JDK-8333360] PrintNullString.java doesn't use float arguments
Priority: P4
Type: Bug
Component: client-libs
Description: The java/awt/print/PrinterJob/PrintNullString.java tests Graphics2D.drawString API which accepts int and float as the coordinates, yet in some cases it passes int where it should be float.
https://github.com/openjdk/jdk/blob/1e04ee6d57d5fe84e1d202b16e8d13dc13c002ff/test/jdk/java/awt/print/PrinterJob/PrintNullString.java#L148-L154
// API 3: null & empty drawString(Iterator, int, int);
try {
g2d.drawString(nullIterator, 20, 120);
g2d.drawString("FAILURE: No NPE for null iterator, float", 20, 120);
} catch (NullPointerException e) {
g2d.drawString("caught expected NPE for null iterator, int", 20, 120);
}
This code has inconsistency: the error message refers to float whereas the call to g2d.drawString uses int and the success message uses int.
https://github.com/openjdk/jdk/blob/1e04ee6d57d5fe84e1d202b16e8d13dc13c002ff/test/jdk/java/awt/print/PrinterJob/PrintNullString.java#L171-L176
try {
g2d.drawString(emptyIterator, 20, 180);
g2d.drawString("FAILURE: No IAE for empty iterator, float", 20, 180);
} catch (IllegalArgumentException e) {
g2d.drawString("caught expected IAE for empty iterator, float", 20, 180);
}
This piece of code should use float coordinates but it still uses int.

-----
Title: [JDK-8333391] Test com/sun/jdi/InterruptHangTest.java failed: Thread was never interrupted during sleep
Priority: P4
Type: Bug
Component: core-svc
Description: [3146ms] detailMessage = "Thread was never interrupted during sleep: 65"
[3147ms] Got StepEvent 600 at line java.lang.Thread.dispatchUncaughtException(java.lang.Throwable):2840
[3171ms] RemoteInterruptor thread: Got expected IllegalThreadStateException after 108 interrupts sent. Exiting.
java.lang.RuntimeException: Invalid debuggee exitValue: 1
at TestScaffold.waitForVMDisconnect(TestScaffold.java:787)
at TestScaffold.resumeToVMDisconnect(TestScaffold.java:1015)
at TestScaffold.listenUntilVMDisconnect(TestScaffold.java:743)
at InterruptHangTest.runTests(InterruptHangTest.java:321)
at TestScaffold.startTests(TestScaffold.java:468)
at InterruptHangTest.main(InterruptHangTest.java:249)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.Thread.run(Thread.java:1575)
OS: os_x_10.15

-----
Title: [JDK-8333403] Write a test to check various components events are triggered properly
Priority: P4
Type: Enhancement
Component: client-libs
Description: This testcase checks for the following assertions for Component events:
1. When components are resized, moved, hidden and shown the respective events are triggered.
2. When the components are hidden/disabled also,the component events like resized/moved are triggered.
3. When a hidden component is hidden again, or a visible component is shown again, the events should not be fired.
4. When a window is minimized/restored then hidden and shown component events should be triggered.
Testing:
Tested using Mach5(20 times per platform) in macos,linux and windows and got all pass.

-----
Title: [JDK-8333647] C2 SuperWord: some additional PopulateIndex tests
Priority: P4
Type: Sub-task
Component: hotspot
Description: PopulateIndex is not very well tested by the IR tests.

-----
Title: [JDK-8334305] Remove all code for  nsk.share.Log verbose mode
Priority: P4
Type: Enhancement
Component: hotspot
Description: The nsk.share.Log is made to be always verbose. Need to clean all corresponding code.

-----
Title: [JDK-8334371] [AIX] Beginning with AIX 7.3 TL1 mmap() supports 64K memory pages
Priority: P4
Type: Enhancement
Component: hotspot
Description: Beginning with AIX 7.3 TL1 mmap() supports 64K memory pages. As an enhancement, during the initialization of the VM the availability of this new feature is examined. If the 64K pages are supported the VM will use mmap() with 64K pages instead of shmget()/shmat() with 64K pages due to the bad 256M alignment of shmget()/shmat().
OS: aix

-----
Title: [JDK-8334490] Normalize string with locale invariant `toLowerCase()`
Priority: P4
Type: Bug
Component: other-libs
Description: The test utility class `jdk.test.lib.Platform` uses no-arg `String.toLowerCase()` for normalizing string arguments, which is fragile as it depends on the default locale. They should be replaced with `String.toLowerCase(Locale.ROOT)`
OS: generic

-----
Title: [JDK-8334777] Test javax/management/remote/mandatory/notif/NotifReconnectDeadlockTest.java failed with NullPointerException
Priority: P4
Type: Bug
Component: core-svc
Description: Test: javax/management/remote/mandatory/notif/NotifReconnectDeadlockTest.java
----------System.out:(1/57)----------
Tests reconnection done by a fetching notif thread.
----------System.err:(16/1440)----------
Jun 20, 2024 5:26:08 PM com.sun.jmx.remote.internal.ServerCommunicatorAdmin reqIncoming
WARNING: The server has decided to close this client connection.
java.lang.NullPointerException: Cannot invoke "javax.management.remote.NotificationResult.getNextSequenceNumber()" because "nr" is null
at java.management/com.sun.jmx.remote.internal.ClientNotifForwarder.init(ClientNotifForwarder.java:844)
at java.management/com.sun.jmx.remote.internal.ClientNotifForwarder.addNotificationListener(ClientNotifForwarder.java:185)
at java.management.rmi/javax.management.remote.rmi.RMIConnector$RemoteMBeanServerConnection.addNotificationListener(RMIConnector.java:1218)
at NotifReconnectDeadlockTest.main(NotifReconnectDeadlockTest.java:94)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1575)
JavaTest Message: Test threw exception: java.lang.NullPointerException: Cannot invoke "javax.management.remote.NotificationResult.getNextSequenceNumber()" because "nr" is null
JavaTest Message: shutting down test

-----
Title: [JDK-8335288] SunPKCS11 initialization will call C_GetMechanismInfo on unsupported mechanisms
Priority: P3
Type: Bug
Component: security-libs
Description: ADDITIONAL SYSTEM INFORMATION :
Problem observed with Utimaco CryptoServer PKCS11 device, but is of general scope
A DESCRIPTION OF THE PROBLEM :
With the introduction of https://bugs.openjdk.org/browse/JDK-8301553  (CSR: https://bugs.openjdk.org/browse/JDK-8308719), the SunPKCS11 provider will query the PKCS11 device (C_GetMechanismInfo) for mechanisms that are not supported.
This happens because of new logic, which queries info for "required mechanisms" for a feature, even if that mechanism is not returned by C_GetMechanismList and even if the mechanism is blacklisted in disabledMechanisms.
At least some PKCS11 implementations will respond with CKR_FUNCTION_FAILED when C_GetMechanismInfo is called with an unknown mechanism. This makes it impossible to initialize the PKCS11 interface.
This happens in SunPKCS11.java line 1309ff
// Check that other mechanisms required for the
// service are supported before listing it as
// available for the first time.
for (int requiredMech : d.requiredMechs) {
if (token.getMechanismInfo(
requiredMech & 0xFFFFFFFFL) == null) {
continue descLoop;
}
}
}
REGRESSION : Last worked in version 20
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Configure a PKCS11 device as described in:
https://docs.oracle.com/en/java/javase/21/security/pkcs11-reference-guide1.html
Run
keytool -v -list -keystore NONE -storetype PKCS11 -providerClass sun.security.pkcs11.SunPKCS11 -providerArg c:
/pkcs11/pkcs11.cfg
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
List of keys in PKCS11 device
ACTUAL -
keytool error: java.security.ProviderException: Initialization failed
java.security.ProviderException: Initialization failed
at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11.(SunPKCS11.java:391)
at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11$1.run(SunPKCS11.java:126)
at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11$1.run(SunPKCS11.java:123)
at java.base/java.security.AccessController.doPrivileged(AccessController.java:571)
at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11.configure(SunPKCS11.java:123)
at java.base/sun.security.tools.KeyStoreUtil.loadProviderByName(KeyStoreUtil.java:283)
at java.base/sun.security.tools.KeyStoreUtil.loadProviderByClass(KeyStoreUtil.java:316)
at java.base/sun.security.tools.keytool.Main.doCommands(Main.java:834)
at java.base/sun.security.tools.keytool.Main.run(Main.java:419)
at java.base/sun.security.tools.keytool.Main.main(Main.java:412)
Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_FUNCTION_FAILED
at jdk.crypto.cryptoki/sun.security.pkcs11.wrapper.PKCS11.C_GetMechanismInfo(Native Method)
at jdk.crypto.cryptoki/sun.security.pkcs11.Token.getMechanismInfo(Token.java:399)
at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11.initToken(SunPKCS11.java:1313)
at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11.(SunPKCS11.java:382)
... 9 more
CUSTOMER SUBMITTED WORKAROUND :
Downgrade to Java 20 or below
FREQUENCY : always
OS: generic

-----
Title: [JDK-8335468] [XWayland] JavaFX hangs when calling java.awt.Robot.getPixelColor
Priority: P3
Type: Bug
Component: client-libs
Description: The tests/system/src/test/java/test/robot/javafx/embed/swing/SwingNodeJDialogTest.java test timeouts after implementing the ScreenCast screen capture for JavaFX(JDK-8326712), this requires a fix on OpenJDK side.
It happens due to the call to gtk-g_main_context_iteration(NULL, TRUE) when we try to capture screen data, this blocks the gtk fx main loop.
Possible solutions are:
1. make a busy wait loop if we detect a gtk loop running
gtk-g_main_context_iteration(NULL, gtk-gtk_main_level == 0);
This will prevent the SwingNodeJDialogTest from hanging, and receive pixel color successfully.
2. do the same change as in JDK-8326712, make a nested loop, this allows to get a pixel color, but the test still timed out, needs further investigation.

-----
Title: [JDK-8335789] [TESTBUG] XparColor.java test fails with Error. Parse Exception: Invalid or unrecognized bugid: @
Priority: P4
Type: Bug
Component: client-libs
Description: XparColor.java test fails with following error
Error. Parse Exception: Invalid or unrecognized bugid: @
This test was modified as part of the https://bugs.openjdk.org/browse/JDK-8320608
The error is due to extra @ character at https://github.com/lawrence-andrew/jdk/blob/master/test/jdk/java/awt/print/PrinterJob/XparColor.java#L27

-----
Title: [JDK-8336012] Fix usages of jtreg-reserved properties
Priority: P4
Type: Bug
Component: core-libs
Description: Some tests make use of system properties whose names start with `test.*` -- which is an implicitly reserved namespace of jtreg as specified by this table: https://openjdk.org/jtreg/tag-spec.html#testvars
A fix for a usage of such a property name test include its rename, removal, or other appropriate action to resolve the name clash.

-----
Title: [JDK-8336498] [macos] [build]: install-file macro may run into permission denied error
Priority: P4
Type: Bug
Component: infrastructure
Description: On MacOS, files may have extended attributes attached. These attributes are copied together with the files. To prevent issues during further processing, the extended attributes of the copies must be removed. This action was implemented as solution of an older bug.
The solution is incomplete because it does not handle files with read-only permissions correctly. Without write permission, xattr cannot remove the extended attributes. The action is rejected with a "permission denied" error.
The issue is present in all releases. I reproduced it in 11, 17, ... 23, head
OS: os_x

-----
Title: [JDK-8336692] Redo fix for JDK-8284620
Priority: P4
Type: Bug
Component: hotspot
Description: JDK-8284620 tried to fix memory leak for CodeBuffer::_overflow_arena but I think it is incorrect. It created an issue when CodeBuffer expanded and we try to use information in CodeBuffer::_overflow_arena but it is empty.
CodeBuffer::_overflow_arena is used for forward labels patching to record labels location. What save us is that CodeBuffer expansion is rare case and usually labels are located near their target address so that expansion does not happen before a label is patched.
Instead of nulling _overflow_arena in CodeBuffer::take_over_code_from() we should remove original line there which copied the value from temporary buffer.

-----
Title: [JDK-8284620] CodeBuffer may leak _overflow_arena
Priority: P4
Type: Bug
Component: hotspot
Description: CodeBuffer is declared as StackObj, but it also has ResourceObj style new operator, to complicate thing further more, it has _overflow_arena that is C Heap allocated.
When Stack allocated CodeBuffer owns _overflow_arena, it works fine, because its destructor frees _overflow_arena. But if resource allocated CodeBuffer owns _overflow_arena, the arena is leaked, because its destructor is never called.
==1139627== 2,096 (96 direct, 2,000 indirect) bytes in 2 blocks are definitely lost in loss record 12,196 of 12,553
==1139627==    at 0x484486F: malloc (vg_replace_malloc.c:381)
==1139627==    by 0x5AE5B9E: malloc (os.cpp:656)
==1139627==    by 0x5AE5B9E: os::malloc(unsigned long, MEMFLAGS, NativeCallStack const&) (os.cpp:632)
==1139627==    by 0x527F216: AllocateHeap(unsigned long, MEMFLAGS, NativeCallStack const&, AllocFailStrategy::AllocFailEnum) (allocation.cpp:42)
==1139627==    by 0x52887B8: Arena::operator new(unsigned long, MEMFLAGS) (arena.cpp:286)
==1139627==    by 0x545E16E: CodeBuffer::create_patch_overflow() (codeBuffer.cpp:245)
==1139627==    by 0x529A1BA: Label::add_patch_at(CodeBuffer*, int, char const*, int) (assembler.cpp:166)
==1139627==    by 0x529ED05: Assembler::jcc(Assembler::Condition, Label&, bool) (assembler_x86.cpp:2320)
==1139627==    by 0x5188724: jmpConUNode::emit(CodeBuffer&, PhaseRegAlloc*) const (x86_64.ad:12758)
==1139627==    by 0x5B0759F: PhaseOutput::fill_buffer(CodeBuffer*, unsigned int*) (output.cpp:1681)
==1139627==    by 0x548A7C1: Compile::Code_Gen() (compile.cpp:2858)
==1139627==    by 0x548E7BC: Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*) (compile.cpp:849)
==1139627==    by 0x53CD12F: C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*) (c2compiler.cpp:112)
==1139627==    by 0x5496A03: CompileBroker::invoke_compiler_on_method(CompileTask*) (compileBroker.cpp:2294)
==1139627==    by 0x54975FF: CompileBroker::compiler_thread_loop() (compileBroker.cpp:1967)
==1139627==    by 0x5D496BD: JavaThread::thread_main_inner() (thread.cpp:1291)
==1139627==    by 0x5D4F3AF: Thread::call_run() (thread.cpp:356)
==1139627==    by 0x5AF0EA7: thread_native_entry(Thread*) (os_linux.cpp:706)
==1139627==    by 0x4927B19: start_thread (pthread_create.c:443)
==1139627==    by 0x49AB8E3: clone (clone.S:100)

-----
Title: [JDK-8336942] Improve test coverage for class loading elements with annotations of different retentions
Priority: P4
Type: Enhancement
Component: tools
Description: This change covers adding some additional test coverage for type use annotations read from class files.
When completing elements from class files, annotations with runtime visible and -invisible retention are read from different attributes, and then completed separately in ClassReader by different 'TypeAnnotationCompleter's.
The changes in JDK-8225377 to attach type annotations read from bytecode to their corresponding type included some logic for this, which would benefit from more test coverage:
https://github.com/openjdk/jdk/blob/aabec4a947ed2a808a1443fa6b2dabedd8c2dd9f/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ClassReader.java#L2584-L2591

-----
Title: [JDK-8337222] gc/TestDisableExplicitGC.java fails due to unexpected CodeCache GC
Priority: P4
Type: Bug
Component: hotspot
Description: The following test failed in the JDK24 CI:
gc/TestDisableExplicitGC.java
Here's a snippet from the log file:
#section:main
----------messages:(7/533)----------
command: main -XX:+DisableExplicitGC -Xlog:gc=debug gc.TestDisableExplicitGC
reason: User specified action: run main/othervm/fail -XX:+DisableExplicitGC -Xlog:gc=debug gc.TestDisableExplicitGC
started: Thu Jul 25 04:16:04 UTC 2024
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base,jdk.management --add-exports java.base/jdk.internal.misc=ALL-UNNAMED --add-exports jdk.management/com.sun.management.internal=ALL-UNNAMED
finished: Thu Jul 25 04:16:27 UTC 2024
elapsed time (seconds): 23.519
----------configuration:(5/211)----------
Boot Layer
add modules: java.base jdk.management
add exports: java.base/jdk.internal.misc                ALL-UNNAMED
jdk.management/com.sun.management.internal ALL-UNNAMED
----------System.out:(9/527)----------
[0.013s][info][gc] Using G1
[0.014s][debug][gc] ConcGCThreads: 2 offset 16
[0.014s][debug][gc] ParallelGCThreads: 8
[0.014s][debug][gc] Initialize mark stack with 4096 chunks, maximum 536870912
[21.656s][info ][gc] GC(0) Pause Young (Concurrent Start) (CodeCache GC Threshold) 5M-1M(488M) 8.010ms
[21.656s][info ][gc] GC(1) Concurrent Mark Cycle
[21.707s][info ][gc] GC(1) Pause Remark 2M-2M(10M) 40.760ms
[21.711s][info ][gc] GC(1) Pause Cleanup 2M-2M(10M) 0.082ms
[21.711s][info ][gc] GC(1) Concurrent Mark Cycle 55.489ms
----------System.err:(1/15)----------
STATUS:Passed.
----------rerun:(49/7579)*----------
result: Failed. Execution passed unexpectedly:
test result: Failed. Execution passed unexpectedly:
So the test has "STATUS:Passed.", but ended with:
result: Failed. Execution passed unexpectedly:
I have no idea what that means.
This same failure mode was logged in this bug from ~8 years ago:
JDK-8166221 gc/TestDisableExplicitGC.java fails mysteriously
OS: linux

-----
Title: [JDK-8337660] C2: basic blocks with only BoxLock nodes are wrongly treated as empty
Priority: P2
Type: Bug
Component: hotspot
Description: FAILURE ANALYSIS
---
C2's BoxLock nodes are special in that they are not transformed into platform-specific Mach nodes [1], but kept as Ideal nodes all the way until code emission (see e.g. [2]). In this case, the crash is caused by the elimination in PhaseCFG::remove_empty_blocks() [3] of a basic block (B7 in before-empty-block-removal.pdf) that contains one BoxLock node (153 BoxLock) and no Mach nodes other than an unconditional branch. According to the current logic in Block::is_Empty(), such a block is empty because it does not contain any non-branch Mach node [4]. The removal of B7 causes a segmentation fault when the code emitted by a later node (9 cmpFastUnlock) attempts to load from the address that the (wrongly removed) BoxLock node should have computed in r1 ("box" in [5]).
A potential solution is to extend Block::is_Empty() so that it treats BoxLock and Mach nodes equally.
[1] https://github.com/openjdk/jdk/blob/f0b251d76078e8d5b47e967b0449c4cbdcb5a005/src/hotspot/share/opto/matcher.cpp#L2278
[2] https://github.com/openjdk/jdk/blob/f0b251d76078e8d5b47e967b0449c4cbdcb5a005/src/hotspot/cpu/aarch64/aarch64.ad#L2168-L2195
[3] https://github.com/openjdk/jdk/blob/f0b251d76078e8d5b47e967b0449c4cbdcb5a005/src/hotspot/share/opto/block.cpp#L735-L783
[4] https://github.com/openjdk/jdk/blob/f0b251d76078e8d5b47e967b0449c4cbdcb5a005/src/hotspot/share/opto/block.cpp#L184-L189
[5] https://github.com/openjdk/jdk/blob/ac82a8f89c7066fb1d379b12bcfd68053cb39ba4/src/hotspot/cpu/aarch64/c2_MacroAssembler_aarch64.cpp#L261
AFFECTED VERSIONS, PLATFORMS, AND CONFIGURATIONS
---
I could reproduce the segmentation fault on JDK 24, JDK 23, JDK 21, JDK 17, and JDK 11 on aarch64 using different JVM flags and a partial backport of JDK-8292289, see comment in attached TestSynchronizeWithEmptyBlock.java for details. I failed to reproduce the segmentation fault on JDK 8, but code inspection of Block::is_Empty() [1] and different FastUnlock implementations (e.g. [2]), reveals that this JDK version is also potentially affected.
Both x64 and aarch64 platforms are affected. I could reproduce the issue on JDK 24 x64 by tweaking C2's register allocation heuristics (making the wrongly removed BoxLock node not rematerializable and randomizing register assignment).
The issue affects the LM_LEGACY locking mode (LockingMode=1), which is the default configuration in JDK 8-21, and the new LM_LIGHTWEIGHT locking mode (LockingMode=2) if UseObjectMonitorTable is enabled [3]. Currently, UseObjectMonitorTable is disabled by default, but it will likely be enabled in a future release because it is required by the UseCompactObjectHeaders JVM configuration. The LM_MONITOR locking mode (LockingMode=0) is unaffected.
[1] https://github.com/openjdk/jdk8/blob/6a383433a9f4661a96a90b2a4c7b5b9a85720031/hotspot/src/share/vm/opto/block.cpp#L149-L183
[2] https://github.com/openjdk/jdk8/blob/6a383433a9f4661a96a90b2a4c7b5b9a85720031/hotspot/src/cpu/x86/vm/x86_64.ad#L2736
[3] https://github.com/openjdk/jdk/blob/b53ee053f7f7ffcf02ff47e1895ce7be4bc32486/src/hotspot/cpu/aarch64/c2_MacroAssembler_aarch64.cpp#L603
ORIGINAL REPORT
---
ADDITIONAL SYSTEM INFORMATION :
$ uname -a
Linux localhost.localdomain 4.19.90-2112.8.0.0131.oe1.aarch64 #1 SMP Fri Dec 31 19:53:20 UTC 2021 aarch64 aarch64 aarch64 GNU/Linux
$ cat /etc/os-release
NAME="openEuler"
VERSION="20.03 (LTS-SP3)"
ID="openEuler"
VERSION_ID="20.03"
PRETTY_NAME="openEuler 20.03 (LTS-SP3)"
ANSI_COLOR="0;31"
A DESCRIPTION OF THE PROBLEM :
When I run the following Testcase using jdk-17.0.11, I find that the jvm crashes. This is very strange because there is no such problem on jdk8. I tried to add the -Xint option and -Xcomp option when running the test to determine whether it is a JIT problem, but both options make the problem unreproducible.
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
path/to/jdk-17.0.11/bin/javac -cp . Test.java
path/to/jdk-17.0.11/bin/java Test
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Continues running in an infinite loop
ACTUAL -
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x0000fffc692c0e60, pid=3747800, tid=3747801
#
# JRE version: Java(TM) SE Runtime Environment (17.0.11+7) (build 17.0.11+7-LTS-207)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (17.0.11+7-LTS-207, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# J 9 c2 Test.t()V (118 bytes) @ 0x0000fffc692c0e60 [0x0000fffc692c0c40+0x0000000000000220]
#
# Core dump will be written. Default location: Core dumps may be processed with "/usr/lib/systemd/systemd-coredump %P %u %g %s %t %c %h" (or dumping to /home/TEMP/proj/core.3747800)
#
# An error report file with more information is saved as:
# /home/TEMP/proj/hs_err_pid3747800.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
---------- BEGIN SOURCE ----------
class Test {
public static void main(String[] args) {
for (;;)
t();
}
static int var8;
static void t() {
synchronized (Test.class) {
int var12 = 0;
while (var12

-----
Title: [JDK-8337886] java/awt/Frame/MaximizeUndecoratedTest.java fails in OEL due to a slight color difference
Priority: P4
Type: Bug
Component: client-libs
Description: java/awt/Frame/MaximizeUndecoratedTest.java fails in OEL due to a slight color difference in the background color. This is currently reproduced only for Oracle Linux. Logs are attached.
The Color object I'm getting for each of these Point objects:
new Point(maxBounds.x + OFFSET, maxBounds.y + OFFSET) -- java.awt.Color[r=0,g=255,b=0]
new Point(maxBounds.width - OFFSET, maxBounds.y + OFFSET) --  java.awt.Color[r=0,g=207,b=0]
new Point(maxBounds.width - OFFSET, maxBounds.height - OFFSET) --   java.awt.Color[r=0,g=255,b=0]
new Point(maxBounds.x + OFFSET, maxBounds.height - OFFSET) --  java.awt.Color[r=0,g=255,b=0]
So, the issue occurs for the second Point object  --  new Point(maxBounds.width - OFFSET, maxBounds.y + OFFSET) - java.awt.Color[r=0,g=207,b=0]
Fix:
When the offset is increased from 2 to 5, it works fine in all the platforms.
This test verifies whether the frame is maximised or not by checking its four border points(by comparing it's colour with GREEN). But in OEL, the top left and top right borders are curved, so there is a possibility of error if we directly compare those points with GREEN colour, that's why an OFFSET is needed. But an OFFSET of 2 is not sufficient for OEL, and for safety I will change it to 5. I don't see this issue in Ubuntu as the borders as rectangular there, but not curved.
OS: linux_oracle

-----
Title: [JDK-8337951] Test sun/security/validator/samedn.sh CertificateNotYetValidException: NotBefore validation
Priority: P3
Type: Bug
Component: security-libs
Description: The following test failed in the JDK24 CI:
sun/security/validator/samedn.sh
Here's a snippet from the log file:
#-----testresult-----
description=file\:/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-24+10-1044/src.full/open/test/jdk/sun/security/validator/samedn.sh
elapsed=2664 0\:00\:02.664
end=Tue Aug 06 14\:41\:12 GMT 2024
environment=regtest
execStatus=Failed. Execution failed\: exit code 1
harnessLoaderMode=Classpath Loader
harnessVariety=Full Bundle
hostname=jpg-mac-arm-730.oraclecorp.com
javatestOS=Mac OS X 14.4.1 (aarch64)
javatestVersion=6.0-ea+b24-2022-09-27-9149bb7
jtregVersion=jtreg 7.4 1
modules=java.base/sun.security.validator
script=com.sun.javatest.regtest.exec.RegressionScript
sections=script_messages shell
start=Tue Aug 06 14\:41\:09 GMT 2024
test=sun/security/validator/samedn.sh
testJDK=/System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-24+10-1044/macosx-aarch64.jdk/jdk-24.jdk/Contents/Home
testJDK_OS=[name\:Mac OS X,arch\:aarch64,version\:14.4.1,family\:mac,simple_arch\:aarch64,simple_version\:14.4,processors\:8,maxMemory\:17179869184,maxSwap\:2147483648]
testJDK_os.arch=aarch64
testJDK_os.name=Mac OS X
testJDK_os.version=14.4.1
totalTime=2665
user.name=mach5-one
work=/System/Volumes/Data/mesos/work_dir/slaves/a4a7850a-7c35-410a-b879-d77fbb2f6087-S165353/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/0d16d676-f7c0-42cb-a59a-49cf2dbea917/runs/726fe1e8-d1cc-4bc3-91ec-ffcff41a00d2/testoutput/test-support/jtreg_open_test_jdk_tier2_part1/sun/security/validator
#section:script_messages
----------messages:(4/293)----------
JDK under test: /System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-24+10-1044/macosx-aarch64.jdk/jdk-24.jdk/Contents/Home
java version "24-ea" 2025-03-18
Java(TM) SE Runtime Environment (build 24-ea+10-1044)
Java HotSpot(TM) 64-Bit Server VM (build 24-ea+10-1044, mixed mode, sharing)
#section:shell
----------messages:(5/196)----------
command: shell samedn.sh
reason: Assumed action based on file name: run shell samedn.sh
started: Tue Aug 06 14:41:09 GMT 2024
finished: Tue Aug 06 14:41:12 GMT 2024
elapsed time (seconds): 2.663
----------System.out:(1/8)----------
Chain:
----------System.err:(53/3449)----------
Generating 3,072 bit RSA key pair and self-signed certificate (MD5withRSA) with a validity of 90 days
for: CN=CA
Warning:
The -keyalg option is specified multiple times. All except the last one will be ignored.
The generated certificate uses the MD5withRSA signature algorithm which is considered a security risk and is disabled.
Generating 3,072 bit RSA key pair and self-signed certificate (SHA1withRSA) with a validity of 90 days
for: CN=CA
Warning:
The -keyalg option is specified multiple times. All except the last one will be ignored.
The generated certificate uses the SHA1withRSA signature algorithm which is considered a security risk.
Generating 3,072 bit RSA key pair and self-signed certificate (SHA384withRSA) with a validity of 90 days
for: CN=User
Warning:
The -keyalg option is specified multiple times. All except the last one will be ignored.
Warning:
The issuer uses the MD5withRSA signature algorithm which is considered a security risk and is disabled.
Warning:
The issuer uses the SHA1withRSA signature algorithm which is considered a security risk.
Warning:
The certificate uses the MD5withRSA signature algorithm which is considered a security risk and is disabled.
Warning:
The certificate uses the SHA1withRSA signature algorithm which is considered a security risk.
Note: /System/Volumes/Data/mesos/work_dir/jib-master/install/jdk-24+10-1044/src.full/open/test/jdk/sun/security/validator/CertReplace.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
Exception in thread "main" sun.security.validator.ValidatorException: PKIX path validation failed: java.security.cert.CertPathValidatorException: validity check failed
at java.base/sun.security.validator.PKIXValidator.doValidate(PKIXValidator.java:318)
at java.base/sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:256)
at java.base/sun.security.validator.Validator.validate(Validator.java:256)
at java.base/sun.security.validator.Validator.validate(Validator.java:223)
at java.base/sun.security.validator.Validator.validate(Validator.java:199)
at CertReplace.main(CertReplace.java:51)
Caused by: java.security.cert.CertPathValidatorException: validity check failed
at java.base/sun.security.provider.certpath.PKIXMasterCertPathValidator.validate(PKIXMasterCertPathValidator.java:135)
at java.base/sun.security.provider.certpath.PKIXCertPathValidator.validate(PKIXCertPathValidator.java:224)
at java.base/sun.security.provider.certpath.PKIXCertPathValidator.validate(PKIXCertPathValidator.java:144)
at java.base/sun.security.provider.certpath.PKIXCertPathValidator.engineValidate(PKIXCertPathValidator.java:83)
at java.base/java.security.cert.CertPathValidator.validate(CertPathValidator.java:309)
at java.base/sun.security.validator.PKIXValidator.doValidate(PKIXValidator.java:313)
... 5 more
Caused by: java.security.cert.CertificateNotYetValidException: NotBefore: Tue Aug 06 14:41:13 GMT 2024
at java.base/sun.security.x509.CertificateValidity.valid(CertificateValidity.java:178)
at java.base/sun.security.x509.X509CertImpl.checkValidity(X509CertImpl.java:534)
at java.base/sun.security.provider.certpath.BasicChecker.verifyValidity(BasicChecker.java:190)
at java.base/sun.security.provider.certpath.BasicChecker.check(BasicChecker.java:144)
at java.base/sun.security.provider.certpath.PKIXMasterCertPathValidator.validate(PKIXMasterCertPathValidator.java:125)
... 10 more
----------rerun:(30/3918)*----------
OS: generic

-----
Title: [JDK-8337994] [REDO] Native memory leak when not recording any events
Priority: P3
Type: Bug
Component: hotspot
Description: ADDITIONAL SYSTEM INFORMATION :
OS (running in docker on a ubuntu 22.04) :
Alpine Linux source887b8b5876c2-5784d75ffb-l5fgv 5.15.0-1058-aws #64~20.04.1-Ubuntu SMP Tue Apr 9 11:12:27 UTC 2024 x86_64 Linux
$ java --version
NOTE: Picked up JDK_JAVA_OPTIONS: -XX:NativeMemoryTracking=detail
NOTE: Picked up JDK_JAVA_OPTIONS: -XX:NativeMemoryTracking=detail
openjdk 21.0.3 2024-04-16 LTS
OpenJDK Runtime Environment Zulu21.34+19-CA (build 21.0.3+9-LTS)
OpenJDK 64-Bit Server VM Zulu21.34+19-CA (build 21.0.3+9-LTS, mixed mode, sharing)
A DESCRIPTION OF THE PROBLEM :
We have a service running into a native memory leak which we believe is related to JFR. This service is running on Java 21 and it's currently not using virtual threads at all. It is however pulling on a shared library which provide basic monitoring around thread pinning event within a class named PinnedThreadTracker. The source code of this class is included at the end of this description.
When the service runs with this component enabled, it experiences a native memory leak. We do not get any leak when disabling this component. The heap/off-heap spaces are all within the limits defined and do not grow indefinitely. However, the process memory is growing. Using -XX:NativeMemoryTracking=detail, we are able to see the 'Tracing'  memory region growing and growing. Here is the result of 2 invocation of 'jcmd 1 VM.native_memory detail.diff scale=MB' spaced about 2 hours apart :
Native Memory Tracking:
(Omitting categories weighting less than 1MB)
Total: reserved=4543MB +77MB, committed=2084MB +141MB
-                 Java Heap (reserved=2252MB, committed=1074MB +60MB)
(mmap: reserved=2252MB, committed=1074MB +60MB)
-                     Class (reserved=1029MB, committed=32MB)
(classes #40298 +76)
(  instance classes #37933 +74, array classes #2365 +2)
(malloc=5MB #132908 +1918)
(mmap: reserved=1024MB, committed=27MB)
: (  Metadata)
(    reserved=192MB, committed=186MB +1MB)
(    used=185MB +1MB)
(    waste=1MB =0.49%)
: (  Class space)
(    reserved=1024MB, committed=27MB)
(    used=25MB)
(    waste=2MB =5.75%)
-                    Thread (reserved=129MB -3MB, committed=13MB)
(thread #129 -3)
(stack: reserved=128MB -3MB, committed=13MB)
-                      Code (reserved=250MB, committed=114MB)
(malloc=8MB #21506 +1389)
(mmap: reserved=242MB, committed=106MB)
-                        GC (reserved=89MB, committed=66MB +1MB)
(malloc=13MB #39253 +2286)
(mmap: reserved=76MB, committed=53MB +1MB)
-                 GCCardSet (reserved=3MB +2MB, committed=3MB +2MB)
(malloc=3MB +2MB #3771 +1098)
-                  Compiler (reserved=2MB, committed=2MB)
(malloc=1MB #4047 +71)
-                  Internal (reserved=7MB, committed=7MB)
(malloc=7MB #93677 +482)
-                     Other (reserved=3MB, committed=3MB)
(malloc=3MB #1136 -5)
-                    Symbol (reserved=62MB, committed=62MB)
(malloc=58MB #539325 +515)
(arena=5MB #1)
-    Native Memory Tracking (reserved=38MB +4MB, committed=38MB +4MB)
(malloc=1MB #12411 +2862)
(tracking overhead=37MB +4MB)
-        Shared class space (reserved=16MB, committed=13MB)
(mmap: reserved=16MB, committed=13MB)
-                   Tracing (reserved=464MB +73MB, committed=464MB +73MB)
(malloc=464MB +73MB #1548059 +250121)
-           Synchronization (reserved=4MB, committed=4MB)
(malloc=4MB #43969 +128)
-                 Metaspace (reserved=194MB, committed=188MB +1MB)
(malloc=2MB #2448 +22)
(mmap: reserved=192MB, committed=186MB +1MB)
[0x00007f72792c8828] G1MonotonicArena::allocate()+0x1d8
[0x00007f727927ff99] G1CardSet::create_coarsened_array_of_cards(unsigned int, bool)+0x39
[0x00007f7279280323] G1CardSet::coarsen_container(void* volatile*, void*, unsigned int, bool)+0x123
[0x00007f72792815a0] G1CardSet::add_to_howl(void*, unsigned int, unsigned int, bool)+0x150
(malloc=1MB type=GCCardSet +1MB #284 +269)
[0x00007f72793ddd96] JfrCheckpointManager::lease_thread_local(Thread*, unsigned long)+0x126
[0x00007f72793e3c46] JfrCheckpointWriter::JfrCheckpointWriter(Thread*, bool, JfrCheckpointType, JfrCheckpointBufferKind)+0x26
[0x00007f727944b164] JfrTypeManager::write_checkpoint(Thread*, unsigned long, oopDesc*)+0x174
[0x00007f727943dc0c] JfrThreadLocal::on_start(Thread*)+0x9c
(malloc=224MB type=Tracing +36MB #773886 +125058)
[0x00007f72793ddd96] JfrCheckpointManager::lease_thread_local(Thread*, unsigned long)+0x126
[0x00007f72793e3c46] JfrCheckpointWriter::JfrCheckpointWriter(Thread*, bool, JfrCheckpointType, JfrCheckpointBufferKind)+0x26
[0x00007f727944b164] JfrTypeManager::write_checkpoint(Thread*, unsigned long, oopDesc*)+0x174
[0x00007f727943df84] JfrThreadLocal::on_exit(Thread*)+0x94
(malloc=224MB type=Tracing +36MB #773858 +125062)
[0x00007f72797ac35b] os::reserve_memory_aligned(unsigned long, unsigned long, bool)+0x2b
[0x00007f7279aaefbf] ReservedSpace::reserve(unsigned long, unsigned long, unsigned long, char*, bool)+0x51f
[0x00007f7279aaf373] ReservedSpace::ReservedSpace(unsigned long, unsigned long, unsigned long, char*)+0x53
[0x00007f7279aadc4b] metaspace::VirtualSpaceNode::create_node(unsigned long, metaspace::CommitLimiter*, metaspace::AbstractCounter*, metaspace::AbstractCounter*)+0x4b
(mmap: reserved=128MB, committed=122MB +1MB Type=Metaspace)
[0x00007f7279aaef90] ReservedSpace::reserve(unsigned long, unsigned long, unsigned long, char*, bool)+0x4f0
[0x00007f7279286259] G1CollectedHeap::create_aux_memory_mapper(char const*, unsigned long, unsigned long)+0x39
[0x00007f727928ac09] G1CollectedHeap::initialize()+0x2d9
[0x00007f7279a59a36] universe_init()+0xd6
(mmap: reserved=35MB, committed=17MB +1MB Type=GC)
[0x00007f7279aafaa7] ReservedHeapSpace::try_reserve_range(char*, char*, unsigned long, char*, char*, unsigned long, unsigned long, unsigned long)+0x4c7
[0x00007f7279ab0434] ReservedHeapSpace::initialize_compressed_heap(unsigned long, unsigned long, unsigned long)+0x614
[0x00007f7279ab0699] ReservedHeapSpace::ReservedHeapSpace(unsigned long, unsigned long, unsigned long, char const*)+0x179
[0x00007f7279a59c80] Universe::reserve_heap(unsigned long, unsigned long)+0x70
(mmap: reserved=2252MB, committed=1074MB +60MB Type=Java Heap)
[0x00007f72797a20aa] thread_native_entry(Thread*)+0x12a
(mmap: reserved=127MB -3MB, committed=13MB Type=Thread Stack)
Native Memory Tracking:
(Omitting categories weighting less than 1MB)
Total: reserved=4743MB +276MB, committed=2229MB +286MB
-                 Java Heap (reserved=2252MB, committed=1020MB +6MB)
(mmap: reserved=2252MB, committed=1020MB +6MB)
-                     Class (reserved=1029MB, committed=32MB)
(classes #40392 +170)
(  instance classes #38027 +168, array classes #2365 +2)
(malloc=5MB #133963 +2973)
(mmap: reserved=1024MB, committed=27MB)
: (  Metadata)
(    reserved=192MB, committed=187MB +1MB)
(    used=186MB +1MB)
(    waste=1MB =0.49%)
: (  Class space)
(    reserved=1024MB, committed=27MB)
(    used=25MB)
(    waste=2MB =6.01%)
-                    Thread (reserved=131MB -1MB, committed=13MB)
(thread #131 -1)
(stack: reserved=130MB -1MB, committed=13MB)
-                      Code (reserved=250MB +1MB, committed=116MB +2MB)
(malloc=8MB +1MB #21142 +1025)
(mmap: reserved=242MB, committed=107MB +1MB)
-                        GC (reserved=93MB +4MB, committed=69MB +4MB)
(malloc=17MB +4MB #39987 +3020)
(mmap: reserved=76MB, committed=52MB)
-                 GCCardSet (reserved=3MB +2MB, committed=3MB +2MB)
(malloc=3MB +2MB #3860 +1187)
-                  Compiler (reserved=2MB, committed=2MB)
(malloc=1MB #4028 +52)
-                  Internal (reserved=7MB, committed=7MB)
(malloc=7MB #94712 +1517)
-                     Other (reserved=3MB, committed=3MB)
(malloc=3MB #1137 -4)
-                    Symbol (reserved=62MB, committed=62MB)
(malloc=58MB #539867 +1057)
(arena=5MB #1)
-    Native Memory Tracking (reserved=48MB +14MB, committed=48MB +14MB)
(malloc=1MB #12618 +3069)
(tracking overhead=47MB +14MB)
-        Shared class space (reserved=16MB, committed=13MB)
(mmap: reserved=16MB, committed=13MB)
-                   Tracing (reserved=647MB +256MB, committed=647MB +256MB)
(malloc=647MB +256MB #2180371 +882433)
-           Synchronization (reserved=4MB, committed=4MB)
(malloc=4MB #44142 +301)
-                 Metaspace (reserved=194MB, committed=189MB +1MB)
(malloc=2MB #2600 +174)
(mmap: reserved=192MB, committed=187MB +1MB)
[0x00007f72792c8828] G1MonotonicArena::allocate()+0x1d8
[0x00007f727927ff99] G1CardSet::create_coarsened_array_of_cards(unsigned int, bool)+0x39
[0x00007f7279280323] G1CardSet::coarsen_container(void* volatile*, void*, unsigned int, bool)+0x123
[0x00007f72792815a0] G1CardSet::add_to_howl(void*, unsigned int, unsigned int, bool)+0x150
(malloc=1MB type=GCCardSet +1MB #287 +272)
[0x00007f727978e67b] ImmutableOopMapSet::build_from(OopMapSet const*)+0x9b
[0x00007f72790f64be] CodeBlob::CodeBlob(char const*, CompilerType, CodeBlobLayout const&, CodeBuffer*, int, int, OopMapSet*, bool, bool)+0x7e
[0x00007f727913c709] CompiledMethod::CompiledMethod(Method*, char const*, CompilerType, int, int, CodeBuffer*, int, int, OopMapSet*, bool, bool)+0x109
[0x00007f727975ff9a] nmethod::nmethod(Method*, CompilerType, int, int, int, CodeOffsets*, int, DebugInformationRecorder*, Dependencies*, CodeBuffer*, int, OopMapSet*, ExceptionHandlerTable*, ImplicitExceptionTable*, AbstractCompiler*, CompLevel, char*, int, JVMCINMethodData*)+0xaa
(malloc=8MB type=Code +1MB #17611 +1002)
[0x00007f7279825389] PtrQueueSet::exchange_buffer_with_new(PtrQueue&)+0x39
[0x00007f727985aa0a] SATBMarkQueueSet::handle_zero_index(SATBMarkQueue&)+0x5a
[0x00007f727985ab0b] SATBMarkQueueSet::enqueue_known_active(SATBMarkQueue&, oopDesc*)+0x3b
(malloc=7MB type=GC +4MB #943 +493)
[0x00007f72793ddd96] JfrCheckpointManager::lease_thread_local(Thread*, unsigned long)+0x126
[0x00007f72793e3c46] JfrCheckpointWriter::JfrCheckpointWriter(Thread*, bool, JfrCheckpointType, JfrCheckpointBufferKind)+0x26
[0x00007f727944b164] JfrTypeManager::write_checkpoint(Thread*, unsigned long, oopDesc*)+0x174
[0x00007f727943dc0c] JfrThreadLocal::on_start(Thread*)+0x9c
(malloc=316MB type=Tracing +128MB #1090043 +441215)
[0x00007f72793ddd96] JfrCheckpointManager::lease_thread_local(Thread*, unsigned long)+0x126
[0x00007f72793e3c46] JfrCheckpointWriter::JfrCheckpointWriter(Thread*, bool, JfrCheckpointType, JfrCheckpointBufferKind)+0x26
[0x00007f727944b164] JfrTypeManager::write_checkpoint(Thread*, unsigned long, oopDesc*)+0x174
[0x00007f727943df84] JfrThreadLocal::on_exit(Thread*)+0x94
(malloc=316MB type=Tracing +128MB #1090013 +441217)
[0x00007f72797ac35b] os::reserve_memory_aligned(unsigned long, unsigned long, bool)+0x2b
[0x00007f7279aaefbf] ReservedSpace::reserve(unsigned long, unsigned long, unsigned long, char*, bool)+0x51f
[0x00007f7279aaf373] ReservedSpace::ReservedSpace(unsigned long, unsigned long, unsigned long, char*)+0x53
[0x00007f7279aadc4b] metaspace::VirtualSpaceNode::create_node(unsigned long, metaspace::CommitLimiter*, metaspace::AbstractCounter*, metaspace::AbstractCounter*)+0x4b
(mmap: reserved=128MB, committed=123MB +1MB Type=Metaspace)
[0x00007f7279aaef90] ReservedSpace::reserve(unsigned long, unsigned long, unsigned long, char*, bool)+0x4f0
[0x00007f7279aaf16c] ReservedCodeSpace::ReservedCodeSpace(unsigned long, unsigned long, unsigned long)+0x5c
[0x00007f727910191e] CodeCache::initialize_heaps()+0x25e
[0x00007f7279101fd5] CodeCache::initialize()+0x55
(mmap: reserved=240MB, committed=107MB +1MB Type=Code)
[0x00007f7279aafaa7] ReservedHeapSpace::try_reserve_range(char*, char*, unsigned long, char*, char*, unsigned long, unsigned long, unsigned long)+0x4c7
[0x00007f7279ab0434] ReservedHeapSpace::initialize_compressed_heap(unsigned long, unsigned long, unsigned long)+0x614
[0x00007f7279ab0699] ReservedHeapSpace::ReservedHeapSpace(unsigned long, unsigned long, unsigned long, char const*)+0x179
[0x00007f7279a59c80] Universe::reserve_heap(unsigned long, unsigned long)+0x70
(mmap: reserved=2252MB, committed=1020MB +6MB Type=Java Heap)
[0x00007f72797a20aa] thread_native_entry(Thread*)+0x12a
(mmap: reserved=129MB -1MB, committed=13MB Type=Thread Stack)
public class PinnedThreadTracker implements AutoCloseable
{
private static final Logger logger = CoveoLogger.getLogger(PinnedThreadTracker.class);
private static final String VIRTUAL_THREAD_PINNED_JFR_EVENT_NAME = "jdk.VirtualThreadPinned";
private final RecordingStream recordingStream;
private final int maximumStackDepth;
private final boolean isCloudEnvironment;
public PinnedThreadTracker(Duration recordingThreshold, int maximumStackTraceDepth, Environment environment)
{
maximumStackDepth = maximumStackTraceDepth;
isCloudEnvironment = environment.acceptsProfiles(Profiles.CLOUD_PROFILES);
recordingStream = new RecordingStream();
recordingStream.enable(VIRTUAL_THREAD_PINNED_JFR_EVENT_NAME)
.withStackTrace()
.withThreshold(Objects.requireNonNull(recordingThreshold));
recordingStream.onEvent(VIRTUAL_THREAD_PINNED_JFR_EVENT_NAME, this::recordEvent);
recordingStream.setReuse(true);
recordingStream.setMaxAge(Duration.ofSeconds(5));
recordingStream.startAsync();
}
private void recordEvent(RecordedEvent event)
{
if (isCloudEnvironment) {
LogstashMarker markers = Markers.appendEntries(Map.of("event_stack_trace",
getStackTrace(event.getStackTrace(),
maximumStackDepth),
"pinned_duration_ms",
event.getDuration().toMillis()));
logger.warn(markers,
"Pinned thread event of duration : '{}'. See event_stack_trace for more details.",
event.getDuration());
} else {
logger.warn("Pinned thread event of duration : '{}'. Stack trace:{}{}",
event.getDuration(),
System.lineSeparator(),
getStackTrace(event.getStackTrace(), maximumStackDepth));
}
}
@Override
public void close()
{
recordingStream.close();
}
/**
* Get a pretty printed stack trace from a {@link RecordedStackTrace}.
* The toString implementation of {@link RecordedStackTrace} has a max depth of 5 which is not enough to get a proper picture.
* This method is strongly inspired from the original classes, minus some details that are not relevant for our use case.
*/
private static String getStackTrace(RecordedStackTrace stackTrace, int maximumStackDepth)
{
StringBuilder builder = new StringBuilder();
List frames = stackTrace.getFrames();
int i = 0;
int depth = 0;
while (i = 0) {
builder.append(" line: ").append(line);
}
}
}
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
We're currently seeing this issue on only one service with no special setup. Therefore, I cannot provide an easy way to reproduce but hopefully from the details provided it will be enough to see the issue. If not, please say so and I'll try to find a way to reproduce it.
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
I'd expect this relatively simple JFR setup to not leak memory
ACTUAL -
memory leak
FREQUENCY : always
OS: generic

-----
Title: [JDK-8338100] C2: assert(!n_loop->is_member(get_loop(lca))) failed: control must not be back in the loop
Priority: P3
Type: Bug
Component: hotspot
Description: I would appreciate some credit in the PR, I took quite a while to extract a nice "X.jasm" from a larger set of classfiles, and reducing it to just a few lines of code.
Affected seem to be current (JDK24) - JDK17. JDK11 did not reproduce. [~thartmann] said it is a regression of JDK-8252372.
emanuel@emanuel-oracle:/oracle-work/triage/new$ java -jar ~/Documents/asmtools-7.0-build/release/lib/asmtools.jar jasm X.jasm
emanuel@emanuel-oracle:/oracle-work/triage/new$ /oracle-work/jdk-fork4/build/linux-x64-debug/jdk/bin/java -XX:CompileCommand=printcompilation,X::* -XX:CompileCommand=compileonly,X::test -Xcomp X
CompileCommand: PrintCompilation X.* bool PrintCompilation = true
CompileCommand: compileonly X.test bool compileonly = true
586   26    b  3       X::test (40 bytes)
587   27    b  4       X::test (40 bytes)
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle-work/jdk-fork4/open/src/hotspot/share/opto/loopopts.cpp:1071), pid=2960708, tid=2960722
#  assert(!n_loop-is_member(get_loop(lca))) failed: control must not be back in the loop
#
# JRE version: Java(TM) SE Runtime Environment (24.0) (fastdebug build 24-internal-2024-07-23-0635220.emanuel...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 24-internal-2024-07-23-0635220.emanuel..., compiled mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x12a70b9]  PhaseIdealLoop::try_move_store_after_loop(Node*) [clone .part.0]+0x9e9
#
# Core dump will be written. Default location: Core dumps may be processed with "/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E" (or dumping to /oracle-work/triage/new/core.2960708)
#
# An error report file with more information is saved as:
# /oracle-work/triage/new/hs_err_pid2960708.log
#
# Compiler replay data is saved as:
# /oracle-work/triage/new/replay_pid2960708.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
Aborted (core dumped)
Current CompileTask:
C2:616   27    b  4       X::test (40 bytes)
Stack: [0x00007fb2c5537000,0x00007fb2c5638000],  sp=0x00007fb2c5632cb0,  free space=1007k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x12a70b9]  PhaseIdealLoop::try_move_store_after_loop(Node*) [clone .part.0]+0x9e9  (loopopts.cpp:1071)
V  [libjvm.so+0x12aadd6]  PhaseIdealLoop::split_if_with_blocks(VectorSet&, Node_Stack&)+0x96  (loopopts.cpp:1964)
V  [libjvm.so+0x129d429]  PhaseIdealLoop::build_and_optimize()+0xee9  (loopnode.cpp:4815)
V  [libjvm.so+0x9e90c0]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x390  (loopnode.hpp:1117)
V  [libjvm.so+0x9e1da5]  Compile::optimize_loops(PhaseIterGVN&, LoopOptsMode)+0x75  (compile.cpp:2171)
V  [libjvm.so+0x9e4531]  Compile::Optimize()+0xe21  (compile.cpp:2418)
V  [libjvm.so+0x9e7c76]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1b06  (compile.cpp:852)
V  [libjvm.so+0x835885]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1d5  (c2compiler.cpp:142)
V  [libjvm.so+0x9f38b8]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x928  (compileBroker.cpp:2303)
V  [libjvm.so+0x9f4548]  CompileBroker::compiler_thread_loop()+0x478  (compileBroker.cpp:1961)
V  [libjvm.so+0xe9cffc]  JavaThread::thread_main_inner()+0xcc  (javaThread.cpp:757)
V  [libjvm.so+0x17bd736]  Thread::call_run()+0xb6  (thread.cpp:225)
V  [libjvm.so+0x14a55b7]  thread_native_entry(Thread*)+0x127  (os_linux.cpp:858)
A quick investigation with RR:
(rr) p n-dump_bfs(10,0,"c#")
dist dump
---------------------------------------------
10   67  ParsePredicate  === 66 20  [[ 68 76 ]]  #Profiled_Loop #useless  !jvms: X::test @ bci:0
9   76  IfTrue  === 67  [[ 77 ]] #1 !jvms: X::test @ bci:0
8   77  ParsePredicate  === 76 20  [[ 78 86 ]]  #Loop_Limit_Check #useless  !jvms: X::test @ bci:0
7  314  IfFalse  === 351  [[ 244 ]] #0 !orig=[144] !jvms: X::test @ bci:5
7   86  IfTrue  === 77  [[ 244 ]] #1 !jvms: X::test @ bci:0
6  370  IfFalse  === 349  [[ 355 356 ]] #0 !orig=[350],314,[144] !jvms: X::test @ bci:5
6  244  Loop  === 244 86 314  [[ 244 239 240 287 376 ]]  !orig=[87] !jvms: X::test @ bci:0
5  355  SafePoint  === 370 1 290 1 1 356 1 346 1  [[ 351 ]]  SafePoint  !orig=310,220 !jvms: X::test @ bci:37
5  376  NeverBranch  === 244  [[ 377 378 ]]
4  351  OuterStripMinedLoopEnd  === 355 92  [[ 352 314 ]] P=0.900000, C=-1.000000
4  377  CProj  === 376  [[ 298 ]] #0
3  349  CountedLoopEnd  === 363 348  [[ 370 143 ]] [lt] P=0.900000, C=-1.000000 !orig=[142] !jvms: X::test @ bci:5
3  352  IfTrue  === 351  [[ 353 ]] #1
3  298  SafePoint  === 377 1 296 1 1 287 1 92 1 92 133  [[ 293 353 ]]  SafePoint  !orig=134 !jvms: X::test @ bci:5
2  143  IfTrue  === 349  [[ 363 ]] #1 !jvms: X::test @ bci:5
2  353  OuterStripMinedLoop  === 353 298 352  [[ 353 363 ]]
1  363  CountedLoop  === 363 353 143  [[ 360 362 363 364 365 361 349 381 ]] stride: 2  strip mined !orig=[354],[311],[283] !jvms: X::test @ bci:16
0  360  StoreC  === 363 364 149 206  [[ 290 239 ]]  @java/lang/Class (java/io/Serializable,java/lang/constant/Constable,java/lang/reflect/AnnotatedElement,java/lang/invoke/TypeDescriptor,java/lang/reflect/GenericDeclaration,java/lang/reflect/Type,java/lang/invoke/TypeDescriptor$OfField):exact+120 *, name=c, idx=4;  Memory: @java/lang/Class (java/io/Serializable,java/lang/constant/Constable,java/lang/reflect/AnnotatedElement,java/lang/invoke/TypeDescriptor,java/lang/reflect/GenericDeclaration,java/lang/reflect/Type,java/lang/invoke/TypeDescriptor$OfField):exact+120 *, name=c, idx=4; !orig=[295],271,[211] !jvms: X::test @ bci:25
(rr) p lca-dump()
363  CountedLoop  === 363 353 143  [[ 360 362 363 364 365 361 349 381 ]] stride: 2  strip mined !orig=[354],[311],[283] !jvms: X::test @ bci:16
$8 = void
(rr) p n_loop-dump()
Loop: N363/N143  counted [0,10),+2 (2147483648 iters)  strip_mined
- looks like another infinite-loop bug.

-----
Title: [JDK-8338303] Linux ppc64le with toolchain clang - detection failure in early JVM startup
Priority: P4
Type: Bug
Component: hotspot
Description: When building on Linux ppc64le with the clang toolchain,  the new JVM fails already in the build process with this error :
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGILL (0x4) at pc=0x000079198fae03ac, pid=2922849, tid=2923410
#
# JRE version:  (24.0.0.1) (build )
# Java VM: OpenJDK 64-Bit Server VM (24.0.0.1-internal-adhoc.d040975.jdk, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-ppc64le)
# Problematic frame:
# v  ~BufferBlob::detect_cpu_features 0x000079198fae03ac
#
Host: POWER9 (architected), altivec supported, 64 cores, 127G, Ubuntu 22.04.4 LTS
Time: Tue Aug 13 08:01:50 2024 UTC elapsed time: 0.023703 seconds (0d 0h 0m 0s)
---------------  T H R E A D  ---------------
Current thread (0x000079199802c800):  JavaThread "Unknown thread" [_thread_in_vm, id=2923410, stack(0x000079199c990000,0x000079199cb90000) (2048K)]
Stack: [0x000079199c990000,0x000079199cb90000],  sp=0x000079199cb8b7c0,  free space=2029k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
v  ~BufferBlob::detect_cpu_features 0x000079198fae03ac
V  [libjvm.so+0x1206cb8]  (vm_version_ppc.cpp:60)
V  [libjvm.so+0x1206a98]  (vm_version.cpp:32)
V  [libjvm.so+0xa6e234]  (init.cpp:128)
V  [libjvm.so+0x11600a0]  (threads.cpp:550)
V  [libjvm.so+0xbaa0ac]  JNI_CreateJavaVM+0xac  (jni.cpp:3581)
C  [libjli.so+0x185bc]  (java.c:1592)
C  [libjli.so+0x1c158]  (java_md.c:653)
C  [libc.so.6+0xb5804]
siginfo: si_signo: 4 (SIGILL), si_code: 1 (ILL_ILLOPC), si_addr: 0x000079198fae03ac
OS: linux

-----
Title: [JDK-8338426] Test java/nio/channels/Selector/WakeupNow.java failed
Priority: P4
Type: Bug
Component: core-libs
Description: ----------System.err:(11/544)----------
java.lang.RuntimeException: test failed
at WakeupNow.test2(WakeupNow.java:76)
at WakeupNow.main(WakeupNow.java:35)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:588)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.Thread.run(Thread.java:1575)

-----
Title: [JDK-8338571] [TestBug] DefaultCloseOperation.java test not working as expected wrt instruction after JDK-8325851 fix
Priority: P3
Type: Bug
Component: client-libs
Description: Testsuite: Regression Manual
Product(s) tested:23.0. 1 b06
OS/architecture: Windows
OS specific: No
javax/swing/JFrame/DefaultCloseOperation.java test not working as expected wrt Instruction
After JDK-8325851 fix TestFrame and TestDailog is loaded by default when test start which is not expected.
Expected: TestFrame/TestDailog should load after user clicking on OpenFrame/OpenDailog button.
PFA screenshot
OS: generic

-----
Title: [JDK-8325851] Hide PassFailJFrame.Builder constructor
Priority: P5
Type: Bug
Component: client-libs
Description: The PassFailJFrame.Builder class provides a way to configure the parameters of PassFailJFrame in a set of chained method calls.
The Builder class is public and has public constructor. At the same time, a better design would be to hide all the Builder constructors and rely on the builder() method which returns an instance of the Builder.
At the same time, the builder() helper wasn't available until JDK-8294156 which was integrated in October 2023 whereas the Builder class became available with JDK-8294535 in August 2023.
For this reason, there are 20 tests which create the PassFailJFrame.Builder object using its constructor instead of the helper method. These tests have to be updated.
To find these tests, run:
grep -r 'new PassFailJFrame.Builder' test/jdk
Hiding the PassFailJFrame.Builder constructor is a better design choice. New tests should not create the builder using the `new` keyword. To enforce it, the Builder constructor needs to be private.

-----
Title: [JDK-8338595] Add more linesize for MIME decoder in macro bench test Base64Decode
Priority: P4
Type: Enhancement
Component: hotspot
Description: Currently, lineSize linesize for MIME case in macro bench test Base64Decode is only "4", but in Base64.Encoder default linesize for MIME encoder is 76.
It's helpful to add more linesize, e.g. 76 and so on.

-----
Title: [JDK-8338668] Test javax/swing/JFileChooser/8080628/bug8080628.java doesn't test for GTK L&F
Priority: P4
Type: Bug
Component: client-libs
Description: javax/swing/JFileChooser/8080628/bug8080628.java test doesn't test for GTK L&F as it requires a headful system to test.
Ran the test and observed that it skipped testing for GTK on headless system.
Testing L&F: javax.swing.plaf.nimbus.NimbusLookAndFeel
Testing L&F: com.sun.java.swing.plaf.motif.MotifLookAndFeel
Unsupported L&F: com.sun.java.swing.plaf.gtk.GTKLookAndFeel
Test passed
Expected: should be run on headful system to test GTK L&F functionality.
OS: linux

-----
Title: [JDK-8339154] Cleanups and JUnit conversion of test/jdk/java/util/zip/Available.java
Priority: P5
Type: Enhancement
Component: core-libs
Description: The ZIP test test/jdk/java/util/zip/Available.java has several issues:
* It could benefit from a conversion to JUnit
* It uses a binary test vector ZIP and could benefit from creating its own test vector instead
* It does not cover behavior after calling ZipInputStream.closeEntry
* It does not cover behavior of ZipFileInputStream.available (Uncompressed entries in ZipFile)

-----
Title: [JDK-8339261] Logs truncated in test javax/net/ssl/DTLS/DTLSRehandshakeTest.java
Priority: P4
Type: Sub-task
Component: security-libs
Description: The test javax/net/ssl/DTLS/DTLSRehandshakeTest.java runs multiple scenarios, generating a large amount of logging as a result. Since Jtreg truncates the output when it becomes too large, the logs are often not useful for debugging in case of failure.
Increment the test log maxOutputSize to get the full output.

-----
Title: [JDK-8339356] Test javax/net/ssl/SSLSocket/Tls13PacketSize.java failed with java.net.SocketException: An established connection was aborted by the software in your host machine
Priority: P4
Type: Bug
Component: security-libs
Description: ----------System.out:(20/1566)----------
Server input bytes: 16366
Client died: java.net.SocketException: An established connection was aborted by the software in your host machine
java.net.SocketException: An established connection was aborted by the software in your host machine
at java.base/sun.nio.ch.SocketDispatcher.read0(Native Method)
at java.base/sun.nio.ch.SocketDispatcher.read(SocketDispatcher.java:46)
at java.base/sun.nio.ch.NioSocketImpl.tryRead(NioSocketImpl.java:256)
at java.base/sun.nio.ch.NioSocketImpl.implRead(NioSocketImpl.java:307)
at java.base/sun.nio.ch.NioSocketImpl.read(NioSocketImpl.java:346)
at java.base/sun.nio.ch.NioSocketImpl$1.read(NioSocketImpl.java:796)
at java.base/java.net.Socket$SocketInputStream.implRead(Socket.java:1118)
at java.base/java.net.Socket$SocketInputStream.read(Socket.java:1105)
at java.base/sun.security.ssl.SSLSocketInputRecord.read(SSLSocketInputRecord.java:489)
at java.base/sun.security.ssl.SSLSocketInputRecord.readHeader(SSLSocketInputRecord.java:483)
at java.base/sun.security.ssl.SSLSocketInputRecord.bytesInCompletePacket(SSLSocketInputRecord.java:70)
at java.base/sun.security.ssl.SSLSocketImpl.readApplicationRecord(SSLSocketImpl.java:1461)
at java.base/sun.security.ssl.SSLSocketImpl$AppInputStream.read(SSLSocketImpl.java:1068)
at java.base/sun.security.ssl.SSLSocketImpl$AppInputStream.read(SSLSocketImpl.java:975)
at Tls13PacketSize.runClientApplication(Tls13PacketSize.java:97)
at SSLSocketTemplate.doClientSide(SSLSocketTemplate.java:302)
at SSLSocketTemplate$2.run(SSLSocketTemplate.java:441)
----------System.err:(23/1748)----------
java.net.SocketException: An established connection was aborted by the software in your host machine
at java.base/sun.nio.ch.SocketDispatcher.read0(Native Method)
at java.base/sun.nio.ch.SocketDispatcher.read(SocketDispatcher.java:46)
at java.base/sun.nio.ch.NioSocketImpl.tryRead(NioSocketImpl.java:256)
at java.base/sun.nio.ch.NioSocketImpl.implRead(NioSocketImpl.java:307)
at java.base/sun.nio.ch.NioSocketImpl.read(NioSocketImpl.java:346)
at java.base/sun.nio.ch.NioSocketImpl$1.read(NioSocketImpl.java:796)
at java.base/java.net.Socket$SocketInputStream.implRead(Socket.java:1118)
at java.base/java.net.Socket$SocketInputStream.read(Socket.java:1105)
at java.base/sun.security.ssl.SSLSocketInputRecord.read(SSLSocketInputRecord.java:489)
at java.base/sun.security.ssl.SSLSocketInputRecord.readHeader(SSLSocketInputRecord.java:483)
at java.base/sun.security.ssl.SSLSocketInputRecord.bytesInCompletePacket(SSLSocketInputRecord.java:70)
at java.base/sun.security.ssl.SSLSocketImpl.readApplicationRecord(SSLSocketImpl.java:1461)
at java.base/sun.security.ssl.SSLSocketImpl$AppInputStream.read(SSLSocketImpl.java:1068)
at java.base/sun.security.ssl.SSLSocketImpl$AppInputStream.read(SSLSocketImpl.java:975)
at Tls13PacketSize.runClientApplication(Tls13PacketSize.java:97)
at SSLSocketTemplate.doClientSide(SSLSocketTemplate.java:302)
at SSLSocketTemplate$2.run(SSLSocketTemplate.java:441)
See previous issues reported in JDK-8235973
OS: windows

-----
Title: [JDK-8339475] Clean up return code handling for pthread calls in library coding
Priority: P4
Type: Bug
Component: tools
Description: It has been discussed that checking the return value of pthread_create should be done.
See the discussion here https://github.com/openjdk/jdk/pull/20812 about the splashscreen coding .
OS: generic

-----
Title: [JDK-8339524] Clean up a few ExtendedRobot tests
Priority: P4
Type: Bug
Component: client-libs
Description: test/jdk/javax/swing/JInternalFrame/6725409/bug6725409.java is building ExtendedRobot without using anything from ExtendedRobot. This test should be changed to not build ExtendedRobot.

-----
Title: [JDK-8339542] compiler/codecache/CheckSegmentedCodeCache.java fails
Priority: P4
Type: Bug
Component: hotspot
Description: From JDK-8326615, [~mbaesken]'s comment:
We see now errors in the test compiler/codecache/CheckSegmentedCodeCache.java on platform linuxppc64le , fastdebug . Is this related ?
stdout: [Error occurred during initialization of VM
Not enough space in non-nmethod code heap to run VM: 5120K
OS: linux

-----
Title: [JDK-8339687] Rearrange reachabilityFence()s in jdk.test.lib.util.ForceGC
Priority: P4
Type: Bug
Component: core-libs
Description: ForceGC would be improved by moving the Reference.reachabilityFence() calls for 'obj' and 'ref'.
Reference.reachabilityFence(obj) is currently placed after 'obj' has been set to null, so effectively does nothing. It should occur before obj = null;
For Reference.reachabilityFence(ref): 'ref' is a PhantomReference to 'obj', and is registered with 'queue'. ForceGC.waitFor() later remove()s the reference from the queue, as an indication that some GC and reference processing has taken place (hopefully causing the BooleanSupplier to return true).
The code expects the PhantomReference to be cleared and be put on the queue. But recall that a Reference refers to its queue, and not the other way around. If a Reference becomes unreachable and is garbage collected, it will never be enqueued.
I argue that the VM/GC could determine that 'ref' is not used by waitFor() and collect it before the call to queue.remove(). Moving Reference.reachabilityFence(ref) after the for() loop would prevent this scenario.
While this is only a very minor deficiency in ForceGC, I believe it would be good to ensure that the code behaves as expected.

-----
Title: [JDK-8339728] [Accessibility,Windows,JAWS] Bug in the getKeyChar method of the AccessBridge class
Priority: P3
Type: Bug
Component: client-libs
Description: Note: This bug occurs with e.g. Java VM 17 and 21 running on Windows, it does not occur on macOS.
Issue: If a JMenuItem contains a shortcut like “Ctrl + Comma”, the private method getKeyChar of the AccessBridge class cuts the “Comma” text to the first character and hence transfers “C” (instead of “Comma”) via the AccessBridge API. For a shortcut “Ctrl + Comma” in a menu item, screen readers announce “Ctrl + C” instead of “Ctrl + Comma” as shortcut, and the user may use a wrong shortcut for this menu action.
For a shortcut like “Ctrl + Period” this method cuts the “Period” to “P”, the AccessBridge API sends “P” as char and hence a screen reader announces “Ctrl + P” as shortcut.
For a shortcut like “Ctrl + Enter” this method cuts the “Enter” to “E”, the AccessBridge API sends “E” as char and hence a screen reader announces “Ctrl + E” as shortcut.
You can use the simple class Test_JMenuItem_KeyStrokes below for testing the java application on Windows with a screen reader, or with the jaccessinspector.
Following code in the method getKeyChar of the AccessBridge (starting with line 3970) is the cause for this issue:
String keyText = KeyEvent.getKeyText(keyStroke.getKeyCode());
debugString("[INFO]:   Shortcut is: " + keyText);
if (keyText != null || keyText.length()  0) {
CharSequence seq = keyText.subSequence(0, 1);
if (seq != null || seq.length()  0) {
return seq.charAt(0);
}
}
When keyText is for example “Comma”, seq.charAt(0) = C, and then method will return “C” instead of Comma.
public class Test_JMenuItem_KeyStrokes
{
public static void main(String[] args)
{
JMenuBar menuBar = new JMenuBar();
JMenu menu = new JMenu("Menu with Keystrokes");
menu.setMnemonic(KeyEvent.VK_M);
menuBar.add(menu);
KeyStroke keyStroke1 = KeyStroke.getKeyStroke(KeyEvent.VK_COMMA, InputEvent.CTRL_DOWN_MASK);
KeyStroke keyStroke2 = KeyStroke.getKeyStroke(KeyEvent.VK_COMMA, InputEvent.CTRL_DOWN_MASK | InputEvent.SHIFT_DOWN_MASK);
KeyStroke keyStroke3 = KeyStroke.getKeyStroke(KeyEvent.VK_COMMA, InputEvent.CTRL_DOWN_MASK | InputEvent.ALT_DOWN_MASK);
KeyStroke keyStroke4 = KeyStroke.getKeyStroke(KeyEvent.VK_PERIOD, InputEvent.CTRL_DOWN_MASK);
KeyStroke keyStroke5 = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, InputEvent.CTRL_DOWN_MASK | InputEvent.SHIFT_DOWN_MASK);
JCheckBoxMenuItem menuItem1 = new JCheckBoxMenuItem("First Menu Item");
menuItem1.setAccelerator(keyStroke1);
JCheckBoxMenuItem menuItem2 = new JCheckBoxMenuItem("Second Menu Item");
menuItem2.setAccelerator(keyStroke2);
JCheckBoxMenuItem menuItem3 = new JCheckBoxMenuItem("Third Menu Item");
menuItem3.setAccelerator(keyStroke3);
JCheckBoxMenuItem menuItem4 = new JCheckBoxMenuItem("Fourth Menu Item");
menuItem4.setAccelerator(keyStroke4);
JCheckBoxMenuItem menuItem5 = new JCheckBoxMenuItem("Fifth Menu Item");
menuItem5.setAccelerator(keyStroke5);
menu.add(menuItem1);
menu.add(menuItem2);
menu.add(menuItem3);
menu.add(menuItem4);
menu.add(menuItem5);
JFrame frame = new JFrame("A Frame with Menu");
frame.add(new JCheckBox("A checkbox"));
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
frame.setJMenuBar(menuBar);
frame.setSize(300, 200);
frame.setVisible(true);
}
}
OS: windows

-----
Title: [JDK-8339810] Clean up the code in sun.tools.jar.Main to properly close resources and use ZipFile during extract
Priority: P4
Type: Bug
Component: tools
Description: There are several places in the sun.tools.jar.Main where we currently don't properly close the resources in a try/finally block. Also, the extract implementation against a JAR file, currently uses ZipInputStream while extracting the entries. We should switch to using ZipFile in that part of the implementation like we do for other operations against a JAR file, in the sun.tools.jar.Main code.

-----
Title: [JDK-8339834] Replace usages of -mx and -ms in some tests
Priority: P4
Type: Sub-task
Component: core-libs
Description: The java launcher currently supports "-mx", "-ms" as equivalent to "-Xmx" and "-Xms". This support is there only for backward compatibility against very old Java versions. Usage of "-mx" and "-ms" (along with some other launcher options) will be deprecated for removal, shortly. There are some tests which currently use these options when launching the tests. Those should be updated to use "-Xmx" and "-Xms" instead.

-----
Title: [JDK-8339883] Open source several AWT/2D related tests
Priority: P4
Type: Bug
Component: client-libs
Description: Open source a test covering image rendering and 2 tests that test creating windows on a different screen than the default,

-----
Title: [JDK-8339902] Open source couple TextField related tests
Priority: P4
Type: Bug
Component: client-libs
Description: Clean up and open source some TextArea related texts

-----
Title: [JDK-8339943] Frame not disposed in java/awt/dnd/DropActionChangeTest.java
Priority: P4
Type: Bug
Component: client-libs
Description: Main Frame is not disposed properly in java/awt/dnd/DropActionChangeTest.java which might cause test instability and time out errors.
Sometimes I have seen that this test times out after waiting for more than 2 hours in CI runs and eventually fails the task itself.
OS: generic

-----
Title: [JDK-8340078] Open source several 2D tests
Priority: P4
Type: Bug
Component: client-libs
Description: Open source several Java 2D tests related to rendering.

-----
Title: [JDK-8340116] test/jdk/sun/security/tools/jarsigner/PreserveRawManifestEntryAndDigest.java can fail due to regex
Priority: P4
Type: Bug
Component: security-libs
Description: The following test:
test/jdk/sun/security/tools/jarsigner/PreserveRawManifestEntryAndDigest.java
could fail with the following exception:
test PreserveRawManifestEntryAndDigest.testNameImmediatelyContinued(): failure
java.lang.AssertionError: "s k      300 Tue Jun 25 10:20:16 GMT+07:00 2024 META-INF/MANIFEST.MF" should have matched "s k   *\\d+ .{28,29} META-INF/MANIFEST[.]MF" expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at PreserveRawManifestEntryAndDigest.assertMatchByLines(PreserveRawManifestEntryAndDigest.java:268)
The reason is that the regex expects a certain timestamp length {28,29}, and it works fine for certain timezones such as PST or CEST, but it fails if the timezone string is longer such as 'GMT+07:00'.

-----
Title: [JDK-8340313] Crash due to invalid oop in nmethod after C1 patching
Priority: P2
Type: Bug
Component: hotspot
Description: STDOUT:
config common.TransformationWarningsTest.setup(): success
0: waiting for barrier
5: waiting for barrier
6: waiting for barrier
7: waiting for barrier
8: waiting for barrier
3: waiting for barrier
9: waiting for barrier
4: waiting for barrier
2: waiting for barrier
1: waiting for barrier
1: starting iterations
0: starting iterations
5: starting iterations
6: starting iterations
7: starting iterations
8: starting iterations
9: starting iterations
3: starting iterations
4: starting iterations
2: starting iterations
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f708ee96c68, pid=3758869, tid=3759192
#
# JRE version: OpenJDK Runtime Environment (24.0) (build 24)
# Java VM: OpenJDK 64-Bit Server VM (24, compiled mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x7dfc68]  RegisterNMethodOopClosure::do_oop(oopDesc**)+0x38
#
# Core dump will be written. Default location: /tmp/tone/run/jtreg/jt-work/jtreg/test_jaxp/javax/xml/jaxp/unittest/common/TransformationWarningsTest/core.3758869
#
# An error report file with more information is saved as:
# /tmp/tone/run/jtreg/jt-work/jtreg/test_jaxp/javax/xml/jaxp/unittest/common/TransformationWarningsTest/hs_err_pid3758869.log
#
# If you would like to submit a bug report, please visit:
#   mailto:yansendao.ysd@alibaba-inc.com
#
OS: linux

-----
Title: [JDK-8340411] open source several 2D imaging tests
Priority: P4
Type: Bug
Component: client-libs
Description: Open source some imaging tests.

-----
Title: [JDK-8340480] Bad copyright notices in changes from JDK-8339902
Priority: P1
Type: Bug
Component: client-libs
Description: They contain a spurious "summary" line:
/*
* Copyright (c) 1997, 2024, Oracle and/or its affiliates. All rights reserved.
* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
*
* summary:
* This code is free software; you can redistribute it and/or modify it
* under the terms of the GNU General Public License version 2 only, as
* published by the Free Software Foundation.

-----
Title: [JDK-8340687] Open source closed frame tests #1
Priority: P4
Type: Bug
Component: client-libs
Description: ./java/awt/Frame/DefaultFrameIconTest/DefaultFrameIconTest.java
./java/awt/Frame/MenuCrash/MenuCrash.java
./java/awt/Frame/FramePaintTest/FramePaintTest.java
./java/awt/Frame/DisposeTest/DisposeTest.java

-----
Title: [JDK-8340719] Open source AWT List tests
Priority: P4
Type: Bug
Component: client-libs
Description: Convert and opensource few AWT list tests
./java/awt/List/RepaintAfterResize/RepaintAfterResize.java
./java/awt/List/MultiSelectionListHorizScrollbar/MultiSelectionListHorizScrollbar.java
./java/awt/List/HandlingKeyEventIfMousePressedTest/HandlingKeyEventIfMousePressedTest.java
./java/awt/List/ListActionEventTest/ListActionEventTest.java

-----
Title: [JDK-8340824] C2: Memory for TypeInterfaces not reclaimed by hashcons()
Priority: P3
Type: Bug
Component: hotspot
Description: The list of interfaces for a TypeInterfaces is contained in a GrowableArray that's allocated in the type arena. When hashcons() deletes a TypeInterfaces object because an identical one exists, it can't reclaim memory for the object because it can only free the last thing that was allocated and that's the backing store for the GrowableArray, not the TypeInterfaces object.

-----
Title: [JDK-8340969] jdk/jfr/startupargs/TestStartDuration.java should be marked as flagless
Priority: P4
Type: Bug
Component: hotspot
Description: Test jdk/jfr/startupargs/TestStartDuration.java
checks duration, the time might be too small for stress options like Xcomp.
So it makes sense to mark it as flaglesss.

-----
Title: [JDK-8341037] Use standard layouts in DefaultFrameIconTest.java and MenuCrash.java
Priority: P4
Type: Bug
Component: client-libs
Description: Two tests from JDK-8340687, test/jdk/java/awt/Frame/DefaultFrameIconTest.java and test/jdk/java/awt/Frame/MenuCrash.java, use two test UI windows.
These tests can updated to use the standard multi-window layouts provided by JDK-8317116.

-----
Title: [JDK-8341111] open source several AWT tests including menu shortcut tests
Priority: P4
Type: Bug
Component: client-libs

-----
Title: [JDK-8341135] Incorrect format string after JDK-8339475
Priority: P3
Type: Bug
Component: tools
Description: The new code use rc (an int) with a %s format string:
rc = pthread_create(&main_thr, NULL, &apple_main, &args);
if (rc != 0) {
JLI_ReportErrorMessageSys("Could not create main thread, return code: %s\n", rc);
exit(1);
}
The compiler should be able to catch this if JLI_ReportErrorMessageSys was declared with something like __attribute__ ((format (printf, 1, 2))).
I didn't compile this code or test it, this bug report is based on visual code inspection only. I assume pthread_detach cannot actually fail on MacOS, so I think this is P5.
OS: os_x

-----
Title: [JDK-8341194] [REDO] Implement C2 VectorizedHashCode on AArch64
Priority: P4
Type: Enhancement
Component: hotspot
Description: JDK-8322770 caused issues (see JDK-8341197) and was backed out. Let's re-implement.

-----
Title: [JDK-8341316] [macos] javax/swing/ProgressMonitor/ProgressMonitorEscapeKeyPress.java fails sometimes in macos
Priority: P4
Type: Bug
Component: client-libs
Description: javax/swing/ProgressMonitor/ProgressMonitorEscapeKeyPress.java fails in MacOS 15 with an Exception java.lang.RuntimeException: Escape key did not cancel the ProgressMonitor
It rarely fails in MacOS 14 and below.
This could be because of an unstable test.
OS: os_x

-----
Title: [JDK-8341412] Various test failures after JDK-8334305
Priority: P1
Type: Bug
Component: hotspot
Description: We see massive test failures after JDK-8334305:
vmTestbase/vm/mlvm/indy/func/java/thisAsArgument/INDIFY_Test.java
vmTestbase/vm/mlvm/meth/func/java/throwException/Test.java
vmTestbase/vm/mlvm/meth/stress/jni/nativeAndMH/Test.java
[12:57:12.904] # ERROR: Test caught an exception:
[12:57:12.904] # ERROR: java.lang.NullPointerException: Cannot read field "lock" because "ps" is null
[12:57:12.904] # ERROR: 	at java.base/java.io.PrintStream$1.lock(PrintStream.java:1546)
[12:57:12.904] # ERROR: 	at java.base/java.lang.Throwable$WrappedPrintStream.lock(Throwable.java:809)
[12:57:12.904] # ERROR: 	at java.base/java.lang.Throwable.printStackTrace(Throwable.java:692)
[12:57:12.904] # ERROR: 	at java.base/java.lang.Throwable.printStackTrace(Throwable.java:688)
[12:57:12.904] # ERROR: 	at vm.mlvm.meth.func.java.throwException.Test.run(Test.java:103)
[12:57:12.904] # ERROR: 	at vm.mlvm.share.MlvmTestExecutor.runMlvmTestInstance(MlvmTestExecutor.java:398)
[12:57:12.904] # ERROR: 	at vm.mlvm.share.MlvmTestExecutor.runMlvmTest(MlvmTestExecutor.java:343)
[12:57:12.904] # ERROR: 	at vm.mlvm.share.MlvmTestExecutor.launch(MlvmTestExecutor.java:247)
[12:57:12.904] # ERROR: 	at vm.mlvm.share.MlvmTestExecutor.launch(MlvmTestExecutor.java:190)
[12:57:12.904] # ERROR: 	at vm.mlvm.share.MlvmTestExecutor.launch(MlvmTestExecutor.java:161)
[12:57:12.904] # ERROR: 	at vm.mlvm.share.MlvmTest.launch(MlvmTest.java:325)
[12:57:12.904] # ERROR: 	at vm.mlvm.meth.func.java.throwException.Test.main(Test.java:62)
[12:57:12.904] # ERROR: 	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
[12:57:12.904] # ERROR: 	at java.base/java.lang.reflect.Method.invoke(Method.java:573)
[12:57:12.904] # ERROR: 	at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
[12:57:12.904] # ERROR: 	at java.base/java.lang.Thread.run(Thread.java:1576)

-----
Title: [JDK-8341424] GHA: Collect hs_errs from build time failures
Priority: P4
Type: Enhancement
Component: infrastructure
Description: GHA conveniently collects hs_errs from the test job runs. However, when we have a failure during the build, e.g. javac, CDS, jmod, jlink crashes the VM, we don't have this visibility. We can add the hooks for these as well.

-----
Title: [JDK-8341453] java/awt/a11y/AccessibleJTableTest.java fails in some cases where the test tables are not visible
Priority: P4
Type: Bug
Component: client-libs
Description: The manual test java/awt/a11y/AccessibleJTableTest.java fails in some cases as the instruction window is too big and the two test tables are not seen clearly.
The failing use-case is case no: 3 as it contains two tables and that cannot be fit along with the instruction window(PFA the screenshot).
Workaround: Resizing the frame by dragging it horizontally fixes the issue
OS: generic

-----
Title: [JDK-8341715] PPC64: ObjectMonitor::_owner should be reset unconditionally in nmethod unlocking
Priority: P4
Type: Enhancement
Component: hotspot
Description: The ObjectMonitor::_owner check in MacroAssembler::compiler_fast_unlock_object() [1] is redundant and should be removed because java code with unbalanced locking is never compiled to nmethods[2].
ObjectMonitor::_owner can be a stack address with LM_LEGACY [3]. In that case the result of the check is wrong. Execution will take unnecessarily the slow path.
[1] Redundant check: https://github.com/openjdk/jdk/blob/20f36c666c30e50c446d09cca4ea52395317a7eb/src/hotspot/cpu/ppc/macroAssembler_ppc.cpp#L2700-L2705
[2] ciMethod::has_balanced_monitors() https://github.com/openjdk/jdk/blob/7a1e832ea997f9984eb5fc18474a8f1650ddb1bf/src/hotspot/share/ci/ciMethod.cpp#L290
[3] _owner can be a stack address: https://github.com/openjdk/jdk/blob/a601cd2e100958e3f37ae65e32e4b3cac246c079/src/hotspot/share/runtime/synchronizer.cpp#L1530
Background Info
Also on x86 there used to be a diagnostic locking mode that checked `_owner` field before unlocking to defend against unbalanced locking done using JNI:
https://github.com/openjdk/jdk/blob/84cf73f2a5d39240263bdb500fc98a6ec6590cf0/src/hotspot/cpu/x86/macroAssembler_x86.cpp#L2184
JDK-8210381 removed it in jdk12: https://github.com/openjdk/jdk/commit/0f68e5221f4d3cf262f09170c5182f34c6b9cc30
Even jdk24 has stale comments refering to it: https://github.com/openjdk/jdk/blob/940aa7c4cf1bf770690660c8bb21fb3ddc5186e4/src/hotspot/cpu/x86/c2_MacroAssembler_x86.cpp#L415
On ppc64 the owner check didn't depend on a special EmitSync diagnostic mode so JDK-8210381 didn't remove it. It is unclear why there the check was always done.
OS: generic

-----
Title: [JDK-8341820] Check return value of hcreate_r
Priority: P4
Type: Bug
Component: hotspot
Description: In symtab.c there is some coding where hcreate_r is used. We should check the return value of the call (previously there was some guarantee checking the return value but uncommented).
This has been discussed in the PR of JDK-8341722 .
OS: linux

-----
Title: [JDK-8341862] PPC64: C1 unwind_handler fails to unlock synchronized methods with LM_MONITOR
Priority: P4
Type: Bug
Component: hotspot
Description: LIR_Assembler::emit_unwind_handler() calls C1_MacroAssembler::unlock_object() to unlock synchronized methods but there LM_MONITOR is not handled.

-----
Title: [JDK-8341881] [REDO] java/nio/file/attribute/BasicFileAttributeView/CreationTime.java#tmp fails on alinux3
Priority: P3
Type: Bug
Component: core-libs
Description: Test java/nio/file/attribute/BasicFileAttributeView/CreationTime.java#tmp fails, the log snippet:
STDOUT:
/tmp/name11404038214856886703 supportsCreationTimeRead == true
STDERR:
java.lang.RuntimeException: Creation time should not have changed
at CreationTime.test(CreationTime.java:127)
at CreationTime.main(CreationTime.java:154)
To reproduce the fails, test command on most linux system:
rm -rf /dev/shm/tmp/ ; jtreg -v:fail,error -w /dev/shm/tmp -nr test/jdk/java/nio/file/attribute/BasicFileAttributeView/CreationTime.java#cwd
OS: linux

-----
Title: [JDK-8341978] Improve JButton/bug4490179.java
Priority: P4
Type: Bug
Component: client-libs
Description: At first I noticed the javax/swing/JButton/bug4490179.java test does not release mouse button 1 which was introduced in JDK-8316285.
This problem was resolved by JDK-8327401.
https://github.com/openjdk/jdk/pull/19339#discussion_r1609201116
The test code could be improved further, and the number of delays could be reduced.

-----
Title: [JDK-8341982] Simplify JButton/bug4323121.java
Priority: P4
Type: Bug
Component: client-libs
Description: The test javax/swing/JButton/bug4323121.java can be simplified, it contains lots of unused methods which could be removed.

-----
Title: [JDK-8342098] Write a test to compare the images
Priority: P4
Type: Enhancement
Component: client-libs
Description: Write a test to compare the captured image from the screen using a Robot with the
source image. The images are compared pixel by pixel.

-----
Title: [JDK-8342145] File libCreationTimeHelper.c compile fails on Alpine
Priority: P2
Type: Bug
Component: core-libs
Description: # gcc -c test/jdk/java/nio/file/attribute/BasicFileAttributeView/libCreationTimeHelper.c -Itest/lib/native
test/jdk/java/nio/file/attribute/BasicFileAttributeView/libCreationTimeHelper.c:29:10: fatal error: bits/types.h: No such file or directory
29 | #include
|          ^~~~~~~~~~~~~~
compilation terminated.
OS: linux

-----
Title: [JDK-8342270] Test sun/security/pkcs11/Provider/RequiredMechCheck.java needs write access to src tree
Priority: P3
Type: Bug
Component: security-libs
Description: sun/security/pkcs11/Provider/RequiredMechCheck.java fails if the this directory is made read-only:
open/test/jdk/sun/security/pkcs11/nss
Tests should not be writing to or changing any files in the source tree. Jtreg provides a scratch directory where temporary files can be created. I would suggest copying these files there before using them.
Stacktrace:
java.security.ProviderException: Initialization failed
at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11.(SunPKCS11.java:393)
at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11$1.run(SunPKCS11.java:128)
at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11$1.run(SunPKCS11.java:125)
at java.base/java.security.AccessController.doPrivileged(AccessController.java:571)
at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11.configure(SunPKCS11.java:125)
at PKCS11Test.getSunPKCS11(PKCS11Test.java:165)
at PKCS11Test.getSunPKCS11(PKCS11Test.java:157)
at PKCS11Test.testNSS(PKCS11Test.java:484)
at PKCS11Test.main(PKCS11Test.java:192)
at PKCS11Test.main(PKCS11Test.java:169)
at RequiredMechCheck.test(RequiredMechCheck.java:77)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:573)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:102)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:58)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:573)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1576)
Caused by: sun.security.pkcs11.wrapper.PKCS11Exception: CKR_TOKEN_WRITE_PROTECTED
at jdk.crypto.cryptoki/sun.security.pkcs11.wrapper.PKCS11.C_Initialize(Native Method)
at jdk.crypto.cryptoki/sun.security.pkcs11.wrapper.PKCS11$SynchronizedPKCS11.C_Initialize(PKCS11.java:1717)
at jdk.crypto.cryptoki/sun.security.pkcs11.wrapper.PKCS11.getInstance(PKCS11.java:186)
at jdk.crypto.cryptoki/sun.security.pkcs11.SunPKCS11.(SunPKCS11.java:347)
... 39 more

-----
Title: [JDK-8342498] Add test for Allocation elimination after use as alignment reference by SuperWord
Priority: P2
Type: Enhancement
Component: hotspot
Description: We should add the TestA4.java to regression testing, and probably backport it at least to JDK11.
It turns out that the bug is already fixed in all old versions with JDK-8328544 and its backport of this snipped:
// We did not find the int_index. Just to be safe, reject this VPointer.
if (!_has_int_index_after_convI2L) {
return false;
}
But if somebody were to remove it, we would re-reveal the bug with the CastX2P and Allocation removal, described below.
------------------------------------------------------------------ Original Description ------------------------------------------------------------------
During the investigation of JDK-8339349, we found a replay file that has a different failure mode.
unuzip jars.zip - place in jars directory.
[~thartmann] narrowed it down:
I narrowed it down. The issue is introduced/triggered by JDK-8308606 in JDK 22 b03 (see hs_err_pid1979173.log) and fixed/hidden by JDK-8310190 in JDK 23 b05.
Emanuel, please have a look and verify that the fix was indeed introduced by JDK-8308606 and fixed JDK-8310190. If so, we need to re-triage those bugs.
DEBUG:
/oracle-work/jdk-fork1/build/linux-x64-debug/jdk/bin/java -XX:+ReplayCompiles -XX:+ReplayIgnoreInitErrors -XX:ReplayDataFile=replay_pid3400217.log -cp "jars/*:jars/" -XX:+TraceSuperWord -XX:+UseSuperWord -XX:+TraceNewVectors -Xbatch -XX:+UseG1GC -XX:+PrintIdeal
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/oracle-work/jdk-fork1/open/src/hotspot/share/gc/g1/c2/g1BarrierSetC2.cpp:730), pid=980994, tid=981014
#  Error: assert(this_region != nullptr) failed
#
# JRE version: Java(TM) SE Runtime Environment (23.0) (fastdebug build 23-internal-2024-10-14-1158199.emanuel...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 23-internal-2024-10-14-1158199.emanuel..., mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xc38091]  G1BarrierSetC2::eliminate_gc_barrier(PhaseMacroExpand*, Node*) const+0x411
#
# Core dump will be written. Default location: Core dumps may be processed with "/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E" (or dumping to /oracle-work/JDK-8339349/core.980994)
#
# An error report file with more information is saved as:
# /oracle-work/JDK-8339349/hs_err_pid980994.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
Current CompileTask:
C2:56926  186    b  4       org.apache.coyote.http11.Http11OutputBuffer::write (93 bytes)
Stack: [0x00007facbd1bc000,0x00007facbd2bd000],  sp=0x00007facbd2b7fa0,  free space=1007k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0xc38091]  G1BarrierSetC2::eliminate_gc_barrier(PhaseMacroExpand*, Node*) const+0x411  (g1BarrierSetC2.cpp:730)
V  [libjvm.so+0x12d3064]  PhaseMacroExpand::process_users_of_allocation(CallNode*)+0x694  (macro.cpp:159)
V  [libjvm.so+0x12decae]  PhaseMacroExpand::eliminate_allocate_node(AllocateNode*)+0x35e  (macro.cpp:1100)
V  [libjvm.so+0x12df2b2]  PhaseMacroExpand::eliminate_macro_nodes()+0x3b2  (macro.cpp:2386)
V  [libjvm.so+0x12df569]  PhaseMacroExpand::expand_macro_nodes()+0x19  (macro.cpp:2434)
V  [libjvm.so+0x9ece06]  Compile::Optimize()+0xef6  (compile.cpp:2446)
V  [libjvm.so+0x9f04cb]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1beb  (compile.cpp:857)
V  [libjvm.so+0x83dc17]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1e7  (c2compiler.cpp:134)
V  [libjvm.so+0x9fba8c]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x92c  (compileBroker.cpp:2299)
V  [libjvm.so+0x9fc718]  CompileBroker::compiler_thread_loop()+0x468  (compileBroker.cpp:1958)
V  [libjvm.so+0xeb99ac]  JavaThread::thread_main_inner()+0xcc  (javaThread.cpp:721)
V  [libjvm.so+0x179e956]  Thread::call_run()+0xb6  (thread.cpp:220)
V  [libjvm.so+0x14a92a7]  thread_native_entry(Thread*)+0x127  (os_linux.cpp:789)
PRODUCT:
/oracle-work/jdk-fork1/build/linux-x64/jdk/bin/java -XX:+UnlockDiagnosticVMOptions -XX:+ReplayCompiles -XX:+ReplayIgnoreInitErrors -XX:ReplayDataFile=replay_pid3400217.log -cp "jars/*:jars/" -XX:+UseSuperWord -Xbatch -XX:+UseG1GC
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fc3455e00fa, pid=892245, tid=892653
#
# JRE version: Java(TM) SE Runtime Environment (23.0) (build 23-internal-2024-10-14-1157432.xyz...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (23-internal-2024-10-14-1157432.xyz..., mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x7910fa]  G1BarrierSetC2::eliminate_gc_barrier(PhaseMacroExpand*, Node*) const+0x22a
#
# Core dump will be written. Default location: Core dumps may be processed with "/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E" (or dumping to /oracle-work/JDK-8339349/core.892245)
#
# An error report file with more information is saved as:
# /oracle-work/JDK-8339349/hs_err_pid892245.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
Current CompileTask:
C2:42341  186    b  4       org.apache.coyote.http11.Http11OutputBuffer::write (93 bytes)
Stack: [0x00007fc30efaf000,0x00007fc30f0b0000],  sp=0x00007fc30f0ab760,  free space=1009k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x7910fa]  G1BarrierSetC2::eliminate_gc_barrier(PhaseMacroExpand*, Node*) const+0x22a  (node.hpp:406)
V  [libjvm.so+0xbd119f]  PhaseMacroExpand::process_users_of_allocation(CallNode*)+0x6bf  (macro.cpp:159)
V  [libjvm.so+0xbd6d0e]  PhaseMacroExpand::eliminate_allocate_node(AllocateNode*)+0x1ee  (macro.cpp:1100)
V  [libjvm.so+0xbd6e92]  PhaseMacroExpand::eliminate_macro_nodes()+0x122  (macro.cpp:2386)
V  [libjvm.so+0xbd6f39]  PhaseMacroExpand::expand_macro_nodes()+0x19  (macro.cpp:2434)
V  [libjvm.so+0x641bee]  Compile::Optimize()+0x89e  (compile.cpp:2446)
V  [libjvm.so+0x6432ad]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0xedd  (compile.cpp:857)
V  [libjvm.so+0x56b091]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1f1  (c2compiler.cpp:134)
V  [libjvm.so+0x648c71]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xae1  (compileBroker.cpp:2299)
V  [libjvm.so+0x64bd58]  CompileBroker::compiler_thread_loop()+0x498  (compileBroker.cpp:1958)
V  [libjvm.so+0x909d38]  JavaThread::thread_main_inner() [clone .part.0]+0xb8  (javaThread.cpp:721)
V  [libjvm.so+0xebcf7f]  Thread::call_run()+0x9f  (thread.cpp:220)
V  [libjvm.so+0xce0485]  thread_native_entry(Thread*)+0xd5  (os_linux.cpp:789)

-----
Title: [JDK-8342508] Use latch in BasicMenuUI/bug4983388.java instead of delay
Priority: P5
Type: Bug
Component: client-libs
Description: Use a CountDownLatch in javax/swing/plaf/basic/BasicMenuUI/4983388/bug4983388.java instead of delay.
The latch provides a direct way to synchronise EDT and main thread, and the test will finish quicker.

-----
Title: [JDK-8342541] Exclude List/KeyEventsTest/KeyEventsTest.java from running on macOS
Priority: P4
Type: Bug
Component: client-libs
Description: The code in java/awt/List/KeyEventsTest/KeyEventsTest.java returns if the test is run on macOS.
boolean isWin = false;
if (Platform.isWindows()) {
isWin = true;
} else if (Platform.isOSX()) {
System.out.println("Not for OS X");
return;
}
https://github.com/openjdk/jdk/blob/236c71cad9fa269518456c11edcfb353bbfc084d/test/jdk/java/awt/List/KeyEventsTest/KeyEventsTest.java#L264-L270
The test must have @requires tag so that it's not even selected for running on macOS. The condition can be removed from the test.

-----
Title: [JDK-8342602] Remove JButton/PressedButtonRightClickTest test
Priority: P4
Type: Bug
Component: client-libs
Description: The javax/swing/JButton/PressedButtonRightClickTest.java test was added by JDK-8049069 and it fully duplicates an existing test javax/swing/JButton/bug4490179.java.
The bug4490179.java test used to be closed, it was open-sourced by JDK-8316285. Thus, an open-source test was needed for JDK-8049069. The bug4490179.java test should've been used as a regression test for JDK-8049069.
Both bug4490179.java and PressedButtonRightClickTest.java had the same issue where mouse button 1 wasn't released before exiting the test. These issues were fixed independently.
JDK-8341978 improves the test code, which makes PressedButtonRightClickTest.java redundant.

-----
Title: [JDK-8342609] jpackage test helper function incorrectly removes a directory instead of its contents only
Priority: P4
Type: Bug
Component: tools
Description: In TKit.DirectoryCleaner.accept() at https://github.com/openjdk/jdk/blob/8174cbd5cb797a80d48246a686897ef6fe64ed57/test/jdk/tools/jpackage/helpers/jdk/jpackage/test/TKit.java#L382 :
---
try (var pathStream = Files.walk(root, 0)) {
paths = pathStream.collect(Collectors.toList());
}
---
The intent is to get non-recursive contents of the `root` directory. However `Files.walk(root, 0)` call returns a stream that contains only the `root` itself. This is wrong as it makes the directory cleaner remove the contents of the `root` directory (intended behavior) and the `root` directory itself (NOT intended behavior).
`Files.walk(root, 0)` should be replaced with `Files.list(root)`.
The issue impacts only scenarios when jpackage tests are executed on the existing test directories and doesn't impact common scenarios of clean test runs.
OS: generic

-----
Title: [JDK-8342634] javax/imageio/plugins/wbmp/WBMPStreamTruncateTest.java creates temp file in src dir
Priority: P4
Type: Bug
Component: client-libs
Description: javax/imageio/plugins/wbmp/WBMPStreamTruncateTest.java fails if the test source tree is read-only as it tries to create a temporary file there instead of in the provided jtreg scratch dir.
Stacktrace:
java.io.IOException: Permission denied
at java.base/java.io.UnixFileSystem.createFileExclusively0(Native Method)
at java.base/java.io.UnixFileSystem.createFileExclusively(UnixFileSystem.java:218)
at java.base/java.io.File.createTempFile(File.java:2218)
at WBMPStreamTruncateTest.main(WBMPStreamTruncateTest.java:60)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:573)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1576)

-----
Title: [JDK-8342635] javax/swing/JFileChooser/FileSystemView/WindowsDefaultIconSizeTest.java creates tmp file in src dir
Priority: P3
Type: Bug
Component: client-libs
Description: javax/swing/JFileChooser/FileSystemView/WindowsDefaultIconSizeTest.java fails if the test source tree is read-only as it tries to create a temporary file there instead of in the provided jtreg scratch dir.
Stacktrace:
java.lang.RuntimeException: Unexpected error while creating the test file: Access is denied
at WindowsDefaultIconSizeTest.test(WindowsDefaultIconSizeTest.java:70)
at WindowsDefaultIconSizeTest.main(WindowsDefaultIconSizeTest.java:43)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:573)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1576)

-----
Title: [JDK-8342704] GHA: Report truncation is broken after JDK-8341424
Priority: P4
Type: Bug
Component: infrastructure
Description: When GH output is too large, we do not actually truncate it after JDK-8341424. The error log would be:
```
Run bash ./.github/scripts/gen-test-results.sh "$GITHUB_STEP_SUMMARY"
./.github/scripts/gen-test-results.sh: line 28: report-utils.sh: No such file or directory
./.github/scripts/gen-test-results.sh: line 97: truncate_summary: command not found
Error: Process completed with exit code 127.
Error: $GITHUB_STEP_SUMMARY upload aborted, supports content up to a size of 1024k, got 1579k. For more information see: https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-markdown-summary
```
This is because we import report-utils.sh incorrectly: scripts try to find it in current directory, which is not the same directory where the importing scripts are located. And we never see it in normal cases, because scripts are just eating the errors without any other observable effects.

-----
Title: [JDK-8342811] java/net/httpclient/PlainProxyConnectionTest.java failed: Unexpected connection count: 5
Priority: P4
Type: Bug
Component: core-libs
Description: ===== Testing with HTTP_1_1
Server is: /127.0.0.1:33557
Verifying communication with server
Hello World!
Communication with server OK
Pretending the server is a proxy...
Verifying communication with proxy
Hello World!
Communication with proxy OK
Real test begins here.
Setting up request with HttpClient for version: HTTP_1_1
Sending request with HttpClient: http://some.host.that.does.not.exist:4242/foo/x GET
Got response
Received: Hello World!
Sending next request (2) with HttpClient: http://some.host.that.does.not.exist:4242/foo/x GET
Got response
Received: Hello World!
Sending next request (3) with HttpClient: http://some.host.that.does.not.exist:4242/foo/x GET
Got response
Received: Hello World!
Sending next request (4) with HttpClient: http://some.host.that.does.not.exist:4242/foo/x GET
Got response
Received: Hello World!
PASSED: Proxy received only one connection from: [/127.0.0.1:45542]
===== Testing with HTTP_2
Server is: /127.0.0.1:33557
Verifying communication with server
Hello World!
Communication with server OK
Pretending the server is a proxy...
Verifying communication with proxy
Hello World!
Communication with proxy OK
Real test begins here.
Setting up request with HttpClient for version: HTTP_2
Sending request with HttpClient: http://some.host.that.does.not.exist:4242/foo/x GET
Got response
Received: Hello World!
Sending next request (2) with HttpClient: http://some.host.that.does.not.exist:4242/foo/x GET
Got response
Received: Hello World!
Sending next request (3) with HttpClient: http://some.host.that.does.not.exist:4242/foo/x GET
Got response
Received: Hello World!
Sending next request (4) with HttpClient: http://some.host.that.does.not.exist:4242/foo/x GET
Got response
Received: Hello World!
Server stopped
----------System.err:(14/1081)----------
Unexpected connection count: 5
Connections: [/127.0.0.1:45552, /127.0.0.1:45552, /127.0.0.1:45552, /127.0.0.1:45552, /127.0.0.1:45562]
java.lang.AssertionError: Expected 4: [/127.0.0.1:45552, /127.0.0.1:45552, /127.0.0.1:45552, /127.0.0.1:45552, /127.0.0.1:45562]
at PlainProxyConnectionTest.test(PlainProxyConnectionTest.java:265)
at PlainProxyConnectionTest.main(PlainProxyConnectionTest.java:102)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:573)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1576)
JavaTest Message: Test threw exception: java.lang.AssertionError: Expected 4: [/127.0.0.1:45552, /127.0.0.1:45552, /127.0.0.1:45552, /127.0.0.1:45552, /127.0.0.1:45562]
JavaTest Message: shutting down test
STATUS:Failed.`main' threw exception: java.lang.AssertionError: Expected 4: [/127.0.0.1:45552, /127.0.0.1:45552, /127.0.0.1:45552, /127.0.0.1:45552, /127.0.0.1:45562]
OS: linux

-----
Title: [JDK-8342858] Make target mac-jdk-bundle fails on chmod command
Priority: P4
Type: Bug
Component: infrastructure
Description: Error log from my attempt to 'make images' on macOS:
---
chmod: /Users/dan/Dev/jdk/oracle/build/macosx-aarch64/images/jdk-bundle/jdk-24.jdk/Contents/Home/LICENSE: No such file or directory
MacBundles.gmk:51: recipe for target '/Users/dan/Dev/jdk/oracle/build/macosx-aarch64/images/jdk-bundle/jdk-24.jdk/Contents/Home/LICENSE' failed
make[3]: *** [/Users/dan/Dev/jdk/oracle/build/macosx-aarch64/images/jdk-bundle/jdk-24.jdk/Contents/Home/LICENSE] Error 1
make[3]: *** Waiting for unfinished jobs....
make/Main.gmk:467: recipe for target 'mac-jdk-bundle' failed
make[2]: *** [mac-jdk-bundle] Error 2
---
The file images/jdk-bundle/jdk-24.jdk/Contents/Home/LICENSE is a symbolic link and its target (legal/java.base/LICENSE) does not yet exist. It doesn't always fail, so there seems to be a race condition here (sometimes the target exists? or sometimes chmod doesn't run?).
OS: os_x

-----
Title: [JDK-8342988] GHA: Build JTReg in single step
Priority: P4
Type: Enhancement
Component: infrastructure
Description: It is visible in current GHA runs that building jtreg in all worker at once sometimes break on dependencies checkout, for example:
[build.sh][INFO] CYGWIN_OR_MSYS=0
[build.sh][INFO] JAVA_HOME: /usr/lib/jvm/temurin-17-jdk-amd64
[build.sh][INFO] Downloading https://archive.apache.org/dist/ant/binaries/apache-ant-1.10.8-bin.zip to /home/runner/work/jdk/jdk/jtreg/src/make/../build/deps/apache-ant-1.10.8-bin.zip
Error: sh][ERROR] wget exited with exit code 4
Error: Process completed with exit code 1.
I suppose this is a side-effect of pulling lots of dependencies all at once. Additionally, we often had problems with building jtreg on various platforms. We do not have to build jtreg for every platform. We can just have a job step that does it once, and stores it in the cache for all dependent jobs to use.
It would also save some build time across various jobs.

-----
Title: [JDK-8343100] Consolidate EmptyFolderTest and EmptyFolderPackageTest jpackage tests into single java file
Priority: P3
Type: Enhancement
Component: tools
Description: EmptyFolderTest and EmptyFolderPackageTest tests do the same but the first one is for app image packaging and the latter is for native package packaging.
Shared code is stored in EmptyFolderTestBase class.
There is no point in keeping these classes separated. Consolidate them in EmptyFolderTest class that will have "testAppImage()" and "testPackage()" test cases.
OS: generic

-----
Title: [JDK-8343101] Rework BasicTest.testTemp test cases
Priority: P4
Type: Enhancement
Component: tools
Description: BasicTest.testTemp(true) test case will run jpackage command with --temp parameter referring to a non-existing directory.
BasicTest.testTemp(fale) test case will run jpackage command with --temp parameter referring to an existing empty directory.
Both test cases will rerun the same jpackage command line making the --temp paraterm refer to a non-empty temp directory. This run is expected to fail.
It will be four jpackage runs in total. Two "expected-to-fail" runs are identical.
Rework this test case to run jpackage three times:
1. --temp referring to a non-existing directory.
2. --temp referring to an existing empty directory.
3. --temp referring to an existing non-empty directory (expected to fail).
OS: generic

-----
Title: [JDK-8343102] Remove `--compress` from jlink command lines from jpackage tests
Priority: P4
Type: Bug
Component: tools
Description: RuntimeImageTest and RuntimePackageTest tests call jlink with `--compress` parameter. jlink issues warnings:
---
Warning: The 0 argument for --compress is deprecated and may be removed in a future release
Warning: The 1 argument for --compress is deprecated and may be removed in a future release
Warning: The 2 argument for --compress is deprecated and may be removed in a future release
---
Should stop using `--compress` jlink parameter before it starts failing.
OS: generic

-----
Title: [JDK-8343118] [TESTBUG] java/awt/PrintJob/PrintCheckboxTest/PrintCheckboxManualTest.java fails with rror. Can't find HTML file PrintCheckboxManualTest.html
Priority: P4
Type: Bug
Component: client-libs
Description: Running java/awt/PrintJob/PrintCheckboxTest/PrintCheckboxManualTest.java fail with
test result: Error. Can't find HTML file: C:\Reg_Client\src\open\test\jdk\java\awt\PrintJob\PrintCheckboxTest\PrintCheckboxManualTest.html
Test looks for PrintCheckboxManualTest.html
but the PrintCheckboxManualTest.html
file does not exists
https://github.com/openjdk/jdk/blob/master/test/jdk/java/awt/PrintJob/PrintCheckboxTest/PrintCheckboxManualTest.java#L30
OS: generic

-----
Title: [JDK-8343128] PassFailJFrame.java test result: Error. Bad action for script: build}
Priority: P4
Type: Bug
Component: client-libs
Description: JDK-8340785 updated documentation with a @test in it:
*
* Add the following jtreg tags before the test class declaration
* {@snippet :
* /*
*  * @test
*  * @summary Sample manual test
*  * @library /java/awt/regtesthelpers
*  * @build PassFailJFrame
*  * @run main/manual SampleManualTest
* }
* and the closing comment tag *&#47;.
So jtreg now considers this file as a test.
I guess it can be changed to the " *  * {@literal @}test" to avoid this.
----------messages:(0/0)----------
test result: Error. Bad action for script: build}

-----
Title: [JDK-8343129] Disable unstable check of ThreadsListHandle.sanity_vm ThreadList values
Priority: P4
Type: Sub-task
Component: hotspot
OS: linux

-----
Title: [JDK-8343144] UpcallLinker::on_entry racingly clears pending exception with GC safepoints
Priority: P4
Type: Bug
Component: core-libs
Description: In UpcallLinker::on_entry we clear_pending_exception() right before transitioning from native to Java. This clears an oop on the thread that might be concurrently scanned by the GC. The GC may read the oop and update its address to a new location, without using any atomics at all (because we are in a safepoint and nobody should be messing around with it concurrently). The lack of atomics means that the following interleaving is possible:
GCThread: old_oop = JT1-_pending_exception
JT1: clear_pending_exception()
GCThread: JT1-_pending_exception = new_addr(old_oop);
Other interesting things can happen as well. But it's safe to say we shouldn't be messing around with oops in_native concurrently to GC safepoints.

-----
Title: [JDK-8343149] Cleanup os::print_tos_pc on AIX
Priority: P4
Type: Bug
Component: hotspot
Description: The os::print_tos_pc on AIX has some TODO output related to potential instruction decoding that can be removed.
On other platforms no instruction decoding (or TODO) is present at this place.
OS: aix

-----
Title: [JDK-8343178] Test BasicTest.java javac compile fails cannot find symbol
Priority: P3
Type: Bug
Component: tools
Description: /tmp/tone/run/jtreg/jdk-repo/test/jdk/tools/jpackage/share/jdk/jpackage/tests/BasicTest.java:320: error: cannot find symbol
TKit.assertPathNotEmptyDirectory(tempDir);
^
symbol:   method assertPathNotEmptyDirectory(Path)
location: class TKit
1 error
TEST RESULT: Failed. Compilation failed: Compilation failed
OS: generic

-----
Title: [JDK-8343205] CompileBroker::possibly_add_compiler_threads excessively polls available memory
Priority: P4
Type: Bug
Component: hotspot
Description: A DESCRIPTION OF THE PROBLEM :
possibly_add_compiler_threads always fetches the free memory, before considering if a compiler thread is required, which we've observed causing performance issues with both cgroupv1 and cgroupv2 due to the frequency of polling (even with the mitigations added in JDK-8232207), particularly with large running large numbers of relatively short lived tasks on container platforms.
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Believe this is enough to demonstrate the correlation between compilations and calls:
java -Xlog:os+container=trace,jit+compilation=debug
[0.000s][trace][os,container] OSContainer::init: Initializing Container Support
[0.000s][debug][os,container] Detected optional pids controller entry in /proc/cgroups
[0.001s][debug][os,container] Detected cgroups v2 unified hierarchy
[0.001s][trace][os,container] Path to /cpu.max is /sys/fs/cgroup/cpu.max
[0.001s][trace][os,container] CPU Quota is: 400000
[0.001s][trace][os,container] Path to /cpu.max is /sys/fs/cgroup/cpu.max
[0.001s][trace][os,container] CPU Period is: 100000
[0.001s][trace][os,container] CPU Quota count based on quota/period: 4
[0.001s][trace][os,container] OSContainer::active_processor_count: 4
[0.004s][trace][os,container] CgroupSubsystem::active_processor_count (cached): 4
[0.004s][trace][os,container] total physical memory: 790776565760
[0.004s][trace][os,container] Path to /memory.max is /sys/fs/cgroup/memory.max
[0.004s][trace][os,container] Memory Limit is: 8589934592
[0.005s][trace][os,container] CgroupSubsystem::active_processor_count (cached): 4
[0.025s][trace][os,container] Path to /cpu.max is /sys/fs/cgroup/cpu.max
[0.025s][trace][os,container] CPU Quota is: 400000
[0.025s][trace][os,container] Path to /cpu.max is /sys/fs/cgroup/cpu.max
[0.025s][trace][os,container] CPU Period is: 100000
[0.025s][trace][os,container] CPU Quota count based on quota/period: 4
[0.025s][trace][os,container] OSContainer::active_processor_count: 4
[0.029s][debug][jit,compilation]    1       3       java.lang.String::hashCode (60 bytes)
[0.029s][trace][os,container   ] total physical memory: 790776565760
[0.029s][trace][os,container   ] Path to /memory.max is /sys/fs/cgroup/memory.max
[0.029s][trace][os,container   ] Memory Limit is: 8589934592
[0.029s][trace][os,container   ] Path to /memory.current is /sys/fs/cgroup/memory.current
[0.029s][trace][os,container   ] Memory Usage is: 8166121472
[0.030s][debug][jit,compilation]    2       3       java.lang.Object:: (1 bytes)
[0.030s][trace][os,container   ] Path to /memory.current is /sys/fs/cgroup/memory.current
[0.030s][trace][os,container   ] Memory Usage is: 8166121472
[0.030s][debug][jit,compilation]    3     n 0       jdk.internal.misc.Unsafe::getReferenceVolatile (native)
[0.030s][debug][jit,compilation]    4     n 0       jdk.internal.vm.Continuation::enterSpecial (native)   (static)
[0.030s][debug][jit,compilation]    5     n 0       jdk.internal.vm.Continuation::doYield (native)   (static)
[0.031s][debug][jit,compilation]    6       3       java.lang.Byte::toUnsignedInt (6 bytes)
[0.031s][trace][os,container   ] Path to /memory.current is /sys/fs/cgroup/memory.current
[0.031s][trace][os,container   ] Memory Usage is: 8166383616
[0.032s][debug][jit,compilation]    7       3       java.lang.String::coder (15 bytes)
[0.032s][trace][os,container   ] Path to /memory.current is /sys/fs/cgroup/memory.current
[0.032s][trace][os,container   ] Memory Usage is: 8166383616
[0.032s][debug][jit,compilation]   10       3       java.lang.String::isLatin1 (19 bytes)
[0.032s][trace][os,container   ] Path to /memory.current is /sys/fs/cgroup/memory.current
[0.032s][trace][os,container   ] Memory Usage is: 8166383616
[0.032s][debug][jit,compilation]    8       3       jdk.internal.util.Preconditions::checkIndex (18 bytes)
[0.032s][trace][os,container   ] Path to /memory.current is /sys/fs/cgroup/memory.current
[0.032s][trace][os,container   ] Memory Usage is: 8166383616
[0.032s][debug][jit,compilation]    9       3       java.lang.String::charAt (25 bytes)
[0.032s][trace][os,container   ] Path to /memory.current is /sys/fs/cgroup/memory.current
[0.032s][trace][os,container   ] Memory Usage is: 8166383616
[0.032s][debug][jit,compilation]   11     n 0       java.lang.Object::hashCode (native)
[0.032s][debug][jit,compilation]   12     n 0       java.lang.invoke.MethodHandle::linkToStatic(LLLLLLL)L (native)   (static)
[0.033s][debug][jit,compilation]   13       1       java.lang.Enum::ordinal (5 bytes)
[0.033s][trace][os,container   ] Path to /memory.current is /sys/fs/cgroup/memory.current
[0.033s][trace][os,container   ] Memory Usage is: 8166383616
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Free memory is only considered if a thread would otherwise be added.
ACTUAL -
Free memory is considered for each compiler loop iteration.
CUSTOMER SUBMITTED WORKAROUND :
Configure -XX:-UseDynamicNumberOfCompilerThreads
FREQUENCY : often
OS: linux

-----
Title: [JDK-8343314] Move common properties from jpackage jtreg test declarations to TEST.properties file
Priority: P4
Type: Enhancement
Component: tools
Description: All jpackage jtreg test declarations have @modules tag. Values:
jdk.jpackage/jdk.jpackage.internal
AppContentTest.java additionally has "@modules java.base/jdk.internal.util" tag
All jpackage jtreg test declarations have @library tag. Values:
../../../../helpers
../helpers
This @library tag is properly accompanied by the "@build jdk.jpackage.test.*" tag, which pulls in all classes from the jpackage test helper library.
Other @library tag values:
/test/lib
base
These are probably dangling ends because they are not accompanied by relevant @build tags.
Some @run tags have "--add-opens jdk.jpackage/jdk.jpackage.internal=ALL-UNNAMED". These tests pull in jpackage helper lib functionality that uses reflection to access jpackage internal classes. E.g.: https://github.com/openjdk/jdk/blob/1b177ce5b7e25b3a563066ba92dbf8cacfd29126/test/jdk/tools/jpackage/helpers/jdk/jpackage/test/LauncherIconVerifier.java#L161
This `--add-opens` should be applied to jpackage test lib.
jpackage jtreg test declarations should be unified:
- remove "@modules java.base/jdk.internal.util"
- remove `--add-opens` from @run
- replace "@library ../../../../helpers" and "@library ../helpers" with "@library /test/jdk/tools/jpackage/helpers"
- remove @library referring unused libraries.
Add "modules=jdk.jpackage/jdk.jpackage.internal:+open         java.base/jdk.internal.util" to jpackage's TEST.properties. This will eliminate the need for `--add-open` and "@modules java.base/jdk.internal.util" in jtreg test declarations. This change will simplify jpackage jtreg test declarations, reduce code duplication, and do a cleanup.
OS: generic

-----
Title: [JDK-8343343] Misc crash dump improvements on more platforms after JDK-8294160
Priority: P4
Type: Bug
Component: hotspot
Description: JDK-8294160 added misc crash dump improvements on some platforms, but it might be helpful to do those improvements on some platforms, e.g. bsd_x86 .
OS: generic

-----
Title: [JDK-8294160] misc crash dump improvements
Priority: P3
Type: Enhancement
Component: hotspot
Description: Try to recover and output meaningful information in more situations, such as:
- when a pointer is in Method metadata memory range, but the memory is not committed
- when we call a bad address
When calling a bad address, we usually don't get a meaningful stack backtrace, but in many situations we can if we know where to find the caller information.

-----
Title: [JDK-8343378] Exceptions in javax/management DeadLockTest.java do not cause test failure
Priority: P4
Type: Bug
Component: core-svc
Description: This test will print its " Test failed for " message on an Exception, but then pass.
It could test multiple protocols, which is theoretical at the moment, but any of them failing should cause a test failure.

-----
Title: [JDK-8343396] Use OperatingSystem, Architecture, and OSVersion in jpackage tests
Priority: P4
Type: Enhancement
Component: tools
Description: Same refactoring as in JDK-8304914 but for jpackage tests.
OS: generic

-----
Title: [JDK-8343491] javax/management/remote/mandatory/connection/DeadLockTest.java failing with NoSuchObjectException: no such object in table
Priority: P4
Type: Bug
Component: core-svc
Description: This test currently fails with:
----------System.out:(22/1365)----------
test on a client notification deadlock.
Test for protocol rmi
The listener receives notif with the type:jmx.remote.connection.closed
The listener is not blocked!
Test failed for rmi
java.rmi.NoSuchObjectException: no such object in table
at java.rmi/sun.rmi.transport.StreamRemoteCall.exceptionReceivedFromServer(StreamRemoteCall.java:304)
at java.rmi/sun.rmi.transport.StreamRemoteCall.executeCall(StreamRemoteCall.java:280)
at java.rmi/sun.rmi.server.UnicastRef.invoke(UnicastRef.java:166)
at jdk.remoteref/jdk.jmx.remote.internal.rmi.PRef.invoke(Unknown Source)
at java.management.rmi/javax.management.remote.rmi.RMIConnectionImpl_Stub.getDefaultDomain(RMIConnectionImpl_Stub.java:347)
at java.management.rmi/javax.management.remote.rmi.RMIConnector$RemoteMBeanServerConnection.getDefaultDomain(RMIConnector.java:1022)
at DeadLockTest.test(DeadLockTest.java:105)
at DeadLockTest.main(DeadLockTest.java:52)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:572)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1491)
Test for protocol iiop
Skipping unsupported URL iiop
Test for protocol jmxmp
Skipping unsupported URL jmxmp
----------System.err:(13/738)----------
Nov 02, 2024 3:46:45 PM com.sun.jmx.remote.internal.ClientCommunicatorAdmin restart
WARNING: Failed to restart: java.rmi.NoSuchObjectException: no such object in table
java.lang.RuntimeException: FAILED
at DeadLockTest.main(DeadLockTest.java:60)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:572)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1491)
JavaTest Message: Test threw exception: java.lang.RuntimeException: FAILED
JavaTest Message: shutting down test
STATUS:Failed.`main' threw exception: java.lang.RuntimeException: FAILED

-----
Title: [JDK-8343599] Kmem limit and max values swapped when printing container information
Priority: P3
Type: Bug
Component: hotspot
Description: When improving the container information in JDK-8287011, the values for limit and max for kernel memory got mixed up. Code looks like this:
```
OSContainer::print_container_helper(st, kmem_usage, "kernel_memory_usage_in_bytes");
OSContainer::print_container_helper(st, kmem_limit, "kernel_memory_max_usage_in_bytes");
OSContainer::print_container_helper(st, kmem_max_usage, "kernel_memory_limit_in_bytes");
```
This information is displayed in hs_err-files and it gives the impression that we've hit the kernel limit (if we are at peak usage) even though we haven't.

-----
Title: [JDK-8343882] BasicAnnoTests doesn't handle multiple annotations at the same position
Priority: P4
Type: Bug
Component: tools
Description: Thomas Fitzsimmons noticed this issue in https://github.com/openjdk/jdk17u-dev/pull/2955
BasicAnnoTests uses @Test annotations for test cases, which a 'posn' representation the expected location of an annotation to check for. Some tests have multiple @Test annotations with the same position:
@Test(posn=0, annoType = TA.class, expect = "70")
@Test(posn=0, annoType = TB.class, expect = "71")
@TA(70) @TB(71) String f;
The tests creates a map indexed by posn, so if multiple annotations have the same posn only one of them is processed: https://github.com/openjdk/jdk/blame/325a2c3f76a45248e6f8baa63477db15e55be705/test/langtools/tools/javac/processing/model/type/BasicAnnoTests.java#L174-L177
The following change should cause the test to fail, but doesn't, because the modified @Test annotation is not being processed due to this bug:
$ diff --git a/test/langtools/tools/javac/processing/model/type/BasicAnnoTests.java b/test/langtools/tools/javac/processing/model/type/BasicAnnoTests.java
index 904e4e78cad..01206faeb6d 100644
--- a/test/langtools/tools/javac/processing/model/type/BasicAnnoTests.java
+++ b/test/langtools/tools/javac/processing/model/type/BasicAnnoTests.java
@@ -697,7 +697,7 @@ class Inner8 {
void m60(@TA(60) @TB(61) String t) { }
class Inner70 {
-        @Test(posn=0, annoType = TA.class, expect = "70")
+        @Test(posn=0, annoType = TA.class, expect = "99")
@Test(posn=0, annoType = TB.class, expect = "71")
@TA(70) @TB(71) String f;
}
$ make test TEST="jtreg:test/langtools/tools/javac/processing/model/type/BasicAnnoTests.java"
...
Passed: tools/javac/processing/model/type/BasicAnnoTests.java

-----
Title: [JDK-8344275] tools/jpackage/windows/Win8301247Test.java fails on localized Windows platform
Priority: P4
Type: Bug
Component: tools
Description: On Japanese Windows platform (Windows Server2019), tools/jpackage/windows/Win8301247Test.java fails with the following stack:
java.lang.ArrayIndexOutOfBoundsException: Index 1 out of bounds for length 1
at jdk.jpackage.test.WindowsHelper.findAppLauncherPIDs(WindowsHelper.java:272)
at jdk.jpackage.test.WindowsHelper.killAppLauncherProcess(WindowsHelper.java:240)
at Win8301247Test.test(Win8301247Test.java:74)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:573)
at jdk.jpackage.test.MethodCall.accept(MethodCall.java:145)
at jdk.jpackage.test.TestInstance.run(TestInstance.java:230)
at jdk.jpackage.test.TKit.lambda$ignoreExceptions$0(TKit.java:144)
at jdk.jpackage.test.TKit.lambda$runTests$1(TKit.java:129)
at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1716)
at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:807)
at jdk.jpackage.test.TKit.lambda$runTests$0(TKit.java:126)
at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:112)
at jdk.jpackage.test.TKit.runTests(TKit.java:125)
at jdk.jpackage.test.Main.runTests(Main.java:79)
at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:112)
at jdk.jpackage.test.Main.main(Main.java:75)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:573)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1576)
java.lang.RuntimeException: 1 FAILED TEST
at jdk.jpackage.test.Main.reportSummary(Main.java:130)
at jdk.jpackage.test.Main.runTests(Main.java:90)
at jdk.jpackage.test.Main.lambda$main$2(Main.java:75)
at jdk.jpackage.test.Functional$ThrowingRunnable.lambda$toRunnable$0(Functional.java:105)
at jdk.jpackage.test.TKit.withExtraLogStream(TKit.java:112)
at jdk.jpackage.test.Main.main(Main.java:75)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:573)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1576)
In Japanese environment, "No Instance (s) Available.".equals(output.getFirst().trim()) returns false because message is output in Japanese. This causes ArrayIndexOutOfBoundsException in subsequent line.
OS: windows

-----
Title: [JDK-8344326] Move jpackage tests from "jdk.jpackage.tests" package to the default package
Priority: P4
Type: Enhancement
Component: tools
Description: Most jpackage tests are in the default package. Some are in the "jdk.jpackage.tests" package for no specific reason. All jpackage tests should be in the same (the default) package.
The positive side effect of this change is shortening jtreg directory names from "jtreg_open_test_jdk_tools_jpackage_share_jdk_jpackage_tests_BasicTest_java" to "jtreg_open_test_jdk_tools_jpackage_share_BasicTest_java". This will reduce the risk of lengths of jtreg paths exceeding the limit of 260 chars on Windows.
OS: generic

-----
Title: [JDK-8344581] [TESTBUG] java/awt/Robot/ScreenCaptureRobotTest.java failing on macOS
Priority: P4
Type: Bug
Component: client-libs
Description: The newly integrated test java/awt/Robot/ScreenCaptureRobotTest.java is already failing on macOS - this on a macOS 14.7.1 M1 mac Mini with HDMI
Captured pixel (fffefe00) at (164, 48) is not equal to real pixel (ffffff00)
System.err
java.lang.RuntimeException: FAIL : Captured Image is different from the real image
at ScreenCaptureRobotTest.doTest(ScreenCaptureRobotTest.java:114)
at ScreenCaptureRobotTest.main(ScreenCaptureRobotTest.java:65)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1447)

-----
Title: [JDK-8344589] Update IANA Language Subtag Registry to Version 2024-11-19
Priority: P4
Type: Enhancement
Component: core-libs
Description: [TBF]
OS: generic

-----
Title: [JDK-8344646] The libjsig deprecation warning should go to stderr not stdout
Priority: P4
Type: Bug
Component: hotspot
Description: In JDK 16 we deprecated the old signal and sigset signal-chaining interfaces under JDK-8257572. The deprecation warning was written to stdout but all other warnings go to stderr. Having the warning be on stdout causes interference with application output so we should fix it.

-----
Title: [JDK-8345296] AArch64: VM crashes with SIGILL when prctl is disallowed
Priority: P3
Type: Bug
Component: hotspot
Description: We have caught this in some prod environments, where prctl is forbidden by the sandboxing mechanism. This fails the JVM, because we have the following code to check for SVE vector length:
int VM_Version::get_current_sve_vector_length() {
assert(VM_Version::supports_sve(), "should not call this");
return prctl(PR_SVE_GET_VL);
}
That code returns `-1` when `prctl` is disallowed, which JVM then blindly interprets as vector length:
if (UseSVE  0) {
_initial_sve_vector_length = get_current_sve_vector_length();
}
This incorrect vector length would then be fed into AArch64 assembler, eventually leading to emitting illegal instructions, and thus getting a SIGILL when executing that incorrectly generated code. With modern JDKs, this reliably happens on JVM startup.
Workaround: -XX:UseSVE=0

-----
Title: [JDK-8345368] java/io/File/createTempFile/SpecialTempFile.java fails on Windows Server 2025
Priority: P4
Type: Bug
Component: core-libs
Description: This test case fails during creation of files with OS reserved/forbidden file name eg : com7, LPT1.
It is the same issue like in JDK-8274122. I would suggest to add Windows Server 2025 to the check in the test.
It would be great if the detection would also work for future releases.
OS: windows

-----
Title: [JDK-8345370] Bump update version for OpenJDK: jdk-21.0.7
Priority: P4
Type: Enhancement
Component: infrastructure
Description: Development of update 21.0.7 starts in repository jdk21u-dev on Wednesday December 4th, 2024. The first change should be to bump the version.
Release of 21.0.7 is planned for Tuesday April 15th, 2025.
For the date, see also https://wiki.openjdk.org/display/JDKUpdates/JDK%2021u or https://www.oracle.com/security-alerts/

-----
Title: [JDK-8345375] Improve debuggability of test/jdk/java/net/Socket/CloseAvailable.java
Priority: P4
Type: Sub-task
Component: core-libs
Description: The test/jdk/java/net/Socket/CloseAvailable.java has been failing intermittently, details of which have been noted in https://bugs.openjdk.org/browse/JDK-8269526. The test code can be improved to help identify the cause of these failures.

-----
Title: [JDK-8345414] Google CAInterop test failures
Priority: P3
Type: Bug
Component: security-libs
Description: Following 5 tests in CAInterop.java for Google root CAs fail OCSP verification
security/infra/java/security/cert/CertPathValidator/certification/CAInterop.java#globalsigneccrootcar4
security/infra/java/security/cert/CertPathValidator/certification/CAInterop.java#gtsrootcar1
security/infra/java/security/cert/CertPathValidator/certification/CAInterop.java#gtsrootcar2
security/infra/java/security/cert/CertPathValidator/certification/CAInterop.java#gtsrootecccar3
security/infra/java/security/cert/CertPathValidator/certification/CAInterop.java#gtsrootecccar4
Error:
java.lang.RuntimeException: Failed to validate https://revoked.gtsr1.demo.pki.goog
at ValidatePathWithURL.validateDomain(ValidatePathWithURL.java:129)
The reason is that the URLs now return 404, these have been moved:
good.gtsr1.demo.pki.goog - good.gtsr1.demosite.pki.goog
revoked.gtsr1.demo.pki.goog - revoked.gtsr1.demosite.pki.goog
good.gtsr2.demo.pki.goog - good.gtsr2.demosite.pki.goog
revoked.gtsr2.demo.pki.goog - revoked.gtsr2.demosite.pki.goog
good.gtsr3.demo.pki.goog - good.gtsr3.demosite.pki.goog
revoked.gtsr3.demo.pki.goog - revoked.gtsr3.demosite.pki.goog
good.gtsr4.demo.pki.goog - good.gtsr4.demosite.pki.goog
revoked.gtsr4.demo.pki.goog - revoked.gtsr4.demosite.pki.goog

-----
Title: [JDK-8345468] test/jdk/javax/swing/JScrollBar/4865918/bug4865918.java fails in ubuntu22.04
Priority: P4
Type: Bug
Component: client-libs
Description: test/jdk/javax/swing/JScrollBar/4865918/bug4865918.java fails in OCI system with reason
java.lang.Error: The scrollbar block increment is incorect
at bug4865918.main(bug4865918.java:68)
OS: linux

-----
Title: [JDK-8345569] [ubsan] adjustments to filemap.cpp and virtualspace.cpp for macOS aarch64
Priority: P3
Type: Bug
Component: hotspot
Description: Seems there is an undefined addition to a nullptr in filemap.cpp :
jdk/src/hotspot/share/cds/filemap.cpp:2215:47: runtime error: applying non-zero offset 34358689792 to null pointer
#0 0x107b70c78 in FileMapInfo::heap_region_requested_address() filemap.cpp:2215
#1 0x107b71960 in FileMapInfo::map_heap_region_impl() filemap.cpp:2260
#2 0x107b70e04 in FileMapInfo::map_or_load_heap_region() filemap.cpp:2081
#3 0x1082976ec in MetaspaceShared::map_archives(FileMapInfo*, FileMapInfo*, bool) metaspaceShared.cpp:1344
#4 0x10829699c in MetaspaceShared::initialize_runtime_shared_and_meta_spaces() metaspaceShared.cpp:1098
#5 0x108289530 in Metaspace::global_initialize() metaspace.cpp:736
#6 0x108819da8 in universe_init() universe.cpp:887
#7 0x107d8b4ec in init_globals() init.cpp:133
#8 0x1087e43d8 in Threads::create_vm(JavaVMInitArgs*, bool*) threads.cpp:574
#9 0x107eca96c in JNI_CreateJavaVM jni.cpp:3681
#10 0x102e6e770 in JavaMain java.c:494
#11 0x102e7579c in ThreadJavaMain java_md_macosx.m:679
#12 0x19d38ef90 in _pthread_start+0x84 (libsystem_pthread.dylib:arm64e+0x6f90)
#13 0x19d389d30 in thread_start+0x4 (libsystem_pthread.dylib:arm64e+0x1d30)
coding in filemap.cpp is (and CompressedOops::base()   seems to return nullptr on this macOS aarch64 machine)
return /*runtime*/ CompressedOops::base() + r-mapping_offset();
This was seen in the OpenJDK build on macOS aarch64 when building with ubsan enabled.
OS: os_x

-----
Title: [JDK-8345614] Improve AnnotationFormatError message for duplicate annotation interfaces
Priority: P4
Type: Enhancement
Component: core-libs
Description: The AnnotationFormatError thrown for duplicate annotation interfaces does not indicate the problematic class in which this duplication is found, and prints the annotation content of one of the annotations.  This is confusing, and we can instead improve by printing the name of the erroneous class.

-----
Title: [JDK-8345676] [ubsan] ProcessImpl_md.c:561:40: runtime error: applying zero offset to null pointer on macOS aarch64
Priority: P4
Type: Bug
Component: core-libs
Description: When starting :tier1  jdk  jtreg tests with
/jtreg_latest/bin/jtreg
this error is show when running ubsanized binaries on macOS aarch64  (XCode 13.1 and 15.4 show this)
src/java.base/unix/native/libjava/ProcessImpl_md.c:561:40: runtime error: applying zero offset to null pointer
#0 0x102a6552c in startChild ProcessImpl_md.c:621
#1 0x102a64480 in Java_java_lang_ProcessImpl_forkAndExec ProcessImpl_md.c:721
#2 0x13f53c4fc  ()
#3 0x13f5387cc  ()
#4 0x13f53894c  ()
#5 0x13f5386dc  ()
#6 0x13f5386dc  ()
#7 0x13f5386dc  ()
#8 0x13f53894c  ()
#9 0x13f53894c  ()
#10 0x13f534110  ()
#11 0x107de60e0 in JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, JavaThread*) javaCalls.cpp:416
#12 0x107ebf778 in jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, JavaThread*) jni.cpp:885
#13 0x107ec2778 in jni_CallStaticVoidMethod jni.cpp:1714
#14 0x102e86210 in invokeStaticMainWithArgs java.c:392
#15 0x102e884e8 in JavaMain java.c:640
#16 0x102e8d79c in ThreadJavaMain java_md_macosx.m:679
#17 0x19d38ef90 in _pthread_start+0x84 (libsystem_pthread.dylib:arm64e+0x6f90)
#18 0x19d389d30 in thread_start+0x4 (libsystem_pthread.dylib:arm64e+0x1d30)
Looks similar to
https://www.reddit.com/r/C_Programming/comments/133oxnc/null_0_is_ub_this_is_not_what_you_would_expect/?rdt=41590
and
https://trac.ffmpeg.org/changeset/9c0b3eddf4262f9dcea479091f1307444e614e88/ffmpeg
OS: os_x

-----
Title: [JDK-8345684] OperatingSystemMXBean.getSystemCpuLoad() throws NPE
Priority: P4
Type: Bug
Component: core-svc
Description: ADDITIONAL SYSTEM INFORMATION :
Linux
A DESCRIPTION OF THE PROBLEM :
Occassionally, calls to com.sun.management.OperatingSystemMXBean.getSystemCpuLoad() throw an NPE:
java.lang.NullPointerException: Cannot read the array length because the return value of "jdk.internal.platform.Metrics.getCpuSetCpus()" is null
at jdk.management/com.sun.management.internal.OperatingSystemImpl.isCpuSetSameAsHostCpuSet(Unknown Source)
at jdk.management/com.sun.management.internal.OperatingSystemImpl$ContainerCpuTicks.getContainerCpuLoad(Unknown Source)
at jdk.management/com.sun.management.internal.OperatingSystemImpl.getCpuLoad(Unknown Source)
at jdk.management/com.sun.management.OperatingSystemMXBean.getSystemCpuLoad(Unknown Source)
...
This appears to be caused by a TOCTOU (time of check, time of use) issue with a null check at https://github.com/openjdk/jdk/blob/16ef6e2a187181f49b7b2d601c660bbd25ab3845/src/jdk.management/unix/classes/com/sun/management/internal/OperatingSystemImpl.java#L277-L278.
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
This issue is flaky and there is no clear reproducer. The exception has been observed running the build system Bazel in a container setup in CI (https://github.com/bazelbuild/bazel/issues/24519).
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Method does not throw any exceptions.
ACTUAL -
Method throws:
java.lang.NullPointerException: Cannot read the array length because the return value of "jdk.internal.platform.Metrics.getCpuSetCpus()" is null
at jdk.management/com.sun.management.internal.OperatingSystemImpl.isCpuSetSameAsHostCpuSet(Unknown Source)
at jdk.management/com.sun.management.internal.OperatingSystemImpl$ContainerCpuTicks.getContainerCpuLoad(Unknown Source)
at jdk.management/com.sun.management.internal.OperatingSystemImpl.getCpuLoad(Unknown Source)
at jdk.management/com.sun.management.OperatingSystemMXBean.getSystemCpuLoad(Unknown Source)
...
This appears to be
CUSTOMER SUBMITTED WORKAROUND :
Catching any NPEs thrown by the method.
FREQUENCY : occasionally
OS: linux

-----
Title: [JDK-8345750] Shenandoah: Test TestJcmdHeapDump.java#aggressive intermittent assert(gc_cause() == GCCause::_no_gc) failed: Over-writing cause
Priority: P3
Type: Bug
Component: hotspot
Description: Test gc/shenandoah/TestJcmdHeapDump.java#aggressive intermittent assert(gc_cause() == GCCause::_no_gc) failed: Over-writing cause on linux-aarch64 by fastdebud build.
The test log snippet:
STDOUT:
[2024-12-07T00:35:29.101488535Z] Gathering output for process 651326
[2024-12-07T00:35:29.518459263Z] Waiting for completion for process 651326
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (src/hotspot/share/gc/shenandoah/shenandoahHeap.cpp:1516), pid=650235, tid=650303
#  assert(gc_cause() == GCCause::_no_gc) failed: Over-writing cause
#
# JRE version: OpenJDK Runtime Environment (25.0) (fastdebug build 25-internal-e0d63987)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 25-internal-e0d63987, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, shenandoah gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x163aee0]  ShenandoahHeap::on_cycle_start(GCCause::Cause, ShenandoahGeneration*)+0xfc
#
# Core dump will be written. Default location: /tmp/tone/run/jtreg/jt-work/jtreg/hotspot_jtreg/gc/shenandoah/TestJcmdHeapDump_aggressive/core.650235
#
# An error report file with more information is saved as:
# /tmp/tone/run/jtreg/jt-work/jtreg/hotspot_jtreg/gc/shenandoah/TestJcmdHeapDump_aggressive/hs_err_pid650235.log
[2024-12-07T00:35:29.842295115Z] Waiting for completion finished for process 651326
OS: linux

-----
Title: [JDK-8346055] javax/swing/text/StyledEditorKit/4506788/bug4506788.java fails in ubuntu22.04
Priority: P4
Type: Bug
Component: client-libs
Description: test/jdk/javax/swing/text/StyledEditorKit/4506788/bug4506788.java fails in OCI system
OS: linux

-----
Title: [JDK-8346108] [21u][BACKOUT] 8337994: [REDO] Native memory leak when not recording any events
Priority: P4
Type: Bug
Component: hotspot
Description: Backout the backport of 8337994 to 21u.
We see failures of test/jdk/jdk/jfr/jvm/TestChunkIntegrity.java with slowdebug and fastdebug builds.
The failure is well reproducible with the slowdebug build, but with faster binaries the test passes sometimes.
In our nightly CI with high load the fastdebug build fails reliably.
From the .jtr file of the testruns:
Veryfying chunk: disassembled/recording_00.jfr 0
Veryfying chunk: disassembled/recording_01.jfr 3338
Veryfying chunk: disassembled/recording_02.jfr 9083
One value null
Value A: {
type = N/A
name = "bootstrap"
}
Value B: null
Field classLoader doesn't match
Value A: {
type = N/A
name = "bootstrap"
}
Value B: null
Field type doesn't match
Value A: {
classLoader = null
name = "jdk/internal/loader/ClassLoaders$AppClassLoader"
package = {
name = "jdk/internal/loader"
module = {
name = "java.base"
version = "21.0.7-internal"
location = "jrt:/java.base"
classLoader = null
}
exported = true
}
modifiers = 10
hidden = false
}
Value B: {
classLoader = N/A
name = "jdk/internal/loader/ClassLoaders$AppClassLoader"
package = {
name = "jdk/internal/loader"
module = {
name = "java.base"
version = "21.0.7-internal"
location = "jrt:/java.base"
classLoader = N/A
}
exported = true
}
modifiers = 10
hidden = false
}
Field classLoader doesn't match
Value A: {
type = jdk.internal.loader.ClassLoaders$AppClassLoader (classLoader = bootstrap)
name = "app"
}
Value B: {
type = jdk.internal.loader.ClassLoaders$AppClassLoader (classLoader = null)
name = "app"
}
Field type doesn't match
Value A: {
classLoader = jdk.internal.loader.ClassLoaders$AppClassLoader (id = 3)
name = "jdk/jfr/jvm/TestChunkIntegrity$ClassStressor"
package = {
name = "jdk/jfr/jvm"
module = {
name = N/A
version = N/A
location = N/A
classLoader = jdk.internal.loader.ClassLoaders$AppClassLoader (id = 3)
}
exported = true
}
modifiers = 8
hidden = false
}
Value B: {
classLoader = jdk.internal.loader.ClassLoaders$AppClassLoader (id = 3)
name = "jdk/jfr/jvm/TestChunkIntegrity$ClassStressor"
package = {
name = "jdk/jfr/jvm"
module = {
name = N/A
version = N/A
location = N/A
classLoader = jdk.internal.loader.ClassLoaders$AppClassLoader (id = 3)
}
exported = true
}
modifiers = 8
hidden = false
}
Field method doesn't match
Value A: {
type = jdk.jfr.jvm.TestChunkIntegrity$ClassStressor (classLoader = app)
name = "stress"
descriptor = "()V"
modifiers = 4
hidden = false
}
Value B: {
type = jdk.jfr.jvm.TestChunkIntegrity$ClassStressor (classLoader = app)
name = "stress"
descriptor = "()V"
modifiers = 4
hidden = false
}
Array contents doesn't match
Field frames doesn't match
Value A: [Ljava.lang.Object;@16e87903
Value B: [Ljava.lang.Object;@466281af
Object A:
Clazz {
startTime = 01:26:04.779 (2024-12-12)
clazz = jdk.jfr.jvm.TestChunkIntegrity$MyClass (classLoader = JFR TestClassLoader)
eventThread = "Thread-1" (javaThreadId = 33)
stackTrace = [
jdk.jfr.jvm.TestChunkIntegrity$ClassStressor.stress() line: 272
jdk.jfr.jvm.TestChunkIntegrity$StressThread.run() line: 75
]
}
Object B:
Clazz {
startTime = 01:26:04.779 (2024-12-12)
clazz = jdk.jfr.jvm.TestChunkIntegrity$MyClass (classLoader = JFR TestClassLoader)
eventThread = "Thread-1" (javaThreadId = 33)
stackTrace = [
jdk.jfr.jvm.TestChunkIntegrity$ClassStressor.stress() line: 272
jdk.jfr.jvm.TestChunkIntegrity$StressThread.run() line: 75
]
}
----------System.err:(12/755)----------
java.lang.AssertionError: Events don't match. Event number 0
at jdk.jfr.jvm.TestChunkIntegrity.assertEventEquals(TestChunkIntegrity.java:174)
at jdk.jfr.jvm.TestChunkIntegrity.main(TestChunkIntegrity.java:131)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1583)
JavaTest Message: Test threw exception: java.lang.AssertionError: Events don't match. Event number 0
JavaTest Message: shutting down test
STATUS:Failed.`main' threw exception: java.lang.AssertionError: Events don't match. Event number 0
OS: generic

-----
Title: [JDK-8346324] javax/swing/JScrollBar/4865918/bug4865918.java fails in CI
Priority: P4
Type: Bug
Component: client-libs
Description: test/jdk/javax/swing/JScrollBar/4865918/bug4865918.java fails in CI citing
----------System.err:(11/674)----------
java.lang.RuntimeException: The scrollbar block increment is incorrect
at bug4865918.main(bug4865918.java:60)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1447)
OS: linux

-----
Title: [JDK-8346587] Distrust TLS server certificates anchored by Camerfirma Root CAs
Priority: P3
Type: Enhancement
Component: security-libs
Description: TLS server certificates anchored by Camerfirma Root CAs are distrusted or distrusted after a specific date by Google [1], Mozilla [2], Apple [3], and Microsoft [4, 5].
This enhancement will implement similar restrictions in the JDK.
The restrictions will be enforced in the SunJSSE Provider of the Java Secure Socket Extension (JSSE) API. A TLS session will not be negotiated if the server's certificate chain is anchored by any of the Certificate Authorities in the table below and the certificate's notBefore date is after . An application will receive an Exception with a message indicating the trust anchor (root) is not trusted, ex:
"TLS Server certificate issued after  and anchored by a distrusted legacy Camerfirma root CA: CN=Chambers of Commerce Root - 2008, O=AC Camerfirma S.A., SERIALNUMBER=A82743287, L=Madrid (see current address at www.camerfirma.com/address), C=EU"
If necessary, you can work around the restrictions by removing "CAMERFIRMA_TLS" from the "jdk.security.caDistrustPolicies" security property.
The restrictions will be imposed on the following Camerfirma Root certificates (identified by Distinguished Name) included in the JDK:
1. CN=Chambers of Commerce Root, OU=http://www.chambersign.org, O=AC Camerfirma SA CIF A82743287, C=EU
2. CN=Chambers of Commerce Root - 2008, O=AC Camerfirma S.A., SERIALNUMBER=A82743287, L=Madrid (see current address at www.camerfirma.com/address), C=EU
3. CN=Global Chambersign Root - 2008, O=AC Camerfirma S.A., SERIALNUMBER=A82743287, L=Madrid (see current address at www.camerfirma.com/address), C=EU
[1] https://groups.google.com/g/mozilla.dev.security.policy/c/dSeD3dgnpzk/m/iAUwcFioAQAJ
[2] https://groups.google.com/g/mozilla.dev.security.policy/c/PnAAWnxyosM/m/cImb78jnBAAJ
[3] https://support.apple.com/en-us/121668
[4] https://learn.microsoft.com/en-us/security/trusted-root/2023/feb2023
[5] https://learn.microsoft.com/en-us/security/trusted-root/2024/feb2024

-----
Title: [JDK-8346671] java/nio/file/Files/probeContentType/Basic.java fails on Windows 2025
Priority: P3
Type: Bug
Component: core-libs
Description: While running the Baseline task for Windows2025 java/nio/file/Files/probeContentType/Basic.java fails
Failure trace:
----------System.err:(16/1178)----------
For extension bz2 we got content type: application/x-compressed; expected: [application/bz2, application/x-bzip2, application/x-bzip]
For extension rar we got content type: application/x-compressed; expected: [application/rar, application/vnd.rar, application/x-rar, application/x-rar-compressed]
For extension 7z we got content type: application/x-compressed; expected: [application/x-7z-compressed]
java.lang.RuntimeException: Test failed!
at Basic.main(Basic.java:209)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:834)
OS: windows

-----
Title: [JDK-8346713] [testsuite] NeverActAsServerClassMachine breaks TestPLABAdaptToMinTLABSize.java TestPinnedHumongousFragmentation.java TestPinnedObjectContents.java
Priority: P4
Type: Bug
Component: hotspot
Description: JTREG=JAVA_OPTIONS=-XX:+NeverActAsServerClassMachine
test/hotspot/jtreg/gc/TestPLABAdaptToMinTLABSize.java
java.lang.RuntimeException: Unexpected to get exit value of [0]
test/hotspot/jtreg/gc/g1/pinnedobjs/TestPinnedHumongousFragmentation.java
#  Internal Error (/home/azul/azul/openjdk-git/src/hotspot/share/prims/whitebox.cpp:2647), pid=1672170, tid=1672189
#  Error: ShouldNotReachHere()
test/hotspot/jtreg/gc/g1/pinnedobjs/TestPinnedObjectContents.java
#  Internal Error (/home/azul/azul/openjdk-git/src/hotspot/share/prims/whitebox.cpp:2647), pid=1672170, tid=1672189
#  Error: ShouldNotReachHere()
OS: linux

-----
Title: [JDK-8346828] javax/swing/JScrollBar/4865918/bug4865918.java still fails in CI
Priority: P4
Type: Bug
Component: client-libs
Description: https://bugs.openjdk.org/browse/JDK-8346324 was supposed to resolve failures of javax/swing/JScrollBar/4865918/bug4865918.java on Linux CI testing.
But it still occurs :
java.lang.RuntimeException: The scrollbar block increment is incorrect
at bug4865918.main(bug4865918.java:67)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1447)
JavaTest Message: Test threw exception: java.lang.RuntimeException: The scrollbar block increment is incorrect
JavaTest Message: shutting down test

-----
Title: [JDK-8346847] [s390x] minimal build failure
Priority: P3
Type: Bug
Component: hotspot
Description: log:
/home/amit/build/jdk/src/hotspot/cpu/s390/vm_version_s390.cpp: In static member function ‘static void VM_Version::initialize()’:
/home/amit/build/jdk/src/hotspot/cpu/s390/vm_version_s390.cpp:328:7: error: ‘OptoScheduling’ was not declared in this scope
328 |   if (OptoScheduling) {
|       ^~~~~~~~~~~~~~
gmake[3]: *** [lib/CompileJvm.gmk:170: /home/amit/build/jdk/build/linux-s390x-minimal-fastdebug/hotspot/variant-minimal/libjvm/objs/vm_version_s390.o] Error
1
gmake[3]: *** Waiting for unfinished jobs....
gmake[2]: *** [make/Main.gmk:245: hotspot-minimal-libs] Error 2
gmake[2]: *** Waiting for unfinished jobs....
ERROR: Build failed for target 'images' in configuration 'linux-s390x-minimal-fastdebug' (exit code 2)
=== Output from failing command(s) repeated here ===
* For target hotspot_variant-minimal_libjvm_objs_vm_version_s390.o:
/home/amit/build/jdk/src/hotspot/cpu/s390/vm_version_s390.cpp: In static member function ‘static void VM_Version::initialize()’:
/home/amit/build/jdk/src/hotspot/cpu/s390/vm_version_s390.cpp:328:7: error: ‘OptoScheduling’ was not declared in this scope
328 |   if (OptoScheduling) {
|       ^~~~~~~~~~~~~~
* All command lines available in /home/amit/build/jdk/build/linux-s390x-minimal-fastdebug/make-support/failure-logs.
=== End of repeated output ===
No indication of failed target found.
HELP: Try searching the build log for '] Error'.
HELP: Run 'make doctor' to diagnose build problems.
make[1]: *** [/home/amit/build/jdk/make/Init.gmk:323: main] Error 2
make: *** [/home/amit/build/jdk/make/Init.gmk:189: images] Error 2
OS: linux

-----
Title: [JDK-8346880] [aix] java/lang/ProcessHandle/InfoTest.java still fails: "reported cputime less than expected"
Priority: P4
Type: Bug
Component: core-libs
Description: The test java/lang/ProcessHandle/InfoTest.java still fails sporadically on AIX. The test exclusion was removed through JDK-8211847 under the assumption the problem was gone. But it turned out that it was wrong.
We can see an exception like:
java.lang.AssertionError: reported cputime less than expected: PT0.2S, actual: Optional[PT0.021179882S]
at org.testng.Assert.fail(Assert.java:99)
at InfoTest.test1(InfoTest.java:110)
After a discussion with Roger Riggs and the team, we came to the following conclusion.
The problem is based on 2 independent causes; one fundamental and one AIX-specific.
The fundamental cause is as follows:
Modern hardware provides many hardware threads (up to several hundred) that enable the worker threads of the processes to be processed in real parallel. To ensure that such a worker thread does not take up a hardware thread resource for itself, it is rolled out by the OS after a few ms at the latest to make room for another worker thread, possibly from another process.
The OS continuously adds up all the times that each worker thread of a process is active as process cpu time.
It is easy to see that there is no correlation between the CPU time of a process and the real time(wall time).
If you have a system with many hardware threads and few worker threads, these are active almost all the time. If they are rolled out, they are immediately rolled back in due to a lack of competition. If a process has several worker threads, the CPU time will increase faster than the real time. In this case, cpu time  real time is to be expected, which is what the test wants.
However, if the same system is heavily loaded, i.e. there are a lot of worker threads competing on one hardware thread, each individual worker thread can only become active relatively rarely. Even if a process has several worker threads, the total CPU time will be less than the past real time. This is even more pronounced if the individual worker threads have to wait for each other via synchronization objects. Since this is the normal case, cpu time /psinfo file is evaluated to obtain the cpu time. The /proc directory is only present on AIX for portability reasons. The data in it is only updated at long intervals. For example, the cpu time is only updated every 1-2 seconds, which can cause the error.
The better solution here would be the getprocs64() API. Here the values ​​for the cpu time are updated by the OS kernel every few ms.
It may therefore be that the error no longer occurs after adjusting the AIX coding, but in principle the problem is not solved.
OS: aix

-----
Title: [JDK-8346881] [ubsan] logSelection.cpp:154:24  / logSelectionList.cpp:72:94 : runtime error: applying non-zero offset 1 to null pointer
Priority: P4
Type: Bug
Component: hotspot
Description: When running jtreg tests on macOS aarch64 with ubsanized binaries, the following error is reported :
jdk/src/hotspot/share/logging/logSelection.cpp:154:24: runtime error: applying non-zero offset 1 to null pointer
UndefinedBehaviorSanitizer:DEADLYSIGNAL
UndefinedBehaviorSanitizer: nested bug in the same thread, aborting.
(XCode 13.1 was used)
This can be seen e.g. in these jdk jtreg tests :
jdk/internal/misc/CDS/ArchivedEnumTest.java
jdk/jfr/event/gc/collection/TestGCGarbageCollectionEvent.java
jdk/jfr/startupargs/TestDumpOnExit.java
There is another issue observed here  (also when running on macOS aarch64) , seems this happens in the for loop when incrementing comma_pos
" for (char *comma_pos = copy, *cur = copy; success && comma_pos != nullptr; cur = comma_pos + 1) { ..."
src/hotspot/share/logging/logSelectionList.cpp:72:94: runtime error: applying non-zero offset 1 to null pointer
UndefinedBehaviorSanitizer:DEADLYSIGNAL
UndefinedBehaviorSanitizer: nested bug in the same thread, aborting.
OS: os_x

-----
Title: [JDK-8346887] DrawFocusRect() may cause an assertion failure
Priority: P4
Type: Bug
Component: client-libs
Description: With the fast debug configuration, the `api/java_awt/awt_focus_subsystem/event_delivery/index.html#EventDelivery2`	test is hanging when run on Windows with JDK 8 or 11. Although not explicit when running the test through the CLI, the cause is this (1) assertion failing. When running with the test harness GUI, we see a popup with the assertion failure (see attached). By ignoring the assertion (pressing “No”), the tests all pass.
Goal: determine why the assertion is failing and address the cause. Afterwards this test should no longer hang when run from the CLI.
Steps to reproduce
* Pull the relevant OpenJDK source (11 or 8)
* Install the necessary build dependencies
* Build with `--enable-debug`
* Pull jck.jar and unpack it
* Run the `api/java_awt/awt_focus_subsystem/event_delivery/index.html#EventDelivery2` test (either through CLI or test harness)
(1) https://github.com/openjdk/jdk11u-dev/blob/master/src/java.desktop/windows/native/libawt/windows/awt_Button.cpp#L246
OS: windows

-----
Title: [JDK-8346972] Test java/nio/channels/FileChannel/LoopingTruncate.java fails sometimes with IOException: There is not enough space on the disk
Priority: P4
Type: Bug
Component: core-libs
Description: On some of our machines the test java/nio/channels/FileChannel/LoopingTruncate.java sometimes fails with
java.io.IOException: There is not enough space on the disk
at java.base/sun.nio.ch.FileDispatcherImpl.write0(Native Method)
at java.base/sun.nio.ch.FileDispatcherImpl.write(FileDispatcherImpl.java:74)
at java.base/sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:137)
at java.base/sun.nio.ch.IOUtil.write(IOUtil.java:102)
at java.base/sun.nio.ch.IOUtil.write(IOUtil.java:72)
at java.base/sun.nio.ch.FileChannelImpl.implWrite(FileChannelImpl.java:371)
at java.base/sun.nio.ch.FileChannelImpl.write(FileChannelImpl.java:351)
at LoopingTruncate.main(LoopingTruncate.java:56)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1447)
Looks like the machines have only few disc space available and the test creates a very large file.
Should we maybe catch the IOException and then throw a SkippedException in case the  "large file creation" fails ?
(the real test later seems to be the truncate operation )
OS: generic

-----
Title: [JDK-8347038] [JMH] jdk.incubator.vector.SpiltReplicate fails NoClassDefFoundError
Priority: P4
Type: Bug
Component: core-libs
Description: 4 jmh tests fails:
org.openjdk.bench.jdk.incubator.vector.SpiltReplicate.testInt
org.openjdk.bench.jdk.incubator.vector.SpiltReplicate.testLong
org.openjdk.bench.jdk.incubator.vector.SpiltReplicate.testDouble
org.openjdk.bench.jdk.incubator.vector.SpiltReplicate.testFloat
Test output:
# Warmup Iteration   1:
java.lang.NoClassDefFoundError: jdk/incubator/vector/FloatVector
at org.openjdk.bench.jdk.incubator.vector.SpiltReplicate.broadcastFloat(SpiltReplicate.java:70)
at org.openjdk.bench.jdk.incubator.vector.SpiltReplicate.testFloat(SpiltReplicate.java:112)
at org.openjdk.bench.jdk.incubator.vector.jmh_generated.SpiltReplicate_testFloat_jmhTest.testFloat_avgt_jmhStub(SpiltReplicate_testFloat_jmhTest.java:190)
at org.openjdk.bench.jdk.incubator.vector.jmh_generated.SpiltReplicate_testFloat_jmhTest.testFloat_AverageTime(SpiltReplicate_testFloat_jmhTest.java:153)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:527)
at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:504)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:328)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:545)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:328)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1095)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:619)
at java.base/java.lang.Thread.run(Thread.java:1447)
Caused by: java.lang.ClassNotFoundException: jdk.incubator.vector.FloatVector
at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:580)
at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:490)
... 14 more
Test command:
make test TEST="micro:org.openjdk.bench.jdk.incubator.vector.SpiltReplicate.testFloat" MICRO="FORK=1;WARMUP_ITER=2"
Standalone test command:
java -Djmh.ignoreLock=true -Djava.library.path=/tmp/tone/run/jmh/jdk-repo/build/linux-aarch64-server-release/images/test/micro/native --add-opens=java.base/java.io=ALL-UNNAMED -jar /tmp/tone/run/jmh/jdk-repo/build/linux-aarch64-server-release/images/test/micro/benchmarks.jar -t 1 -f 1 -wi 2 org.openjdk.bench.jdk.incubator.vector.SpiltReplicate.testInt
Configure command:
bash configure --with-jobs=64 --prefix=/tmp/tone/run/jmh/jdk-repo/install-release --verbose --with-debug-level=release --enable-unlimited-crypto --with-vendor-name=yansendao --with-vendor-url=https://github.com/sendaoYan --with-vendor-bug-url=mailto:yansendao.ysd@alibaba-inc.com --with-vendor-vm-bug-url=mailto:yansendao.ysd@alibaba-inc.com --with-jvm-variants=server --with-boot-jdk=/tmp/tone/run/jmh/binary-download/jdk-repo-binary --with-gtest=/tmp/tone/run/jmh/googletest-v1.14.x --with-jtreg=/tmp/tone/run/jmh/jtreg --with-jmh=build/jmh/jars    --with-version-opt=07c9f713 --with-zlib=system --enable-ccache
OS: generic

-----
Title: [JDK-8347129] cpuset cgroups controller is required for no good reason
Priority: P3
Type: Bug
Component: hotspot
Description: The OpenJDK hotspot container detection code assumes the following cgroup controllers as required: cpu, cpuset, cpuacct, memory. If one of those controllers are not available, or not enabled at the kernel level, the container detection code fails and falls back to host-only resource limits.
This is problematic on some systems, like Fedora 41, which don't have the cpuset controller enabled by default any more. File /proc/cgroups file doesn't list the controller as enabled. Example:
$ cat /proc/cgroups
#subsys_name	hierarchy	num_cgroups	enabled
cpu	0	357	1
cpuacct	0	357	1
blkio	0	357	1
memory	0	357	1
devices	0	357	1
freezer	0	357	1
net_cls	0	357	1
perf_event	0	357	1
net_prio	0	357	1
hugetlb	0	357	1
pids	0	357	1
rdma	0	357	1
misc	0	357	1
I.e. there is no cpuset controller. This results in this output when container detection tracing is turned on:
$ ./bin/java -Xlog:os+container=trace --version
[0.000s][trace][os,container] OSContainer::init: Initializing Container Support
[0.000s][debug][os,container] Detected optional pids controller entry in /proc/cgroups
[0.000s][debug][os,container] controller cpu is not enabled
[                           ]
[0.000s][debug][os,container] One or more required controllers disabled at kernel level.
openjdk 25-internal 2025-09-16
OpenJDK Runtime Environment (build 25-internal-adhoc.sgehwolf.jdk-jdk)
OpenJDK 64-Bit Server VM (build 25-internal-adhoc.sgehwolf.jdk-jdk, mixed mode, sharing)
There is a secondary bug which incorrectly maps the 'cpuset' controller to the 'cpu' one in the log output. Fixing that bug results in:
$ ./bin/java -Xlog:os+container=trace --version
[0.001s][trace][os,container] OSContainer::init: Initializing Container Support
[0.001s][debug][os,container] Detected optional pids controller entry in /proc/cgroups
[0.001s][debug][os,container] controller cpuset is not enabled
[                           ]
[0.001s][debug][os,container] One or more required controllers disabled at kernel level.
openjdk 25-internal 2025-09-16
OpenJDK Runtime Environment (build 25-internal-adhoc.sgehwolf.jdk-jdk)
OpenJDK 64-Bit Server VM (build 25-internal-adhoc.sgehwolf.jdk-jdk, mixed mode, sharing)
With all that said, the cpuset controller isn't really that essential. os::Linux::active_processor_count() uses sched_getaffinity() which in-turn figures out the cpuset setting. Thus, it's only reporting code that actually uses the cpuset controller interface files. This suggests that this controller can be made optional and improve automatic detection code on more systems.
OS: linux

-----
Title: [JDK-8347171] (dc) java/nio/channels/DatagramChannel/InterruptibleOrNot.java fails with virtual thread factory
Priority: P4
Type: Bug
Component: core-libs
Description: Test java/nio/channels/DatagramChannel/InterruptibleOrNot.java	fails with virtual thread factory because of wrong exception
the log
org.opentest4j.AssertionFailedError: Unexpected exception type thrown, expected:  but was:
at org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)
at org.junit.jupiter.api.AssertThrows.assertThrows(AssertThrows.java:67)
at org.junit.jupiter.api.AssertThrows.assertThrows(AssertThrows.java:35)
at org.junit.jupiter.api.Assertions.assertThrows(Assertions.java:3115)
at InterruptibleOrNot.testInterruptBeforeUninterruptibleReceive(InterruptibleOrNot.java:109)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
Caused by: java.io.InterruptedIOException
at java.base/sun.nio.ch.DatagramChannelImpl.park(DatagramChannelImpl.java:482)
at java.base/sun.nio.ch.SelChImpl.park(SelChImpl.java:116)
at java.base/sun.nio.ch.DatagramChannelImpl.receive(DatagramChannelImpl.java:571)
at InterruptibleOrNot.lambda$testInterruptBeforeUninterruptibleReceive$1(InterruptibleOrNot.java:109)
at org.junit.jupiter.api.AssertThrows.assertThrows(AssertThrows.java:53)
... 6 more
FAILED     InterruptibleOrNot::testInterruptBeforeUninterruptibleReceive 'testInterruptBeforeUninterruptibleReceive()'
STARTED    InterruptibleOrNot::testInterruptDuringUninterruptibleReceive 'testInterruptDuringUninterruptibleReceive()'
SUCCESSFUL InterruptibleOrNot::testInterruptDuringUninterruptibleReceive 'testInterruptDuringUninterruptibleReceive()'
STARTED    InterruptibleOrNot::testInterruptBeforeUninterruptibleSend 'testInterruptBeforeUninterruptibleSend()'
SUCCESSFUL InterruptibleOrNot::testInterruptBeforeUninterruptibleSend 'testInterruptBeforeUninterruptibleSend()'
STARTED    InterruptibleOrNot::testInterruptDuringInterruptibleReceive 'testInterruptDuringInterruptibleReceive()'
SUCCESSFUL InterruptibleOrNot::testInterruptDuringInterruptibleReceive 'testInterruptDuringInterruptibleReceive()'
JavaTest Message: JUnit Platform Failure(s): 1
[ JUnit Containers: found 4, started 4, succeeded 4, failed 0, aborted 0, skipped 0]
[ JUnit Tests: found 6, started 6, succeeded 5, failed 1, aborted 0, skipped 0]
java.lang.Exception: JUnit test failure
at com.sun.javatest.regtest.agent.JUnitRunner.runWithJUnitPlatform(JUnitRunner.java:149)
at com.sun.javatest.regtest.agent.JUnitRunner.main(JUnitRunner.java:95)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.VirtualThread.run(VirtualThread.java:466)
JavaTest Message: Test threw exception: java.lang.Exception
JavaTest Message: shutting down test

-----
Title: [JDK-8347256] Epsilon: Demote heap size and AlwaysPreTouch warnings to info level
Priority: P4
Type: Enhancement
Component: hotspot
Description: For Epsilon, we have added log_warning messages when heap size and AlwaysPreTouch configuration is not great with JDK-8232051. Unfortunately, this means we print this warning all the time, even though users might not actually run into problems there, or when users tried to implement these suggestions and still decided to run against them.
I think we want to emit the suggestions in the normal GC log instead, so they are not printed all the time.

-----
Title: [JDK-8347267] [macOS]: UnixOperatingSystem.c:67:40: runtime error: division by zero
Priority: P4
Type: Bug
Component: core-svc
Description: When running ubsan-enabled binaries on macOS aarch64, in test
javax/management/MBeanServer/OldMBeanServerTest.java
the following division by zero is shown  :
src/jdk.management/macosx/native/libmanagement_ext/UnixOperatingSystem.c:67:40: runtime error: division by zero
UndefinedBehaviorSanitizer:DEADLYSIGNAL
UndefinedBehaviorSanitizer: nested bug in the same thread, aborting.
This seems to come from the division by a total_delta (of ticks) == 0   :
jlong used_delta  = used - last_used;
jlong total_delta = total - last_total;
jdouble cpu = (jdouble) used_delta / total_delta;
OS: os_x

-----
Title: [JDK-8347268] [ubsan] logOutput.cpp:357:21: runtime error: applying non-zero offset 1 to null pointer
Priority: P4
Type: Bug
Component: hotspot
Description: When running ubsan-enabled binaries on macOS aarch64, the following issue is reported in the test
jdk/jfr/event/gc/detailed/TestZAllocationStallEvent.java
src/hotspot/share/logging/logOutput.cpp:357:21: runtime error: applying non-zero offset 1 to null pointer
UndefinedBehaviorSanitizer:DEADLYSIGNAL
UndefinedBehaviorSanitizer: nested bug in the same thread, aborting.
OS: os_x

-----
Title: [JDK-8347424] Fix and rewrite sun/security/x509/DNSName/LeadingPeriod.java test
Priority: P4
Type: Bug
Component: security-libs
Description: Noticed this when backporting JDK-8311546. The test is actually broken, as it does not include CA cert in the certification path. So it passes even without the fix, and thus the test does not actually tests what the fix is supposed to fix.
The test is also quite hairy and can be drastically simplified.
I think JDK-8320372 actually broke it: https://github.com/openjdk/jdk/commit/a2c0fa6f9ccefd3d1b088c51d0b8170cfb59a885#diff-518af459086b0cd1aef2498da82abf7da93391c030662e55312860ac9ce80542L55

-----
Title: [JDK-8347427] JTabbedPane/8134116/Bug8134116.java has no license header
Priority: P2
Type: Bug
Component: client-libs
Description: The test/jdk/javax/swing/JTabbedPane/8134116/Bug8134116.java file has no license header.

-----
Title: [JDK-8347576] Error output in libjsound has non matching format strings
Priority: P4
Type: Bug
Component: client-libs
Description: When enabling the jsound  ERROR and TRACE reporting (see src/java.desktop/share/native/libjsound/Configure.h  https://github.com/openjdk/jdk/blob/master/src/java.desktop/share/native/libjsound/Configure.h#L32 ), we run into these build warnings as errors because at some places the format specifiers do not match the number types :
/jdk/src/java.desktop/share/native/libjsound/MidiInDevice.c: In function 'Java_com_sun_media_sound_MidiInDevice_nGetTimeStamp':
/jdk/src/java.desktop/share/native/libjsound/Utilities.h:38:65: error: format '%lld' expects argument of type 'long long int', but argument 3 has type 'jlong' {aka 'long int'} [-Werror=format=]
38 | #define ERROR1(string, p1)                    { fprintf(stdout, (string), (p1)); fflush(stdout); }
|                                                                 ^~~~~~~~  ~~~~
|                                                                           |
|                                                                           jlong {aka long int}
/jdk/src/java.desktop/share/native/libjsound/MidiInDevice.c:140:9: note: in expansion of macro 'ERROR1'
140 |         ERROR1("Java_com_sun_media_sound_MidiInDevice_nGetTimeStamp: MIDI_IN_GetTimeStamp returned %lld\n", ret);
|         ^~~~~~
cc1: all warnings being treated as errors
* For target support_native_java.desktop_libjsound_MidiOutDevice.o:
In file included from /jdk/src/java.desktop/share/native/libjsound/MidiOutDevice.c:40:
/jdk/src/java.desktop/share/native/libjsound/MidiOutDevice.c: In function 'Java_com_sun_media_sound_MidiOutDevice_nGetTimeStamp':
/jdk/src/java.desktop/share/native/libjsound/Utilities.h:38:65: error: format '%lld' expects argument of type 'long long int', but argument 3 has type 'jlong' {aka 'long int'} [-Werror=format=]
38 | #define ERROR1(string, p1)                    { fprintf(stdout, (string), (p1)); fflush(stdout); }
|                                                                 ^~~~~~~~  ~~~~
|                                                                           |
|                                                                           jlong {aka long int}
/jdk/src/java.desktop/share/native/libjsound/MidiOutDevice.c:97:9: note: in expansion of macro 'ERROR1'
97 |         ERROR1("Java_com_sun_media_sound_MidiOutDevice_nGetTimeStamp: MIDI_IN_GetTimeStamp returned %lld\n", ret);
|         ^~~~~~
cc1: all warnings being treated as errors
OS: generic

-----
Title: [JDK-8347740] java/io/File/createTempFile/SpecialTempFile.java failing
Priority: P3
Type: Bug
Component: core-libs
Description: java/io/File/createTempFile/SpecialTempFile.java seems to be failing on Windows after JDK-8345368. Example failure:
Windows 11 10.0
exceptionExpected 1: true
In test ReservedName, creating temp file with prefix, LPT1.package.zip, suffix, .temp, in dir, .\\9114136656605212322
----------System.err:(11/591)----------
java.lang.RuntimeException: IOException is expected
at SpecialTempFile.test(SpecialTempFile.java:82)
at SpecialTempFile.main(SpecialTempFile.java:123)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.Thread.run(Thread.java:1447)

-----
Title: [JDK-8347911] Limit the length of inflated text chunks
Priority: P3
Type: Bug
Component: client-libs
Description: In PNG we have non-essential compressed text chunks zTXt and iTXt, which can consume considerable amount of memory when they contain large amount of compressed data.
Since these are non-essential chunks we should restrict the amount of data we want to inflate.
OS: generic

-----
Title: [JDK-8347965] (tz) Update Timezone Data to 2025a
Priority: P3
Type: Enhancement
Component: core-libs
Description: Briefly:
Paraguay adopts permanent -03 starting spring 2024.
Improve pre-1991 data for the Philippines.
Etc/Unknown is now reserved.
Changes to future timestamps
Paraguay will stop changing its clocks after the spring-forward
transition on 2024-10-06, so it is now permanently at -03.
(Thanks to Heitor David Pinto and Even Scharning.)
This affects timestamps starting 2025-03-22, as well as the
obsolescent tm_isdst flags starting 2024-10-15.
Changes to past timestamps
Correct timestamps for the Philippines before 1900, and from 1937
through 1990.  (Thanks to P Chan for the heads-up and citations.)
This includes adjusting local mean time before 1899; fixing
transitions in September 1899, January 1937, and June 1954; adding
transitions in December 1941, November 1945, March and September
1977, and May and July 1990; and removing incorrect transitions in
March and September 1978.
Changes to data
Add zone1970.tab lines for the Concordia and Eyre Bird Observatory
research stations.  (Thanks to Derick Rethans and Jule Dabars.)
Changes to code
strftime %s now generates the correct numeric string even when the
represented number does not fit into time_t.  This is better than
generating the numeric equivalent of (time_t) -1, as strftime did
in TZDB releases 96a (when %s was introduced) through 2020a and in
releases 2022b through 2024b.  It is also better than failing and
returning 0, as strftime did in releases 2020b through 2022a.
strftime now outputs an invalid conversion specifier as-is,
instead of eliding the leading '%', which confused debugging.
An invalid TZ now generates the time zone abbreviation "-00", not
"UTC", to help the user see that an error has occurred.  (Thanks
to Arthur David Olson for suggesting a "wrong result".)
mktime and timeoff no longer incorrectly fail merely because a
struct tm component near INT_MIN or INT_MAX overflows when a
lower-order component carries into it.
TZNAME_MAXIMUM, the maximum number of bytes in a proleptic TZ
string's time zone abbreviation, now defaults to 254 not 255.
This helps reduce the size of internal state from 25480 to 21384
on common platforms.  This change should not be a problem, as
nobody uses such long "abbreviations" and the longstanding tzcode
maximum was 16 until release 2023a.  For those who prefer no
arbitrary limits, you can now specify TZNAME_MAXIMUM values up to
PTRDIFF_MAX, a limit forced by C anyway; formerly tzcode silently
misbehaved unless TZNAME_MAXIMUM was less than INT_MAX.
tzset and related functions no longer leak a file descriptor if
another thread forks or execs at about the same time and if the
platform has O_CLOFORK and O_CLOEXEC respectively.  Also, the
functions no longer let a TZif file become a controlling terminal.
'zdump -' now reads TZif data from /dev/stdin.
(From a question by Arthur David Olson.)
Changes to documentation
The name Etc/Unknown is now reserved: it will not be used by TZDB.
This is for compatibility with CLDR, which uses the string
"Etc/Unknown" for an unknown or invalid timezone.  (Thanks to
Justin Grant, Mark Davis, and Guy Harris.)
Cite Internet RFC 9636, which obsoletes RFC 8536 for TZif format.
Here are links to the release files:
https://www.iana.org/time-zones/repository/releases/tzcode2025a.tar.gz
https://www.iana.org/time-zones/repository/releases/tzdata2025a.tar.gz
https://www.iana.org/time-zones/repository/releases/tzdb-2025a.tar.lz
The following convenience links are also available, although they may
point to the previous release until the relevant caches are refreshed:
https://www.iana.org/time-zones/repository/tzcode-latest.tar.gz
https://www.iana.org/time-zones/repository/tzdata-latest.tar.gz
https://www.iana.org/time-zones/repository/tzdb-latest.tar.lz
Links are also available via plain HTTP, and via FTP from
ftp://ftp.iana.org/tz/releases with the same basenames as above.
Each release file has a GPG signature, which can be retrieved by
appending ".asc" to the above URLs. Copies of these signatures are
appended to this message.
This release corresponds to commit
a8e2fcd87bc5f83fec0a76652095e8d7881b0763 dated 2025-01-15 10:47:24 -0800
and tagged '2025a' in the development GitHub repository at
https://github.com/eggert/tz.

-----
Title: [JDK-8348562] ZGC: segmentation fault due to missing node type check in barrier elision analysis
Priority: P2
Type: Bug
Component: hotspot
Description: Running jdk/jfr/api/consumer/streaming/TestFilledChunks.java with ZGC on PPC64 leads to a crash due to a missing node type check in the barrier elision analysis:
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00001000027ee234, pid=103220, tid=103252
#
# JRE version: OpenJDK Runtime Environment (25.0) (fastdebug build 25-internal-2025-01-23-1552158.rocastan.open)
# Java VM: OpenJDK 64-Bit Server VM (fastdebug 25-internal-2025-01-23-1552158.rocastan.open, mixed mode, tiered, compressed class ptrs, z gc, linux-ppc64le)
# Problematic frame:
# V  [libjvm.so+0x1bde234]  get_base_and_offset(MachNode const*, long&)+0x354
#
Stack trace (provided by [~mdoerr]):
V  [libjvm.so+0xa1a3f0]  TypePtr::offset() const+0x14  (type.hpp:994)
V  [libjvm.so+0x1d35288]  get_base_and_offset(MachNode const*, long&)+0xb0  (zBarrierSetC2.cpp:557)
V  [libjvm.so+0x1d35818]  is_allocation(Node const*)+0x108  (zBarrierSetC2.cpp:629)
V  [libjvm.so+0x1d36230]  ZBarrierSetC2::analyze_dominating_barriers() const+0x19c  (zBarrierSetC2.cpp:759)
V  [libjvm.so+0x1d33ea0]  ZBarrierSetC2::late_barrier_analysis() const+0x54  (zBarrierSetC2.cpp:307)
V  [libjvm.so+0x167d36c]  PhaseOutput::perform_mach_node_analysis()+0x60  (output.cpp:258)
V  [libjvm.so+0x167dc50]  PhaseOutput::Output()+0x890  (output.cpp:346)
V  [libjvm.so+0xa0a57c]  Compile::Code_Gen()+0x4e4  (compile.cpp:3030)
V  [libjvm.so+0x9fd51c]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x179c  (compile.cpp:884)
V  [libjvm.so+0x80a220]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x1f0  (c2compiler.cpp:141)
The crash has only been observed on PPC64, but there does not seem to be any fundamental reason (other than different addressing mode matching rules) that could prevent it from happening on other platforms.
Thanks to [~mdoerr] for the original bug report, see more context here: https://github.com/openjdk/jdk/pull/23235.

-----
Title: [JDK-8348625] [21u, 17u] Revert JDK-8185862 to restore old java.awt.headless behavior on Windows
Priority: P2
Type: Bug
Component: client-libs
Description: JDK-8185862 changed the detection of headless mode on Windows by enumerating displays and turning on headless mode when only virtual devices exist. This causes problems with several use cases, mostly for automatic testing, e.g. JDK-8336862, JDK-8340992, JDK-8341294.
While the new detection mode seems correct from its idea, we should revert the change for the current LTS update releases and try to focus on fixing issues with explicitly using -Djava.awt.headless=true in the head release.
OS: windows

-----
Title: [JDK-8185862] AWT Assertion Failure in ::GetDIBits(hBMDC, hBM, 0, 1, 0, gpBitmapInfo, 0) 'awt_Win32GraphicsDevice.cpp', at line 185
Priority: P3
Type: Bug
Component: client-libs
Description: The test failed on Windows with following assertion:
[glue.process.err] [stress.process.err] *********************
[glue.process.err] [stress.process.err] AWT Assertion Failure
[glue.process.err] [stress.process.err] *********************
[glue.process.err] [stress.process.err] ::GetDIBits(hBMDC, hBM, 0, 1, 0, gpBitmapInfo, 0)
[glue.process.err] [stress.process.err] File 'awt_Win32GraphicsDevice.cpp', at line 185
[glue.process.err] [stress.process.err] GetLastError() is 57 : The parameter is incorrect.
[glue.process.err] [stress.process.err]
[glue.process.err] [stress.process.err] Do you want to break into the debugger?
[glue.process.err] [stress.process.err] *********************
[glue.process.err] [stress.process.err] *********************
[glue.process.err] [stress.process.err] AWT Assertion Failure
[glue.process.err] [stress.process.err] *********************
[glue.process.err] [stress.process.err] ::DeleteObject(hBM)
[glue.process.err] [stress.process.err] File 'awt_Win32GraphicsDevice.cpp', at line 298
[glue.process.err] [stress.process.err] GetLastError() is 57 : The parameter is incorrect.
[glue.process.err] [stress.process.err]
[glue.process.err] [stress.process.err] Do you want to break into the debugger?
[glue.process.err] [stress.process.err] *********************
[glue.process.err] [stress.process.err] *********************
[glue.process.err] [stress.process.err] AWT Assertion Failure
[glue.process.err] [stress.process.err] *********************
[glue.process.err] [stress.process.err] ::DeleteDC(hBMDC)
[glue.process.err] [stress.process.err] File 'awt_Win32GraphicsDevice.cpp', at line 299
[glue.process.err] [stress.process.err] GetLastError() is 6 : The handle is invalid.
[glue.process.err] [stress.process.err]
OS: windows

-----
Title: [JDK-8348675] TrayIcon tests fail in Ubuntu 24.10 Wayland
Priority: P3
Type: Bug
Component: client-libs
Description: Test name(s):
java/awt/TrayIcon/ActionCommand/ActionCommand.java
java/awt/TrayIcon/TrayIconMouseTest/TrayIconMouseTest.java
java/awt/TrayIcon/TrayIconPopup/TrayIconPopupClickTest.java
java/awt/TrayIcon/TrayIconPopup/TrayIconPopupTest.java
Product(s) tested: JDK 25, jdk-24, 21.0.7, 17.0.15
OS/architecture: Ubuntu 24.10 Wayland
Reproducible: Always
Is it a platform specific issue: Yes.
Test is failing on ubuntu 24.10 wayland
java/awt/TrayIcon/ActionCommand/ActionCommand.java error log
java.lang.RuntimeException: FAIL: ActionEvent not triggered when TrayIcon is double clicked
at ActionCommand.doTest(ActionCommand.java:129)
at ActionCommand.main(ActionCommand.java:71)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1583)
JavaTest Message: Test threw exception: java.lang.RuntimeException: FAIL: ActionEvent not triggered when TrayIcon is double clicked
OS: linux_ubuntu

-----
Title: [JDK-8349039] Adjust exception No type named <ThreadType> in database
Priority: P4
Type: Enhancement
Component: hotspot
Description: We should change the exception message from
Caused by: java.lang.RuntimeException: No type named "DeoptimizeObjectsALotThread" in database
to
Caused by: java.lang.RuntimeException: No type named "DeoptimizeObjectsALotThread" in hotspot type database
error was  (from JDK-8348800) :
serviceability/sa/CDSJMapClstats.java
at jdk.hotspot.agent/sun.jvm.hotspot.runtime.Threads.createJavaThreadWrapper(Threads.java:196)
at jdk.hotspot.agent/sun.jvm.hotspot.runtime.Threads.getJavaThreadAt(Threads.java:178)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.ObjectHeap.collectLiveRegions(ObjectHeap.java:320)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.ObjectHeap.iterateSubtypes(ObjectHeap.java:216)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.ObjectHeap.iterateObjectsOfKlass(ObjectHeap.java:116)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.ObjectHeap.iterateObjectsOfKlass(ObjectHeap.java:128)
at jdk.hotspot.agent/sun.jvm.hotspot.tools.ClassLoaderStats.printClassLoaderStatistics(ClassLoaderStats.java:95)
at jdk.hotspot.agent/sun.jvm.hotspot.tools.ClassLoaderStats.run(ClassLoaderStats.java:78)
at jdk.hotspot.agent/sun.jvm.hotspot.tools.JMap.run(JMap.java:121)
at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.startInternal(Tool.java:278)
at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.start(Tool.java:241)
at jdk.hotspot.agent/sun.jvm.hotspot.tools.Tool.execute(Tool.java:134)
at jdk.hotspot.agent/sun.jvm.hotspot.tools.JMap.main(JMap.java:202)
at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.runJMAP(SALauncher.java:344)
at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.main(SALauncher.java:507)
Caused by: java.lang.RuntimeException: No type named "DeoptimizeObjectsALotThread" in database
at jdk.hotspot.agent/sun.jvm.hotspot.types.basic.BasicTypeDataBase.lookupType(BasicTypeDataBase.java:86)
at jdk.hotspot.agent/sun.jvm.hotspot.HotSpotTypeDataBase.lookupType(HotSpotTypeDataBase.java:137)
at jdk.hotspot.agent/sun.jvm.hotspot.types.basic.BasicTypeDataBase.lookupType(BasicTypeDataBase.java:80)
at jdk.hotspot.agent/sun.jvm.hotspot.runtime.VirtualConstructor.instantiateWrapperFor(VirtualConstructor.java:75)
at jdk.hotspot.agent/sun.jvm.hotspot.runtime.Threads.createJavaThreadWrapper(Threads.java:192)
OS: generic

-----
Title: [JDK-8349603] [21u, 17u, 11u] Update GHA JDKs after Jan/25 updates
Priority: P4
Type: Bug
Component: infrastructure
Description: Time to bump GHA JDKs.

-----
Title: [JDK-8349729] [21u] AIX jtreg tests fail to compile with qvisibility=hidden
Priority: P3
Type: Bug
Component: infrastructure
Description: jdk-21.0.7+1 on AIX is failing to compile with error:
14:56:45  ld: 0711-407 ERROR: Symbol .std::__1::basic_string, std::__1::allocator  std::__1::operator+, std::__1::allocator (char const*, std::__1::basic_string, std::__1::allocator  const&)
14:56:45  	Visibility is not allowed on a reference to an imported symbol.
14:56:45  gmake[3]: *** [test/JtregNativeJdk.gmk:148: /home/jenkins/workspace/build-scripts/jobs/jdk21u/jdk21u-aix-ppc64-temurin/workspace/build/src/build/aix-ppc64-server-release/support/test/jdk/jtreg/native/bin/NullCallerTest] Error 8
Ref build log: https://ci.adoptium.net/job/build-scripts/job/jobs/job/jdk21u/job/jdk21u-aix-ppc64-temurin/88/consoleFull
I suspect recent change: JDK-8327460
may be the cause? Not sure AIX jtreg test code links with -qvisibility=hidden
possibly??
OS: aix

-----
Title: [JDK-8352097] (tz) zone.tab update missed in 2025a backport
Priority: P4
Type: Bug
Component: core-libs
Description: The zone.tab file was removed by JDK-8166983 in trunk and so was not updated as part of the original version of JDK-8347965.
While the 24u backport did update zone.tab, the 21u backport - and subsequent backports to 17u, 11u & 8u based on this - did not,due to being based on the trunk backport.
We should apply the zone.tab update to the 2025a updates in the upcoming April releases. Long-term, we should look at the possibility of backporting JDK-8166983 as tzdata is frequently updated and these files only in older JDK releases are likely to be missed.
OS: generic

-----
Title: [JDK-8353904] [21u] Remove designator DEFAULT_PROMOTED_VERSION_PRE=ea for release 21.0.7
Priority: P4
Type: Bug
Component: infrastructure
Description: As discussed in https://github.com/openjdk/jdk17u-dev/pull/307, we'd like to have DEFAULT_PROMOTED_VERSION_PRE set to 'ea' in dev source trees and remove it for GA tagged source levels.

-----
Title: [JDK-6956385] URLConnection.getLastModified() leaks file handles for jar:file and file: URLs
Priority: P4
Type: Bug
Component: core-libs
Description: FULL PRODUCT VERSION :
java version "1.6.0_20"
Java(TM) SE Runtime Environment (build 1.6.0_20-b02)
Java HotSpot(TM) Client VM (build 16.3-b01, mixed mode, sharing)
ADDITIONAL OS VERSION INFORMATION :
Ubuntu 7.04
Linux coconut 2.6.20-16-server #2 SMP Fri Aug 31 01:01:45 UTC 2007 i686 GNU/Linux
also reproduced on:
Windows 7 Professional 64-bit
Microsoft Windows [Version 6.1.7600]
A DESCRIPTION OF THE PROBLEM :
Using the getLastModified() call on a URLConnection for jar:file: or file: URLs causes file handles to remain open. When performing many of these calls in quick succession, the operating system can easily hit the open file handles limit. E.g., on an Ubuntu Linux install, the system-wide open file limit is 1024 by default, out of which a large portion may already be consumed by other processes.
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Open a jar:file: URL connection. E.g. run getClass().getResource("META-INF/MANIFEST.MF").openConnection(). This returns a sun.net.www.protocol.jar.JarURLConnection.
On this URL connection, run getLastModified().
This runs, in sequence,
java.net.URLConnection.getHeaderFieldDate(),
sun.net.www.protocol.jar.JarURLConnection.getHeaderField(),
sun.net.www.protocol.file.FileURLConnection.getHeaderField(),
sun.net.www.protocol.file.FileURLConnection.initializeHeaders(),
sun.net.www.protocol.file.FileURLConnection.connect().
This last call, opens a FileInputStream which is not closed, further on.
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
The getLastModified() call does not cause a file handle to be opened, or closes it  before returning.
ACTUAL -
A file handle remains open.
REPRODUCIBILITY :
This bug can be reproduced always.
---------- BEGIN SOURCE ----------
// NOTE: This code snippet should be run on a platform where the 'lsof' command is available (e.g. Linux).
// The problem is present on Windows, but it is not as easy to show the number of open files to expose the problem.
private void exposeFileHandleLeakOnJarUrlConnection() throws InterruptedException, IOException {
URL jarUrl = LastModifiedBugExposer.class.getResource("/META-INF/MANIFEST.MF");
printNumberOfOpenFiles("jar");
for (int i = 0; i
OS: windows_7

-----
Title: [JDK-8051591] Test javax/swing/JTabbedPane/8007563/Test8007563.java fails
Priority: P3
Type: Bug
Component: client-libs
Description: Testsuite name: Regression
Test name(s):javax/swing/JTabbedPane/8007563/Test8007563.java
JDK tested: jdk1.8_20b21, jdk1.8b132,jdk1.8.0_20b17,jdk1.8.0_20b18
OS tested:osx
Is it a regression? No
Regression introduced in release/build: No
Failed in : jdk1.8_20b21, jdk1.8.0b132,jdk1.8.0_20b17,jdk1.8.0_20b18,jdk1.8.0_20b23,jdk1.8.0_20b26,jdk 1.9.0b28
Is it platform specific? No
L&F: Metal
java.lang.Error: [Mac OS X opaque=true, CDE/Motif opaque=true, Nimbus opaque=true, Metal opaque=true]
at Test8007563.main(Test8007563.java:54)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:483)
at com.sun.javatest.regtest.MainWrapper$MainThread.run(MainWrapper.java:94)
at java.lang.Thread.run(Thread.java:745)
OS: linux

-----
Title: [JDK-8136895] Writer not closed with disk full error, file resource leaked
Priority: P4
Type: Bug
Component: core-libs
Description: FULL PRODUCT VERSION :
java version "1.8.0_45"
Java(TM) SE Runtime Environment (build 1.8.0_45-b14)
Java HotSpot(TM) 64-Bit Server VM (build 25.45-b02, mixed mode)
ADDITIONAL OS VERSION INFORMATION :
Linux  3.2.45-0.6.acc.624.45.283.amzn1acc.x86_64 #1 SMP Fri Nov 21 22:39:25 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux
A DESCRIPTION OF THE PROBLEM :
When writing to a file and a disk full condition occurs, the file is not properly closed and the handle is leaked even though a try-with-resources is used.
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
use Files.newBufferedWriter() in a try with resources construct.  Write until disk full.  Check to see if file has been properly closed by checking open files.
You can check open files on Linux like this:
sudo lsof -a +L1 /
(grep for the filename)
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
File should not be open, because the try with resources construct should have closed the file.
ACTUAL -
File remains open as reported by:  sudo lsof -a +L1 /
ERROR MESSAGES/STACK TRACES THAT OCCUR :
This exception is generated:
java.io.IOException: No space left on device
at sun.nio.ch.FileDispatcherImpl.write0(Native Method)
at sun.nio.ch.FileDispatcherImpl.write(FileDispatcherImpl.java:60)
at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)
at sun.nio.ch.IOUtil.write(IOUtil.java:65)
at sun.nio.ch.FileChannelImpl.write(FileChannelImpl.java:210)
at java.nio.channels.Channels.writeFullyImpl(Channels.java:78)
at java.nio.channels.Channels.writeFully(Channels.java:101)
at java.nio.channels.Channels.access$000(Channels.java:61)
at java.nio.channels.Channels$1.write(Channels.java:174)
at sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:221)
at sun.nio.cs.StreamEncoder.implWrite(StreamEncoder.java:282)
at sun.nio.cs.StreamEncoder.write(StreamEncoder.java:125)
at java.io.OutputStreamWriter.write(OutputStreamWriter.java:207)
at java.io.BufferedWriter.flushBuffer(BufferedWriter.java:129)
at java.io.BufferedWriter.write(BufferedWriter.java:230)
at java.io.Writer.write(Writer.java:157)
[... snip application level info ...]
Suppressed: java.io.IOException: No space left on device
at sun.nio.ch.FileDispatcherImpl.write0(Native Method)
at sun.nio.ch.FileDispatcherImpl.write(FileDispatcherImpl.java:60)
at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)
at sun.nio.ch.IOUtil.write(IOUtil.java:65)
at sun.nio.ch.FileChannelImpl.write(FileChannelImpl.java:210)
at java.nio.channels.Channels.writeFullyImpl(Channels.java:78)
at java.nio.channels.Channels.writeFully(Channels.java:101)
at java.nio.channels.Channels.access$000(Channels.java:61)
at java.nio.channels.Channels$1.write(Channels.java:174)
at sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:221)
at sun.nio.cs.StreamEncoder.implClose(StreamEncoder.java:316)
at sun.nio.cs.StreamEncoder.close(StreamEncoder.java:149)
at java.io.OutputStreamWriter.close(OutputStreamWriter.java:233)
at java.io.BufferedWriter.close(BufferedWriter.java:266)
[... snip application level info ...]
... 4 more
REPRODUCIBILITY :
This bug can be reproduced always.
---------- BEGIN SOURCE ----------
Run this junit test.  Set the path to a disk with limited space to save time.  When disk is full, the IOException will be printed.  Then, while the test continues to sleep, before termination, check for open files.
-----------------------------------
import java.io.BufferedWriter;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import org.junit.Test;
public class DiskFullTest {
@Test
public void diskFullTest() throws IOException, InterruptedException {
StringBuffer text = new StringBuffer();
for (int i = 0;  i
OS: generic

-----
Title: [JDK-8180450] secondary_super_cache does not scale well
Priority: P3
Type: Bug
Component: hotspot
Description: On some workloads, updates to the Klass::secondary_super_cache field
cause excessive cache line invalidation traffic, with noticeable slowdowns.
Specifically, the cache itself may become unstable (which is a normal corner case for one-element caches) and at that point a multi-threaded application may begin "hammering" on the cache line from multiple threads, causing an explosion of coherence traffic.
One customer reported this as happening when multiple threads were traversing heterogeneous sequences of objects, testing the same classes against more than one interface, with rapid variation between the interfaces.
In such a case, two interfaces could compete to use the single SSC slot on each class that occurs in the object sequence.  The competition would turn into frequent updating of the SSC slots by multiple threads, causing cache lines to ping-pong between processors.
To fix this, the SSC has to have some sort of limit on its update rate, or be replaced by a mechanism that scales better.
The simplest fix is probably to put an "update count" profile counter somewhere, and consult that counter just before updating the SSC.  If the counter is too high (evidence of a high contention rate), don't update the SSC.  The trade-off is between linear searches of the Klass::secondary_supers array (which is stable and therefore replicated across caches) versus time spent waiting to acquire write access to the SSC (which may be hundreds of cycles).  Linear search will easily win in those cases, except of course for very dense dynamic query mixes over very complex interface graphs, which is a corner case we can leave for the future.
The obvious place to put the update count is next to the SSC, on the same cache line.  When the miss count overflows past some selected threshold, the SSC is left unchanged.  On balance the extra footprint of a 32-bit field per Klass seems acceptable.
Such a counter should be allowed to decay, so that temporary bursts in type test complexity do not shut down the SSC forever.
Another possible fix would be a thread-local update counter for the SSC, under JavaThread::current.  In that case, only Java code could use the extra fix to avoid cache contention, but that is probably acceptable also.  This fix would be significantly more complex, but would have the benefit that only "offending" threads would throttle themselves.
Similarly, the counter could be placed in the MethodData object which carries the profile of the instruction which is causing the SSC contention.  (This instruction could be instanceof, checkcast, aastore, or a call to an intrinsic method that emulates one of those.)  This fix would be even more complex than the thread-based fix, and would probably be overkill given the relatively small importance of the problem.
If the secondary_supers lists ever grow in length to more than a few tens of elements, additional mechanisms may be needed for quickly testing the subtype relation.  Probably a tree walk would be sufficient.  Sometimes unified caches (global or thread-local) are proposed, or perhaps unified numbering schemes, but those, also, seem overkill for this problem.

-----
Title: [JDK-8183348] Better cleanup for jdk/test/sun/security/pkcs12/P12SecretKey.java
Priority: P4
Type: Bug
Component: security-libs
Description: P12SecretKey.java creates test*.test files in the default system temp directory:
cat -n jdk/test/sun/security/pkcs12/P12SecretKey.java
[...]
66          File ksFile = File.createTempFile("test", ".test");
These files are not cleaned up at the end of the run.
The preferred approach would be to create temporary test directories and files under the jtreg property user.dir instead, if it is defined.
OS: generic

-----
Title: [JDK-8200566] DistributionPointFetcher fails to fetch CRLs if the DistributionPoints field contains more than one DistributionPoint and the first one fails
Priority: P4
Type: Bug
Component: security-libs
Description: FULL PRODUCT VERSION :
ADDITIONAL OS VERSION INFORMATION :
Microsoft Windows [Version 10.0.14393]
The codepath is such that this affects other OSes, as well.
A DESCRIPTION OF THE PROBLEM :
I've created a Certificate which contain two CRLDistributionPoint in the CRLDistributionPoints field. These are two separate HTTP web servers, which provide the same CRL.
I see the following happen when I use the PKIX CertPathValidator:
If the first listed endpoint is unavailable (causing an IOException either by blocking the port in the firewall or shutting down the software), then revocation checking will fail even though the CRL is available on the next CRL DistributionPoint.
From what I can determine, the cause is that the for-loop in: http://hg.openjdk.java.net/jdk/jdk/file/71c04702a3d5/src/java.base/share/classes/sun/security/provider/certpath/DistributionPointFetcher.java#l134
will exit early with an exception and never check the second CRL DistributionPoint.
The result of the failure is stored in the CRL cache. If the underlying URICertStore is called within the CRL Check Interval, then the same method (which otherwise throws the exception) will return an empty collection instead and the second DistributionPoint is checked as expected.
This was observed in JRE 8u144 but the same for-loop is present in the latest JDK.
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
1. Create a certificate with multiple HTTP Endpoints stored in different DistributionPoint fields
2. Make the CRL available on the second HTTP Endpoint and ensure that the first endpoint is unavailable.
3. Setup the PKIX CerthPathValidator
4. Validate the created Certificate against the PKIX CertPathValidator
5. Validate the created Certificate a second time (within 30 second) against the PKIX CertPathValidator.
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Both validation checks should succeed.
ACTUAL -
The first validation check fails with an "Unable to determine revocation status due to network error".
The second validation check fetches the CRL from the second distribution point and succeeds the revocation checking.
REPRODUCIBILITY :
This bug can be reproduced always.
CUSTOMER SUBMITTED WORKAROUND :
Only specify one CRL DistributionPoint in certificates.
OS: generic

-----
Title: [JDK-8202100] Merge vm/share/InMemoryJavaCompiler w/ jdk/test/lib/compiler/InMemoryJavaCompiler
Priority: P4
Type: Enhancement
Component: hotspot

-----
Title: [JDK-8210471] GZIPInputStream constructor could leak an un-end()ed Inflater
Priority: P3
Type: Bug
Component: core-libs
Description: Colleague Tobias Thierer writes:
=====
When the constructor GZIPInputStream(InputStream,int) throws an exception (eg. when encountering invalid data), the Inflater constructed earlier is not end()ed before it becomes eligible for garbage collection. This means that the Inflater's zsref is not reliably cleared (relies on finalization alone).
The patch below fixes this problem in the case of Exception; in the case of  Error, it still leaves the Inflater in un-end()ed state.
--- a/src/java.base/share/classes/java/util/zip/GZIPInputStream.java    Thu Jun 21 08:58:59 2018 -0300
+++ b/src/java.base/share/classes/java/util/zip/GZIPInputStream.java    Thu Sep 06 14:15:23 2018 +0100
@@ -77,7 +77,12 @@
public GZIPInputStream(InputStream in, int size) throws IOException {
super(in, new Inflater(true), size);
usesDefaultInflater = true;
-        readHeader(in);
+        try {
+            readHeader(in);
+        } catch (Exception e) {
+            inf.end();
+            throw e;
+        }
}
/**

-----
Title: [JDK-8211400] nsk.share.gc.Memory::getArrayLength returns wrong value
Priority: P4
Type: Bug
Component: hotspot
Description: nsk.share.gc.Memory::getArrayLength estimates array size as '(memory - extraSize) / (objectSize + referenceSize)'. this formula is incorrect, since array doesn't use reference for each element.
the correct formula is '(memory - extraSize) / objectSize'
nsk.share.gc.Memory::getArraySize should be fixed correspondingly

-----
Title: [JDK-8220213] com/sun/jndi/dns/ConfigTests/Timeout.java failed intermittent
Priority: P4
Type: Bug
Component: core-libs
Description: ----------System.err:(15/852)----------
java.lang.RuntimeException: Failed: timeout in 7749 ms, expected7750ms
at Timeout.handleException(Timeout.java:108)
at TestBase.launch(TestBase.java:84)
at TestBase.run(TestBase.java:50)
at Timeout.main(Timeout.java:61)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:567)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:298)
at java.base/java.lang.Thread.run(Thread.java:835)
JavaTest Message: Test threw exception: java.lang.RuntimeException
JavaTest Message: shutting down test
result: Failed. Execution failed: `main' threw exception: java.lang.RuntimeException: Failed: timeout in 7749 ms, expected7750ms
OS: linux, windows

-----
Title: [JDK-8249831] Test sun/security/mscapi/nonUniqueAliases/NonUniqueAliases.java is marked with @ignore
Priority: P4
Type: Sub-task
Component: security-libs
Description: sun/security/mscapi/nonUniqueAliases/NonUniqueAliases.java has '@ignore Uses certutil.exe that isn't guaranteed to be installed'
canonically, @ignore should be followed by the id of the bug which describes the problem and will be used to eventually fix it.
the more appropriate solutions for a situation when tests do not meet special requirements is to throw jtreg.SkippedException

-----
Title: [JDK-8253440] serviceability/sa/TestJhsdbJstackLineNumbers.java failed with "Didn't find enough line numbers"
Priority: P4
Type: Bug
Component: hotspot
Description: The following test failed in the JDK16 CI:
serviceability/sa/TestJhsdbJstackLineNumbers.java
Here's a snippet from the log file:
Output and diagnostic info for process 1083748 was saved into 'pid-1083748-output.log'
- LingeredAppWithBusyWork.busywork(int[]) @bci=2, line=64 (Interpreted frame)
c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-16+17-754\\windows-x64-debug.jdk\\jdk-16\\fastdebug\\bin\\jhsdb.exe jstack --pid 1093388
[2020-09-21T15:42:53.761647500Z] Gathering output for process 1131356
[2020-09-21T15:42:56.819483300Z] Waiting for completion for process 1131356
[2020-09-21T15:42:56.819483300Z] Waiting for completion finished for process 1131356
Output and diagnostic info for process 1131356 was saved into 'pid-1131356-output.log'
- LingeredAppWithBusyWork.busywork(int[]) @bci=49, line=72 (Interpreted frame)
c:\\ade\\mesos\\work_dir\\jib-master\\install\\jdk-16+17-754\\windows-x64-debug.jdk\\jdk-16\\fastdebug\\bin\\jhsdb.exe jstack --pid 1093388
[2020-09-21T15:42:56.835089900Z] Gathering output for process 1137008
[2020-09-21T15:42:59.942666700Z] Waiting for completion for process 1137008
[2020-09-21T15:42:59.942666700Z] Waiting for completion finished for process 1137008
Output and diagnostic info for process 1137008 was saved into 'pid-1137008-output.log'
- LingeredAppWithBusyWork.busywork(int[]) @bci=5, line=64 (Interpreted frame)
Found Line Numbers: [64, 69, 71, 72]
LingeredApp stdout: [];
LingeredApp stderr: []
LingeredApp exitValue = 0
LingeredAppWithBusyWork finished
----------System.err:(14/1030)----------
java.lang.RuntimeException: Failed: Didn't find enough line numbers: [64, 69, 71, 72]
at TestJhsdbJstackLineNumbers.runTest(TestJhsdbJstackLineNumbers.java:165)
at TestJhsdbJstackLineNumbers.main(TestJhsdbJstackLineNumbers.java:186)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
at java.base/java.lang.Thread.run(Thread.java:832)
JavaTest Message: Test threw exception: java.lang.RuntimeException: Failed: Didn't find enough line numbers: [64, 69, 71, 72]
JavaTest Message: shutting down test
STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Failed: Didn't find enough line numbers: [64, 69, 71, 72]
----------rerun:(49/5913)*----------
OS: windows

-----
Title: [JDK-8256211] assert fired in java/net/httpclient/DependentPromiseActionsTest (infrequent)
Priority: P4
Type: Bug
Component: core-libs
Description: The assertion that fires is at DependentPromiseActionsTest.java:366:
assert subscriberType == SubscriberType.LAZZY || !responseCF.isDone();
[2 s, 962 ms, 175524 ns] testAsStringAsync(https://localhost:62490/https2/fixed/y, true, SemaphoreStaller)
try stalling in BODY_HANDLER
Http2TestContext::handle Http2TestExchangeImpl: Http2TestExchangeImpl@7adafea8
HTTP_FixedLengthHandler received request to https://localhost:62490/https2/fixed/y
TestServer: [2 s, 966 ms, 259293 ns]  Pushing promise: https://localhost:62490/https2/fixed/y/before/promise-1
TestServer: [2 s, 966 ms, 894323 ns]  Pushing promise: https://localhost:62490/https2/fixed/y/after/promise-2
TestServer: [2 s, 967 ms, 343972 ns]  Pushing promise: https://localhost:62490/https2/fixed/y/after/promise-3
Found expected frame: java.net.http/jdk.internal.net.http.PrivilegedExecutor$PrivilegedRunnable.lambda$run$0(PrivilegedExecutor.java:60)
Found expected frame: java.net.http/jdk.internal.net.http.PrivilegedExecutor$PrivilegedRunnable.lambda$run$0(PrivilegedExecutor.java:60)
test DependentPromiseActionsTest.testAsStringAsync("https://localhost:62490/https2/fixed/y", true, SemaphoreStaller): failure
java.lang.AssertionError
at DependentPromiseActionsTest.testDependent(DependentPromiseActionsTest.java:366)
at DependentPromiseActionsTest.testDependent(DependentPromiseActionsTest.java:336)
at DependentPromiseActionsTest.testAsStringAsync(DependentPromiseActionsTest.java:295)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:821)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1131)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:124)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
at org.testng.TestRunner.privateRun(TestRunner.java:773)
at org.testng.TestRunner.run(TestRunner.java:623)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:357)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:352)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:310)
at org.testng.SuiteRunner.run(SuiteRunner.java:259)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1185)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1110)
at org.testng.TestNG.run(TestNG.java:1018)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:94)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:54)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:564)
at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
at java.base/java.lang.Thread.run(Thread.java:831)

-----
Title: [JDK-8258483] [TESTBUG] gtest CollectorPolicy.young_scaled_initial_ergo_vm fails if heap is too small
Priority: P4
Type: Bug
Component: hotspot
Description: If gtests are started with a small heap, this gtest fails:
```
thomas@mainframe:/shared/projects/openjdk/jdk-jdk/output-fastdebug$ ./hotspot/variant-server/libjvm/gtest/gtestLauncher -Xmx128m  -jdk:./images/jdk   --gtest_filter=CollectorPolicy.young_scaled_initial_ergo_vm
Note: Google Test filter = CollectorPolicy.young_scaled_initial_ergo_vm
[==========] Running 1 test from 1 test case.
[----------] Global test environment set-up.
[----------] 1 test from CollectorPolicy
[ RUN      ] CollectorPolicy.young_scaled_initial_ergo_vm
[0,118s][warning][gc,ergo] Inconsistency between generation sizes and heap size, resizing the generations to fit the heap.
/shared/projects/openjdk/jdk-jdk/source/test/hotspot/gtest/gc/shared/test_collectorPolicy.cpp:124: Failure
Expected equality of these values:
expected
Which is: 34930688
NewSize
Which is: 54525952
/shared/projects/openjdk/jdk-jdk/source/test/hotspot/gtest/gc/shared/test_collectorPolicy.cpp:80: Failure
Expected: checker-execute() doesn't generate new fatal failures in the current thread.
Actual: it does.
[  FAILED  ] CollectorPolicy.young_scaled_initial_ergo_vm (0 ms)
[----------] 1 test from CollectorPolicy (119 ms total)
[----------] Global test environment tear-down
[==========] 1 test from 1 test case ran. (119 ms total)
[  PASSED  ] 0 tests.
[  FAILED  ] 1 test, listed below:
[  FAILED  ] CollectorPolicy.young_scaled_initial_ergo_vm
```
It would be nice if the test would just be ignored if it cannot be run under these circumstances.

-----
Title: [JDK-8267174] Many test files have the wrong Copyright header
Priority: P4
Type: Bug
Component: infrastructure
Description: There are approximately 580 test files in the jdk repo with some erroneous license text.
The extra text that must be removed from those test files is:
'''  Oracle designates this particular file as subject to the "Classpath" exception as provided by Oracle in the LICENSE file that accompanied this code. '''
To find those files, one may use the following query in the root of the open repo:
```
grep -rl '"Classpath" exception' * | grep "^test/"
```

-----
Title: [JDK-8270269] Desktop.browse method fails if earlier CoInitialize call as COINIT_MULTITHREADED
Priority: P3
Type: Bug
Component: client-libs
Description: ADDITIONAL SYSTEM INFORMATION :
Windows / Window 10/ JDK 16 and JDK 17ea
A DESCRIPTION OF THE PROBLEM :
Desktop.browse native peer implementation attempts to CoInitializeEx as COINIT_APARTMENTTHREADED and will fail if there has been a prior call (eg. via JNI)  to CoInitialize as COINIT_MULTITHREADED. This problem is new in JDK 16/17ea - see awt_Desktop.cpp:88 in JDK source for point of failure.
REGRESSION : Last worked in version 15
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Create a native /JNI call that calls CoInitializeEx(NULL, COINIT_MULTITHREADED) and call the native prior to calling Dekstop.getDesktop().browse(url).
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
URL will open in system assigned browser (JDK 15 and earlier)
ACTUAL -
Exception in thread "main" java.io.IOException: Failed to open https://www.google.com. Error message: CoInitializeEx() failed.
at java.desktop/sun.awt.windows.WDesktopPeer.ShellExecute(WDesktopPeer.java:115)
at java.desktop/sun.awt.windows.WDesktopPeer.browse(WDesktopPeer.java:101)
at java.desktop/java.awt.Desktop.browse(Desktop.java:530)
....
---------- BEGIN SOURCE ----------
// approximate example cpp and java since not sure what is expected for
// a native/java bug  test case
---- native ---
void Demo::initCom() {
HRESULT hr = CoInitializeEx(NULL, COINIT_MULTITHREADED);
if (hr != S_FALSE)
EXIT_ON_ERROR(hr);    // some sort of handling
}
-- java ---
public static void main(String [] args) throws URISyntaxException, IOException {
Demo.initCom();
Desktop desktop = Desktop.getDesktop();
desktop.browse(new URI("https://www.google.com"));
}
---------- END SOURCE ----------
CUSTOMER SUBMITTED WORKAROUND :
No workaround found.
FREQUENCY : always
OS: windows

-----
Title: [JDK-8276995] Bug in jdk.jfr.event.gc.collection.TestSystemGC
Priority: P4
Type: Bug
Component: hotspot
Description: A DESCRIPTION OF THE PROBLEM :
In jdk.jfr.event.gc.collection.TestSystemGC the following line is repeated 3 times:
Events.assertField(event1, "invokedConcurrent").isEqual(concurrent);
The 2nd and 3rd occurrences should check 'event2' and 'event3' instead of 'event1'.
OS: generic

-----
Title: [JDK-8279016] JFR Leak Profiler is broken with Shenandoah
Priority: P3
Type: Enhancement
Component: hotspot
Description: The JFR leak profiler associates an Edge* with an object by putting the Edge* into an array, and storing the index to the Edge* into the object's mark-word, and setting the lowest two bits of that mark-word.
However, in Shenandoah, a similar scheme is used to indicate forwarding objects: the lowest two bits in object's mark are set, and the reference to the forwarding object in the upper bits of the header. We may go through the load-reference-barrier of an object that has an associated Edge* in BFSClosure::do_oop(), which would decode the assumed forwarding pointer, get the index instead of the reference, and eventually crash, when trying to dereference anything from there.
Notice that JDK-8275415 changed the association scheme from full Edge* in the mark-word to the index, but the general problem was pre-existing.
As an aside, in Shenandoah, we distinguish forwarding pointers from JVMTI heap-walk 'marked' objects by checking for the upper mark-bits to be NULL. JFR breaks this scheme (which is rather brittle in itself) by putting the Edge* association in the mark-word too.
We may want to consider something similar to: https://github.com/openjdk/lilliput/pull/18
OS: generic

-----
Title: [JDK-8280991] [XWayland] No displayChanged event after setDisplayMode call
Priority: P3
Type: Bug
Component: client-libs
Description: After setDisplayMode call window gets scaled correctly to requested resolution, however root window does not receive ConfigureNotify event, so java is unaware that screen size has changed. So this is the reason of failure of following tests:
FAIL: java/awt/FullScreen/FullscreenWindowProps/FullscreenWindowProps.java
FAIL: java/awt/FullScreen/NoResizeEventOnDMChangeTest/NoResizeEventOnDMChangeTest.java
Root cause:
"""
This is using XRandR which is also an X11 only protocol. Similarly to point #1, Xwayland is not the display server in Wayland, it's just a Wayland client and the Wayland compositor is the actual display server.
As Wayland clients are not allowed to change the resolution in Wayland (this is by design, it's not an oversight), XRandR in Xwayland is just an emulation, mostly read-only, it doesn't actually change the resolution.
For legacy games which relied on XRandR to adjust the screen size to their capacity, Xwayland will emulate that using a viewport to scale the (fullscreen, unreparented) window so it appears as if the resolution was changed, as you noticed, but the actual screen size doesn't change and therefore the root window is not resized and hence won't get a configure notify.
Also worth noting that the XRandR emulation is per window/X11 client, whereas the root window is shared between all X11 clients, but maybe we could send a fake ConfigureNotify event to the given client, I would need to check if that's doable.
"""
This MR (https://gitlab.freedesktop.org/xorg/xserver/-/merge_requests/731) adds notification, however it has several issues:
There is no event when you are trying to change to native resolution from another.
XRRScreenChangeNotifyEvent always has native resolution reported. (we are not using it though)
It might be a minor one, but on X11 session there is no events reported if you are trying to change to the same resolution.
Reported as https://gitlab.freedesktop.org/xorg/xserver/-/issues/1305
OS: linux

-----
Title: [JDK-8281511] java/net/ipv6tests/UdpTest.java fails with checkTime failed
Priority: P4
Type: Bug
Component: core-libs
Description: the test2 scenario fails due to the calculated timeout of a receive being greater than the imposed quasi realtime upper bound.
Test2 starting
checkTime: got = 10699 start = 4000 end = 4000
----------System.err:(13/669)----------
java.lang.RuntimeException: checkTime failed: got 10699, expected between 4000 and 4000
at Tests.checkTime(Tests.java:164)
at Tests.checkTime(Tests.java:155)
at UdpTest.test2(UdpTest.java:147)
at UdpTest.main(UdpTest.java:88)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:577)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:312)
at java.base/java.lang.Thread.run(Thread.java:833)
OS: windows

-----
Title: [JDK-8282726] java/net/vthread/BlockingSocketOps.java timeout/hang intermittently on Windows
Priority: P4
Type: Bug
Component: core-libs
Description: The following tests timeout periodically, usually Windows Server 2016 and 2019 :
java/net/vthread/BlockingSocketOps.java
java/nio/channels/vthread/BlockingChannelOps.java
com/sun/jdi/BadHandshakeTest.java

-----
Title: [JDK-8286204] [Accessibility,macOS,VoiceOver] VoiceOver reads the spinner value 10 as 1 when user iterates to 10 for the first time on macOS
Priority: P3
Type: Bug
Component: client-libs
Description: Step to reproduce
-------------------------
1) Enable VoiceOver on the MacOS
2) Run the attached test. You will a Frame with spinner.
3) Press Up arrow to increase the vale of the spinner. As you press the Up arrow spinner value are increasing and Voice Over should read the value correctly. Once the value is increased to 10 VoiceOver reads the 10 as 1 for the first time and once again pressing the Up arrow for the second time Voice Over reads the value as 10.
If you see the same then the bug is reproduced.
I have attached the screen recording about this issue.
OS: os_x

-----
Title: [JDK-8286789] Test forceEarlyReturn002.java timed out
Priority: P4
Type: Bug
Component: core-svc
Description: Entire packet (11 bytes):
0000: 00 00 00 0b 00 00 00 36 80 00 00                  .......6...
Packet end
Checking reply packet header
Parsing reply packet:
Received signal from debugee: ready
Sending signal to debugee: quit
Waiting for debugee exits
Timeout refired 480 times
OS: windows

-----
Title: [JDK-8286875] ProgrammableUpcallHandler::on_entry/on_exit access thread fields from native
Priority: P4
Type: Bug
Component: core-libs
Description: ProgrammableUpcallHandler::on_entry modifies:
context-new_handles = JNIHandleBlock::allocate_block(thread);
thread-clear_pending_exception();
Before transitioning to Java. Which means there can be a concurrent safepoint/handshake.
ProgrammableUpcallHandler::on_exit modify and access same fields here:
JNIHandleBlock::release_block(context-new_handles, thread);
assert(!thread-has_pending_exception(), "Upcall can not throw an exception");
After transitioning back to native.
E.g. _free_handle_block, _pending_exception.
This have two issues:
- Is it safe today? I traced some code and FAICT it is.
- These fields are now only allowed to be modified in a safepoint/handshake if target thread is waiting for the safepoint/handshake or by the thread it self. (I.e. it is not enough that thread is safepoint safe, it must actively be waiting for the safepoint/handshake)
Is this a restriction that we want, and am I correct in saying that is safe?

-----
Title: [JDK-8294155] Exception thrown before awaitAndCheck hangs PassFailJFrame
Priority: P4
Type: Bug
Component: client-libs
Description: If an exception is thrown before awaitAndCheck is called, the test will hang eventually. Clicking the Pass/Fail buttons doesn't close the UI since it's inside awaitAndCheck. This needs to be addressed when redesigning the framework.

-----
Title: [JDK-8295804] javax/swing/JFileChooser/JFileChooserSetLocationTest.java failed with "setLocation() is not working properly"
Priority: P4
Type: Bug
Component: client-libs
Description: The following test failed in the JDK20 CI:
javax/swing/JFileChooser/JFileChooserSetLocationTest.java
Here's a snippet from the log file:
#section:main
----------messages:(7/293)----------
command: main JFileChooserSetLocationTest
reason: User specified action: run main JFileChooserSetLocationTest
started: Fri Oct 21 16:14:49 UTC 2022
Mode: othervm
Additional options from @modules: --add-modules java.desktop
finished: Fri Oct 21 16:14:59 UTC 2022
elapsed time (seconds): 9.573
----------configuration:(3/40)----------
Boot Layer
add modules: java.desktop
----------System.out:(28/929)----------
Testing javax.swing.plaf.metal.MetalLookAndFeel
createDialog and set location to (75, 75)
verify 75==75; 75==75
Test passed
createDialog and set location to (512, 217)
verify 512==507; 217==217
Test passed
createDialog and set location to (512, 217)
verify 512==507; 217==217
Test passed
Test Passed, All cases passed for javax.swing.plaf.metal.MetalLookAndFeel
Testing javax.swing.plaf.nimbus.NimbusLookAndFeel
createDialog and set location to (75, 75)
verify 75==75; 75==75
Test passed
createDialog and set location to (512, 218)
verify 512==512; 218==218
Test passed
createDialog and set location to (512, 218)
verify 512==512; 218==218
Test passed
Test Passed, All cases passed for javax.swing.plaf.nimbus.NimbusLookAndFeel
Testing com.sun.java.swing.plaf.motif.MotifLookAndFeel
createDialog and set location to (75, 75)
verify 75==75; 75==75
Test passed
createDialog and set location to (512, 222)
verify 512==512; 222==211
----------System.err:(12/812)----------
java.lang.RuntimeException: Test Failed, setLocation() is not working properly
at JFileChooserSetLocationTest.verify(JFileChooserSetLocationTest.java:184)
at JFileChooserSetLocationTest.main(JFileChooserSetLocationTest.java:136)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:125)
at java.base/java.lang.Thread.run(Thread.java:1591)
JavaTest Message: Test threw exception: java.lang.RuntimeException: Test Failed, setLocation() is not working properly
JavaTest Message: shutting down test
STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Test Failed, setLocation() is not working properly
----------rerun:(43/5324)*----------
There is another unresolved bug for this same test, but that bug is
tracking a different failure mode:
JDK-8289895 JFileChooserSetLocationTest.java always fails in a single Windows machine
OS: linux

-----
Title: [JDK-8297692] Avoid sending per-region GCPhaseParallel JFR events in G1ScanCollectionSetRegionClosure
Priority: P4
Type: Enhancement
Component: hotspot
Description: In G1ScanCollectionSetRegionClosure::do_heap_region(...) we send JFR events on a per-region basis which lead to a lot of events. The reason we don't send the event for the whole iteration is because the closure includes two phases: OptScanHR and CodeRoots/OptCodeRoots.
We can solve this in at least two different ways, we could add a new phase that is named to signal it does both things or we could create a new event that can include two different durations for the two included phases.

-----
Title: [JDK-8303770] Remove Baltimore root certificate expiring in May 2025
Priority: P3
Type: Task
Component: security-libs
Description: baltimorecybertrustca [jdk]
Expiry Date: 2025-05-12
CN=Baltimore CyberTrust Root, OU=CyberTrust, O=Baltimore, C=IE

-----
Title: [JDK-8305010] Test vmTestbase/nsk/jvmti/scenarios/sampling/SP05/sp05t003/TestDescription.java timed out: thread not suspended
Priority: P4
Type: Bug
Component: hotspot
Description: ----------System.out:(9/534)----------
The following fake exception stacktrace is for failure analysis.
nsk.share.Fake_Exception_for_RULE_Creation: (sp05t003.cpp:220) jvmti-ResumeThread(threadsList[i])
at nsk_lvcomplain(nsk_tools.cpp:172)
# ERROR: sp05t003.cpp, 220: jvmti-ResumeThread(threadsList[i])
#   jvmti error: code=13, name=JVMTI_ERROR_THREAD_NOT_SUSPENDED
# ERROR: agent_tools.cpp, 324: No status sync occured for timeout: 300000 ms
# ERROR: sp05t003.cpp, 195: nsk_jvmti_waitForSync(timeout)
#   verified assertion is FALSE
Timeout refired 480 times
OS: generic

-----
Title: [JDK-8307318] Test serviceability/sa/ClhsdbCDSJstackPrintAll.java failed: ArrayIndexOutOfBoundsException
Priority: P3
Type: Bug
Component: hotspot
Description: stderr: [Error: java.lang.ArrayIndexOutOfBoundsException: -1 2
java.lang.ArrayIndexOutOfBoundsException: -1 2
at jdk.hotspot.agent/sun.jvm.hotspot.oops.ResolvedIndyArray.getAt(ResolvedIndyArray.java:60)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.ConstantPoolCache.getIndyEntryAt(ConstantPoolCache.java:91)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.ConstantPool.implNameAndTypeRefIndexAt(ConstantPool.java:315)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.ConstantPool.implGetSignatureRefAt(ConstantPool.java:288)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.ConstantPool.getSignatureRefAt(ConstantPool.java:280)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.GenerateOopMap.doMethod(GenerateOopMap.java:1730)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.GenerateOopMap.interp1(GenerateOopMap.java:1385)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.GenerateOopMap.interpBB(GenerateOopMap.java:802)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.GenerateOopMap.interpAll(GenerateOopMap.java:1108)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.GenerateOopMap.doInterpretation(GenerateOopMap.java:981)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.GenerateOopMap.computeMap(GenerateOopMap.java:2198)
at jdk.hotspot.agent/sun.jvm.hotspot.interpreter.OopMapForCacheEntry.computeMap(OopMapForCacheEntry.java:80)
at jdk.hotspot.agent/sun.jvm.hotspot.interpreter.OopMapCacheEntry.fill(OopMapCacheEntry.java:53)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.Method.getMaskFor(Method.java:257)
at jdk.hotspot.agent/sun.jvm.hotspot.runtime.InterpretedVFrame.getLocals(InterpretedVFrame.java:53)
at jdk.hotspot.agent/sun.jvm.hotspot.ui.classbrowser.HTMLGenerator.genHTMLForJavaStackTrace(HTMLGenerator.java:1936)
at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor$45.doit(CommandProcessor.java:1660)
at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.executeCommand(CommandProcessor.java:2212)
at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.executeCommand(CommandProcessor.java:2182)
at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.run(CommandProcessor.java:2053)
at jdk.hotspot.agent/sun.jvm.hotspot.CLHSDB.run(CLHSDB.java:112)
at jdk.hotspot.agent/sun.jvm.hotspot.CLHSDB.main(CLHSDB.java:44)
at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.runCLHSDB(SALauncher.java:281)
at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.main(SALauncher.java:500)

-----
Title: [JDK-8307824] Clean up Finalizable.java and finalize terminology in vmTestbase/nsk/share
Priority: P4
Type: Enhancement
Component: hotspot
Description: These test used finalize() with classes Finalizable/Finalizer/FinalzableObject and the method finalizeAtExit().
There is no longer finalize(), and these classes should be renamed.

-----
Title: [JDK-8308033] The jcmd thread dump related tests should test virtual threads
Priority: P4
Type: Bug
Component: core-svc
Description: There are a few jcmd tests that verify stack dumps. They fail with the virtual thread test factory because virtual threads are not included in stack dumps. Need to fix them when jcmd has corresponding options, or avoid running them with virtual threads.
Tests:
sun/tools/jcmd/JcmdOutputEncodingTest.java
serviceability/dcmd/thread/PrintConcurrentLocksTest.java
serviceability/dcmd/thread/PrintTest.java
serviceability/dcmd/thread/ThreadDumpToFileTest.java
+

-----
Title: [JDK-8308966] Add intrinsic for float/double modulo for x86 AVX2 and AVX512
Priority: P4
Type: Enhancement
Component: hotspot
Description: Adding an intrinsic for float/double modulus operations for x86.  This addresses a performance degradation and removes dependence on x87 floating point for platforms that support AVX.
OS: generic

-----
Title: [JDK-8309667] TLS handshake fails because of ConcurrentModificationException in PKCS12KeyStore.engineGetEntry
Priority: P4
Type: Bug
Component: security-libs
Description: Many HTTPClient tests are occasionally failing with the following stack trace:
javax.net.ssl.SSLHandshakeException: No available authentication scheme
at java.base/sun.security.ssl.Alert.createSSLException(Alert.java:130)
at java.base/sun.security.ssl.Alert.createSSLException(Alert.java:117)
at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:365)
at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:321)
at java.base/sun.security.ssl.TransportContext.fatal(TransportContext.java:312)
at java.base/sun.security.ssl.CertificateMessage$T13CertificateProducer.onProduceCertificate(CertificateMessage.java:967)
at java.base/sun.security.ssl.CertificateMessage$T13CertificateProducer.produce(CertificateMessage.java:956)
at java.base/sun.security.ssl.SSLHandshake.produce(SSLHandshake.java:437)
at java.base/sun.security.ssl.ClientHello$T13ClientHelloConsumer.goServerHello(ClientHello.java:1245)
at java.base/sun.security.ssl.ClientHello$T13ClientHelloConsumer.consume(ClientHello.java:1181)
at java.base/sun.security.ssl.ClientHello$ClientHelloConsumer.onClientHello(ClientHello.java:839)
at java.base/sun.security.ssl.ClientHello$ClientHelloConsumer.consume(ClientHello.java:800)
at java.base/sun.security.ssl.SSLHandshake.consume(SSLHandshake.java:393)
at java.base/sun.security.ssl.HandshakeContext.dispatch(HandshakeContext.java:476)
at java.base/sun.security.ssl.HandshakeContext.dispatch(HandshakeContext.java:447)
at java.base/sun.security.ssl.TransportContext.dispatch(TransportContext.java:201)
at java.base/sun.security.ssl.SSLTransport.decode(SSLTransport.java:172)
at java.base/sun.security.ssl.SSLSocketImpl.decode(SSLSocketImpl.java:1506)
at java.base/sun.security.ssl.SSLSocketImpl.readHandshakeRecord(SSLSocketImpl.java:1421)
at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:455)
at java.base/sun.security.ssl.SSLSocketImpl.startHandshake(SSLSocketImpl.java:426)
at jdk.httpclient.test.lib.http2.Http2TestServerConnection.handshake(Http2TestServerConnection.java:317)
at jdk.httpclient.test.lib.http2.Http2TestServerConnection.(Http2TestServerConnection.java:165)
at jdk.httpclient.test.lib.http2.Http2TestServer.createConnection(Http2TestServer.java:389)
at jdk.httpclient.test.lib.http2.Http2TestServer$AcceptedConnection.startConnection(Http2TestServer.java:306)
The failing tests include:
java/net/httpclient/ManyRequests.java
java/net/httpclient/ManyRequests2.java
java/net/httpclient/LargeResponseTest.java
Additional logging revealed that the handshake failures were caused by this exception:
java.util.ConcurrentModificationException
at java.base/java.util.HashMap$HashIterator.nextNode(HashMap.java:1605)
at java.base/java.util.HashMap$KeyIterator.next(HashMap.java:1628)
at java.base/java.util.AbstractCollection.addAll(AbstractCollection.java:337)
at java.base/java.util.HashSet.(HashSet.java:121)
at java.base/java.security.KeyStore$PrivateKeyEntry.(KeyStore.java:569)
at java.base/sun.security.pkcs12.PKCS12KeyStore.engineGetEntry(PKCS12KeyStore.java:1338)
at java.base/sun.security.util.KeyStoreDelegator.engineGetEntry(KeyStoreDelegator.java:174)
at java.base/java.security.KeyStore.getEntry(KeyStore.java:1576)
at java.base/sun.security.ssl.X509KeyManagerImpl.getEntry(X509KeyManagerImpl.java:271)
at java.base/sun.security.ssl.X509KeyManagerImpl.getPrivateKey(X509KeyManagerImpl.java:117)
at java.base/sun.security.ssl.X509Authentication.createServerPossession(X509Authentication.java:300)
at java.base/sun.security.ssl.X509Authentication.createPossession(X509Authentication.java:195)
at java.base/sun.security.ssl.CertificateMessage$T13CertificateProducer.choosePossession(CertificateMessage.java:1056)
at java.base/sun.security.ssl.CertificateMessage$T13CertificateProducer.onProduceCertificate(CertificateMessage.java:965)
which in turn is caused by PKCS12KeyStore.getAttributes updating the same HashSet over and over again in multiple threads.

-----
Title: [JDK-8309841] Jarsigner should print a warning if an entry is removed
Priority: P3
Type: Enhancement
Component: security-libs
Description: If an entry is removed after a JAR file is signed, running `jarsigner -verify` on the file does not show any error info.

-----
Title: [JDK-8309978] [x64] Fix useless padding
Priority: P4
Type: Enhancement
Component: hotspot
Description: Due to typo in IntelJccErratum::compute_padding() useless padding could be generated:
030     B2: #   out( B4 B3 )
OS: generic

-----
Title: [JDK-8310066] Improve test coverage for JVMTI GetThreadState on carrier and mounted vthread
Priority: P4
Type: Enhancement
Component: hotspot
Description: This is follow-up for JDK-8307153/JDK-8309612
Current GetThreadState test coverage for carrier thread + mounted virtual thread is limited -  serviceability/jvmti/vthread/ThreadStateTest tests only JVMTI_THREAD_STATE_RUNNABLE state
Need to improve the test (or implement new one) to test other states, including "suspended" and "interrupted" bits (it's unclear if "interrupted" makes sense for carrier thread)
OS: generic

-----
Title: [JDK-8310525] DynamicLauncher for JDP test needs to try harder to find a free port
Priority: P4
Type: Enhancement
Component: core-svc
Description: test/jdk/sun/management/jdp/DynamicLauncher.java uses Utils.getFreePort() to find a free port for JMX.  It limits itself to 3 attempts.  This is not always enough, and the test fails.
Some other tests may simply pick a port number, and increment it and keep trying even hundreds of times.

-----
Title: [JDK-8310643] Misformatted copyright messages in FFM
Priority: P5
Type: Bug
Component: core-libs
Description: Many of the copyright messages in the FFM API and implementation classes are not well formatted. We should have the same messages in all files. This includes test files as well.

-----
Title: [JDK-8312246] NPE when HSDB visits bad oop
Priority: P4
Type: Bug
Component: hotspot
Description: During investigation of a customer core file with graphic SA, it printed in stack memory:
````
Error while performing oopsDo for frame sp: 0x00007f2c602378f0, unextendedSP: 0x00007f2c602378f0, fp: 0x00007f2c60237938, pc: 0x00007f2c47e2b88a
java.lang.NullPointerException: Cannot invoke "sun.jvm.hotspot.gc.g1.HeapRegion.isFree()" because "region" is null
at jdk.hotspot.agent/sun.jvm.hotspot.HSDB$34$1.addAnnotation(HSDB.java:1099)
at jdk.hotspot.agent/sun.jvm.hotspot.HSDB$34$1.visitAddress(HSDB.java:1059)
at jdk.hotspot.agent/sun.jvm.hotspot.runtime.InterpreterFrameClosure.offsetDo(Frame.java:675)
at jdk.hotspot.agent/sun.jvm.hotspot.interpreter.OopMapCacheEntry.iterateOop(OopMapCacheEntry.java:38)
at jdk.hotspot.agent/sun.jvm.hotspot.runtime.Frame.oopsInterpretedDo(Frame.java:591)
at jdk.hotspot.agent/sun.jvm.hotspot.runtime.Frame.oopsDo(Frame.java:442)
at jdk.hotspot.agent/sun.jvm.hotspot.HSDB$34.run(HSDB.java:1052)
at jdk.hotspot.agent/sun.jvm.hotspot.utilities.WorkerThread$MainLoop.run(WorkerThread.java:70)
at java.base/java.lang.Thread.run(Thread.java:1570
﻿﻿````
The reproducer is attached.
1. Compile and launch it with G1 enabled.
2. Attach HSDB
3. Select "main" thread
4. Click "Stack Memory" icon on "Java Threads" toolbar.
The fix is trivial (will create PR soon):
diff --git a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/HSDB.java b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/HSDB.java
index 9cc51934d08..e59c3da379e 100644
--- a/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/HSDB.java
+++ b/src/jdk.hotspot.agent/share/classes/sun/jvm/hotspot/HSDB.java
@@ -1096,7 +1096,9 @@ public class HSDB implements ObjectHistogramPanel.Listener, SAListener {
G1CollectedHeap heap = (G1CollectedHeap)collHeap;
HeapRegion region = heap.hrm().getByAddress(handle);
-                          if (region.isFree()) {
+                          if (region == null) {
+                              anno = "NOTG1REGION";
+                          } else if (region.isFree()) {
anno = "Free ";
bad = false;
} else if (region.isYoung()) {

-----
Title: [JDK-8312475] org.jline.util.PumpReader signed byte problem
Priority: P4
Type: Bug
Component: tools
Description: SonarCloud reports a problem in PumpReader here:
https://github.com/openjdk/jdk/blob/354c6605e32790ca421869636d8bf5456fc51717/src/jdk.internal.le/share/classes/jdk/internal/org/jline/utils/PumpReader.java#L417
@Override
public int read() throws IOException {
if (!buffer.hasRemaining() && !readUsingBuffer()) {
return EOF;
}
return buffer.get(); //

-----
Title: [JDK-8313290] Misleading exception message from STS.Subtask::get when task forked after shutdown
Priority: P4
Type: Bug
Component: core-libs
Description: ADDITIONAL SYSTEM INFORMATION :
Ubuntu 22.04
openjdk 21-ea 2023-09-19
OpenJDK Runtime Environment (build 21-ea+32-2482)
OpenJDK 64-Bit Server VM (build 21-ea+32-2482, mixed mode, sharing)
A DESCRIPTION OF THE PROBLEM :
When using a StructuredTaskScope after shutdown, I get a misleading error message when calling Subtask.get(): "IllegalStateException: Owner did not join after forking subtasks".
See example code below. In the code, join() is called right before Subtask.get(), so the error message is clearly not incorrect (in addition to not being helpful).
I'd expect an exception that indicates that the StructuredTaskScope is already shutdown.
Obviously, this is a rather unlikely usage pattern (shutdown() + fork()), but there might be more meaningful cases where this occurs, and then a better exception message might be helpful.
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
See example code.
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
An exception that indicates that the StructuredTaskScope is shutdown.
ACTUAL -
Exception in thread "main" java.lang.IllegalStateException: Owner did not join after forking subtasks
at java.base/java.util.concurrent.StructuredTaskScope.newIllegalStateExceptionNoJoin(StructuredTaskScope.java:439)
at java.base/java.util.concurrent.StructuredTaskScope.ensureJoinedIfOwner(StructuredTaskScope.java:477)
at java.base/java.util.concurrent.StructuredTaskScope$SubtaskImpl.get(StructuredTaskScope.java:927)
at com.example.Test.main(Test.java:17)
---------- BEGIN SOURCE ----------
import java.util.concurrent.ExecutionException;
import java.util.concurrent.StructuredTaskScope;
public class Test {
public static void main(String[] args) {
try (var scope = new StructuredTaskScope.ShutdownOnFailure()) {
scope.shutdown();
StructuredTaskScope.Subtask subtask = scope.fork(() - "result");
scope.join().throwIfFailed();
subtask.get(); // IllegalStateException: Owner did not join after forking subtasks
} catch (InterruptedException | ExecutionException e) {
throw new RuntimeException(e);
}
}
}
---------- END SOURCE ----------
FREQUENCY : always
OS: generic

-----
Title: [JDK-8313430] [JVMCI] fatal error: Never compilable: in JVMCI shutdown
Priority: P4
Type: Bug
Component: hotspot
Description: VM shutdown involves calling Java code which can schedule further compilations by the CompileBroker. With UseJVMCICompiler, all compilations started once VM shutdown has begun are abandoned since they are unnecessary and can even delay VM shutdown from completing.
The implementation of -XX:+AbortVMOnCompilationFailure should ignore such abandoned compilations to prevent crashes such as:
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (compileBroker.cpp:2096), pid=303361, tid=303384
#  fatal error: Never compilable: in JVMCI shutdown
#
# JRE version: Java(TM) SE Runtime Environment (21.0) (build 21-internal-LTS-2023-07-18-1316304.gergo...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (21-internal-LTS-2023-07-18-1316304.gergo..., mixed mode, sharing, tiered, jvmci, jvmci compiler, compressed oops, compressed class ptrs, g1 gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0x6452d9]  CompileBroker::handle_compile_error(CompilerThread*, CompileTask*, ciEnv*, int, char const*) [clone .part.0]+0x29
#
# Core dump will be written. Default location: Core dumps may be processed with "/usr/share/apport/apport -p%p -s%s -c%c -d%d -P%P -u%u -g%g -- %E" (or dumping to /home/gergo/galahad-ee/galahad-ee/build/linux-x64/test-support/jtreg_open_test_hotspot_jtreg_compiler_intrinsics_TestRotate_java/scratch/core.303361)
#

-----
Title: [JDK-8313654] Test WaitNotifySuspendedVThreadTest.java timed out
Priority: P4
Type: Bug
Component: hotspot
Description: Possibly a different manifestation of JDK-8313570
----------System.out:(9/354)----------
setting event callbacks ...
setBreakpoint: started
setBreakpoint: finished
Main thread: suspending virtual and carrier threads
Main thread: calling monitor.notifyAll()
Main thread: resuming virtual thread
Main thread: before monitor_completed.wait()
Breakpoint: before monitor.wait(): methBreakpoint in virtual thread
Timeout refired 1200 times
----------System.err:(0/0)----------
----------rerun:(51/7397)*----------

-----
Title: [JDK-8314056] Remove runtime platform check from frem/drem
Priority: P4
Type: Enhancement
Component: hotspot
Description: This fix adds about 4% performance by removing the runtime platform type check and moving code to stubGenerator.
OS: generic

-----
Title: [JDK-8314136] Test java/net/httpclient/CancelRequestTest.java failed: WARNING: tracker for HttpClientImpl(42) has outstanding operations
Priority: P4
Type: Bug
Component: core-libs
Description: step [0] found in HttpClientImpl(41) in 245 ms
Sending: https://127.0.0.1:52305/https1/x/new/interruptThread/post/req=1
[22 s, 73 ms, 871125 ns]  Interrupting main from: Thread[#81,pool-1-thread-7,5,MainThreadGroup] (https://127.0.0.1:52305/https1/x/new/interruptThread/post/req=1)
https://127.0.0.1:52305/https1/x/new/interruptThread/post/req=1: got result or exception
https://127.0.0.1:52305/https1/x/new/interruptThread/post/req=1: Got expected exception: java.lang.InterruptedException
next iteration
Waiting for HTTP operations to terminate...
gracedelay: 1000 ms, iterations: 100, wait/iteration: 10ms
WARNING: tracker for HttpClientImpl(42) has outstanding operations:
Pending HTTP Requests: 1
Pending HTTP/1.1 operations: 1
Pending HTTP/2 streams: 0
Pending WebSocket operations: 0
Pending TCP connections: 0
Pending Subscribers: 0
Total pending operations: 1
Facade referenced: true
Selector alive: true
AssertionError: Found some subscribers for testPostInterrupt(https://127.0.0.1:52305/https1/x/new/interruptThread/post/req=1)
step [1] in HttpClientImpl(42) after 100 iterations and 7274 ms, waited 1000 ms
test CancelRequestTest.testPostInterrupt("https://127.0.0.1:52305/https1/x/new/interruptThread", false): failure
java.lang.AssertionError: WARNING: tracker for HttpClientImpl(42) has outstanding operations:
Pending HTTP Requests: 1
Pending HTTP/1.1 operations: 1
Pending HTTP/2 streams: 0
Pending WebSocket operations: 0
Pending TCP connections: 0
Pending Subscribers: 0
Total pending operations: 1
Facade referenced: true
Selector alive: true
at ReferenceTracker.check(ReferenceTracker.java:251)
at CancelRequestTest.testPostInterrupt(CancelRequestTest.java:579)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:102)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:58)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1570)

-----
Title: [JDK-8314236] Overflow in Collections.rotate
Priority: P4
Type: Bug
Component: core-libs
Description: An integer overflow/wraparound in Collections.rotate() can lead to IndexOutOfBoundsException. Reproducer:
// need something like -Xmx16g
Collections.rotate(new ArrayList(Collections.nCopies((1https://github.com/openjdk/jdk/pull/15270

-----
Title: [JDK-8314319] LogCompilation doesn't reset lateInlining when it encounters a failure.
Priority: P4
Type: Bug
Component: hotspot
Description: here is the stacktrace.
➜  LogCompilation git:(master) ✗ java -jar ./target/LogCompilation-1.0-SNAPSHOT.jar jit.xml
java.lang.InternalError: Unexpected method mismatch during late inlining (method at call site: java.util.LinkedHashMap$LinkedHashIterator::hasNext (13 bytes), method being parsed: java.util.AbstractCollection::addAll (42 bytes)) at 29018:56
at com.sun.hotspot.tools.compiler.LogParser.reportInternalError(LogParser.java:643)
at com.sun.hotspot.tools.compiler.LogParser.reportInternalError(LogParser.java:623)
at com.sun.hotspot.tools.compiler.LogParser.startElement(LogParser.java:1224)
at java.xml/com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.startElement(AbstractSAXParser.java:518)
at java.xml/com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanStartElement(XMLDocumentFragmentScannerImpl.java:1407)
at java.xml/com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2726)
at java.xml/com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:605)
at java.xml/com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:542)
at java.xml/com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:889)
at java.xml/com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:825)
at java.xml/com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:141)
at java.xml/com.sun.org.apache.xerces.internal.parsers.AbstractSAXParser.parse(AbstractSAXParser.java:1224)
at java.xml/com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl$JAXPSAXParser.parse(SAXParserImpl.java:637)
at java.xml/com.sun.org.apache.xerces.internal.jaxp.SAXParserImpl.parse(SAXParserImpl.java:326)
at com.sun.hotspot.tools.compiler.LogParser.parse(LogParser.java:706)
at com.sun.hotspot.tools.compiler.LogParser.parse(LogParser.java:684)
at com.sun.hotspot.tools.compiler.LogCompilation.main(LogCompilation.java:145)
Exception in thread "main" java.lang.InternalError: only nmethods should have a null compilation, here's a class com.sun.hotspot.tools.compiler.UncommonTrapEvent
at com.sun.hotspot.tools.compiler.LogParser.parse(LogParser.java:723)
at com.sun.hotspot.tools.compiler.LogParser.parse(LogParser.java:684)
at com.sun.hotspot.tools.compiler.LogCompilation.main(LogCompilation.java:145)
OS: generic

-----
Title: [JDK-8314840] 3 gc/epsilon tests ignore external vm options
Priority: P4
Type: Sub-task
Component: hotspot
Description: Tests
gc/epsilon/TestDieDefault.java
gc/epsilon/TestDieWithHeapDump.java
gc/epsilon/TestDieWithOnError.java
ignore vm flags and should be fixed or marked as flagless.

-----
Title: [JDK-8314842] zgc/genzgc tests ignore vm flags
Priority: P4
Type: Sub-task
Component: hotspot
Description: Tests
gc/z/TestSmallHeap.java
gc/z/TestPageCacheFlush.java
gc/z/TestAllocateHeapAt.java
gc/x/TestSmallHeap.java
gc/x/TestPageCacheFlush.java
gc/x/TestAllocateHeapAt.java
silently ignore vm flags.
Although, they have requires ZGC/genZGC they still ignores any other flags

-----
Title: [JDK-8315128] jdk/jfr/event/runtime/TestResidentSetSizeEvent.java fails with "The size should be less than or equal to peak"
Priority: P4
Type: Bug
Component: hotspot
Description: The following test failed in the JDK22 CI:
jdk/jfr/event/runtime/TestResidentSetSizeEvent.java
Here's a snippet from the log file:
#section:main
----------messages:(7/432)----------
command: main -Xms16m -Xmx128m -Xlog:gc jdk.jfr.event.runtime.TestResidentSetSizeEvent true
reason: User specified action: run main/othervm -Xms16m -Xmx128m -Xlog:gc jdk.jfr.event.runtime.TestResidentSetSizeEvent true
started: Mon Aug 28 14:18:39 GMT 2023
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules jdk.jfr,jdk.management
finished: Mon Aug 28 14:18:41 GMT 2023
elapsed time (seconds): 2.128
----------configuration:(3/50)----------
Boot Layer
add modules: jdk.jfr jdk.management
----------System.out:(30/2293)----------
[0.011s][info][gc] Using G1
[0.774s][info][gc] GC(0) Pause Young (Normal) (G1 Evacuation Pause) 9M-2M(18M) 4.672ms
[1.103s][info][gc] GC(1) Pause Young (Normal) (G1 Evacuation Pause) 8M-3M(18M) 3.873ms
[1.284s][info][gc] GC(2) Pause Young (Normal) (G1 Evacuation Pause) 10M-5M(18M) 1.756ms
[1.305s][info][gc] GC(3) Pause Young (Normal) (G1 Evacuation Pause) 10M-10M(18M) 2.698ms
[1.318s][info][gc] GC(4) Pause Young (Concurrent Start) (G1 Evacuation Pause) 11M-12M(18M) 1.016ms
[1.318s][info][gc] GC(5) Concurrent Mark Cycle
[1.326s][info][gc] GC(5) Pause Remark 12M-12M(24M) 1.409ms
[1.328s][info][gc] GC(6) Pause Young (Normal) (G1 Evacuation Pause) 13M-13M(24M) 1.308ms
[1.329s][info][gc] GC(5) Pause Cleanup 13M-13M(24M) 0.056ms
[1.330s][info][gc] GC(5) Concurrent Mark Cycle 11.899ms
[1.333s][info][gc] GC(7) Pause Young (Prepare Mixed) (G1 Evacuation Pause) 15M-15M(24M) 1.235ms
[1.335s][info][gc] GC(8) Pause Young (Mixed) (G1 Evacuation Pause) 16M-16M(49M) 1.144ms
[1.349s][info][gc] GC(9) Pause Young (Normal) (G1 Evacuation Pause) 26M-26M(49M) 4.119ms
[1.355s][info][gc] GC(10) Pause Young (Concurrent Start) (G1 Evacuation Pause) 32M-33M(49M) 3.738ms
[1.355s][info][gc] GC(11) Concurrent Mark Cycle
[1.381s][info][gc] GC(12) Pause Young (Normal) (G1 Evacuation Pause) 37M-38M(49M) 2.746ms
[1.383s][info][gc] GC(13) Pause Young (Normal) (G1 Evacuation Pause) 40M-40M(81M) 1.430ms
[1.400s][info][gc] GC(11) Pause Remark 51M-51M(87M) 3.852ms
[1.415s][info][gc] GC(14) Pause Young (Normal) (G1 Evacuation Pause) 51M-52M(87M) 4.638ms
[1.428s][info][gc] GC(11) Pause Cleanup 54M-54M(87M) 0.283ms
[1.429s][info][gc] GC(11) Concurrent Mark Cycle 74.393ms
[1.438s][info][gc] GC(15) Pause Young (Prepare Mixed) (G1 Evacuation Pause) 62M-62M(87M) 5.704ms
[1.456s][info][gc] GC(16) Pause Young (Mixed) (G1 Evacuation Pause) 69M-69M(87M) 4.723ms
[1.459s][info][gc] GC(17) Pause Young (Concurrent Start) (G1 Evacuation Pause) 73M-74M(87M) 2.501ms
[1.459s][info][gc] GC(18) Concurrent Mark Cycle
[1.488s][info][gc] GC(18) Pause Remark 75M-75M(127M) 1.388ms
[1.513s][info][gc] GC(18) Pause Cleanup 75M-75M(127M) 0.102ms
[1.524s][info][gc] GC(18) Concurrent Mark Cycle 64.673ms
[1.660s][info][gc] GC(19) Pause Young (Prepare Mixed) (G1 Evacuation Pause) 77M-75M(127M) 2.872ms
----------System.err:(14/1064)----------
java.lang.RuntimeException: The size should be less than or equal to peak: expected that 88915968
OS: os_x

-----
Title: [JDK-8315484] java/awt/dnd/RejectDragDropActionTest.java timed out
Priority: P4
Type: Bug
Component: client-libs
Description: The following test timed out in the JDK22 CI:
java/awt/dnd/RejectDragDropActionTest.java
Here's a snippet from the log file:
#section:main
----------messages:(9/348)----------
command: main RejectDragDropActionTest
reason: User specified action: run main RejectDragDropActionTest
started: Thu Aug 31 19:09:45 UTC 2023
Mode: othervm
Additional options from @modules: --add-modules java.desktop
Timeout information:
--- Timeout information end.
finished: Thu Aug 31 19:15:17 UTC 2023
elapsed time (seconds): 332.739
----------configuration:(3/43)----------
Boot Layer
add modules: java.desktop
----------System.out:(1/37)----------
Timeout signalled after 240 seconds
----------System.err:(1/16)----------
STATUS:Passed.
----------rerun:(50/5513)*----------
result: Error. Program `c:\ade\mesos\work_dir\jib-master\install\jdk-22+14-966\windows-x64.jdk\jdk-22\bin\java' timed out (timeout set to 240000ms, elapsed time including timeout handling was 332717ms).
Default timeout value of 120 seconds/2 minutes with a default timeoutFactor
of 2 means a total timeout of 240 seconds/4 minutes. The run executed
for 332.739 seconds. The test did manage to pass while the timeout handler
was running. I think this test needs a slightly longer default timeout value.
Perhaps use timeout=180.
OS: windows

-----
Title: [JDK-8315669] Open source several Swing PopupMenu related tests
Priority: P4
Type: Bug
Component: client-libs
Description: Open source these Swing PopupMenu related tests:
javax/swing/JPopupMenu/4236750/bug4236750.java
javax/swing/JPopupMenu/4321273/bug4321273.java
javax/swing/JPopupMenu/4711693/bug4711693.java
javax/swing/JPopupMenu/4962731/bug4962731.java
javax/swing/JPopupMenu/4966109/bug4966109.java
javax/swing/JPopupMenu/5091257/bug5091257.java
OS: generic

-----
Title: [JDK-8315742] Open source several Swing Scroll related tests
Priority: P4
Type: Bug
Component: client-libs
Description: Open source these Swing Scroll related tests:
javax/swing/JScrollBar/4495822/bug4495822.java
javax/swing/JScrollBar/4696826/bug4696826.java
javax/swing/JScrollBar/4842792/bug4842792.java
javax/swing/JScrollPane/4247092/bug4247092.java
javax/swing/JScrollPane/4264640/bug4264640.java
javax/swing/JScrollPane/4467063/bug4467063.java
OS: generic

-----
Title: [JDK-8315827] Kitchensink.java and RenaissanceStressTest.java  time out with jvmti module errors
Priority: P2
Type: Bug
Component: hotspot
Description: The following test failed in the JDK22 CI:
applications/kitchensink/Kitchensink.java
Here's a snippet from the log file:
[2023-09-06T21:41:51.523634106Z] Gathering output for process 2528074
[2023-09-06T21:41:57.709835799Z] Waiting for completion for process 2528074
[2023-09-06T21:41:57.710031639Z] Waiting for completion finished for process 2528074
[stress.process.out] [512.838s][error][jvmti] _VTMS_transition_count: 1
[stress.process.out]
[stress.process.out] [512.838s][error][jvmti] _VTMS_transition_disable_for_one_count: 0
[stress.process.out]
[stress.process.out] [512.838s][error][jvmti] _VTMS_transition_disable_for_all_count: 1
[stress.process.out]
[stress.process.out]
[stress.process.out] [512.839s][error][jvmti] main(main) exiting: 0 is_susp: 0 is_thread_susp: 0 is_vthread_susp: 0 is_VTMS_transition_disabler: 0, is_in_VTMS_transition = 0
[stress.process.out]
[stress.process.out] [512.839s][error][jvmti]   void java.lang.Object.wait0(long):-1
[stress.process.out] [512.839s][error][jvmti]   void java.lang.Object.wait(long):375
[stress.process.out] [512.839s][error][jvmti]   void java.lang.Thread.join(long):2045
[stress.process.out] [512.839s][error][jvmti]   void java.lang.Thread.join():2121
[stress.process.out] [512.839s][error][jvmti]   void applications.kitchensink.process.stress.modules.StressModule.joinModule():278
[stress.process.out] [512.839s][error][jvmti]   void applications.kitchensink.process.stress.modules.StressModule.allJoin():349
[stress.process.out] [512.839s][error][jvmti]   void applications.kitchensink.process.stress.Main.run(java.lang.String[]):97
[stress.process.out] [512.839s][error][jvmti]   void applications.kitchensink.process.stress.Main.main(java.lang.String[]):156
[stress.process.out] [512.839s][error][jvmti]
[stress.process.out]
[stress.process.out] [512.839s][error][jvmti] Reference Handler(Reference Handler) exiting: 0 is_susp: 0 is_thread_susp: 0 is_vthread_susp: 0 is_VTMS_transition_disabler: 0, is_in_VTMS_transition = 0
[stress.process.out]
[stress.process.out] [512.839s][error][jvmti]   void java.lang.ref.Reference.waitForReferencePendingList():-1
[stress.process.out] [512.839s][error][jvmti]   void java.lang.ref.Reference.processPendingReferences():246
[stress.process.out] [512.839s][error][jvmti]   void java.lang.ref.Reference$ReferenceHandler.run():208
[stress.process.out] [512.839s][error][jvmti]
[stress.process.out]
[stress.process.out] [512.839s][error][jvmti] Finalizer(Finalizer) exiting: 0 is_susp: 0 is_thread_susp: 0 is_vthread_susp: 0 is_VTMS_transition_disabler: 0, is_in_VTMS_transition = 0
[stress.process.out]
[stress.process.out] [512.839s][error][jvmti]   void java.lang.Object.wait0(long):-1
[stress.process.out] [512.839s][error][jvmti]   void java.lang.Object.wait(long):375
[stress.process.out] [512.839s][error][jvmti]   void java.lang.Object.wait():348
[stress.process.out] [512.839s][error][jvmti]   void java.lang.ref.NativeReferenceQueue.await():48
[stress.process.out] [512.839s][error][jvmti]   java.lang.ref.Reference java.lang.ref.ReferenceQueue.remove0():158
[stress.process.out] [512.839s][error][jvmti]   java.lang.ref.Reference java.lang.ref.NativeReferenceQueue.remove():89
[stress.process.out] [512.839s][error][jvmti]   void java.lang.ref.Finalizer$FinalizerThread.run():173
[stress.process.out] [512.839s][error][jvmti]
[stress.process.out]
[stress.process.out] [512.839s][error][jvmti] Signal Dispatcher(Signal Dispatcher) exiting: 0 is_susp: 0 is_thread_susp: 0 is_vthread_susp: 0 is_VTMS_transition_disabler: 0, is_in_VTMS_transition = 0
[stress.process.out]
[stress.process.out] [512.839s][error][jvmti]
[stress.process.out]
[stress.process.out] [512.839s][error][jvmti] Attach Listener(Attach Listener) exiting: 0 is_susp: 0 is_thread_susp: 0 is_vthread_susp: 0 is_VTMS_transition_disabler: 0, is_in_VTMS_transition = 0
[stress.process.out]
[stress.process.out] [512.839s][error][jvmti]
[stress.process.out]
[stress.process.out] [512.839s][error][jvmti] Service Thread(Service Thread) exiting: 0 is_susp: 0 is_thread_susp: 0 is_vthread_susp: 0 is_VTMS_transition_disabler: 0, is_in_VTMS_transition = 0
[stress.process.out]
[stress.process.out] [512.839s][error][jvmti]
[stress.process.out]
[stress.process.out] [512.839s][error][jvmti] Monitor Deflation Thread(Monitor Deflation Thread) exiting: 0 is_susp: 0 is_thread_susp: 0 is_vthread_susp: 0 is_VTMS_transition_disabler: 0, is_in_VTMS_transition = 0
[stress.process.out]
[stress.process.out] [512.839s][error][jvmti]
[stress.process.out]
[2023-09-06T21:42:57.717213657Z] Gathering output for process 2528384
[2023-09-06T21:42:57.726416155Z] Waiting for completion for process 2528384
[2023-09-06T21:42:57.726596555Z] Waiting for completion finished for process 2528384
I'm starting this bug in hotspot/test so [~lmesnik] can take a look.
OS: linux

-----
Title: [JDK-8315871] Opensource five more Swing regression tests
Priority: P4
Type: Bug
Component: client-libs
Description: Opensource and cleanup five Swing regression tests:
javax/swing/AncestorNotifier/4817630/bug4817630.java
javax/swing/BoxLayout/4191948/bug4191948.java
javax/swing/ComponentInputMap/4248723/bug4248723.java
javax/swing/DefaultBoundedRangeModel/4297953/bug4297953.java
javax/swing/DefaultButtonModel/4097723/bug4097723.java

-----
Title: [JDK-8315876] Open source several Swing CSS related tests
Priority: P4
Type: Bug
Component: client-libs
Description: Open source several Swing CSS related tests

-----
Title: [JDK-8315951] Open source several Swing HTMLEditorKit related tests
Priority: P4
Type: Bug
Component: client-libs
Description: Open source several Swing Text related tests

-----
Title: [JDK-8315981] Opensource five more random Swing tests
Priority: P4
Type: Bug
Component: client-libs
Description: Opensource following tests:
javax/swing/DefaultListCellRenderer/4180943/bug4180943.java
javax/swing/DefaultListModel/4466250/bug4466250.java
javax/swing/DefaultListSelectionModel/4140619/bug4140619.java
javax/swing/DefaultListSelectionModel/4177723/bug4177723.java
javax/swing/ImageIcon/4827074/bug4827074.java

-----
Title: [JDK-8316061] Open source several Swing RootPane and Slider related tests
Priority: P4
Type: Bug
Component: client-libs
Description: Open source these Swing PopupMenu related tests:
javax/swing/JRootPane/4207333/bug4207333.java
javax/swing/JRootPane/4224113/bug4224113.java
javax/swing/JRootPane/4627806/bug4627806.java
javax/swing/JSlider/4200901/bug4200901.java
javax/swing/JSlider/4203754/bug4203754.java
OS: generic

-----
Title: [JDK-8316324] Opensource five miscellaneous Swing tests
Priority: P4
Type: Bug
Component: client-libs
Description: Clean up and opensource five tests:
javax/swing/plaf/motif/InternalFrame/4150591/bug4150591.java
javax/swing/InputVerifier/4774166/bug4774166.java
javax/swing/JButton/4385611/bug4385611.java
javax/swing/JButton/DefaultButtonLeak/DefaultButtonLeak.java
javax/swing/JComponent/4706883/bug4706883.java

-----
Title: [JDK-8316388] Opensource five Swing component related regression tests
Priority: P4
Type: Bug
Component: client-libs
Description: Opensource five tests:
javax/swing/JDesktopPane/4132993/bug4132993.java
javax/swing/JDesktopPane/4773378/bug4773378.java
javax/swing/JEditorPane/4325606/bug4325606.java
javax/swing/JEditorPane/4330998/bug4330998.java
javax/swing/JEditorPane/4694598/bug4694598.java

-----
Title: [JDK-8316452] java/lang/instrument/modules/AppendToClassPathModuleTest.java ignores VM flags
Priority: P4
Type: Sub-task
Component: core-svc
Description: Test
java/lang/instrument/modules/AppendToClassPathModuleTest.java
should be update to accept VM flags or mark it as vm.flagless.

-----
Title: [JDK-8316497] ColorConvertOp - typo for non-ICC conversions needs one-line fix
Priority: P4
Type: Bug
Component: client-libs
Description: A DESCRIPTION OF THE PROBLEM :
There is a very simple typo in java/awt/image/ColorConvertOp.java - which has been there since - probably - forever, but at least Java 8. Line 288 has
color = srcColorSpace.fromCIEXYZ(dstColor);
it should be
color = dstColorSpace.fromCIEXYZ(dstColor);
This is immediately obvious if you look at it, and is such a simple fix. Clearly the conversion will currently be at best incorrect, but will most-likely crash.
FREQUENCY : always
OS: generic

-----
Title: [JDK-8316580] HttpClient with StructuredTaskScope does not close when a task fails
Priority: P4
Type: Bug
Component: core-libs
Description: ADDITIONAL SYSTEM INFORMATION :
MacBook Pro 2019 - 2,4 GHz 8-Core Intel Core i9
macOs Ventura 13.5.2 (22G91) - latest
JDK 21 x64 from https://www.oracle.com/java/technologies/downloads/#jdk21-mac - latest GA 20.9.2023
OpenJDK 21 build 35 from https://jdk.java.net/21/
A DESCRIPTION OF THE PROBLEM :
I created a simple Http GET performance testing tool using HttpClient with StructuredTaskScope.
When the tool sends over 65 concurrent requests without delay to a localhost port which does not have anything listening, HttpClient is not able to release locks and the program does not exit. With low amount of requests this happens randomly and increasing request count makes the issue happen always. If there is something responding from the port, the tool exits normally.
If I check the thread dump, the main thread is stuck on
jdk.internal.net.http.HttpClientFacade.close
"main" #1 [10243] prio=5 os_prio=31 cpu=401.70ms elapsed=4.47s tid=0x00007fdde1809c00 nid=10243 in Object.wait()  [0x000070000eec7000]
java.lang.Thread.State: TIMED_WAITING (on object monitor)
at java.lang.Object.wait0(java.base@21/Native Method)
- waiting on  (a jdk.internal.net.http.HttpClientImpl$SelectorManager)
at java.lang.Object.wait(java.base@21/Object.java:366)
at java.lang.Thread.join(java.base@21/Thread.java:2072)
- locked  (a jdk.internal.net.http.HttpClientImpl$SelectorManager)
at java.lang.Thread.join(java.base@21/Thread.java:2200)
at jdk.internal.net.http.HttpClientImpl.awaitTermination(java.net.http@21/HttpClientImpl.java:628)
at java.net.http.HttpClient.close(java.net.http@21/HttpClient.java:900)
at jdk.internal.net.http.HttpClientFacade.close(java.net.http@21/HttpClientFacade.java:192)
at test.examples.HttpGetBurstBugWithStructuredScope.runBurst(HttpGetBurstBugWithStructuredScope.java:24)
at test.examples.HttpGetBurstBugWithStructuredScope.main(HttpGetBurstBugWithStructuredScope.java:15)
If I use CountdownLatch to manage exiting, the program does not get stuck.
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Run the HttpGetBurstBugWithStructuredScope. Adjust requestCount to test for the threshold where error happens or does not happen. Ensure that using an url with a working server exists the tool normally.
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
HttpClient should be able to close normally.
ACTUAL -
HttpGetBurstBugWithStructuredScope does not exit. main thread shows HttpClientFacade.close() in thread dump
---------- BEGIN SOURCE ----------
package test.examples;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executors;
import java.util.concurrent.StructuredTaskScope;
public class HttpGetBurstBugWithStructuredScope {
public static void main(String[] args) {
new HttpGetBurstBugWithStructuredScope().runBurst(
"http://localhost:62057/greet",
200
);
}
void runBurst(String url, int reqCount) {
final var dest = URI.create(url);
try (final var virtualThreadExecutor = Executors.newVirtualThreadPerTaskExecutor()) {
try (final var httpClient = HttpClient.newBuilder().connectTimeout(Duration.ofSeconds(1)).executor(virtualThreadExecutor).build()) {
try (final var scope = new StructuredTaskScope.ShutdownOnFailure()) {
launchAndProcessRequests(scope, httpClient, reqCount, dest);
} finally {
System.out.println("StructuredTaskScope closed");
}
} finally {
System.out.println("HttpClient closed");
}
} finally {
System.out.println("ThreadExecutor closed");
}
}
private static void launchAndProcessRequests(
StructuredTaskScope.ShutdownOnFailure scope,
HttpClient httpClient,
int reqCount,
URI dest) {
for (int counter = 0; counter
getUrlAndAssert200(httpClient, dest)
);
}
try {
scope.join();
} catch (InterruptedException e) {
throw new RuntimeException("scope.join() was interrupted", e);
}
try {
scope.throwIfFailed();
} catch (ExecutionException e) {
throw new RuntimeException("something threw an exception in StructuredTaskScope", e);
}
}
private static String getUrlAndAssert200(HttpClient httpClient, URI url) {
final var response = executeRequest(httpClient, url);
String res = response.body();
int statusCode = response.statusCode();
if (statusCode != 200) {
throw new RuntimeException(url.toString() + " returned status " + statusCode);
}
return res;
}
private static HttpResponse executeRequest(HttpClient httpClient, URI url) {
try {
var request = HttpRequest.newBuilder(url).GET().build();
return httpClient.send(request, HttpResponse.BodyHandlers.ofString());
} catch (InterruptedException e) {
throw new RuntimeException(e);
} catch (Exception e) {
throw new RuntimeException(e);
}
}
}
---------- END SOURCE ----------
CUSTOMER SUBMITTED WORKAROUND :
package test.examples;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
public class HttpGetBurstBug {
public static void main(String[] args) {
new HttpGetBurstBug().runBurst(
"http://localhost:62057/greet",
2000
);
}
void runBurst(String url, int reqCount) {
final var dest = URI.create(url);
try {
try (final var virtualThreadExecutor = Executors.newVirtualThreadPerTaskExecutor()) {
try (final var httpClient = HttpClient.newBuilder().connectTimeout(Duration.ofSeconds(1)).executor(virtualThreadExecutor).build()) {
launchAndProcessRequests(virtualThreadExecutor, httpClient, reqCount, dest);
}
} finally {
System.out.println("HttpClient closed");
}
} finally {
System.out.println("Successfully closed");
}
}
private static void launchAndProcessRequests(
ExecutorService virtualThreadExecutor,
HttpClient httpClient,
int reqCount,
URI dest) {
final var latch = new CountDownLatch(reqCount);
for (int counter = 0; counter  {
try {
getUrlAndAssert200(httpClient, dest);
} catch (Exception e) {
System.err.println("http get failed: " + e.getMessage());
} finally {
latch.countDown();
}
}
);
}
try {
latch.await();
System.out.println("latch.await() completed");
} catch (InterruptedException e) {
throw new RuntimeException("latch.await() was interrupted", e);
}
}
private static String getUrlAndAssert200(HttpClient httpClient, URI url) {
final var response = executeRequest(httpClient, url);
String res = response.body();
int statusCode = response.statusCode();
if (statusCode != 200) {
throw new RuntimeException(url.toString() + " returned status " + statusCode);
}
return res;
}
private static HttpResponse executeRequest(HttpClient httpClient, URI url) {
try {
var request = HttpRequest.newBuilder(url).GET().build();
return httpClient.send(request, HttpResponse.BodyHandlers.ofString());
} catch (InterruptedException e) {
throw new RuntimeException(e);
} catch (Exception e) {
throw new RuntimeException(e);
}
}
}
FREQUENCY : always
OS: os_x

-----
Title: [JDK-8316629] j.text.DateFormatSymbols setZoneStrings() exception is unhelpful
Priority: P4
Type: Bug
Component: core-libs
Description: setZoneStrings() takes a multi dimensional array of String as input. If any of the rows have a length less than 5, an IllegalArgumentException is thrown.
Currently, the exception is thrown without any indication of what went wrong
OS: generic

-----
Title: [JDK-8317264] Pattern.Bound has `static` fields that should be `static final`.
Priority: P4
Type: Bug
Component: core-libs
Description: static final class Bound extends Node {
static int LEFT = 0x1;
static int RIGHT= 0x2;
static int BOTH = 0x3;
static int NONE = 0x4;
The fields are never reassigned and the lack of `final` seems to be an oversight.
OS: generic

-----
Title: [JDK-8318509] x86 count_positives intrinsic broken for -XX:AVX3Threshold=0
Priority: P4
Type: Bug
Component: hotspot
Description: The code emitted for the count_positives intrinsic is broken when running under the diagnostic option: -XX:UseAVX=3 -XX:+UnlockDiagnosticVMOptions -XX:+AVX3Threshold=0: the len register is repurposed and overwritten, but the tail logic then wrongly assumes len still holds the original value. This means the value returned can be almost arbitrary, with random crashes etc as a result. This bug was introduced by changes in JDK-8281146 and went undetected due lack of coverage by tests.
The proposed fix is to reconstitute the tail part of len from tmp1 before  jumping into the tail block.

-----
Title: [JDK-8318636] Add jcmd to print annotated process memory map
Priority: P4
Type: Enhancement
Component: hotspot
Description: Analysts and supporters often use /proc/xx/maps to make sense of the memory footprint of a process.
Interpreting the memory map correctly can help when used as a complement to other tools (e.g. NMT). There even exist tools out there that attempt to annotate the process memory map with JVM information.
That, however, can be much more easily and accurately done within the JVM. At least for mappings originating from hotspots, we have the relevant information in NMT.
OS: linux

-----
Title: [JDK-8318700] MacOS Zero cannot run gtests due to wrong JVM path
Priority: P4
Type: Bug
Component: hotspot
Description: If you run any of the current gtests with macos-aarch64-zero, it would fail as:
```
% CONF=macosx-aarch64-zero-fastdebug make exploded-test TEST=gtest:Atomic
Using exact match for CONF=macosx-aarch64-zero-fastdebug (other matches are possible)
Building target 'exploded-test' in configuration 'macosx-aarch64-zero-fastdebug'
Updating support/modules_libs/java.base/zero/libjvm.dylib due to 1 file(s)
Test selection 'gtest:Atomic', will run:
* gtest:Atomic/zero
Running test 'gtest:Atomic/zero'
Note: Google Test filter = Atomic*
[==========] Running 16 tests from 6 test suites.
[----------] Global test environment set-up.
[----------] 3 tests from AtomicAddTest
[ RUN      ] AtomicAddTest.int32_vm
Error occurred during initialization of VM
Failed setting boot class path.
Finished running test 'gtest:Atomic/zero'
Test report is stored in build/macosx-aarch64-zero-fastdebug/test-results/gtest_Atomic_zero
```
The reason seems to be that the BSD specific code adds either `client` or `server` to the JDK path, while zero is actually in `zero`. This breaks VM code that expects libjvm.dylib to be found.

-----
Title: [JDK-8318811] Compiler directives parser swallows a character after line comments
Priority: P4
Type: Bug
Component: hotspot
Description: Currently, the following valid compiler directive file:
```
[{
match: "*::*",
c2: { Exclude: true } // c1 only for startup
}]
```
will be rejected by the parser:
```
Syntax error on line 4 byte 2: Expected value separator or object end (one of ',}').
At ']'.
}]
Parsing of compiler directives failed
```
This is because `JSON::skip_line_comment()`, in contradiction to its specification, does **not** "*return the first token after the line comment without consuming it*" but does consumes it.
The fix is trivial:
```
--- a/src/hotspot/share/utilities/json.cpp
+++ b/src/hotspot/share/utilities/json.cpp
@@ -580,7 +580,7 @@ u_char JSON::skip_line_comment() {
return 0;
}
next();
-  return next();
+  return peek();
}
```

-----
Title: [JDK-8318915] Enhance checks in BigDecimal.toPlainString()
Priority: P3
Type: Enhancement
Component: core-libs
Description: For some instances of `BigDecimal`, invoking `toPlainString()` might wrongly result in a `NegativeArraySizeException` when it should, in fact, throw an `OutOfMemoryError` to indicate that the resulting `String` would be too large, that is, consisting of more than `Integer.MAX_VALUE` characters.

-----
Title: [JDK-8319439] Move BufferNode from PtrQueue files to new files
Priority: P4
Type: Enhancement
Component: hotspot
Description: The BufferNode class is currently defined in PtrQueue.hpp/cpp.  There are already some uses that don't use/depend on PtrQueue at all, and there may be more in the future.  It would be better if that class was separated out into its own set of files that PtrQueue and others would then use.

-----
Title: [JDK-8319572] Test jdk/incubator/vector/LoadJsvmlTest.java ignores VM flags
Priority: P4
Type: Sub-task
Component: hotspot
Description: Test
jdk/incubator/vector/LoadJsvmlTest.java
ignores VM flags and should be updated or marked as flagless.

-----
Title: [JDK-8319690] [AArch64] C2 compilation hits offset_ok_for_immed: assert "c2 compiler bug"
Priority: P4
Type: Bug
Component: hotspot
Description: Fails only with debug, in product we simply "legitimize_address", which inserts a LEA instruction to handle the offset that seems to require more bits than expected.
I reproduced it like this:
/scratch/empeter/jdk-22/fastdebug/bin/java --add-modules java.base --add-exports java.base/jdk.internal.misc=ALL-UNNAMED --add-exports java.base/jdk.internal.util=ALL-UNNAMED -Xcomp -XX:-TieredCompilation -XX:MaxHeapSize=805306368 -XX:MaxRAMPercentage=6.250000 "-XX:CompileCommand=compileonly,Test*::" -XX:CompileCommand=printcompilation,Test*::* Test.java
CompileCommand: compileonly Test*. bool compileonly = true
CompileCommand: PrintCompilation Test*.* bool PrintCompilation = true
2676  105    b        Test:: (7 bytes)
2681  107    b        Test$A:: (44 bytes)
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/afbc6042-3a24-4198-9369-18c663a3f74c-S45433/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/10db9974-e79d-49fb-b2a8-fc7dc441748b/runs/b6e6453a-891d-4130-a6a2-b2df8c26912c/workspace/open/src/hotspot/cpu/aarch64/aarch64.ad:2741), pid=134414, tid=134428
#  assert(Address::offset_ok_for_immed(addr.offset(), exact_log2(size_in_memory))) failed: c2 compiler bug
#
# JRE version: Java(TM) SE Runtime Environment (22.0+22) (fastdebug build 22-ea+22-1754)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 22-ea+22-1754, compiled mode, sharing, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x424248]  loadStore(C2_MacroAssembler, void (MacroAssembler::*)(Register, Address const&), Register, int, Register, int, int, int, int) [clone .constprop.1]+0x1f8
#
# Core dump will be written. Default location: /scratch/empeter/jdk-fork1/build/linux-aarch64-slowdebug/jdk/bin/core.134414
#
# An error report file with more information is saved as:
# /scratch/empeter/jdk-fork1/build/linux-aarch64-slowdebug/jdk/bin/hs_err_pid134414.log
#
# Compiler replay data is saved as:
# /scratch/empeter/jdk-fork1/build/linux-aarch64-slowdebug/jdk/bin/replay_pid134414.log
#
# If you would like to submit a bug report, please visit:
#   https://bugreport.java.com/bugreport/crash.jsp
#
Aborted (core dumped)

-----
Title: [JDK-8320687] sun.jvmstat.monitor.MonitoredHost.getMonitoredHost() throws unexpected exceptions when invoked concurrently
Priority: P4
Type: Bug
Component: core-svc
Description: When multiple threads concurrently invoke on sun.jvmstat.monitor.MonitoredHost.getMonitoredHost() method, it has been noticed that it sometimes throws unexpected exceptions like:
On one occasion:
Caused by: java.lang.IllegalArgumentException: Could not find MonitoredHost for scheme: local
at jdk.internal.jvmstat/sun.jvmstat.monitor.MonitoredHost.getMonitoredHost(MonitoredHost.java:177)
at jdk.internal.jvmstat/sun.jvmstat.monitor.MonitoredHost.getMonitoredHost(MonitoredHost.java:133)
on a different occasion:
Caused by: java.util.NoSuchElementException
at java.base/java.util.ServiceLoader$2.next(ServiceLoader.java:1314)
at java.base/java.util.ServiceLoader$2.next(ServiceLoader.java:1302)
at java.base/java.util.ServiceLoader$3.next(ServiceLoader.java:1397)
at jdk.internal.jvmstat/sun.jvmstat.monitor.MonitoredHost.getMonitoredHost(MonitoredHost.java:170)
at jdk.internal.jvmstat/sun.jvmstat.monitor.MonitoredHost.getMonitoredHost(MonitoredHost.java:133)
This is because the method internally uses a shared instance of java.util.ServiceLoader. ServiceLoader is not a thread safe class (as noted in its class javadoc)

-----
Title: [JDK-8320948] NPE due to unreported compiler error
Priority: P3
Type: Bug
Component: tools
Description: ADDITIONAL SYSTEM INFORMATION :
17.0.7 / Linux
A DESCRIPTION OF THE PROBLEM :
When trying to compile attached project compiler blows up with NullPointerException.
An exception has occurred in the compiler (17.0.7). Please file a bug against the Java compiler via the Java bug reporting page (https://bugreport.java.com) after checking the Bug Database (https://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
java.lang.NullPointerException: Cannot invoke "com.sun.tools.javac.code.Type.getTag()" because "type" is null
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Full project to reproduce issue can be found here https://github.com/ghostbuster91/javac-npe-generic
Compile it by calling `./gradlew compileJava`. The issue is not specific to the build tool.
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Error informing that the second parameter is missing should be reported; as below:
error: constructor Builder in class Builder cannot be applied to given types;
return new Builder(Person.make(Entity.combineAll(entities)));
^
required: Person,String
found:    Person
reason: actual and formal argument lists differ in length
1 error
ACTUAL -
$ ./gradlew clean compileJava
Task :clean
Task :compileJava FAILED
An exception has occurred in the compiler (17.0.7). Please file a bug against the Java compiler via the Java bug reporting page (https://bugreport.java.com) after checking the Bug Database (https://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
java.lang.NullPointerException: Cannot invoke "com.sun.tools.javac.code.Type.getTag()" because "type" is null
at jdk.compiler/com.sun.tools.javac.jvm.Code.typecode(Code.java:243)
at jdk.compiler/com.sun.tools.javac.jvm.Items$Item.coerce(Items.java:271)
at jdk.compiler/com.sun.tools.javac.jvm.Gen.genExpr(Gen.java:879)
at jdk.compiler/com.sun.tools.javac.jvm.Gen.genArgs(Gen.java:902)
at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitNewClass(Gen.java:1967)
at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCNewClass.accept(JCTree.java:1852)
at jdk.compiler/com.sun.tools.javac.jvm.Gen.genExpr(Gen.java:877)
at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitReturn(Gen.java:1843)
at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCReturn.accept(JCTree.java:1709)
at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:610)
at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:645)
at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:631)
at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStats(Gen.java:682)
at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitBlock(Gen.java:1097)
at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1091)
at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:610)
at jdk.compiler/com.sun.tools.javac.jvm.Gen.genStat(Gen.java:645)
at jdk.compiler/com.sun.tools.javac.jvm.Gen.genMethod(Gen.java:967)
at jdk.compiler/com.sun.tools.javac.jvm.Gen.visitMethodDef(Gen.java:930)
at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:921)
at jdk.compiler/com.sun.tools.javac.jvm.Gen.genDef(Gen.java:610)
at jdk.compiler/com.sun.tools.javac.jvm.Gen.genClass(Gen.java:2420)
at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.genCode(JavaCompiler.java:737)
at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.generate(JavaCompiler.java:1617)
at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.generate(JavaCompiler.java:1585)
at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:946)
at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.lambda$doCall$0(JavacTaskImpl.java:104)
at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.invocationHelper(JavacTaskImpl.java:152)
at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.doCall(JavacTaskImpl.java:100)
at jdk.compiler/com.sun.tools.javac.api.JavacTaskImpl.call(JavacTaskImpl.java:94)
at org.gradle.internal.compiler.java.IncrementalCompileTask.call(IncrementalCompileTask.java:92)
at org.gradle.api.internal.tasks.compile.AnnotationProcessingCompileTask.call(AnnotationProcessingCompileTask.java:94)
at org.gradle.api.internal.tasks.compile.ResourceCleaningCompilationTask.call(ResourceCleaningCompilationTask.java:57)
at org.gradle.api.internal.tasks.compile.JdkJavaCompiler.execute(JdkJavaCompiler.java:55)
at org.gradle.api.internal.tasks.compile.JdkJavaCompiler.execute(JdkJavaCompiler.java:39)
at org.gradle.api.internal.tasks.compile.NormalizingJavaCompiler.delegateAndHandleErrors(NormalizingJavaCompiler.java:98)
at org.gradle.api.internal.tasks.compile.NormalizingJavaCompiler.execute(NormalizingJavaCompiler.java:52)
at org.gradle.api.internal.tasks.compile.NormalizingJavaCompiler.execute(NormalizingJavaCompiler.java:38)
at org.gradle.api.internal.tasks.compile.AnnotationProcessorDiscoveringCompiler.execute(AnnotationProcessorDiscoveringCompiler.java:51)
at org.gradle.api.internal.tasks.compile.AnnotationProcessorDiscoveringCompiler.execute(AnnotationProcessorDiscoveringCompiler.java:37)
at org.gradle.api.internal.tasks.compile.ModuleApplicationNameWritingCompiler.execute(ModuleApplicationNameWritingCompiler.java:46)
at org.gradle.api.internal.tasks.compile.ModuleApplicationNameWritingCompiler.execute(ModuleApplicationNameWritingCompiler.java:36)
at org.gradle.jvm.toolchain.internal.DefaultToolchainJavaCompiler.execute(DefaultToolchainJavaCompiler.java:57)
at org.gradle.api.tasks.compile.JavaCompile.lambda$createToolchainCompiler$3(JavaCompile.java:202)
at org.gradle.api.internal.tasks.compile.CleaningJavaCompiler.execute(CleaningJavaCompiler.java:53)
at org.gradle.api.internal.tasks.compile.incremental.IncrementalCompilerFactory.lambda$createRebuildAllCompiler$0(IncrementalCompilerFactory.java:52)
at org.gradle.api.internal.tasks.compile.incremental.SelectiveCompiler.execute(SelectiveCompiler.java:70)
at org.gradle.api.internal.tasks.compile.incremental.SelectiveCompiler.execute(SelectiveCompiler.java:44)
at org.gradle.api.internal.tasks.compile.incremental.IncrementalResultStoringCompiler.execute(IncrementalResultStoringCompiler.java:66)
at org.gradle.api.internal.tasks.compile.incremental.IncrementalResultStoringCompiler.execute(IncrementalResultStoringCompiler.java:52)
at org.gradle.api.internal.tasks.compile.CompileJavaBuildOperationReportingCompiler$1.call(CompileJavaBuildOperationReportingCompiler.java:64)
at org.gradle.api.internal.tasks.compile.CompileJavaBuildOperationReportingCompiler$1.call(CompileJavaBuildOperationReportingCompiler.java:48)
at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)
at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:199)
at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)
at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)
at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)
at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)
at org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)
at org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:73)
at org.gradle.api.internal.tasks.compile.CompileJavaBuildOperationReportingCompiler.execute(CompileJavaBuildOperationReportingCompiler.java:48)
at org.gradle.api.tasks.compile.JavaCompile.performCompilation(JavaCompile.java:220)
at org.gradle.api.tasks.compile.JavaCompile.performIncrementalCompilation(JavaCompile.java:161)
at org.gradle.api.tasks.compile.JavaCompile.compile(JavaCompile.java:146)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.gradle.internal.reflect.JavaMethod.invoke(JavaMethod.java:125)
at org.gradle.api.internal.project.taskfactory.IncrementalTaskAction.doExecute(IncrementalTaskAction.java:45)
at org.gradle.api.internal.project.taskfactory.StandardTaskAction.execute(StandardTaskAction.java:51)
at org.gradle.api.internal.project.taskfactory.IncrementalTaskAction.execute(IncrementalTaskAction.java:26)
at org.gradle.api.internal.project.taskfactory.StandardTaskAction.execute(StandardTaskAction.java:29)
at org.gradle.api.internal.tasks.execution.TaskExecution$3.run(TaskExecution.java:248)
at org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:29)
at org.gradle.internal.operations.DefaultBuildOperationRunner$1.execute(DefaultBuildOperationRunner.java:26)
at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)
at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)
at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)
at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)
at org.gradle.internal.operations.DefaultBuildOperationRunner.run(DefaultBuildOperationRunner.java:47)
at org.gradle.internal.operations.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:68)
at org.gradle.api.internal.tasks.execution.TaskExecution.executeAction(TaskExecution.java:233)
at org.gradle.api.internal.tasks.execution.TaskExecution.executeActions(TaskExecution.java:216)
at org.gradle.api.internal.tasks.execution.TaskExecution.executeWithPreviousOutputFiles(TaskExecution.java:199)
at org.gradle.api.internal.tasks.execution.TaskExecution.execute(TaskExecution.java:166)
at org.gradle.internal.execution.steps.ExecuteStep.executeInternal(ExecuteStep.java:105)
at org.gradle.internal.execution.steps.ExecuteStep.access$000(ExecuteStep.java:44)
at org.gradle.internal.execution.steps.ExecuteStep$1.call(ExecuteStep.java:59)
at org.gradle.internal.execution.steps.ExecuteStep$1.call(ExecuteStep.java:56)
at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)
at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:199)
at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)
at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)
at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)
at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)
at org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)
at org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:73)
at org.gradle.internal.execution.steps.ExecuteStep.execute(ExecuteStep.java:56)
at org.gradle.internal.execution.steps.ExecuteStep.execute(ExecuteStep.java:44)
at org.gradle.internal.execution.steps.RemovePreviousOutputsStep.execute(RemovePreviousOutputsStep.java:67)
at org.gradle.internal.execution.steps.RemovePreviousOutputsStep.execute(RemovePreviousOutputsStep.java:37)
at org.gradle.internal.execution.steps.CancelExecutionStep.execute(CancelExecutionStep.java:41)
at org.gradle.internal.execution.steps.TimeoutStep.executeWithoutTimeout(TimeoutStep.java:74)
at org.gradle.internal.execution.steps.TimeoutStep.execute(TimeoutStep.java:55)
at org.gradle.internal.execution.steps.CreateOutputsStep.execute(CreateOutputsStep.java:50)
at org.gradle.internal.execution.steps.CreateOutputsStep.execute(CreateOutputsStep.java:28)
at org.gradle.internal.execution.steps.CaptureStateAfterExecutionStep.executeDelegateBroadcastingChanges(CaptureStateAfterExecutionStep.java:100)
at org.gradle.internal.execution.steps.CaptureStateAfterExecutionStep.execute(CaptureStateAfterExecutionStep.java:72)
at org.gradle.internal.execution.steps.CaptureStateAfterExecutionStep.execute(CaptureStateAfterExecutionStep.java:50)
at org.gradle.internal.execution.steps.ResolveInputChangesStep.execute(ResolveInputChangesStep.java:40)
at org.gradle.internal.execution.steps.ResolveInputChangesStep.execute(ResolveInputChangesStep.java:29)
at org.gradle.internal.execution.steps.BuildCacheStep.executeWithoutCache(BuildCacheStep.java:179)
at org.gradle.internal.execution.steps.BuildCacheStep.lambda$execute$1(BuildCacheStep.java:70)
at org.gradle.internal.Either$Right.fold(Either.java:175)
at org.gradle.internal.execution.caching.CachingState.fold(CachingState.java:59)
at org.gradle.internal.execution.steps.BuildCacheStep.execute(BuildCacheStep.java:68)
at org.gradle.internal.execution.steps.BuildCacheStep.execute(BuildCacheStep.java:46)
at org.gradle.internal.execution.steps.StoreExecutionStateStep.execute(StoreExecutionStateStep.java:36)
at org.gradle.internal.execution.steps.StoreExecutionStateStep.execute(StoreExecutionStateStep.java:25)
at org.gradle.internal.execution.steps.RecordOutputsStep.execute(RecordOutputsStep.java:36)
at org.gradle.internal.execution.steps.RecordOutputsStep.execute(RecordOutputsStep.java:22)
at org.gradle.internal.execution.steps.SkipUpToDateStep.executeBecause(SkipUpToDateStep.java:91)
at org.gradle.internal.execution.steps.SkipUpToDateStep.lambda$execute$2(SkipUpToDateStep.java:55)
at java.base/java.util.Optional.orElseGet(Optional.java:364)
at org.gradle.internal.execution.steps.SkipUpToDateStep.execute(SkipUpToDateStep.java:55)
at org.gradle.internal.execution.steps.SkipUpToDateStep.execute(SkipUpToDateStep.java:37)
at org.gradle.internal.execution.steps.ResolveChangesStep.execute(ResolveChangesStep.java:65)
at org.gradle.internal.execution.steps.ResolveChangesStep.execute(ResolveChangesStep.java:36)
at org.gradle.internal.execution.steps.legacy.MarkSnapshottingInputsFinishedStep.execute(MarkSnapshottingInputsFinishedStep.java:37)
at org.gradle.internal.execution.steps.legacy.MarkSnapshottingInputsFinishedStep.execute(MarkSnapshottingInputsFinishedStep.java:27)
at org.gradle.internal.execution.steps.ResolveCachingStateStep.execute(ResolveCachingStateStep.java:77)
at org.gradle.internal.execution.steps.ResolveCachingStateStep.execute(ResolveCachingStateStep.java:38)
at org.gradle.internal.execution.steps.ValidateStep.execute(ValidateStep.java:94)
at org.gradle.internal.execution.steps.ValidateStep.execute(ValidateStep.java:49)
at org.gradle.internal.execution.steps.CaptureStateBeforeExecutionStep.execute(CaptureStateBeforeExecutionStep.java:71)
at org.gradle.internal.execution.steps.CaptureStateBeforeExecutionStep.execute(CaptureStateBeforeExecutionStep.java:45)
at org.gradle.internal.execution.steps.SkipEmptyWorkStep.executeWithNonEmptySources(SkipEmptyWorkStep.java:177)
at org.gradle.internal.execution.steps.SkipEmptyWorkStep.execute(SkipEmptyWorkStep.java:86)
at org.gradle.internal.execution.steps.SkipEmptyWorkStep.execute(SkipEmptyWorkStep.java:53)
at org.gradle.internal.execution.steps.RemoveUntrackedExecutionStateStep.execute(RemoveUntrackedExecutionStateStep.java:32)
at org.gradle.internal.execution.steps.RemoveUntrackedExecutionStateStep.execute(RemoveUntrackedExecutionStateStep.java:21)
at org.gradle.internal.execution.steps.legacy.MarkSnapshottingInputsStartedStep.execute(MarkSnapshottingInputsStartedStep.java:38)
at org.gradle.internal.execution.steps.LoadPreviousExecutionStateStep.execute(LoadPreviousExecutionStateStep.java:36)
at org.gradle.internal.execution.steps.LoadPreviousExecutionStateStep.execute(LoadPreviousExecutionStateStep.java:23)
at org.gradle.internal.execution.steps.CleanupStaleOutputsStep.execute(CleanupStaleOutputsStep.java:75)
at org.gradle.internal.execution.steps.CleanupStaleOutputsStep.execute(CleanupStaleOutputsStep.java:41)
at org.gradle.internal.execution.steps.AssignWorkspaceStep.lambda$execute$0(AssignWorkspaceStep.java:32)
at org.gradle.api.internal.tasks.execution.TaskExecution$4.withWorkspace(TaskExecution.java:293)
at org.gradle.internal.execution.steps.AssignWorkspaceStep.execute(AssignWorkspaceStep.java:30)
at org.gradle.internal.execution.steps.AssignWorkspaceStep.execute(AssignWorkspaceStep.java:21)
at org.gradle.internal.execution.steps.IdentityCacheStep.execute(IdentityCacheStep.java:37)
at org.gradle.internal.execution.steps.IdentityCacheStep.execute(IdentityCacheStep.java:27)
at org.gradle.internal.execution.steps.IdentifyStep.execute(IdentifyStep.java:47)
at org.gradle.internal.execution.steps.IdentifyStep.execute(IdentifyStep.java:34)
at org.gradle.internal.execution.impl.DefaultExecutionEngine$1.execute(DefaultExecutionEngine.java:64)
at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeIfValid(ExecuteActionsTaskExecuter.java:146)
at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:135)
at org.gradle.api.internal.tasks.execution.FinalizePropertiesTaskExecuter.execute(FinalizePropertiesTaskExecuter.java:46)
at org.gradle.api.internal.tasks.execution.ResolveTaskExecutionModeExecuter.execute(ResolveTaskExecutionModeExecuter.java:51)
at org.gradle.api.internal.tasks.execution.SkipTaskWithNoActionsExecuter.execute(SkipTaskWithNoActionsExecuter.java:57)
at org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute(SkipOnlyIfTaskExecuter.java:74)
at org.gradle.api.internal.tasks.execution.CatchExceptionTaskExecuter.execute(CatchExceptionTaskExecuter.java:36)
at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.executeTask(EventFiringTaskExecuter.java:77)
at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.call(EventFiringTaskExecuter.java:55)
at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter$1.call(EventFiringTaskExecuter.java:52)
at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:204)
at org.gradle.internal.operations.DefaultBuildOperationRunner$CallableBuildOperationWorker.execute(DefaultBuildOperationRunner.java:199)
at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:66)
at org.gradle.internal.operations.DefaultBuildOperationRunner$2.execute(DefaultBuildOperationRunner.java:59)
at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:157)
at org.gradle.internal.operations.DefaultBuildOperationRunner.execute(DefaultBuildOperationRunner.java:59)
at org.gradle.internal.operations.DefaultBuildOperationRunner.call(DefaultBuildOperationRunner.java:53)
at org.gradle.internal.operations.DefaultBuildOperationExecutor.call(DefaultBuildOperationExecutor.java:73)
at org.gradle.api.internal.tasks.execution.EventFiringTaskExecuter.execute(EventFiringTaskExecuter.java:52)
at org.gradle.execution.plan.LocalTaskNodeExecutor.execute(LocalTaskNodeExecutor.java:42)
at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$InvokeNodeExecutorsAction.execute(DefaultTaskExecutionGraph.java:337)
at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$InvokeNodeExecutorsAction.execute(DefaultTaskExecutionGraph.java:324)
at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$BuildOperationAwareExecutionAction.execute(DefaultTaskExecutionGraph.java:317)
at org.gradle.execution.taskgraph.DefaultTaskExecutionGraph$BuildOperationAwareExecutionAction.execute(DefaultTaskExecutionGraph.java:303)
at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.execute(DefaultPlanExecutor.java:463)
at org.gradle.execution.plan.DefaultPlanExecutor$ExecutorWorker.run(DefaultPlanExecutor.java:380)
at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)
at org.gradle.internal.concurrent.AbstractManagedExecutor$1.run(AbstractManagedExecutor.java:47)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
FAILURE: Build failed with an exception.
* What went wrong:
Execution failed for task ':compileJava'.
Compilation failed; see the compiler error output for details.
CUSTOMER SUBMITTED WORKAROUND :
This only occurs if the second parameter is missing. Filling the second parameter in the Builder:13 fixes the issue.
The issue goes away if we provide generic type parameter for the Entity.combineAll function call in Builder.13
FREQUENCY : always
OS: generic

-----
Title: [JDK-8321204] C2: assert(false) failed: node should be in igvn hash table
Priority: P4
Type: Bug
Component: hotspot
Description: The following test failed in the JDK22 CI:
serviceability/jvmti/vthread/premain/AgentWithVThreadTest.java
Here's a snippet from the log file:
2566  CastPP  === 277 75  [[ 332 ]]  #java/util/concurrent/ConcurrentHashMap (java/io/Serializable,java/util/Map,java/util/concurrent/ConcurrentMap) * extra types: {0:java/util/concurrent/ConcurrentHashMap (java/io/Serializable,java/util/Map,java/util/concurrent/ConcurrentMap):NotNull *} strong dependency  Oop:java/util/concurrent/ConcurrentHashMap (java/io/Serializable,java/util/Map,java/util/concurrent/ConcurrentMap) * !orig=[330] !jvms: ConcurrentHashMap::transfer @ bci:119 (line 2451)
2567  CastPP  === 572 96  [[ 2528 ]]  #narrowoop: java/util/concurrent/ConcurrentHashMap$Node (java/util/Map$Entry) *[int:=0] (java/lang/Cloneable,java/io/Serializable) * extra types: {0:narrowoop: java/util/concurrent/ConcurrentHashMap$Node (java/util/Map$Entry) *[int:=0] (java/lang/Cloneable,java/io/Serializable):NotNull * (speculative=narrowoop: java/util/concurrent/ConcurrentHashMap$Node (java/util/Map$Entry) *[int:=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact * (inline_depth=2))} strong dependency !orig=[2525] !jvms: ConcurrentHashMap::transfer @ bci:286 (line 2479)
2568  CastPP  === 572 75  [[ 2528 ]]  #java/util/concurrent/ConcurrentHashMap (java/io/Serializable,java/util/Map,java/util/concurrent/ConcurrentMap) * extra types: {0:java/util/concurrent/ConcurrentHashMap (java/io/Serializable,java/util/Map,java/util/concurrent/ConcurrentMap):NotNull *} strong dependency  Oop:java/util/concurrent/ConcurrentHashMap (java/io/Serializable,java/util/Map,java/util/concurrent/ConcurrentMap) * !orig=[2524] !jvms: ConcurrentHashMap::transfer @ bci:286 (line 2479)
2571  CastPP  === 572 122  [[ 2528 ]]  #narrowoop: java/util/concurrent/ConcurrentHashMap$Node (java/util/Map$Entry) *[int:=0] (java/lang/Cloneable,java/io/Serializable) * extra types: {0:narrowoop: java/util/concurrent/ConcurrentHashMap$Node (java/util/Map$Entry) *[int:=0] (java/lang/Cloneable,java/io/Serializable):NotNull * (speculative=narrowoop: java/util/concurrent/ConcurrentHashMap$Node (java/util/Map$Entry) *[int:=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact * (inline_depth=2))} strong dependency !orig=[2184] !jvms: ConcurrentHashMap::transfer @ bci:835 (line 2556)
erroneous node:
1669  CheckCastPP  === 787 122  [[ 1680 1672 ]]  #narrowoop: java/util/concurrent/ConcurrentHashMap$Node (java/util/Map$Entry) *[int:=0] (java/lang/Cloneable,java/io/Serializable) * (speculative=narrowoop: java/util/concurrent/ConcurrentHashMap$Node (java/util/Map$Entry) *[int:=0] (java/lang/Cloneable,java/io/Serializable):NotNull:exact * (inline_depth=2)) !jvms: ConcurrentHashMap::setTabAt @ bci:16 (line 769) ConcurrentHashMap::transfer @ bci:524 (line 2513)
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9727/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/1d6ddd57-1d54-42e6-9e30-de0cf9cd6984/runs/351ce9aa-3534-44ef-9871-1a02b65a033e/workspace/open/src/hotspot/share/opto/compile.cpp:4929), pid=554535, tid=554551
#  assert(false) failed: node should be in igvn hash table
#
# JRE version: Java(TM) SE Runtime Environment (22.0+27) (fastdebug build 22-ea+27-2156)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 22-ea+27-2156, mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
# Problematic frame:
# V  [libjvm.so+0x8c6908]  Compile::remove_speculative_types(PhaseIterGVN&) [clone .part.0]+0x9c8
#
# Core dump will be written. Default location: Core dumps may be processed with "/opt/core.sh %p" (or dumping to /opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S10314/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/f2cdc390-4963-4503-ae56-73d3c828108d/runs/58798190-eb32-4a2e-b757-88d1782b5ddc/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_loom/scratch/3/core.554535)
#
# An error report file with more information is saved as:
# /opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S10314/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/f2cdc390-4963-4503-ae56-73d3c828108d/runs/58798190-eb32-4a2e-b757-88d1782b5ddc/testoutput/test-support/jtreg_open_test_hotspot_jtreg_hotspot_loom/scratch/3/hs_err_pid554535.log
[thread 554558 also had an error]
------ Timeout during error reporting after 120 s. ------
# [ timer expired, abort... ]
----------System.out:(1/53)----------
Here's the crashing thread's stack:
---------------  T H R E A D  ---------------
Current thread (0x0000ffff84304bf0):  JavaThread "C2 CompilerThread0" daemon [_thread_in_native, id=554551, stack(0x0000ffff55009000,0x0000ffff55207000) (2040K)]
Current CompileTask:
C2:958  559 % !   4       java.util.concurrent.ConcurrentHashMap::transfer @ 96 (849 bytes)
Stack: [0x0000ffff55009000,0x0000ffff55207000],  sp=0x0000ffff55201e20,  free space=2019k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x8c6908]  Compile::remove_speculative_types(PhaseIterGVN&) [clone .part.0]+0x9c8  (compile.cpp:4929)
V  [libjvm.so+0x8e04bc]  Compile::Optimize()+0x31c  (compile.cpp:4907)
V  [libjvm.so+0x8e36f0]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x14a0  (compile.cpp:857)
V  [libjvm.so+0x739860]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x17c  (c2compiler.cpp:134)
V  [libjvm.so+0x8eef74]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x7e0  (compileBroker.cpp:2299)
V  [libjvm.so+0x8efb5c]  CompileBroker::compiler_thread_loop()+0x598  (compileBroker.cpp:1958)
V  [libjvm.so+0xd6d8a8]  JavaThread::thread_main_inner()+0xe4  (javaThread.cpp:720)
V  [libjvm.so+0x159c910]  Thread::call_run()+0xac  (thread.cpp:220)
V  [libjvm.so+0x130f6ac]  thread_native_entry(Thread*)+0x12c  (os_linux.cpp:787)
C  [libpthread.so.0+0x7928]  start_thread+0x188

-----
Title: [JDK-8321479] java -D-D crashes
Priority: P3
Type: Bug
Component: hotspot
Description: (I have replaced my personal info with  in error message below)
java -D-D
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (//dev/git/openjdk/jdk2/open/src/hotspot/share/runtime/arguments.cpp:322), pid=95956, tid=8707
#  assert((strncmp(property, "-D", 2) != 0)) failed: Unexpected leading -D
#
# JRE version:  (22.0) (fastdebug build )
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 22-internal-2023-12-06-1614439...., mixed mode, sharing, tiered, compressed class ptrs, unknown gc, bsd-amd64)
# No core dump will be written. Core dumps have been disabled. To enable core dumping, try "ulimit -c unlimited" before starting Java again
#
...
#
Abort trap: 6

-----
Title: [JDK-8321931] memory_swap_current_in_bytes reports 0 as "unlimited"
Priority: P4
Type: Bug
Component: hotspot
Description: memory_swap_current_in_bytes is not a limit, but reports its value of 0 as "unlimited"
OS: linux

-----
Title: [JDK-8322141] SequenceInputStream.transferTo should not return as soon as Long.MAX_VALUE bytes have been transferred
Priority: P4
Type: Bug
Component: core-libs
Description: Currently the code in SequenceInputStream.transferTo() contains
if (transferred

-----
Title: [JDK-8322475] Extend printing for System.map
Priority: P4
Type: Enhancement
Component: hotspot
Description: Make System.map and System.dump_map drastically more useful by adding:
- the actual memory used per mapping (RSS)
- the actual page size of the mapping
- THP state (used, advised, eligible, forbidden)
- the commit state
- swap state
Also, provide a summary for:
- total RSS
- total size of hugetlb memory
- how much memory uses THPs
- how much memory had been swapped out
- how much memory was committed
OS: linux

-----
Title: [JDK-8323795] jcmd Compiler.codecache should print total size of code cache
Priority: P4
Type: Enhancement
Component: hotspot
Description: CodeHeap 'non-profiled nmethods': size=118592Kb used=29Kb max_used=29Kb free=118562Kb
bounds [0x00007fbe84622000, 0x00007fbe84892000, 0x00007fbe8b9f2000]
CodeHeap 'profiled nmethods': size=118588Kb used=80Kb max_used=80Kb free=118507Kb
bounds [0x00007fbe7c9f2000, 0x00007fbe7cc62000, 0x00007fbe83dc1000]
CodeHeap 'non-nmethods': size=8580Kb used=1258Kb max_used=1834Kb free=7321Kb
bounds [0x00007fbe83dc1000, 0x00007fbe84031000, 0x00007fbe84622000]
total_blobs=474 nmethods=87 adapters=293
compilation: enabled
stopped_count=0, restarted_count=0
full_count=0
It's better to accumulates total size of used/free/size, for example
CodeHeap 'non-profiled nmethods': size=118592Kb used=29Kb max_used=29Kb free=118562Kb
bounds [0x00007fbe84622000, 0x00007fbe84892000, 0x00007fbe8b9f2000]
CodeHeap 'profiled nmethods': size=118588Kb used=80Kb max_used=80Kb free=118507Kb
bounds [0x00007fbe7c9f2000, 0x00007fbe7cc62000, 0x00007fbe83dc1000]
CodeHeap 'non-nmethods': size=8580Kb used=1258Kb max_used=1834Kb free=7321Kb
bounds [0x00007fbe83dc1000, 0x00007fbe84031000, 0x00007fbe84622000]
total_blobs=474 nmethods=87 adapters=293
compilation: enabled
stopped_count=0, restarted_count=0
full_count=0
Total CodeHeap:
size=245760Kb, used=1367Kb, max used=1943Kb, free=244390Kb

-----
Title: [JDK-8324345] Stack overflow during C2 compilation when splitting memory phi
Priority: P3
Type: Bug
Component: hotspot
Description: # Failure analysis
ConnectionGraph::find_inst_mem contains recursive calls that can lead to a native C++ stack overflow in some cases.
# Original description
The C2 crashes without hs_err generation.
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
Core was generated by `/home/lmesnik/ws/jdk-jck/build/linux-x64/images/jdk/bin/java --enable-preview -'.
Program terminated with signal SIGSEGV, Segmentation fault.
#0  0x00007fd8678a4e74 in PhiNode::verify_adr_type (this=this@entry=0x7fd7daf45928, recursive=recursive@entry=true) at /home/lmesnik/ws/jdk-jck/open/src/hotspot/share/opto/cfgnode.cpp:1188
1188	  if (VMError::is_error_reported())  return;  // muzzle asserts when debugging an error
[Current thread is 1 (Thread 0x7fd84496d640 (LWP 605955))]
With instrumentation mentioned in comments:
# A fatal error has been detected by the Java Runtime Environment:
#
# Internal Error (/opt/mach5/mesos/work_dir/slaves/0db9c48f-6638-40d0-9a4b-bd9cc7533eb8-S9922/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/bb2a42a8-b515-4ca4-871f-d848b5f874f4/runs/4c895d9f-7833-4a7a-bd1d-cca0ad6bce55/workspace/open/src/hotspot/share/opto/cfgnode.cpp:1162), pid=947068, tid=947140
# assert(count &)+0x327
V [libjvm.so+0xbb6508] ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&)+0x1e8
V [libjvm.so+0xbb5fb9] ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&)+0xa19
V [libjvm.so+0xbb6508] ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&)+0x1e8
V [libjvm.so+0xbb5fb9] ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&)+0xa19
V [libjvm.so+0xbb592b] ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&)+0x38b
V [libjvm.so+0xbb6508] ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&)+0x1e8
V [libjvm.so+0xbb5fb9] ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&)+0xa19
V [libjvm.so+0xbb6508] ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&)+0x1e8
V [libjvm.so+0xbb5fb9] ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&)+0xa19
V [libjvm.so+0xbb6508] ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&)+0x1e8
V [libjvm.so+0xbb5fb9] ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&)+0xa19
V [libjvm.so+0xbb592b] ConnectionGraph::find_inst_mem(Node*, int, GrowableArray&)+0x38b
V [libjvm.so+0xbb6508] ConnectionGraph::split_memory_phi(PhiNode*, int, GrowableArray&)+0x1e8

-----
Title: [JDK-8324678] Replace NULL with nullptr in HotSpot gtests
Priority: P4
Type: Enhancement
Component: hotspot
Description: Umbrella issue to cover the replacement of NULL with nullptr in the HotSpot gtests.  There are presently about 500 occurrences in about 75 files.
Because of the number of files and occurrences, this should be broken up into more manageable chunks by sub-tasks.
This addresses a category of NULL uses that wasn't dealt with by JDK-8299837.

-----
Title: [JDK-8324681] Replace NULL with nullptr in HotSpot jtreg test native code files
Priority: P4
Type: Enhancement
Component: hotspot
Description: Umbrella issue to cover the replacement of NULL with nullptr in the native code support files for HotSpot jtreg tests.
Outside of vmTestbase there are about 1700 occurrences in about 200 files.  In vmTestbase there are over 6000 occurrences in about 650 files.
Because of the large number of files and occurrences, this should be broken up into more manageable chunks by sub-tasks.
This addresses a category of NULL uses that wasn't dealt with by JDK-8299837.

-----
Title: [JDK-8324799] Use correct extension for C++ test headers
Priority: P4
Type: Enhancement
Component: hotspot
Description: There are a number of header files in test/hotspot/jtreg that have ".h" extensions but are actually C++ code, or are at least only included by C++ files.  Rename them, to follow normal HotSpot style.
Also rename uses of NULL to nullptr in the renamed headers, as that change is not included in the in-progress JDK-8324681.  The PR for that RFE only changed properly named C++ files.

-----
Title: [JDK-8324880] Rename get_stack_trace.h
Priority: P4
Type: Sub-task
Component: hotspot
Description: Renames the file test/hotspot/jtreg/serviceability/jvmti/thread/GetStackTrace/get_stack_trace.h to get_stack_trace.hpp, and rename uses of NULL in this file.
This file is only included from .cpp files.

-----
Title: [JDK-8325055] Rename Injector.h
Priority: P4
Type: Sub-task
Component: hotspot
Description: Rename the file test/hotspot/jtreg/vmTestbase/nsk/share/jvmti/Injector.h to Injector.hpp.  Note that this file contains no occurrences of NULL.
This file contains C++ code, so should not have a .h extension.

-----
Title: [JDK-8325180] Rename jvmti_FollowRefObjects.h
Priority: P4
Type: Sub-task
Component: hotspot
Description: Rename the file test/hotspot/jtreg/vmTestbase/nsk/share/jvmti/jvmti_FollowRefObjects.h to jvmti_FollowRefObjects.hpp, and replaces uses of NULL in the file.
The file contains C++ code, so should not have a .h extension.

-----
Title: [JDK-8325347] Rename native_thread.h
Priority: P4
Type: Sub-task
Component: hotspot
Description: Rename the file test/hotspot/jtreg/vmTestbase/nsk/share/native/native_thread.h to native_thread.hpp. Also replace uses of NULL in that file.
The file contains C++ code, so should not have a .h extension.

-----
Title: [JDK-8325367] Rename nsk_list.h
Priority: P4
Type: Sub-task
Component: hotspot
Description: Rename the file test/hotspot/jtreg/vmTestbase/nsk/share/native/nsk_list.h to nsk_list.hpp.
The file contains C++ code, so should not have a .h extension.

-----
Title: [JDK-8325435] [macos] Menu or JPopupMenu not closed when main window is resized
Priority: P4
Type: Bug
Component: client-libs
Description: Please check the attached example program. Open a menu or JPopupmenu and then resize the whole windows by using the lower right corner.
The Menu / JPopupmenu stays while resizing.
This can be observed at least on macOS 14 and 13 .
This differs from Windows where the Menu closes when resizing the Window.
OS: os_x

-----
Title: [JDK-8325456] Rename nsk_mutex.h
Priority: P4
Type: Sub-task
Component: hotspot
Description: Rename the file test/hotspot/jtreg/vmTestbase/nsk/share/native/nsk_mutex.h to nsk_mutex.hpp.
The file contains C++ code, so should not have a .h extension.

-----
Title: [JDK-8325458] Rename mlvmJvmtiUtils.h
Priority: P4
Type: Sub-task
Component: hotspot
Description: Rename the file test/hotspot/jtreg/vmTestbase/vm/mlvm/share/mlvmJvmtiUtils.h to mlvmJvmtiUtils.hpp.
The file contains C++ code, so should not have a .h extension.

-----
Title: [JDK-8325680] Uninitialised memory in deleteGSSCB of GSSLibStub.c:179
Priority: P3
Type: Bug
Component: security-libs
Description: Uninitialised memory in deleteGSSCB of GSSLibStub.c:179

-----
Title: [JDK-8325682] Rename nsk_strace.h
Priority: P4
Type: Sub-task
Component: hotspot
Description: Rename the file test/hotspot/jtreg/vmTestbase/nsk/stress/strace/nsk_strace.h to nsk_strace.hpp, and replace uses of NULL in the file.
The file contains C++ code, so should not have a .h extension.

-----
Title: [JDK-8325910] Rename jnihelper.h
Priority: P4
Type: Sub-task
Component: hotspot
Description: Rename the file test/hotspot/jtreg/vmTestbase/nsk/stress/jni/jnihelper.h to jnihelper.hpp. Also replace uses of NULL in that file.
The file contains C++ code, so should not have a .h extension.

-----
Title: [JDK-8326090] Rename jvmti_aod.h
Priority: P4
Type: Sub-task
Component: hotspot
Description: Rename the file test/hotspot/jtreg/vmTestbase/nsk/share/jvmti/aod/jvmti_aod.h to jvmti_aod.hpp, and replace uses of NULL in the file.
The file contains C++ code, so should not have a .h extension.

-----
Title: [JDK-8326389] [test] improve assertEquals failure output
Priority: P4
Type: Bug
Component: infrastructure
Description: Currently assertEquals has in the failure case sometimes confusing output like :
java.lang.RuntimeException: VM output should contain exactly one RTM locking statistics entry for method compiler.rtm.locking.TestRTMTotalCountIncrRate$Test::lock: expected 0 to equal 1
at jdk.test.lib.Asserts.fail(Asserts.java:634)
at jdk.test.lib.Asserts.assertEquals(Asserts.java:205)
(I don't think we really expected that for some reason 0 equals 1)
This should be improved.
OS: generic

-----
Title: [JDK-8326524] Rename agent_common.h
Priority: P4
Type: Sub-task
Component: hotspot
Description: Rename the file test/hotspot/jtreg/vmTestbase/nsk/share/jvmti/agent_common/agent_common.h to agent_common.hpp.
The file contains C++ code, so should not have a .h extension.

-----
Title: [JDK-8326586] Improve Speed of System.map
Priority: P4
Type: Enhancement
Component: hotspot
Description: System.map performs a NMT-region lookup by address; since these lookups are usually in order, we can optimize the lookup.

-----
Title: [JDK-8327071] [Testbug] g-tests for cgroup leave files in /tmp on linux
Priority: P4
Type: Bug
Component: hotspot
Description: After each run of the g-tests for cgroups on Linux there are three new files left in /tmp.
cgroups-test-jdk.pid.cgroupTest.SubSystemFileLineContentsSingleLine
cgroups-test-jdk.pid.cgroupTest.SubSystemFileLineContentsMultipleLinesSuccessCases
cgroups-test-jdk.pid.cgroupTest.SubSystemFileLineContentsMultipleLinesErrorCases
OS: linux

-----
Title: [JDK-8327169] serviceability/dcmd/vm/SystemMapTest.java and SystemDumpMapTest.java may fail after JDK-8326586
Priority: P3
Type: Bug
Component: hotspot
Description: The following test failed in the JDK23 CI:
serviceability/dcmd/vm/SystemMapTest.java
Here's a snippet from the log file:
---------------- stderr ----------------
----------------------------------------
test SystemMapTest.jmx(): failure
java.lang.RuntimeException: '.*0x\\p{XDigit}+ - 0x\\p{XDigit}+ +\\d+.*JAVAHEAP.*' missing from stdout/stderr
at jdk.test.lib.process.OutputAnalyzer.shouldMatch(OutputAnalyzer.java:371)
at SystemMapTest.run(SystemMapTest.java:57)
at SystemMapTest.jmx(SystemMapTest.java:66)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:102)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.VirtualThread.run(VirtualThread.java:329)
===============================================
serviceability/dcmd/vm/SystemMapTest.java
Total tests run: 1, Passes: 0, Failures: 1, Skips: 0
===============================================
----------System.err:(774/73858)----------
The test task's JVM args for this run are:
-Duse.JTREG_TEST_THREAD_FACTORY=Virtual -XX:+UseZGC -XX:+ZGenerational -XX:-VerifyContinuations
This failure first showed up in jdk-23+13-925-tier5 which only contains the fix for:
JDK-8326586 Improve Speed of System.map
so I've tagged this bug as a regression.
OS: linux

-----
Title: [JDK-8327370] (ch) sun.nio.ch.Poller.register throws AssertionError
Priority: P3
Type: Bug
Component: core-libs
Description: java.lang.AssertionError
at java.base/sun.nio.ch.Poller.register(Poller.java:192)
at java.base/sun.nio.ch.Poller.poll(Poller.java:171)
at java.base/sun.nio.ch.Poller.poll(Poller.java:137)
at java.base/sun.nio.ch.DatagramChannelImpl.park(DatagramChannelImpl.java:494)
at java.base/sun.nio.ch.SelChImpl.park(SelChImpl.java:116)
at java.base/sun.nio.ch.DatagramChannelImpl.untrustedReceive(DatagramChannelImpl.java:646)
at java.base/sun.nio.ch.DatagramChannelImpl.receive(DatagramChannelImpl.java:599)
From the traces I managed to obtain after adding a debug message to the AssertionError, it seems that a terminated virtual thread is still registered with the poller at the time a runnable VirtualThread tries to register.
OS: os_x

-----
Title: [JDK-8327461] KeyStore getEntry is not thread-safe
Priority: P4
Type: Bug
Component: security-libs
Description: When the KeyStore is concurrently modified, keyStore.getEntry might fail or return a non-matching private key / certificate pair. This is because PKCS12KeyStore.engineGetEntry calls engineGetKey and engineGetCertificateChain without any synchronization with engineSetEntry.
This is a problem for the PKIX KeyManager (sun.security.ssl.X509KeyManagerImpl), which retrieves the entries from the KeyStore on every handshake. Currently this only impacts the handshakes that are running at the same time as the keystore update, but in JDK-8322767 we are exploring caching the entries on first use, and caching the incorrect entries would affect all handshakes until the next keystore update.
To reproduce:
- Create a PKCS12 key store, and 2 KeyStore.PrivateKeyEntry instances, one with EC key/certificate, one with RSA key/certificate.
- create one thread that calls setEntry in a loop using the same alias, but alternating between the entries:
- in another thread call getEntry in a loop
see the attached reproducer (incomplete, needs keys).
The code quickly fails with the following exception:
Exception in thread "main" java.lang.IllegalArgumentException: private key algorithm does not match algorithm of public key in end entity certificate (at index 0)
at java.base/java.security.KeyStore$PrivateKeyEntry.(KeyStore.java:552)
at java.base/sun.security.pkcs12.PKCS12KeyStore.engineGetEntry(PKCS12KeyStore.java:1338)
at java.base/sun.security.util.KeyStoreDelegator.engineGetEntry(KeyStoreDelegator.java:174)
at java.base/java.security.KeyStore.getEntry(KeyStore.java:1576)
Reproducer:
public static final String TEST = "test";
private static void test(KeyStore ks, KeyStore.PrivateKeyEntry ec,
KeyStore.PrivateKeyEntry rsa,
KeyStore.PasswordProtection protParam)
throws Exception {
ks.setEntry(TEST, ec, protParam);
new Thread(()-{while(true) {
try {
ks.setEntry(TEST, ec, protParam);
ks.setEntry(TEST, rsa, protParam);
} catch (KeyStoreException e) {
e.printStackTrace();
System.exit(1);
}
}
}).start();
while(true) {
ks.getEntry(TEST, protParam);
}
}

-----
Title: [JDK-8328107] Shenandoah/C2: TestVerifyLoopOptimizations test failure
Priority: P3
Type: Bug
Component: hotspot
Description: Running the following test:
make run-test TEST=compiler/loopopts/TestVerifyLoopOptimizations.java TEST_VM_OPTS="-XX:+UseShenandoahGC"
fails with:
#  Internal Error (/home/admin/src/openjdk/jdk/src/hotspot/share/opto/loopnode.hpp:470), pid=2362836, tid=2362881
#  assert(cle != nullptr) failed: loopexit is null
Current CompileTask:
C2:18095 3693    b  4       java.lang.invoke.LambdaMetafactory::metafactory (71 bytes)
Stack: [0x0000fffee79e6000,0x0000fffee7be4000],  sp=0x0000fffee7bde510,  free space=2017k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x11e7a94]  IdealLoopTree::verify_tree(IdealLoopTree*) const+0x6d4  (loopnode.hpp:470)
V  [libjvm.so+0x11e78a8]  IdealLoopTree::verify_tree(IdealLoopTree*) const+0x4e8  (loopnode.cpp:5149)
V  [libjvm.so+0x11ea728]  PhaseIdealLoop::verify() const+0x2d8  (loopnode.cpp:4926)
V  [libjvm.so+0x11eb30c]  PhaseIdealLoop::build_and_optimize()+0xa4c  (loopnode.cpp:4725)
V  [libjvm.so+0x930094]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x304  (loopnode.hpp:1115)
V  [libjvm.so+0x929b5c]  Compile::optimize_loops(PhaseIterGVN&, LoopOptsMode)+0x68  (compile.cpp:2189)
V  [libjvm.so+0x1653c94]  ShenandoahBarrierC2Support::expand(Compile*, PhaseIterGVN&)+0xd0  (shenandoahSupport.cpp:58)
V  [libjvm.so+0x1582554]  ShenandoahBarrierSetC2::expand_barriers(Compile*, PhaseIterGVN&) const+0x14  (shenandoahBarrierSetC2.cpp:750)
V  [libjvm.so+0x92ba7c]  Compile::Optimize()+0xcdc  (compile.cpp:2465)
V  [libjvm.so+0x92e75c]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x15a8  (compile.cpp:861)
V  [libjvm.so+0x77a838]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x174  (c2compiler.cpp:142)
V  [libjvm.so+0x93b364]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xab0  (compileBroker.cpp:2305)
V  [libjvm.so+0x93bf74]  CompileBroker::compiler_thread_loop()+0x634  (compileBroker.cpp:1964)
V  [libjvm.so+0xdf3f70]  JavaThread::thread_main_inner()+0xec  (javaThread.cpp:721)
V  [libjvm.so+0x179d104]  Thread::call_run()+0xb0  (thread.cpp:221)
V  [libjvm.so+0x13debb8]  thread_native_entry(Thread*)+0x138  (os_linux.cpp:864)
It only seems to happen with Shenandoah, not with other GCs. Also, I can easily reproduce the problem on linux-x86_64 and linux-aarch64, but not on macosx-aarch64.
The assert seems to have started occuring with JDK-8309622, but I don't think this is the root cause of the problem.
OS: generic

-----
Title: [JDK-8328301] Convert Applet test ManualHTMLDataFlavorTest.java to main program
Priority: P4
Type: Bug
Component: client-libs
Description: java/awt/datatransfer/HTMLDataFlavors/ManualHTMLDataFlavorTest.java
is an applet-based manual test that can be converted to a main program

-----
Title: [JDK-8328482] Convert and Open source few manual applet test to main based
Priority: P4
Type: Bug
Component: client-libs
Description: Convert these manual applet test to main based:
java/awt/Frame/MegaIconTest/MegaIconTest.html
java/awt/Frame/FrameMaximizedTest/FrameMaximizedTest.html
java/awt/Frame/FrameMinimizeTest/FrameMinimizeTest.html
java/awt/Frame/SizeMinimizedTest/SizeMinimizedTest.html
OS: generic

-----
Title: [JDK-8328484] Convert and Opensource few JFileChooser applet test to main
Priority: P4
Type: Bug
Component: client-libs
Description: JFileChooser closed manual applet based tests to be converted to main-based manual test and opensourced
javax/swing/JFileChooser/FileSelectionTests/FileSelectionTests.html
javax/swing/JFileChooser/ShowHiddenFiles/ShowHiddenFiles.html
javax/swing/JFileChooser/EnterEmptyDirectory/EnterEmptyDirectory.html

-----
Title: [JDK-8328648] Remove applet usage from JFileChooser tests bug4150029
Priority: P4
Type: Bug
Component: client-libs
Description: Removing deprecated applet usage from JFileChooser tests
open/test/jdk/javax/swing/JFileChooser/4150029/bug4150029.java

-----
Title: [JDK-8328670] Automate and open source few closed manual applet test
Priority: P4
Type: Bug
Component: client-libs
Description: Few closed manual applet based tests to be converted to automated one and open sourced
java/awt/swing/event/KeyEvent/MenuShortCut/JActionCommandTest.html
javax/swing/JInternalFrame/4199401/Ctrli.html

-----
Title: [JDK-8328673] Convert closed text/html/CSS manual applet test to main
Priority: P4
Type: Bug
Component: client-libs
Description: COnvert closed text/html/CSS manual applet test to main using PassFailJFrame manual framework

-----
Title: [JDK-8328864] NullPointerException in sun.security.jca.ProviderList.getService()
Priority: P4
Type: Bug
Component: security-libs
Description: Consider this trivial application code:
import java.security.*;
public class KeyStoreTest {
public static void main(final String[] args) throws Exception {
final KeyStore ks = KeyStore.getInstance("PKCS12");
System.out.println("Got keystore " + ks);
}
}
When compiled and run without any additional security properties as follows, it works fine:
java KeyStoreTest
Got keystore java.security.KeyStore@6b884d57
Now create a file "/tmp/app-security.properties"  file with the following contents (it sets a security property)
jdk.security.provider.preferred=KeyStore.PKCS12:JipherJCE
and run that program as follows by passing "/tmp/app-security.properties" to -Djava.security.properties:
java -Djava.security.properties=/tmp/app-security.properties KeyStoreTest
This time it throws a NullPointerException:
Exception in thread "main" java.lang.NullPointerException: Cannot invoke "java.security.Provider.getService(String, String)" because "p" is null
at java.base/sun.security.jca.ProviderList.getService(ProviderList.java:376)
at java.base/sun.security.jca.GetInstance.getInstance(GetInstance.java:157)
at java.base/java.security.Security.getImpl(Security.java:658)
at java.base/java.security.KeyStore.getInstance(KeyStore.java:870)
at KeyStoreTest.main(KeyStoreTest.java:7)
I ran this on Java 22 but is applicable for lower Java versions too.

-----
Title: [JDK-8329261] G1: interpreter post-barrier x86 code asserts index size of wrong buffer
Priority: P4
Type: Bug
Component: hotspot
Description: The following assertion within G1BarrierSetAssembler::g1_write_barrier_post() in src/hotspot/cpu/x86/gc/g1/g1BarrierSetAssembler_x86.cpp:
// Generated code assumes that buffer index is pointer sized.
STATIC_ASSERT(in_bytes(SATBMarkQueue::byte_width_of_index()) == sizeof(intptr_t));
refers to the size of the index of the SATBMarkQueue buffer, which is unused in the post-barrier. It should probably refer instead to G1DirtyCardQueue::byte_width_of_index().
This issue was found by [~kbarrett].

-----
Title: [JDK-8329729] java/util/Properties/StoreReproducibilityTest.java times out
Priority: P4
Type: Bug
Component: core-libs
Description: In our CI, we have been seeing several instances where the java/util/Properties/StoreReproducibilityTest.java test has been timing  out. In such runs, the test does run to completion but appears to be taking 20 or more minutes to complete thus leading to a jtreg timeout.
#section:driver
----------messages:(10/344)----------
command: driver StoreReproducibilityTest
reason: User specified action: run driver StoreReproducibilityTest
started: Thu Apr 04 07:53:19 UTC 2024
Mode: agentvm
Agent id: 161
Timeout signalled after 1200 seconds
Timeout information:
--- Timeout information end.
finished: Thu Apr 04 08:17:12 UTC 2024
elapsed time (seconds): 1432.685
...
result: Error. Agent error: java.lang.Exception: Agent 161 timed out with a timeout of 1200 seconds; check console log for any additional details
test result: Error. Agent error: java.lang.Exception: Agent 161 timed out with a timeout of 1200 seconds; check console log for any additional details

-----
Title: [JDK-8330106] C2: VectorInsertNode::make() shouldn't call ConINode::make() directly
Priority: P4
Type: Bug
Component: hotspot
Description: It should call PhaseValues::intcon() instead.

-----
Title: [JDK-8330158] C2: Loop strip mining uses ABS with min int
Priority: P4
Type: Bug
Component: hotspot
Description: JDK-8328934 exposes more problems with ABS in loop strip mining.
$ make images test TEST=compiler/c2/MinValueStrideCountedLoop.java
#  Internal Error (/Users/shipilev/Work/shipilev-jdk/src/hotspot/share/opto/loopnode.cpp:2355), pid=78229, tid=27907
#  Error: ABS: argument should not allow overflow
Fixing that simple one exposes the next one:
#  Internal Error (/Users/shipilev/Work/shipilev-jdk/src/hotspot/share/opto/loopnode.cpp:2965), pid=32195, tid=27139
#  Error: ABS: argument should not allow overflow

-----
Title: [JDK-8330534] Update nsk/jdwp tests to use driver instead of othervm
Priority: P4
Type: Sub-task
Component: core-svc

-----
Title: [JDK-8330598] java/net/httpclient/Http1ChunkedTest.java fails with java.util.MissingFormatArgumentException: Format specifier '%s'
Priority: P4
Type: Bug
Component: core-libs
Description: ----------messages:(7/696)----------
command: main Http1ChunkedTest
reason: User specified action: run main/othervm Http1ChunkedTest
started: Tue Apr 09 15:57:13 UTC 2024
Mode: othervm [/othervm specified]
Additional options from @modules: --add-modules java.base,java.net.http,java.logging,jdk.httpserver --add-exports java.base/sun.net.www.http=ALL-UNNAMED --add-exports java.base/sun.net.www=ALL-UNNAMED --add-exports java.base/sun.net=ALL-UNNAMED --add-exports java.net.http/jdk.internal.net.http.common=ALL-UNNAMED --add-exports java.net.http/jdk.internal.net.http.frame=ALL-UNNAMED --add-exports java.net.http/jdk.internal.net.http.hpack=ALL-UNNAMED
finished: Tue Apr 09 15:57:14 UTC 2024
elapsed time (seconds): 1.025
----------configuration:(9/509)----------
Boot Layer
add modules: java.base java.net.http java.logging jdk.httpserver
add exports: java.base/sun.net                          ALL-UNNAMED
java.base/sun.net.www                      ALL-UNNAMED
java.base/sun.net.www.http                 ALL-UNNAMED
java.net.http/jdk.internal.net.http.common ALL-UNNAMED
java.net.http/jdk.internal.net.http.frame  ALL-UNNAMED
java.net.http/jdk.internal.net.http.hpack  ALL-UNNAMED
----------System.out:(2/76)----------
REQ0: http://127.0.0.1:58981/testChunkExt/REQ0
REQ0: Recieving request...
----------System.err:(16/992)----------
java.util.MissingFormatArgumentException: Format specifier '%s'
at java.base/java.util.Formatter.format(Formatter.java:2801)
at java.base/java.io.PrintStream.implFormat(PrintStream.java:1371)
at java.base/java.io.PrintStream.format(PrintStream.java:1350)
at java.base/java.io.PrintStream.printf(PrintStream.java:1249)
at Http1ChunkedTest.test(Http1ChunkedTest.java:100)
at Http1ChunkedTest.main(Http1ChunkedTest.java:61)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1575)
JavaTest Message: Test threw exception: java.util.MissingFormatArgumentException: Format specifier '%s'
JavaTest Message: shutting down test
STATUS:Failed.`main' threw exception: java.util.MissingFormatArgumentException: Format specifier '%s'
99:                     if (!received) {
100:                         System.out.printf("%s: Unexpected headers received: dropping request.%n");
101:                         continue;
102:                     }
should be
System.out.printf("%s: Unexpected headers received: dropping request.%n", name);
BUT could be viewed as javac issue i.e. missing args detected as compile time, same as with C compiler
OS: windows

-----
Title: [JDK-8330936] [ubsan] exclude function BilinearInterp and ShapeSINextSpan in libawt java2d from ubsan checks
Priority: P3
Type: Sub-task
Component: client-libs
Description: When running the  :tier4 of the jdk  jtreg  test  (java/awt,  javax/swing,  sun/java2d )  with binaries  compiled with -ftrapv
to catch signed integer overflows, we get reproducibly those signed int overflow  errors (similar to JDK-8330615) .
java/awt/Paint/PgramUserBoundsTest.java
#  SIGILL (0x4) at pc=0x000000010930a686, pid=3989, tid=43267
# Problematic frame:
# C  [libawt.dylib+0x51686]  ShapeSINextSpan+0x616
C  [libawt.so+0xd3e58]  ShapeSINextSpan+0x568  (ShapeSpanIterator.c:1366)
C  [libawt.so+0xd38b0]  Java_sun_java2d_pipe_ShapeSpanIterator_nextSpan+0x50  (ShapeSpanIterator.c:509)
j  sun.java2d.pipe.ShapeSpanIterator.nextSpan([I)Z+0 java.desktop@23.0.0.1-internal
and
java/awt/Scrollbar/AquaLFScrollbarTest/ScrollBarBorderTest.java
#  SIGILL (0x4) at pc=0x000000010c98243d, pid=4021, tid=40963
# Problematic frame:
# C  [libawt.dylib+0x5843d]  BilinearInterp+0x17d
C  [libawt.so+0xe3e97]  BilinearInterp+0x787  (TransformHelper.c:683)
C  [libawt.so+0xe6f84]  Java_sun_java2d_loops_TransformHelper_Transform+0xe64  (TransformHelper.c:499)
j  sun.java2d.loops.TransformHelper.Transform(Lsun/java2d/loops/MaskBlit;Lsun/java2d/SurfaceData;Lsun/java2d/SurfaceData;Ljava/awt/Composite;Lsun/java2d/pipe/Region;Ljava/awt/geom/AffineTransform;IIIIIIIII[III)V+0 java.desktop@23.0.0.1-internal
Seems there is no change to this coding intended in the short term  so I suggest to exclude the 2 functions from ubsan-checking .
OS: generic

-----
Title: [JDK-8331088] Incorrect TraceLoopPredicate output
Priority: P4
Type: Bug
Component: hotspot
Description: This line in PhaseIdealLoop::loop_predication_impl_helper prints the node index of the lower bounds check, not the upper bounds check:
if (TraceLoopPredicate) tty-print_cr("upper bound check if: %d", lower_bound_iff-_idx);

-----
Title: [JDK-8331735] UpcallLinker::on_exit races with GC when copying frame anchor
Priority: P3
Type: Bug
Component: core-libs
Description: A fatal error has been detected by the Java Runtime Environment:
SIGSEGV (0xb) at pc=0x0000ffff67e651a8, pid=1499163, tid=1499236
JRE version: Java(TM) SE Runtime Environment (23.0+22) (build 23-ea+22-1781)
Java VM: Java HotSpot(TM) 64-Bit Server VM (23-ea+22-1781, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
Problematic frame:
j  java.awt.Font.getFont2D()Lsun/font/Font2D;+0 java.desktop@23-ea
....
....
[warning][os] Loading hsdis library failed

-----
Title: [JDK-8332252] Clean up vmTestbase/vm/share
Priority: P4
Type: Enhancement
Component: hotspot
Description: There is some code in  vmTestbase/vm/share that is not used. Should be removed.
Some test-specific functionality should be moved into corresponding directories.

-----
Title: [JDK-8332506] SIGFPE In ObjectSynchronizer::is_async_deflation_needed()
Priority: P3
Type: Bug
Component: hotspot
Description: ADDITIONAL SYSTEM INFORMATION :
Host: Intel(R) Xeon(R) Silver 4215R CPU @ 3.20GHz, 4 cores, 15G, Red Hat Enterprise Linux release 8.8 (Ootpa)
JRE version: OpenJDK Runtime Environment (Red_Hat-21.0.1.0.12-2) (21.0.1+12) (build 21.0.1+12-LTS)
Java VM: OpenJDK 64-Bit Server VM (Red_Hat-21.0.1.0.12-2) (21.0.1+12-LTS, mixed mode, sharing, tiered, compressed class ptrs, z gc, linux-amd64)
Note this a VMWare VM
A DESCRIPTION OF THE PROBLEM :
The JVM seemingly randomly crashed with a SIGFPE Error
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGFPE (0x8) at pc=0x00007fd1ebb1f331, pid=802111, tid=802127
#
# JRE version: OpenJDK Runtime Environment (Red_Hat-21.0.1.0.12-2) (21.0.1+12) (build 21.0.1+12-LTS)
# Java VM: OpenJDK 64-Bit Server VM (Red_Hat-21.0.1.0.12-2) (21.0.1+12-LTS, mixed mode, sharing, tiered, compressed class ptrs, z gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xf46331]  ObjectSynchronizer::is_async_deflation_needed()+0x1e1
OS: generic

-----
Title: [JDK-8332631] Update nsk.share.jpda.BindServer to don't use finalization
Priority: P4
Type: Enhancement
Component: hotspot
Description: The BindServer starts several threads and opens streams.
It registers them for cleanup using "Finalizer" in nsk.share.framework.
This fix change BindServer to explicitly close streams and finish threads after test is completed.

-----
Title: [JDK-8332641] Update nsk.share.jpda.Jdb to don't use finalization
Priority: P4
Type: Enhancement
Component: core-svc
Description: The jdb should be update to explicitly close streams after test.

-----
Title: [JDK-8332880] JFR GCHelper class recognizes "Archive" regions as valid
Priority: P4
Type: Bug
Component: hotspot
Description: That class used for testing JFR events still mentions "Archive" regions which have been removed long ago.

-----
Title: [JDK-8332921] Ctrl+C does not call shutdown hooks after JLine upgrade
Priority: P3
Type: Bug
Component: tools
Description: JDK-8327476 broke handling of Ctrl+C. New version of JLine modifies SIGINT handler and therefore breaks normal processing of Ctrl+C.
To provoke the issue, it's enough to call System.console().
I attached SigIntTest.java that demonstrates the problem.
Before commit 0a4eeeaa, the program printed "Shutdown hook called".
Now, it immediately terminates upon pressing Ctrl+C or sending kill -2 to the process.
OS: linux

-----
Title: [JDK-8333013] Update vmTestbase/nsk/share/LocalProcess.java to don't use finalization
Priority: P4
Type: Enhancement
Component: core-svc
Description: The vmTestbase/nsk/share/LocalProcess.java is a wrapper for debuggee process. It extends FinalizableObject to kill the debuggee process.
The debuggee process is used by nsk.jdb tests only, see runTest(...) in vmTestbase/nsk/share/jdb/JdbTest.java:
https://github.com/openjdk/jdk/blob/master/test/hotspot/jtreg/vmTestbase/nsk/share/jdb/JdbTest.java#L189
I verfied that process is always already terminated when is cleaned during VM shutdown hook,
So the fix is just to remove the finalization.
I also moved LocalProcess into nsk.share.jdb to reduce visibility of class and hardened checks in runTest.

-----
Title: [JDK-8333117] Remove support of remote and manual debuggee launchers
Priority: P4
Type: Enhancement
Component: hotspot
Description: The nsk/jpda test suites support remote and manual launchers that have never been used.
Need to remove it.

-----
Title: [JDK-8333680] com/sun/tools/attach/BasicTests.java fails with "SocketException: Permission denied: connect"
Priority: P4
Type: Bug
Component: core-svc
Description: In some configurations (for example with active VPN) the test fails due SocketException:
[runApplication] Exception in thread "Attach Listener" java.lang.reflect.InvocationTargetException
[runApplication] 	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:118)
[runApplication] 	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
[runApplication] 	at java.instrument/sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:562)
[runApplication] 	at java.instrument/sun.instrument.InstrumentationImpl.loadClassAndCallAgentmain(InstrumentationImpl.java:582)
[runApplication] Caused by: java.net.SocketException: Permission denied: connect
[runApplication] 	at java.base/sun.nio.ch.Net.connect0(Native Method)
[runApplication] 	at java.base/sun.nio.ch.Net.connect(Net.java:589)
[runApplication] 	at java.base/sun.nio.ch.Net.connect(Net.java:578)
[runApplication] 	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:583)
[runApplication] 	at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:327)
[runApplication] 	at java.base/java.net.Socket.connect(Socket.java:760)
[runApplication] 	at java.base/java.net.Socket.connect(Socket.java:695)
[runApplication] 	at Agent.agentmain(Agent.java:41)
[runApplication] 	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
[runApplication] 	... 3 more
The test listens and connects using wildcard addresses.
The test should be updated to use loopback addresses

-----
Title: [JDK-8333805] Replaying compilation with null static final fields results in a crash
Priority: P4
Type: Bug
Component: hotspot
Description: I noticed the JVM sometimes crashes with a seg fault when replaying a compilation and found replay compilation doesn't properly handles null static final fields.

-----
Title: [JDK-8333890] Fatal error in auto-vectorizer with float16 kernel.
Priority: P4
Type: Bug
Component: hotspot
Description: Auto-vectorization of following float16 kernel results into a fatal error.
import java.util.Arrays;
public class float16_mainline_add {
public static short sum(short a, short b) {
return (short)Float.float16ToFloat(Float.floatToFloat16(Float.float16ToFloat(a) + Float.float16ToFloat(b)));
}
public static void micro(short [] r, short [] a, short [] b) {
for (int i = 0; i https://bugreport.java.com/bugreport/crash.jsp
#
Aborted (core dumped)
Command Line: java -XX:+TraceSuperWord -XX:CompileOnly=float16_mainline_add::micro -Xbatch -XX:-TieredCompilation -cp . float16_mainline_add

-----
Title: [JDK-8334644] Automate javax/print/attribute/PageRangesException.java
Priority: P4
Type: Bug
Component: client-libs
Description: The javax/print/attribute/PageRangesException.java test is a manual test that relies on output to the console. Such a test doesn't integrate well with the jtreg framework.
The test can be automatic: it should catch the expected exceptions but it has to throw an exception to fail the test if the expected exception isn't thrown.

-----
Title: [JDK-8334780] Crash: assert(h_array_list.not_null()) failed: invariant
Priority: P4
Type: Bug
Component: hotspot
Description: Test: jdk/jfr/event/gc/detailed/TestPromotionFailedEventWithDefNew.java
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  Internal Error (/opt/mach5/mesos/work_dir/slaves/a4a7850a-7c35-410a-b879-d77fbb2f6087-S12578/frameworks/1735e8a2-a1db-478c-8104-60c8b0af87dd-0196/executors/d0354406-c0ff-476e-8d2f-031519669c48/runs/4e171abe-b62c-430d-abf3-72ffa822a04b/workspace/open/src/hotspot/share/jfr/support/jfrJdkJfrEvent.cpp:139), pid=7946, tid=8169
#  assert(h_array_list.not_null()) failed: invariant
#
# JRE version: Java(TM) SE Runtime Environment (24.0+4) (fastdebug build 24-ea+4-288)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 24-ea+4-288, mixed mode, sharing, tiered, compressed oops, compressed class ptrs, serial gc, linux-amd64)
# Problematic frame:
# V  [libjvm.so+0xeea73f]  JdkJfrEvent::get_all_klasses(JavaThread*)+0xbef

-----
Title: [JDK-8334895] OpenJDK fails to configure on linux aarch64 when CDS is disabled after JDK-8331942
Priority: P4
Type: Bug
Component: hotspot
Description: The issue was detected when building openjdk-17 in Ubuntu Oracular[1].
The relevant part of the build log:
---
checking if CDS archive is available... no (CDS is disabled)
checking if a default CDS archive should be generated... disabled, from default 'auto'
checking if CDS archive is available... no (CDS is disabled)
checking if compatible cds region alignment enabled... enabled, default
configure: error: Option --enable-compatible-cds-alignment is not available
configure exiting with result code 1
make: *** [debian/rules:1065: stamps/zero-configure] Error 1
dpkg-buildpackage: error: debian/rules binary-arch subprocess returned exit status 2
---
[1] https://launchpadlibrarian.net/736468576/buildlog_ubuntu-oracular-arm64.openjdk-17_17.0.12~5ea-1~ppa2_BUILDING.txt.gz
OS: linux

-----
Title: [JDK-8331942] On Linux aarch64, CDS archives should be using 64K alignment by default
Priority: P4
Type: Enhancement
Component: hotspot
Description: On Linux aarch64, a JVM may encounter with three different page sizes: 4K, 64K and (when run on Mac M1 hardware) 16K.
Since forgetting to specify --enable-compatible-cds-alignment is a common error, one which is only noticed when running the produced JVM on hardware with different page size, it makes sense to enable that option by default on Linux aarch64.

-----
Title: [JDK-8335181] Incorrect handling of HTTP/2 GOAWAY frames in HttpClient
Priority: P3
Type: Bug
Component: core-libs
Description: A DESCRIPTION OF THE PROBLEM :
The setup is
- nginx as reverse proxy with SSL and http/2
- REST API behind nginx
The application performs many requests to that API using HttpClient from JDK, which automatically detects http/2 via ALPN.
nginx closes connection after 1000 requests, configurable with the keepalive_requests directive (applies for both http/1.1 persistent connections and http/2).
If specifically configuring the client as http/1.1 then everything works.
Also happens in java 17.
The stacktrace is
java.io.IOException: /172.30.30.7:51892: GOAWAY received
at java.net.http/jdk.internal.net.http.Http2Connection.handleGoAway(Http2Connection.java:1011)
at java.net.http/jdk.internal.net.http.Http2Connection.handleConnectionFrame(Http2Connection.java:876)
at java.net.http/jdk.internal.net.http.Http2Connection.processFrame(Http2Connection.java:751)
at java.net.http/jdk.internal.net.http.frame.FramesDecoder.decode(FramesDecoder.java:155)
at java.net.http/jdk.internal.net.http.Http2Connection$FramesController.processReceivedData(Http2Connection.java:232)
at java.net.http/jdk.internal.net.http.Http2Connection.asyncReceive(Http2Connection.java:677)
at java.net.http/jdk.internal.net.http.Http2Connection$Http2TubeSubscriber.processQueue(Http2Connection.java:1313)
All suggesting to either downgrade to http/1.1 or change the client.
OS: generic

-----
Title: [JDK-8335643] serviceability/dcmd/vm tests fail for ZGC after JDK-8322475
Priority: P4
Type: Bug
Component: hotspot
Description: Two tests fail, presumably after JDK-8322475. The tests are failing when run with "-XX:+UseZGC" (and "-XX:+UseZGC -XX:-ZGenerational"), not yet sure if other modes also trigger the failures.
serviceability/dcmd/vm/SystemMapTest.java
test SystemMapTest.jmx(): failure
java.lang.RuntimeException: '0x\\p{XDigit}+-0x\\p{XDigit}+ +\\d+ +[rwsxp-]+ +\\d+ +\\d+ +(4K|8K|16K|64K|2M|16M|64M) +com.*JAVAHEAP.*' missing from stdout/stderr
at jdk.test.lib.process.OutputAnalyzer.shouldMatch(OutputAnalyzer.java:371)
at SystemMapTest.run(SystemMapTest.java:50)
at SystemMapTest.jmx(SystemMapTest.java:57)
serviceability/dcmd/vm/SystemDumpMapTest.java
Missing patterns in dump:
0x\\p{XDigit}+-0x\\p{XDigit}+ +\\d+ +[rwsxp-]+ +\\d+ +\\d+ +(4K|8K|16K|64K|2M|16M|64M) +com.*JAVAHEAP.*
test SystemDumpMapTest.jmx(): failure
java.lang.RuntimeException: java.lang.RuntimeException: Missing patterns
...
OS: linux

-----
Title: [JDK-8335662] [AArch64] C1: guarantee(val < (1ULL << nbits)) failed: Field too big for insn
Priority: P3
Type: Bug
Component: hotspot
Description: The ComplexLockingAndMultiThreading.class (encounters bug) has been produced by fuzzing the class-file, from the ComplexLockingAndMultiThreading.java (this runs just fine).
Reproduces on JDK 22, 23, 24
Probably older versions are affected by the bug, but for JDK21 the class-file format is too new. See more info below.
---------- Summary -------------
Most likely, the locals table exceeds a certain size, and that creates a much larger offset than expected, which the aarch64 backend is not ready to handle.
The size of the table is 4100 = 0x1004. The offset is 32824 = 0x8038.
Most likely, this is an issue in the aarch64 backend, and the encoding must be fixed.
A similar bug that I had found recently, and is fixed already:
JDK-8319690: [AArch64] C2 compilation hits offset_ok_for_immed: assert "c2 compiler bug"
---------- Reproducing -------------
java ComplexLockingAndMultiThreading
debug:
#  Internal Error (/scratch/empeter/jdk-fork1/open/src/hotspot/cpu/aarch64/assembler_aarch64.hpp:548), pid=2672487, tid=2672502
#  assert(offset_ok_for_immed(offset(), size)) failed: must be, was: 32824, 3
#
# JRE version: Java(TM) SE Runtime Environment (23.0) (fastdebug build 23-internal-2024-05-22-1101113.empeter...)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 23-internal-2024-05-22-1101113.empeter..., mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)
Current CompileTask:
C1:139   44 %s!   3       ComplexLockingAndMultiThreading::synchronizedMethod @ 23 (74 bytes)
Stack: [0x0000fffd8cb70000,0x0000fffd8cd70000],  sp=0x0000fffd8cd6bae0,  free space=2030k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x41d548]  Address::encode(Instruction_aarch64*) const+0x348  (assembler_aarch64.hpp:548)
V  [libjvm.so+0x41d988]  Assembler::ld_st2(Register, Address const&, int, int, int)+0x1b8
V  [libjvm.so+0x67ed1c]  LIR_Assembler::osr_entry()+0x2c8
V  [libjvm.so+0x672f08]  LIR_Assembler::emit_lir_list(LIR_List*)+0xf8
V  [libjvm.so+0x6737b0]  LIR_Assembler::emit_code(BlockList*)+0x270
V  [libjvm.so+0x61b280]  Compilation::emit_code_body()+0x130
V  [libjvm.so+0x61b880]  Compilation::compile_java_method()+0x370
V  [libjvm.so+0x61c18c]  Compilation::compile_method()+0x1f8
V  [libjvm.so+0x61c7bc]  Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)+0x27c
V  [libjvm.so+0x61e568]  Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0xa4
V  [libjvm.so+0x8d1b34]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x7d4
V  [libjvm.so+0x8d2674]  CompileBroker::compiler_thread_loop()+0x510
V  [libjvm.so+0xd36900]  JavaThread::thread_main_inner()+0xcc
V  [libjvm.so+0x159dae0]  Thread::call_run()+0xac
product:
#  Internal Error (assembler_aarch64.hpp:246), pid=2673045, tid=2673064
#  guarantee(val emanuel@emanuel-oracle:xyz$ javap -c -v -p ComplexLockingAndMultiThreading.class  a.p
emanuel@emanuel-oracle:xyz$ vim a.p
emanuel@emanuel-oracle:xyz$ javap -c -v -p ComplexLockingAndMultiThreading.class.orig.class  b.p
emanuel@emanuel-oracle:xyz$ diff a.p b.p
1c1
Classfile xyz/ComplexLockingAndMultiThreading.class.orig.class
3c3
SHA-256 checksum 8a9e0c859d99f105e28b894cbb328b8ce29afc13f745ed5599045472c8aa7da7
220c220
stack=2, locals=4, args_size=0
----------------------------------------------------------------------------------
A part of the task will be to extract a simpler JASM file that reproduces this bug, and to check if it reproduces on older JDK. I tried it quickly, like below, but it did not work:
java -jar ~/Documents/asmtools-7.0-build/release/lib/asmtools.jar jdis ComplexLockingAndMultiThreading.class  X.jasm
(rename class to X)
java -jar ~/Documents/asmtools-7.0-build/release/lib/asmtools.jar jasm X.jasm
X.jasm (34:39) Error: Wrong tag: Either Method or InterfaceMethod expected.
MethodHandle REF_invokeStatic:Method X.lambda$main$0:"()V",
^
1 error

-----
Title: [JDK-8335684] Test ThreadCpuTime.java should pause like ThreadCpuTimeArray.java
Priority: P4
Type: Bug
Component: core-svc
Description: test/jdk/java/lang/management/ThreadMXBean/ThreadCpuTime.java
is similar to ThreadCpuTimeArray.java and can have the same problem, where CPU times are sampled immediately after a thread appearing to be blocked.  The same sleep should be added to this test.

-----
Title: [JDK-8335710] serviceability/dcmd/vm/SystemDumpMapTest.java and SystemMapTest.java fail on Linux Alpine after 8322475
Priority: P4
Type: Bug
Component: hotspot
Description: Unfortunately those 2 tests fail now on Linux Alpine (x86_64) :
serviceability/dcmd/vm/SystemDumpMapTest.java
Missing patterns in dump:
0x\\p{XDigit}+-0x\\p{XDigit}+ +\\d+ +[rwsxp-]+ +\\d+ +\\d+ +(4K|8K|16K|64K|2M|16M|64M) +com.*\\[vdso\\]
test SystemDumpMapTest.jmx(): failure
java.lang.RuntimeException: java.lang.RuntimeException: Missing patterns
at SystemDumpMapTest.run_test(SystemDumpMapTest.java:100)
at SystemDumpMapTest.run(SystemDumpMapTest.java:106)
at SystemDumpMapTest.jmx(SystemDumpMapTest.java:112)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:102)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:58)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: java.lang.RuntimeException: Missing patterns
at SystemDumpMapTest.run_test(SystemDumpMapTest.java:96)
... 31 more
===============================================
serviceability/dcmd/vm/SystemDumpMapTest.java
Total tests run: 1, Passes: 0, Failures: 1, Skips: 0
===============================================
serviceability/dcmd/vm/SystemMapTest.java :
test SystemMapTest.jmx(): failure
java.lang.RuntimeException: '0x\\p{XDigit}+-0x\\p{XDigit}+ +\\d+ +[rwsxp-]+ +\\d+ +\\d+ +(4K|8K|16K|64K|2M|16M|64M) +com.*\\[vdso\\]' missing from stdout/stderr
at jdk.test.lib.process.OutputAnalyzer.shouldMatch(OutputAnalyzer.java:371)
at SystemMapTest.run(SystemMapTest.java:46)
at SystemMapTest.jmx(SystemMapTest.java:57)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1597)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:102)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:58)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1575)
===============================================
serviceability/dcmd/vm/SystemMapTest.java
Total tests run: 1, Passes: 0, Failures: 1, Skips: 0
===============================================
OS: linux_alpine

-----
Title: [JDK-8335836] serviceability/jvmti/StartPhase/AllowedFunctions/AllowedFunctions.java fails with unexpected exit code: 112
Priority: P4
Type: Bug
Component: hotspot
Description: serviceability/jvmti/StartPhase/AllowedFunctions/AllowedFunctions.java failed, but the test did not handle the failure well. At the end of stdout you see:
VMInit event
## GetCurrentThread error: 112
This comes from:
static void check_jvmti_error(jvmtiEnv *jvmti, char* fname, jvmtiError err) {
if (err != JVMTI_ERROR_NONE) {
printf("  ## %s error: %d\n", fname, err);
exit(err);
}
}
So basically if the test gets a JVMTI error, it will call exit() with that error. In this case 112 is JVMTI_ERROR_WRONG_PHASE. However, since no error was reported to JTREG, stderr reports:
STATUS:Passed.
But then I guess during JTREG test cleanup, it detects that the process had an exit code but claimed to have passed, so the end of the log contains:
result: Error. unexpected exit code: 112, doesn't match exit status: "Passed." which was reported by the test process

-----
Title: [JDK-8335860] compiler/vectorization/TestFloat16VectorConvChain.java fails with non-standard AVX/SSE settings
Priority: P4
Type: Bug
Component: hotspot
Description: The test fails with -XX:UseAVX=0 -XX:UseSSE=3
Failed IR Rules (1) of Methods (1)
----------------------------------
1) Method "public static void compiler.vectorization.TestFloat16VectorConvChain.test(short[],short[],short[])" - [Failed IR rules: 1]:
* @IR rule 1: "@compiler.lib.ir_framework.IR(phase={DEFAULT}, applyIfPlatformAnd={}, applyIfCPUFeatureOr={}, counts={"_#V#VECTOR_CAST_HF2F#_", "_@any", "= 1", "_#V#VECTOR_CAST_F2HF#_", "_@any", " = 1"}, applyIfPlatform={}, failOn={}, applyIfPlatformOr={}, applyIfOr={}, applyIfCPUFeatureAnd={}, applyIf={}, applyIfCPUFeature={}, applyIfAnd={}, applyIfNot={})"
Phase "PrintIdeal":
- counts: Graph contains wrong number of nodes:
* Constraint 1: "(\\d+(\\s){2}(VectorCastHF2F.*)+(\\s){2}===.*vector[A-Za-z]\\[\\d+\\]:\\{float\\})"
- Failed comparison: [found] 0 = 1 [given]
- No nodes matched!
* Constraint 2: "(\\d+(\\s){2}(VectorCastF2HF.*)+(\\s){2}===.*vector[A-Za-z]\\[\\d+\\]:\\{short\\})"
- Failed comparison: [found] 0 = 1 [given]
- No nodes matched!

-----
Title: [JDK-8336042] Caller/callee param size mismatch in deoptimization causes crash
Priority: P3
Type: Bug
Component: hotspot
Description: For interpreter frames, the caller contains the locals.  Some platforms also align the callee frame, so they compute locals in layout_activation relative to the caller last_sp and not the callee sender_sp.  When calling certain MethodHandle.linkTo* methods, the interpreter pushes 1 extra trailing arg for the MemberName, which is removed before calling the callee taret method.  However, the interpreter takes the snapshot of last_sp before popping the trailing arg, and the return entry point pops the number of args represented by the resolved method in the constant pool.  This is a synthetic method whose signature includes the MemberName.  The deoptimization code in vframeArray::unpack_to_stack has logic to check has_member_arg() on the resolved target method and make the proper adjustments.  However, the adjustment is missing for the oldest/bottom deoptimized frame, causing the computation of the callee locals based on the caller last_sp to be off by one, allowing the last local to overwrite the bottom of the callee frame (on aarch64 this is the return pc).
Instead of the correct logic for the is_bottom frame, there is code that sets caller_was_method_handle based on if the invoke is invokedynamic or invokehandle.  This code dates back to ricochet frames when there could be an arbitrary mismatch between the arg count of the caller's invoke and the callee.  However, this code fails to take into account all cases of calls to has_member_arg() MH linkTo* intrinsics.
In addition, the last_frame_adjust() logic is also broken.  The adjustment can be done when not needed, and the same caller frame can be adjusted multiple times (every time the callee is deoptimized), resulting in unbounded frame/stack size growth.

-----
Title: [JDK-8336499] Failure when creating non-CRT RSA private keys in SunPKCS11
Priority: P4
Type: Bug
Component: security-libs
Description: After JDK-8271566, the CKA_MODULUS and CKA_PRIVATE_EXPONENT attributes were added to the list passed to Java's C_GetAttributeValue wrapper when determining if a private RSA key is CRT or non-CRT [1]. The rationale was to make a single query and have both CKA_MODULUS and CKA_PRIVATE_EXPONENT available beforehand, avoiding a potential second query later. Most PKCS #11 tokens benefit from this saving.
Contrary to the native C_GetAttributeValue PKCS #11 API, its Java counterpart does not return any attribute value if there is an error in one of the attributes queried (e.g. if CKR_ATTRIBUTE_TYPE_INVALID is returned) [2]. If a non-CRT key is created in a token (pre PKCS #11 2.40), the query including all attributes will fail and CKA_MODULUS and CKA_PRIVATE_EXPONENT will not be available. An error will be thrown here [3].
This bug was reported by Bob Du (IBM).
--
[1] - https://git.openjdk.org/jdk/blob/jdk-24%2B6/src/jdk.crypto.cryptoki/share/classes/sun/security/pkcs11/P11Key.java#L568
[2] - https://git.openjdk.org/jdk/blob/jdk-24%2B6/src/jdk.crypto.cryptoki/share/native/libj2pkcs11/p11_objmgmt.c#L252
[3] - https://git.openjdk.org/jdk/blob/jdk-24%2B6/src/jdk.crypto.cryptoki/share/classes/sun/security/pkcs11/P11Key.java#L594
OS: generic

-----
Title: [JDK-8336587] failure_handler lldb command times out on macosx-aarch64 core file
Priority: P4
Type: Bug
Component: hotspot
Description: I was looking at the failure_handler output for the lldb command on a macosx-aarch64 core file (it is trying to use lldb to get a back trace of all threads), and noticed it timed out:
----------------------------------------
[2024-07-15 05:15:47] [/usr/bin/lldb, --core, /core.92643, /bin/java, -o, thread backtrace all, -o, quit] timeout=20000 in
----------------------------------------
(lldb) target create "/bin/java" --core "/core.92643"
WARNING: tool timed out: killed process after 20000 ms
----------------------------------------
[2024-07-15 05:16:07] exit code: -2 time: 20163 ms
----------------------------------------
20 seconds is the failure_handler default timeout for all commands. Core files on macosx-aarch64 tend to be very large. This one was over 13gb. On my MBPro it took 30 seconds. I bumped up the timeout to 60 seconds and reproduce the same crash in mach5 (more than once), and it usually took about 55 seconds for the lldb command, but it did succeed with the longer timeout. I think we should change the timeout to event more than 60 seconds just to make sure we won't see timeouts. 120 seconds is probably a good amount

-----
Title: [JDK-8336827] compiler/vectorization/TestFloat16VectorConvChain.java  timeouts on ppc64 platforms after JDK-8335860
Priority: P4
Type: Bug
Component: hotspot
Description: After JDK-8335860, we see a lot of timeouts in test compiler/vectorization/TestFloat16VectorConvChain.java
on the ppc64 based platforms.
The timeouts show up especially with the (fast)debug binaries.
OS: generic

-----
Title: [JDK-8337221] CompileFramework: test library to conveniently compile java and jasm sources for fuzzing
Priority: P4
Type: Enhancement
Component: hotspot
Description: The idea is this:
We should be able to create java and jasm code during a jtreg test, compile and execute it. This can be used to fuzz various compiler optimizations.

-----
Title: [JDK-8337299] vmTestbase/nsk/jdb/stop_at/stop_at002/stop_at002.java failure goes undetected
Priority: P5
Type: Bug
Component: core-svc
Description: vmTestbase/nsk/jdb/stop_at/stop_at002/stop_at002.java is testing to make sure a jdb deferred breakpoint on an inner class works. The breakpoint line number information for the debuggee is wrong, so the test should be failing, but isn't. The debugger side has:
static final String DEBUGGEE_LOCATION1 = DEBUGGEE_CLASS + "$Nested$DeeperNested$DeepestNested:43";
static final String DEBUGGEE_LOCATION2 = DEBUGGEE_CLASS + "$Inner$MoreInner:57";
And the debuggee side has:
flag = input; /*  Unable to set deferred breakpoint nsk.jdb.stop_at.stop_at002.stop_at002a$Nested$DeeperNested$DeepestNested:43 : No code at line 43 in nsk.jdb.stop_at.stop_at002.stop_at002a$Nested$DeeperNested$DeepestNested
However, this is not caught by the test. The test only checks for the failed setting of the deferred breakpoint when executing the jdb "stop at" command. The failure does not actually happen until after the test continues, allowing the class to be loaded and for jdb to actually attempt to set the breakpoint.
So there are two issues with the test: wrong breakpoint line number information, and failure to determine that a deferred breakpoint failed to be setup when the class was loaded.

-----
Title: [JDK-8337681] PNGImageWriter uses much more memory than necessary
Priority: P4
Type: Bug
Component: client-libs
Description: A DESCRIPTION OF THE PROBLEM :
At some point the JPEGImageWriter was optimized to reduce duplication / copying of rasters and data buffers (see JDK-6266748). However, PNGImageWriter never received a similar optimization, and is making unnecessary copies of raster and data buffers whenever PNG images are written.
See also mailing list discussion: https://mail.openjdk.org/pipermail/client-libs-dev/2024-July/021480.html
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Use ImageIO to write PNG files.
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Unnecessary copies of rasters and data buffers are not created.
ACTUAL -
Rasters and data buffers are copied, row by row.
---------- BEGIN SOURCE ----------
/*
* Copyright (c) 2024, Oracle and/or its affiliates. All rights reserved.
* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
*
* This code is free software; you can redistribute it and/or modify it
* under the terms of the GNU General Public License version 2 only, as
* published by the Free Software Foundation.
*
* This code is distributed in the hope that it will be useful, but WITHOUT
* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
* version 2 for more details (a copy is included in the LICENSE file that
* accompanied this code).
*
* You should have received a copy of the GNU General Public License version
* 2 along with this work; if not, write to the Free Software Foundation,
* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
*
* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
* or visit www.oracle.com if you need additional information or have any
* questions.
*/
/*
* @test
* @summary Test that raster use optimization does not cause any regressions.
*/
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.awt.image.RenderedImage;
import javax.imageio.IIOImage;
import javax.imageio.ImageIO;
import javax.imageio.ImageReader;
import javax.imageio.ImageWriter;
import javax.imageio.ImageWriteParam;
import javax.imageio.stream.ImageInputStream;
import javax.imageio.stream.ImageOutputStream;
import javax.imageio.stream.MemoryCacheImageOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
public class RasterReuseWriteTest {
public static void main(String[] args) throws Exception {
test(BufferedImage.TYPE_INT_ARGB);
test(BufferedImage.TYPE_INT_ARGB_PRE);
}
private static void test(int type) throws Exception {
// test writing a BufferedImage without source bands
BufferedImage img1 = createImage(256, 256, type);
byte[] bytes1 = writePng(img1, null);
BufferedImage img2 = ImageIO.read(new ByteArrayInputStream(bytes1));
compare(img1, img2, false);
// test writing a BufferedImage with source bands
BufferedImage img3 = createImage(256, 256, type);
int[] sourceBands = new int[] { 2, 1, 0, 3 }; // swap blue and red
byte[] bytes3 = writePng(img3, sourceBands);
BufferedImage img4 = ImageIO.read(new ByteArrayInputStream(bytes3));
compare(img3, img4, true);
// test writing a non-BufferedImage with source bands and one tile
RenderedImage img5 = toTiledImage(img1, 256);
byte[] bytes5 = writePng(img5, sourceBands);
BufferedImage img6 = ImageIO.read(new ByteArrayInputStream(bytes5));
compare(img5, img6, true);
// test writing a non-BufferedImage with source bands and multiple tiles
RenderedImage img7 = toTiledImage(img1, 128);
byte[] bytes7 = writePng(img7, sourceBands);
BufferedImage img8 = ImageIO.read(new ByteArrayInputStream(bytes7));
compare(img7, img8, true);
}
private static BufferedImage createImage(int w, int h, int type) throws Exception {
BufferedImage img = new BufferedImage(w, h, type);
Graphics2D g2d = img.createGraphics();
g2d.setColor(Color.WHITE);
g2d.fillRect(0, 0, w, h);
g2d.setColor(Color.GREEN);
g2d.drawRect(20, 20, 100, 50);
g2d.setColor(Color.RED);
g2d.drawRect(80, 10, 100, 40);
g2d.setColor(Color.BLUE);
g2d.fillRect(40, 60, 120, 30);
g2d.dispose();
return img;
}
private static byte[] writePng(RenderedImage img, int[] sourceBands) throws Exception {
ImageWriter writer = ImageIO.getImageWritersByFormatName("png").next();
ImageWriteParam param = writer.getDefaultWriteParam();
param.setSourceBands(sourceBands);
ByteArrayOutputStream baos = new ByteArrayOutputStream();
ImageOutputStream stream = new MemoryCacheImageOutputStream(baos);
writer.setOutput(stream);
writer.write(null, new IIOImage(img, null, null), param);
writer.dispose();
stream.flush();
return baos.toByteArray();
}
private static void compare(RenderedImage img1, RenderedImage img2, boolean blueAndRedSwapped) {
int[] pixels1 = getRgbPixels(img1);
int[] pixels2 = getRgbPixels(img2);
for (int i = 0; i  blue
} else if (blueAndRedSwapped && pixels1[i] == 0xFF0000FF) {
expected = 0xFFFF0000; // blue - red
} else {
expected = pixels1[i]; // no change
}
int actual = pixels2[i];
if (actual != expected) {
throw new RuntimeException("Pixel " + i + ": expected " +
Integer.toHexString(expected) + ", but got " +
Integer.toHexString(actual));
}
}
}
private static int[] getRgbPixels(RenderedImage img) {
int w = img.getWidth();
int h = img.getHeight();
if (img instanceof BufferedImage bi) {
return bi.getRGB(0, 0, w, h, null, 0, w);
} else {
BufferedImage bi = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);
Graphics2D g2d = bi.createGraphics();
g2d.drawRenderedImage(img, new AffineTransform());
g2d.dispose();
return bi.getRGB(0, 0, w, h, null, 0, w);
}
}
private static RenderedImage toTiledImage(BufferedImage img, int tileSize) throws Exception {
// write to TIFF
ImageWriter writer = ImageIO.getImageWritersByFormatName("tiff").next();
ImageWriteParam param = writer.getDefaultWriteParam();
param.setTilingMode(ImageWriteParam.MODE_EXPLICIT);
param.setTiling(tileSize, tileSize, 0, 0);
ByteArrayOutputStream baos = new ByteArrayOutputStream();
ImageOutputStream stream = new MemoryCacheImageOutputStream(baos);
writer.setOutput(stream);
writer.write(null, new IIOImage(img, null, null), param);
writer.dispose();
stream.flush();
byte[] bytes = baos.toByteArray();
// read from TIFF
ImageReader reader = ImageIO.getImageReadersByFormatName("tiff").next();
ImageInputStream input = ImageIO.createImageInputStream(new ByteArrayInputStream(bytes));
reader.setInput(input);
RenderedImage ri = reader.readAsRenderedImage(0, null);
if (ri instanceof BufferedImage) {
throw new RuntimeException("Unexpected BufferedImage");
}
int tw = ri.getTileWidth();
int th = ri.getTileHeight();
if (tw != tileSize || th != tileSize) {
throw new RuntimeException("Expected tile size " + tileSize +
", but found " + tw + "x" + th);
}
return ri;
}
}
---------- END SOURCE ----------
CUSTOMER SUBMITTED WORKAROUND :
Allocate more memory to the system.
FREQUENCY : always
OS: linux

-----
Title: [JDK-8337795] Type annotation attached to incorrect type during class reading
Priority: P3
Type: Bug
Component: tools
Description: [As seen in https://github.com/uber/NullAway/issues/1011 ]
After the fix for JDK-8225377, type annotations are sometimes incorrectly attached to the wrong contained type if the same type appears multiple times. For example given `Function` below, the annotation is attached to the first occurrence of `B`, resulting in `Function`.
The fix for JDK-8225377 relies on the identity of `Type` instances to find the position of types with type annotations, and then to rewrite them: https://github.com/openjdk/jdk/blob/8bd3cd51562ff9e76fa0e3d49d38e6e19210f878/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ClassReader.java#L2464-L2470
This was done to share logic for rewriting types with TypeAnnotationTypeMapping, but relies on the incorrect assumption that the contained types will have unique identities.
Demo:
=== ./B.java
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.util.function.Function;
public class B {
@Target(ElementType.TYPE_USE)
@Retention(RetentionPolicy.RUNTIME)
@interface N {}
void g(Function f) {}
}
=== ./P.java
import java.util.Set;
import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.RoundEnvironment;
import javax.annotation.processing.SupportedAnnotationTypes;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.TypeElement;
import javax.lang.model.util.ElementFilter;
@SupportedAnnotationTypes("*")
public class P extends AbstractProcessor {
@Override
public SourceVersion getSupportedSourceVersion() {
return SourceVersion.latestSupported();
}
boolean first = true;
@Override
public boolean process(Set annotations, RoundEnvironment roundEnv) {
if (!first) {
return false;
}
first = false;
for (var m :
ElementFilter.methodsIn(
processingEnv.getElementUtils().getTypeElement("B").getEnclosedElements())) {
System.err.println(m);
}
return false;
}
}
$ javac -fullversion
javac full version "23-ea+35-2364"
$ javac P.java
Compiling B.java from source shows the annotation in the correct location on the second type argument:
$ javac -processor P B.java
g(java.util.function.Function)
After reading B.class the annotation is incorrectly placed on the first type argument:
$ javac -processor P B
g(java.util.function.Function)

-----
Title: [JDK-8337958] Out-of-bounds array access in secondary_super_cache
Priority: P3
Type: Bug
Component: hotspot
Description: The fix for JDK-8180450, secondary_super_cache does not scale well, has a rare (and benign) out-of-bounds array access. While this bug is very unlikely ever to cause a failure, it should be fixed.
OS: generic

-----
Title: [JDK-8337981] ShenandoahHeap::is_in should check for alive regions
Priority: P4
Type: Enhancement
Component: hotspot
Description: The expected behavior of `CollectedHeap::is_in` is to check whether the object belongs to the committed parts of the heap. This is useful to check if object resides in the parts of the heap the GC knows are not dead. Yet, Shenandoah's check just verifies that oop is within the heap bounds. So `is_in` check for an object that is in trashed/empty region would pass by accident, and we will miss detecting bugs. This should be rectified.
Among other things, the fix would enable JDK-8337978 checks to work for JDK-8337941 failure detection.

-----
Title: [JDK-8337998] CompletionFailure in getEnclosingType attaching type annotations
Priority: P3
Type: Bug
Component: tools
Description: The following example shows a crash in javac while attaching type annotations read from a class file.
To locate type annotations on class types, javac uses getEnclosingType() to look up enclosing types to interpret type_path_kind=1 entries. The location on inner classes is expressed 'backwards', where an empty path locates the on the 'outermost part of the type for which a type annotation is admissible', and each type_path_kind=1 steps into a nested type.
For this specific issue, there is enough information in the InnerClasses attribute to determine whether the class type has an enclosing type, so this symbol completion could likely be avoided for classes without an enclosing type.
In general, completion failures in this code should not trigger a crash. There are a few possible options: report a non-crash error, report a warning (which could be configurable with -Xlint:classfile or another option), or try to silently tolerate the missing information.
=== ./B.java
import static java.lang.annotation.ElementType.TYPE_USE;
import java.lang.annotation.Target;
class B {
private @Anno A a;
@Target(TYPE_USE)
@interface Anno {}
}
=== ./C.java
class C {
B b;
}
=== ./A.java
class A {}
$ javac -fullversion
javac full version "24-ea+9-972"
$ javac A.java  B.java  C.java
$ rm A.clas
$ javac C.java -sourcepath : -XDdev
An exception has occurred in the compiler (24-ea). Please file a bug against the Java compiler via the Java bug reporting page (https://bugreport.java.com) after checking the Bug Database (https://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
com.sun.tools.javac.code.Symbol$CompletionFailure: class file for A not found
at jdk.compiler/com.sun.tools.javac.code.ClassFinder.newCompletionFailure(ClassFinder.java:420)
at jdk.compiler/com.sun.tools.javac.code.ClassFinder.classFileNotFound(ClassFinder.java:407)
at jdk.compiler/com.sun.tools.javac.code.ClassFinder.fillIn(ClassFinder.java:402)
at jdk.compiler/com.sun.tools.javac.code.ClassFinder.complete(ClassFinder.java:302)
at jdk.compiler/com.sun.tools.javac.code.Symbol.complete(Symbol.java:703)
at jdk.compiler/com.sun.tools.javac.code.Symbol$ClassSymbol.complete(Symbol.java:1471)
at jdk.compiler/com.sun.tools.javac.code.Symbol.apiComplete(Symbol.java:709)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$1.getEnclosingType(ClassReader.java:612)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationLocator.visitClassType(ClassReader.java:2525)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationLocator.visitClassType(ClassReader.java:2501)
at jdk.compiler/com.sun.tools.javac.code.Type$ClassType.accept(Type.java:1053)
at jdk.compiler/com.sun.tools.javac.code.Types$DefaultTypeVisitor.visit(Types.java:4920)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationSymbolVisitor.addTypeAnnotations(ClassReader.java:2466)

-----
Title: [JDK-8338010] WB_IsFrameDeoptimized miss ResourceMark
Priority: P4
Type: Bug
Component: hotspot
Description: The test com/sun/jdi/EATests.java#id0 sometimes fails with
Stack: [0x000000f373e00000,0x000000f373f00000]
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [jvm.dll+0xc956e1]  os::win32::platform_print_native_stack+0x101  (os_windows_x86.cpp:235)
V  [jvm.dll+0xf59abb]  VMError::report+0x149b  (vmError.cpp:1010)
V  [jvm.dll+0xf5c15e]  VMError::report_and_die+0x80e  (vmError.cpp:1845)
V  [jvm.dll+0x55796e]  report_fatal+0x7e  (debug.cpp:214)
V  [jvm.dll+0xd4d591]  ResourceArea::allocate_bytes+0x111  (resourceArea.inline.hpp:33)
V  [jvm.dll+0xf44bef]  vframe::new_vframe+0x7f  (vframe.cpp:68)
V  [jvm.dll+0x7fb97a]  JavaThread::last_java_vframe+0x3a  (javaThread.cpp:2044)
V  [jvm.dll+0xf8f659]  WB_IsFrameDeoptimized+0x219  (whitebox.cpp:798)
C  0x000001fbdebd3b96  (no source info available)

-----
Title: [JDK-8338064] Give better error for ConcurrentHashTable corruption
Priority: P4
Type: Bug
Component: hotspot
Description: When nodes in the ConcurrentHashTable get corrupted and their hash codes don't match, resizing fails with an unhelpful message.  See linked bug for details.

-----
Title: [JDK-8338136] Hotspot should support multiple large page sizes on Windows
Priority: P3
Type: Enhancement
Component: hotspot
Description: OpenJDK on Windows only supports large pages https://mail.openjdk.org/pipermail/hotspot-runtime-dev/2023-October/065382.html for some background behind the 4MB limit. This limitation should be removed for the AMD64 architecture.
This change will be behind a new proposed JVM flag (-XX:+EnableAllLargePageSizesForWindows) that defaults to FALSE. The flag allows users to opt in to the new large page handling behavior, with a warning when the requested large page size is not a multiple of the OS minimum page size.
OS: windows

-----
Title: [JDK-8338154] Fix -Wzero-as-null-pointer-constant warnings in gtest framework
Priority: P4
Type: Enhancement
Component: hotspot
Description: There are several places in the gtest framework that trigger -Wzero-as-null-pointer-constant warnings when that warning is enabled.
Some are in our code, and should be fixed.  Some are in 3rd party code, and should be suppressed rather than modifying that code.

-----
Title: [JDK-8338202] Shenandoah: Improve handshake closure labels
Priority: P4
Type: Enhancement
Component: hotspot
Description: Currently, Shenandoah has a few handshakes that have not very clear names, "ShenandoahRendezvous". Would be good to make them more explicit.
```
Event: 2.593 Executing VM operation: Shenandoah Init Marking
Event: 2.594 Executing VM operation: Shenandoah Init Marking done
Event: 2.599 Executing VM operation: HandshakeAllThreads (Shenandoah Flush SATB Handshake)
Event: 2.599 Executing VM operation: HandshakeAllThreads (Shenandoah Flush SATB Handshake) done
Event: 2.599 Executing VM operation: HandshakeAllThreads (Shenandoah Flush SATB Handshake)
Event: 2.599 Executing VM operation: HandshakeAllThreads (Shenandoah Flush SATB Handshake) done
Event: 2.599 Executing VM operation: Shenandoah Final Mark and Start Evacuation
Event: 2.600 Executing VM operation: Shenandoah Final Mark and Start Evacuation done
Event: 2.600 Executing VM operation: HandshakeAllThreads (ShenandoahRendezvous)
Event: 2.600 Executing VM operation: HandshakeAllThreads (ShenandoahRendezvous) done
Event: 2.604 Executing VM operation: HandshakeAllThreads (ShenandoahRendezvous)
Event: 2.604 Executing VM operation: HandshakeAllThreads (ShenandoahRendezvous) done
Event: 2.605 Executing VM operation: CleanClassLoaderDataMetaspaces
Event: 2.606 Executing VM operation: CleanClassLoaderDataMetaspaces done
Event: 2.606 Executing VM operation: Shenandoah Init Update References
Event: 2.606 Executing VM operation: Shenandoah Init Update References done
Event: 2.611 Executing VM operation: HandshakeAllThreads (Shenandoah Update Thread Roots)
Event: 2.611 Executing VM operation: HandshakeAllThreads (Shenandoah Update Thread Roots) done
Event: 2.611 Executing VM operation: Shenandoah Final Update References
Event: 2.611 Executing VM operation: Shenandoah Final Update References done
```

-----
Title: [JDK-8338314] JFR: Split JFRCheckpoint VM operation
Priority: P4
Type: Enhancement
Component: hotspot
Description: Investigating JFR crashes is a bit tedious, as Events section in hs_err shows just:
```
Event: 3.006 Executing VM operation: JFRCheckpoint
Event: 3.006 Executing VM operation: JFRCheckpoint done
```
What is that JFRCheckpoint doing is unclear, because it can do two separate things: clear or write. It would be good if we could disambiguate the two. Since there are only two flavors of checkpoint, I think we can just split the VMOp into two more precisely named ones, so it gives us e.g.:
```
Event: 2.462 Executing VM operation: JFRSafepointClear
Event: 2.463 Executing VM operation: JFRSafepointClear done
```

-----
Title: [JDK-8339148] Make os::Linux::active_processor_count() public
Priority: P3
Type: Enhancement
Component: hotspot
Description: During review of JDK-8322420 it was mentioned that some use-cases for the container code need the host active CPU count and not only the containerized value (which might be equal or less). I therefore, propose to make os::Linux::active_processor_count() public, which provides this info currently. It would be useful to report the host active cpus in JFR events too - if they differ to the containerized value - like we do for memory.
Some code that works around this issue currently, then needs to be cleaned up once this bug is fixed.
OS: generic

-----
Title: [JDK-8339288] Improve diagnostic logging runtime/cds/DeterministicDump.java
Priority: P4
Type: Sub-task
Component: hotspot
Description: Currently, diagnosing the failures in DeterministicDump.java rely on analysis of the CDS map files, which are saved in the scratch directory when this test is executed.
Normally, we run jtreg with at least -retain:fail, so the CDS map files are saved when the test fails. However, when this test fails inside GitHub actions, the map files are not saved. We only see a very short error message:
STDERR:
java.lang.RuntimeException: File content different at byte #4, b0 = 96, b1 = 80
at DeterministicDump.compare(DeterministicDump.java:114)
at DeterministicDump.doTest(DeterministicDump.java:73)
at DeterministicDump.main(DeterministicDump.java:42)
But this is just the archive checksum, which is useless for diagnostic purposes.
Instead, we should print the textual diff of the first material difference between the two map files. For example: if the 5th word of this method is different in the two dumps (0000000000000000 vs 1111111111111111), we print out the following to STDOUT, to be captured in the JTR file.
[first difference: map file #1]
0x00000008001b8ef8:   0000000000000000 0000000000000000 0000000000000000 0000000000000000   ................................
0x00000008001b8f18: @@ Method            128 java.lang.Object java.lang.Object.clone()
0x00000008001b8f18:   00000008000007c0 0000000000000000 0000000800dcb4f8 0000000000000000   ................................
0x00000008001b8f38:   0000000000000000 0000000000000000 0000000400000104 0300000300000000   ................................
0x00000008001b8f58:   0000000000000000 0000000800585710 0000000000000000 0000000000000000   .........WX.....................
0x00000008001b8f78:   0000000000000000 0000000000000000 0000000000000000 0000000000000000   ................................
[first difference: map file #2]
0x00000008001b8ef8:   0000000000000000 0000000000000000 0000000000000000 0000000000000000   ................................
0x00000008001b8f18: @@ Method            128 java.lang.Object java.lang.Object.clone()
0x00000008001b8f18:   00000008000007c0 0000000000000000 0000000800dcb4f8 0000000000000000   ................................
0x00000008001b8f38:   1111111111111111 0000000000000000 0000000400000104 0300000300000000   ................................
0x00000008001b8f58:   0000000000000000 0000000800585710 0000000000000000 0000000000000000   .........WX.....................
0x00000008001b8f78:   0000000000000000 0000000000000000 0000000000000000 0000000000000000   ................................

-----
Title: [JDK-8339300] CollectorPolicy.young_scaled_initial_ergo_vm gtest fails on ppc64 based platforms
Priority: P4
Type: Bug
Component: hotspot
Description: Looks like the failure of CollectorPolicy.young_scaled_initial_ergo_vm started when JDK-8258483 came in.
AIX / Linux ppc64le:
[ RUN      ] CollectorPolicy.young_scaled_initial_ergo_vm
test/hotspot/gtest/gc/shared/test_collectorPolicy.cpp:122: Failure
Expected equality of these values:
expected
Which is: 44695552
NewSize
Which is: 41943040
test/hotspot/gtest/gc/shared/test_collectorPolicy.cpp:78: Failure
Expected: checker-execute() doesn't generate new fatal failures in the current thread.
Actual: it does.
[  FAILED  ] CollectorPolicy.young_scaled_initial_ergo_vm (0 ms)
OS: generic

-----
Title: [JDK-8339538] Wrong timeout computations in DnsClient
Priority: P4
Type: Bug
Component: core-libs
Description: The following issues related to timeout computation in the 'com.sun.jndi.dns.DnsClient' code have been reported here:
https://mail.openjdk.org/pipermail/core-libs-dev/2024-September/128797.html
1. Non-monotonic time source is used to calculate the duration of receive operation:
"       long start = System.currentTimeMillis();
gotData = blockingReceive(udpChannel, ipkt, timeoutLeft);
long end = System.currentTimeMillis();
System.currentTimeMillis() is not monotonic and therefore it could happen that end - start  MIN_TIMEOUT);
Here, timeoutLeft is not iteratively decreased, but is always derived from `pktTimeout`.
I can see a case where `timeoutLeft` never drops below `MIN_TIMEOUT` (this is the part where I'm not sure if I'm missing some deeper knowledge)."

-----
Title: [JDK-8339639] Opensource few AWT PopupMenu tests
Priority: P4
Type: Bug
Component: client-libs
Description: ./java/awt/PopupMenu/PopupMenuVisuals/PopupMenuVisuals.java
./java/awt/PopupMenu/PopupHangTest/PopupHangTest.java
are to be converted from applet to main based

-----
Title: [JDK-8339678] Update runtime/condy tests to be executed with VM flags
Priority: P4
Type: Enhancement
Component: hotspot
Description: Need to replace
ProcessTools.createLimitedTestJavaProcessBuilder
and
remove
vm.flagless

-----
Title: [JDK-8339727] Open source several AWT focus tests - series 1
Priority: P4
Type: Bug
Component: client-libs
Description: Convert closed FOcus applet tests
./java/awt/Focus/OverrideRedirectWindowActivationTest/ActivateOnProperAppContextTest/ActivateOnProperAppContextTest.java
./java/awt/Focus/KillFocusTest/KillFocusTest.java
./java/awt/Focus/DisabledAutoTransfer/TestDisabledAutoTransferSwing.java
./java/awt/Focus/DisabledAutoTransfer/TestDisabledAutoTransfer.java
into main based and opensource

-----
Title: [JDK-8339769] Incorrect error message during startup if working directory does not exist
Priority: P4
Type: Bug
Component: core-libs
Description: When I start java on my Macbook after the current working directory has been deleted, the VM crashes during inizialization with the message: "java.lang.InternalError: platform encoding not initialized".
How to reproduce:
% mkdir test
% cd test
% rmdir ../test
% java
Error occurred during initialization of VM
java.lang.InternalError: platform encoding not initialized
at jdk.internal.util.SystemProps$Raw.platformProperties(java.base@23-ea/Native Method)
at jdk.internal.util.SystemProps$Raw.(java.base@23-ea/SystemProps.java:263)
at jdk.internal.util.SystemProps.initProperties(java.base@23-ea/SystemProps.java:67)
at java.lang.System.initPhase1(java.base@23-ea/System.java:2165)
I reproduced this with OpenJDK 21.0.3 as well as recent 23 and 24 builds on macOS 14.5 and 14.6.1. It doesn't happen on my Linux laptop.
OS: os_x

-----
Title: [JDK-8339794] Open source closed choice tests #1
Priority: P4
Type: Bug
Component: client-libs
Description: java/awt/Choice/ChoiceInsertTest/ChoiceInsertTest.java
java/awt/Choice/ChoiceMouseDragTest/ChoiceMouseDragTest.java
java/awt/Choice/WheelEventsConsumed/WheelEventsConsumed.java

-----
Title: [JDK-8339810] Clean up the code in sun.tools.jar.Main to properly close resources and use ZipFile during extract
Priority: P4
Type: Bug
Component: tools
Description: There are several places in the sun.tools.jar.Main where we currently don't properly close the resources in a try/finally block. Also, the extract implementation against a JAR file, currently uses ZipInputStream while extracting the entries. We should switch to using ZipFile in that part of the implementation like we do for other operations against a JAR file, in the sun.tools.jar.Main code.

-----
Title: [JDK-8339836] Open source several AWT Mouse tests - Batch 1
Priority: P4
Type: Bug
Component: client-libs
Description: Open source these AWT Mouse tests:
java/awt/Mouse/MouseEnterExitTest/MouseEnterExitTest.java
java/awt/Mouse/MouseEnterExitTest2/MouseEnterExitTest2.java
java/awt/Mouse/MousePressedTest/MousePressedTest.java
java/awt/Mouse/MouseEnterExitTest4/MouseEnterExitTest4.java
java/awt/Mouse/MouseEnterExitTest3/MouseEnterExitTest3.java
OS: generic

-----
Title: [JDK-8339842] Open source several AWT focus tests - series 2
Priority: P4
Type: Bug
Component: client-libs
Description: Convert these Focus applet tests into main and opensource
./java/awt/Focus/LightweightFocusLostTest/LightweightFocusLostTest.java
./java/awt/Focus/MixedWeightFocus/MixedWeightFocus.java
./java/awt/Focus/NextFocusHelperTest/NextFocusHelperTest.java
./java/awt/Focus/FocusChangeOnResizeTest/FocusChangeOnResizeTest.java

-----
Title: [JDK-8339895] Open source several AWT focus tests - series 3
Priority: P4
Type: Bug
Component: client-libs
Description: Convert closed Focus applet tests into main and opensource
./java/awt/Focus/CanvasPanelFocusOnClick/CanvasPanelFocusOnClickTest.java
./java/awt/Focus/ActivateFocusTest/ActivateFocusTest.java
./java/awt/Focus/RequestInInactiveFrame/RequestInInactiveFrame.java
./java/awt/Focus/FocusPolicyTest/FocusPolicyTest.java

-----
Title: [JDK-8339906] Open source several AWT focus tests - series 4
Priority: P4
Type: Bug
Component: client-libs
Description: Convert and opensource several AWT focus applet test to main
./java/awt/Focus/FocusKeepTest/FocusKeepTest.java
./java/awt/Focus/KeyStrokeTest/KeyStrokeTest.java
./java/awt/Focus/ComponentLostFocusTest/ComponentLostFocusTest.java
./java/awt/Focus/AltTabFocus/AltTabEventsTest.java

-----
Title: [JDK-8339935] Open source several AWT focus tests - series 5
Priority: P4
Type: Bug
Component: client-libs
Description: Convert few closed Focus applet tests to main and opensource
./java/awt/Focus/DeinconifyTest/DeinconifyTest.java
./java/awt/Focus/HiddenTraversalTest/HiddenTraversalTest.java
./java/awt/Focus/ProxiedWindowHide/ProxiedWindowHideTest.java
./java/awt/Focus/LightweightPopupTest/LightweightPopupTest.java

-----
Title: [JDK-8339982] Open source several AWT Mouse tests - Batch 2
Priority: P4
Type: Bug
Component: client-libs
Description: Open source these AWT Mouse tests:
java/awt/Mouse/MouseClickCount/MouseClickCount.java
java/awt/Mouse/MouseDragEnterExitTest/MouseDragEnterExitTest.java
java/awt/Mouse/MouseDragTest/MouseDragTest.java
java/awt/Mouse/OpenWinDoubleClickTest/OpenWinDoubleClickTest.java
java/awt/GraphicsEnvironment/DefaultScreenDeviceTest/DefaultScreenDeviceTest.java
OS: generic

-----
Title: [JDK-8339984] Open source AWT MenuItem related tests
Priority: P4
Type: Bug
Component: client-libs
Description: Convert these MenuITem applet tests into main and opensource
./java/awt/MenuItem/SetFont/MenuSetFontTest.java
./java/awt/MenuItem/NullOrEmptyStringLabelTest/NullOrEmptyStringLabelTest.java
./java/awt/MenuItem/UnicodeMenuItemTest/UnicodeMenuItemTest.java
./java/awt/MenuItem/LotsOfMenuItems/LotsOfMenuItemsTest.java
./java/awt/MenuItem/GiantFontTest/GiantFontTest.java

-----
Title: [JDK-8339995] Open source several AWT focus tests - series 6
Priority: P4
Type: Bug
Component: client-libs
Description: Convert few closed AWT focus applet test and opensource
./java/awt/Focus/InactiveWindowTest/InactiveFocusRace.java
./java/awt/Focus/NativePrintDialog/InitialFocusTest.java
./java/awt/Focus/EmptyWindowKeyTest/EmptyWindowKeyTest.java
./java/awt/Focus/KeyEventPostProcessor/ConsumedKeyEventTest/ConsumedKeyEventTest.java

-----
Title: [JDK-8340024] In ClassReader, extract a constant for the superclass supertype_index
Priority: P4
Type: Enhancement
Component: tools
Description: This line in ClassReader uses a literal 65535, which encodes the supertype_index of a superclass:
t.supertype_field = addTypeAnnotations(t.supertype_field, classExtends(65535));
https://github.com/openjdk/jdk/blob/7f1dae12e5e24d204a70cf610a8c482996556931/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ClassReader.java#L2364
The constant is defined in the JVMS:
A supertype_index value of 65535 specifies that the annotation appears on the superclass in an extends clause of a class declaration.
https://docs.oracle.com/javase/specs/jvms/se21/html/jvms-4.html#jvms-4.7.20.1
Vicente observed that extracting that value to a documented constant would improve the readability of the code.

-----
Title: [JDK-8340077] Open source few Checkbox tests - Set2
Priority: P4
Type: Bug
Component: client-libs
Description: Open source few Checkbox tests
OS: generic

-----
Title: [JDK-8340084] Open source AWT Frame related tests
Priority: P4
Type: Bug
Component: client-libs
Description: Convert these Frame applet tests into main and opensource
./java/awt/Frame/FrameSetMinimumSizeTest/FrameSetMinimumSizeTest.java
./java/awt/Frame/EmptyFrameTest/EmptyFrameTest.java
./java/awt/Frame/FrameLayoutTest/FrameLayoutTest.java
./java/awt/Frame/DefaultLocationTest/DefaultLocationTest.java
./java/awt/Frame/PackTwiceTest/PackTwiceTest.java

-----
Title: [JDK-8340143] Open source several Java2D rendering loop tests.
Priority: P4
Type: Bug
Component: client-libs
Description: Open source some Java 2D rendering loop tests.

-----
Title: [JDK-8340146] ZGC: TestAllocateHeapAt.java should not run with UseLargePages
Priority: P3
Type: Bug
Component: hotspot
Description: TestAllocateHeapAt.java expects that creating the heap file works in the current director (`.`). But when using persistent hugepages (-XX:+UseLargePages) this would require the filesystem to be a HugeTLBFS.
I propose that we do not allow running these tests with persistent hugepages.
The following two tests fail in the JDK24 CI:
gc/z/TestAllocateHeapAt.java
gc/x/TestAllocateHeapAt.java
This is seen with hugepages testing. We see warnings in the output then the VM fails to start:
----------System.err:(36/2261)----------
Java HotSpot(TM) 64-Bit Server VM warning: Failed to reserve and commit memory using large pages. req_addr: 0x0000000399000000 bytes: 18907922432
stdout: [[0.005s][info][gc,init] Initializing The Z Garbage Collector
[0.005s][info][gc,init] Version: 24-ea+16-1680 (fastdebug)
[0.005s][info][gc,init] Using deprecated non-generational mode
[0.005s][info][gc,init] NUMA Support: Disabled
[0.005s][info][gc,init] CPUs: 12 total, 12 available
[0.005s][info][gc,init] Memory: 72098M
[0.005s][info][gc,init] Large Page Support: Enabled (Explicit)
[0.005s][info][gc,init] GC Workers: 1 (dynamic)
[0.005s][info][gc,init] Address Space Type: Contiguous/Unrestricted/Complete
[0.005s][info][gc,init] Address Space Size: 512M x 3 = 1536M
[0.005s][info][gc,init] Heap Backing File: ./#506511511
[0.005s][info][gc,init] Heap Backing Filesystem: other (0x58465342)
[0.005s][error][gc     ] -XX:+UseLargePages (without -XX:+UseTransparentHugePages) can only be enabled when using a hugetlbfs filesystem
[0.006s][info ][gc,init] Runtime Workers: 1
[0.006s][info ][gc     ] Using The Z Garbage Collector
];
stderr: [Java HotSpot(TM) 64-Bit Server VM warning: Option ZGenerational was deprecated in version 23.0 and will likely be removed in a future release.
Java HotSpot(TM) 64-Bit Server VM warning: Non-generational ZGC is deprecated.
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.
]
exitValue = 1

-----
Title: [JDK-8340164] Open source few Component tests - Set1
Priority: P4
Type: Bug
Component: client-libs
Description: Open source few Component tests

-----
Title: [JDK-8340173] Open source some Component/Panel/EventQueue tests - Set2
Priority: P4
Type: Bug
Component: client-libs
Description: Open source some Component/Panel/EventQueue tests

-----
Title: [JDK-8340176] Replace usage of -noclassgc with -Xnoclassgc in test/jdk/java/lang/management/MemoryMXBean/LowMemoryTest2.java
Priority: P4
Type: Bug
Component: core-svc
Description: The "-noclassgc" is an undocumented java launcher option, which the java launcher internally converts to the HotSpot VM specific "-Xnoclassgc" before passing it to the JVM.
The test/jdk/java/lang/management/MemoryMXBean/LowMemoryTest2.java should instead use "-Xnoclassgc" which is specified in the java command specification https://docs.oracle.com/en/java/javase/22/docs/specs/man/java.html#extra-options-for-java as being specific to Hotspot JVM.

-----
Title: [JDK-8340193] Open source several AWT Dialog tests - Batch 1
Priority: P4
Type: Bug
Component: client-libs
Description: Open source these AWT Mouse tests:
java/awt/Dialog/FileDialogIconTest/FileDialogIconTest.java
java/awt/Dialog/FileDialogWrongNameCrash/FileDialogWrongNameCrash.java
java/awt/Dialog/DialogResizeTest/DialogResizeTest.java
java/awt/Dialog/GetLocationTest_1/GetLocationTest_1.java
java/awt/Dialog/DialogIconTest/DialogIconTest.java
OS: generic

-----
Title: [JDK-8340228] Open source couple more miscellaneous AWT tests
Priority: P4
Type: Bug
Component: client-libs
Description: Clean up and open source couple more AWT regression tests

-----
Title: [JDK-8340271] Open source several AWT Robot tests
Priority: P4
Type: Bug
Component: client-libs
Description: Few robot tests to be converted and opensourced
./java/awt/Robot/RobotScrollTest/RobotScrollTest.java
./java/awt/Robot/CreateScreenCapture/CreateScreenCapture.java
./java/awt/Robot/Capture256/Capture256mode.java
along with this
./java/awt/datatransfer/ClipbrdPastedImageTest/ClipbrdPastedImageTest.java

-----
Title: [JDK-8340279] Open source several AWT Dialog tests - Batch 2
Priority: P4
Type: Bug
Component: client-libs
Description: Open source these AWT Dialog tests:
java/awt/Dialog/PrintToFileTest/PrintToFileRevoked.java
java/awt/Dialog/PrintToFileTest/PrintToFileGranted.java
java/awt/Dialog/TopmostModalDialogTest/TopmostModalDialogTest.java
java/awt/Dialog/FileDialogFilterTest/FileDialogFilterTest.java
java/awt/Dialog/DialogSystemMenu/DialogSystemMenu.java
OS: generic

-----
Title: [JDK-8340332] Open source mixed AWT tests - Set3
Priority: P4
Type: Bug
Component: client-libs
Description: Open source Mixed AWT tests
OS: generic

-----
Title: [JDK-8340366] Open source several AWT Dialog tests - Batch 3
Priority: P4
Type: Bug
Component: client-libs
Description: Open source these AWT Dialog tests:
java/awt/Dialog/DialogModalityTest/ModalDialogTest.java
java/awt/Dialog/DialogModalityTest/DialogModalityTest.java
java/awt/Dialog/DialogResizeTest2/DialogResizeTest2.java
java/awt/Dialog/HideDialogTest/HideDialogTest.java
java/awt/Dialog/FileDialogUserFilterTest/FileDialogUserFilterTest.java
OS: generic

-----
Title: [JDK-8340367] Opensource few AWT image tests
Priority: P4
Type: Bug
Component: client-libs
Description: Convert and opensource few Image tests
./java/awt/image/MemoryImageSource/ImageOffsetTest/ImageOffsetTest.java
./java/awt/image/TransformImage.java
./java/awt/image/BufferedImage/GrayAATextTest.java
./java/awt/image/GrayAlpha/GrayAlpha.java

-----
Title: [JDK-8340393] Open source closed choice tests #2
Priority: P4
Type: Bug
Component: client-libs
Description: ./java/awt/Choice/ChoiceBigTest/ChoiceBigTest.java
./java/awt/Choice/CheckChoiceTest/CheckChoiceTest.java
./java/awt/Choice/DisabledList/DisabledList.java
./java/awt/Choice/ChoiceFocusGainTest/ChoiceFocusTest.java

-----
Title: [JDK-8340407] Open source a few more Component related tests
Priority: P4
Type: Bug
Component: client-libs
Description: Clean up and open source few more java.awt.Component related regression tests

-----
Title: [JDK-8340417] Open source some MenuBar tests - Set1
Priority: P4
Type: Bug
Component: client-libs
Description: Open source some MenuBar tests

-----
Title: [JDK-8340432] Open source some MenuBar tests - Set2
Priority: P4
Type: Bug
Component: client-libs
Description: Open source some MenuBar tests

-----
Title: [JDK-8340433] Open source closed choice tests #3
Priority: P4
Type: Bug
Component: client-libs
Description: ./java/awt/Choice/DeadlockTest/DeadlockTest.java
./java/awt/Choice/SetFontTest/SetFontTest.java
./java/awt/Choice/ChoicePosTest/ChoicePosTest.java

-----
Title: [JDK-8340437] Open source few more AWT Frame related tests
Priority: P4
Type: Bug
Component: client-libs
Description: Convert these Frame applet tests into main and opensource
./java/awt/Frame/DisabledParentOfToplevel/DisabledParentOfToplevel.java
./java/awt/Frame/IMStatusBar/IMStatusBar.java
./java/awt/Frame/FrameVisualTest/FrameVisualTest.java
./java/awt/Frame/MultiScreenTest/MultiScreenTest.java
./java/awt/Frame/WarningWindowTest/WarningWindowTest.java

-----
Title: [JDK-8340458] Open source additional Component tests (part 2)
Priority: P4
Type: Bug
Component: client-libs
Description: Clean up and open source few more tests related to java.awt.Component

-----
Title: [JDK-8340555]  Open source DnD tests - Set4
Priority: P4
Type: Bug
Component: client-libs
Description: Open source few DnD tests
OS: generic

-----
Title: [JDK-8340560] Open Source several AWT/2D font and rendering tests
Priority: P4
Type: Bug
Component: client-libs

-----
Title: [JDK-8340605] Open source several AWT PopupMenu tests
Priority: P4
Type: Bug
Component: client-libs
Description: Open source several AWT PopupMenu tests.

-----
Title: [JDK-8340621] Open source several AWT List tests
Priority: P4
Type: Bug
Component: client-libs
Description: Convert and opensource few AWT List tests
./java/awt/List/DisabledListIsGreyTest/DisabledListIsGreyTest.java
./java/awt/List/MultiSelectionListCrashTest/MultiSelectionListCrashTest.java
./java/awt/List/SelectedItemVisibilityTest/SelectedItemVisibilityTest.java
./java/awt/List/ListFrameResizeTest/ListFrameResizeTest.java
./java/awt/List/ScrollbarPositionTest/ScrollbarPositionTest.java

-----
Title: [JDK-8340625] Open source additional Component tests (part 3)
Priority: P4
Type: Bug
Component: client-libs
Description: Clean up and open source couple more java.awt.Component related regression tests.

-----
Title: [JDK-8340639] Open source few more AWT List tests
Priority: P4
Type: Bug
Component: client-libs
Description: Convert and opensource few List tests
./java/awt/List/HorizScrollWorkTest/HorizScrollWorkTest.java
./java/awt/List/HorizScrollbarEraseTest/HorizScrollbarEraseTest.java
./java/awt/List/ListSmoothScrollingTest/ListSmoothScrollingTest.java
./java/awt/List/ScrollbarPresenceTest/ScrollbarPresenceTest.java
./java/awt/List/SetForegroundTest/SetForegroundTest.java

-----
Title: [JDK-8340713]  Open source DnD tests - Set5
Priority: P4
Type: Bug
Component: client-libs
Description: Open source few DnD tests
OS: generic

-----
Title: [JDK-8340784] Remove PassFailJFrame constructor with screenshots
Priority: P4
Type: Bug
Component: client-libs
Description: The PassFailJFrame constructor which accepts `boolean screenCapture` can be removed. It was added in JDK-8294535 where the screenshot feature was added.
At the same time, JDK-8294535 added Builder class which provides simplified configuration of PassFailJFrame.
I haven't found any usage of the PassFailJFrame which passes the boolean parameter. Remove this constructor in favour using the Builder.
Other constructors are used in tests, they can't be removed unless these tests are refactored.

-----
Title: [JDK-8340790] Open source several AWT Dialog tests - Batch 4
Priority: P4
Type: Bug
Component: client-libs
Description: Open source these AWT Dialog tests:
java/awt/Dialog/JaFileDialogFont/JaFileDialogFont.java
java/awt/Dialog/FileDialogGetFileTest/FileDialogGetFileTest.java
java/awt/Dialog/EnabledResetTest/EnabledResetTest.java
java/awt/Dialog/ChoiceModalDialogTest/ChoiceModalDialogTest.java
java/awt/Dialog/DialogBackgroundTest/DialogBackgroundTest.java
OS: generic

-----
Title: [JDK-8340809] Open source few more AWT PopupMenu tests
Priority: P4
Type: Bug
Component: client-libs
Description: Open source few more AWT PopupMenu tests

-----
Title: [JDK-8340874] Open source some of the AWT Geometry/Button tests
Priority: P4
Type: Bug
Component: client-libs
Description: Open source some of the awt/geom and awt/Button tests
OS: generic

-----
Title: [JDK-8340907] Open source closed frame tests # 2
Priority: P4
Type: Bug
Component: client-libs
Description: java/awt/Frame/FrameSetCursorTest.java
java/awt/Frame/InsetCorrectionTest.java
java/awt/Frame/InitialIconifiedTest.java
java/awt/Frame/DeiconifyClipTest.java

-----
Title: [JDK-8340966] Open source few Checkbox and Cursor tests - Set1
Priority: P4
Type: Bug
Component: client-libs
Description: Open source few Checkbox and Cursor tests

-----
Title: [JDK-8340967] Open source few Cursor tests - Set2
Priority: P4
Type: Bug
Component: client-libs
Description: Open source few Cursor tests

-----
Title: [JDK-8340978] Open source few DnD tests - Set6
Priority: P4
Type: Bug
Component: client-libs
Description: Open source few DnD tests
OS: generic

-----
Title: [JDK-8340985] Open source some Desktop related tests
Priority: P4
Type: Bug
Component: client-libs
Description: Clean up and open source couple regression tests related to java.awt.Desktop class.

-----
Title: [JDK-8341000] Open source some of the AWT Window tests
Priority: P4
Type: Bug
Component: client-libs
Description: Open Source some of the AWT ImageClass/Window tests
OS: generic

-----
Title: [JDK-8341004] Open source AWT FileDialog related tests
Priority: P4
Type: Bug
Component: client-libs
Description: Open source AWT FileDialog related tests

-----
Title: [JDK-8341072] Open source several AWT Canvas and Rectangle related tests
Priority: P4
Type: Bug
Component: client-libs
Description: Open source these AWT Dialog tests:
java/awt/Canvas/MultiDitherTest/MultiDitherTest.java
java/awt/Canvas/MultiGraphicsTest/MultiGraphicsTest.java
java/awt/Canvas/NoEventsLeakTest/NoEventsLeakTest.java
java/awt/Rectangle/IntersectionTest/IntersectionTest.java
OS: generic

-----
Title: [JDK-8341128] open source some 2d graphics tests
Priority: P4
Type: Bug
Component: client-libs

-----
Title: [JDK-8341148] Open source several Choice related tests
Priority: P4
Type: Bug
Component: client-libs
Description: Clean up and open source several regression tests related to java.awt.Choice class

-----
Title: [JDK-8341162] Open source some of the AWT window test
Priority: P4
Type: Bug
Component: client-libs
Description: Open source some of the AWT window test
OS: generic

-----
Title: [JDK-8341170] Open source several Choice related tests (part 2)
Priority: P4
Type: Bug
Component: client-libs
Description: Clean up and open source a few more Choice related regression tests.

-----
Title: [JDK-8341177] Opensource few List and a Window test
Priority: P4
Type: Bug
Component: client-libs
Description: Convert and opensource few List and a Window test
./java/awt/List/MouseDraggedOriginatedByScrollBarTest/MouseDraggedOriginatedByScrollBarTest.java
./java/awt/List/ActionEventWhenHitEnterTest/ActionEventWhenHitEnterTest.java
./java/awt/List/ListAddPerfTest/ListAddPerfTest.java
./java/awt/Window/4189244/bug4189244.java

-----
Title: [JDK-8341191] Open source few more AWT FileDialog tests
Priority: P4
Type: Bug
Component: client-libs
Description: Open source few more AWT FileDialog tests

-----
Title: [JDK-8341239] Open source closed frame tests # 3
Priority: P4
Type: Bug
Component: client-libs

-----
Title: [JDK-8341257] Open source few DND tests - Set1
Priority: P4
Type: Bug
Component: client-libs
Description: Open source few DND tests

-----
Title: [JDK-8341258] Open source few various AWT tests - Set1
Priority: P4
Type: Bug
Component: client-libs
Description: Open source few various AWT tests

-----
Title: [JDK-8341278] Open source few TrayIcon tests - Set7
Priority: P4
Type: Bug
Component: client-libs
Description: Open source few TrayIcon tests
OS: generic

-----
Title: [JDK-8341298] Open source more AWT window tests
Priority: P4
Type: Bug
Component: client-libs
Description: Open source more AWT window tests
OS: generic

-----
Title: [JDK-8341373] Open source closed frame tests # 4
Priority: P4
Type: Bug
Component: client-libs

-----
Title: [JDK-8341378] Open source few TrayIcon tests - Set8
Priority: P4
Type: Bug
Component: client-libs
Description: Open source few TrayIcon tests
OS: generic

-----
Title: [JDK-8341447] Open source closed frame tests # 5
Priority: P4
Type: Bug
Component: client-libs

-----
Title: [JDK-8341535] sun/awt/font/TestDevTransform.java fails with RuntimeException: Different rendering
Priority: P4
Type: Bug
Component: client-libs
Description: The mentioned test was recently added. But it fails on various Linux machines :
Linux ppc64le Power8/SLES 12.5  fails
Linux ppc64le  Power9/Ubuntu 23.10   fails
Linux x86_64  SLES 12.5 fails
Exception of the unchanged test is
java.lang.RuntimeException: Different rendering
at TestDevTransform.compare(TestDevTransform.java:112)
at TestDevTransform.main(TestDevTransform.java:152)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:573)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1576)
OS: linux

-----
Title: [JDK-8341637] java/net/Socket/UdpSocket.java fails with "java.net.BindException: Address already in use" (macos-aarch64)
Priority: P4
Type: Bug
Component: core-libs
Description: The following test fails in the JDK 24 CI on macos-aarch64:
java/net/Socket/UdpSocket.java
Here's a snippet from the log file:
----------System.out:(50/2978)----------
BindException caught retry Socket creation
test UdpSocket.testMaxSockets(): failure
java.net.BindException: Address already in use
at java.base/sun.nio.ch.Net.connect0(Native Method)
at java.base/sun.nio.ch.Net.connect(Net.java:589)
at java.base/sun.nio.ch.Net.connect(Net.java:578)
at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:583)
at java.base/java.net.SocksSocketImpl.connect(SocksSocketImpl.java:327)
at java.base/java.net.Socket.connect(Socket.java:759)
at java.base/java.net.Socket.connect(Socket.java:693)
at java.base/java.net.Socket.(Socket.java:561)
at java.base/java.net.Socket.(Socket.java:534)
at UdpSocket.newUdpSocket(UdpSocket.java:143)
at UdpSocket.testMaxSockets(UdpSocket.java:102)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:573)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:102)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:58)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:573)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1576)
test UdpSocket.testSendReceive(): success
===============================================
java/net/Socket/UdpSocket.java
Total tests run: 2, Passes: 1, Failures: 1, Skips: 0
===============================================
OS: os_x

-----
Title: [JDK-8341779] [REDO BACKPORT] type annotations are not visible to javac plugins across compilation boundaries (JDK-8225377)
Priority: P3
Type: Bug
Component: tools
Description: javac fails to associate type annotations with TypeMirrors for some symbols loaded from the classpath, which prevents plugins from accessing those annotations across compilation boundaries. The annotations are present if the same symbol is compiled from source in the compilation where the plugin runs.
=== ./test/B.java
abstract class B extends A {}
=== ./test/A.java
import java.lang.annotation.ElementType;
import java.util.List;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
@Target(ElementType.TYPE_USE)
@Retention(RetentionPolicy.RUNTIME)
@interface TypeAnnotation {}
abstract class A implements List {}
=== ./plugin/p/P.java
package p;
import com.sun.source.util.JavacTask;
import com.sun.source.util.Plugin;
import com.sun.source.util.TaskEvent;
import com.sun.source.util.TaskListener;
import javax.lang.model.element.TypeElement;
import javax.lang.model.type.DeclaredType;
import javax.lang.model.type.TypeMirror;
public class P implements Plugin {
@Override
public String getName() {
return "P";
}
@Override
public void init(JavacTask javacTask, String... strings) {
javacTask.addTaskListener(
new TaskListener() {
@Override
public void finished(TaskEvent e) {
if (e.getKind() != TaskEvent.Kind.ENTER) {
return;
}
TypeElement b = javacTask.getElements().getTypeElement("B");
for (TypeMirror i :
((TypeElement) ((DeclaredType) b.getSuperclass()).asElement()).getInterfaces()) {
System.err.printf("%s %s\n", i, i.getAnnotationMirrors());
}
}
});
}
}
=== ./plugin/module-info.java
module p {
requires transitive jdk.compiler;
provides com.sun.source.util.Plugin with p.P;
}
===
$ javac $(find plugin -name '*.java')
# when both compilation units are compiled from source, the type annotations are visible
$ javac --processor-module-path plugin -Xplugin:P test/A.java test/B.java
java.util.List
java.util.List
# when 'A' is loaded from the classpath, the type annotations on its supertype are not visible
$ javac --processor-module-path plugin -Xplugin:P -classpath test test/B.java
java.util.List

-----
Title: [JDK-8225377] type annotations are not visible to javac plugins across compilation boundaries
Priority: P3
Type: Bug
Component: tools
Description: javac fails to associate type annotations with TypeMirrors for some symbols loaded from the classpath, which prevents plugins from accessing those annotations across compilation boundaries. The annotations are present if the same symbol is compiled from source in the compilation where the plugin runs.
=== ./test/B.java
abstract class B extends A {}
=== ./test/A.java
import java.lang.annotation.ElementType;
import java.util.List;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
@Target(ElementType.TYPE_USE)
@Retention(RetentionPolicy.RUNTIME)
@interface TypeAnnotation {}
abstract class A implements List {}
=== ./plugin/p/P.java
package p;
import com.sun.source.util.JavacTask;
import com.sun.source.util.Plugin;
import com.sun.source.util.TaskEvent;
import com.sun.source.util.TaskListener;
import javax.lang.model.element.TypeElement;
import javax.lang.model.type.DeclaredType;
import javax.lang.model.type.TypeMirror;
public class P implements Plugin {
@Override
public String getName() {
return "P";
}
@Override
public void init(JavacTask javacTask, String... strings) {
javacTask.addTaskListener(
new TaskListener() {
@Override
public void finished(TaskEvent e) {
if (e.getKind() != TaskEvent.Kind.ENTER) {
return;
}
TypeElement b = javacTask.getElements().getTypeElement("B");
for (TypeMirror i :
((TypeElement) ((DeclaredType) b.getSuperclass()).asElement()).getInterfaces()) {
System.err.printf("%s %s\n", i, i.getAnnotationMirrors());
}
}
});
}
}
=== ./plugin/module-info.java
module p {
requires transitive jdk.compiler;
provides com.sun.source.util.Plugin with p.P;
}
===
$ javac $(find plugin -name '*.java')
# when both compilation units are compiled from source, the type annotations are visible
$ javac --processor-module-path plugin -Xplugin:P test/A.java test/B.java
java.util.List
java.util.List
# when 'A' is loaded from the classpath, the type annotations on its supertype are not visible
$ javac --processor-module-path plugin -Xplugin:P -classpath test test/B.java
java.util.List

-----
Title: [JDK-8341972] java/awt/dnd/DnDRemoveFocusOwnerCrashTest.java timed out after JDK-8341257
Priority: P4
Type: Bug
Component: client-libs
Description: The following test timed out in the JDK24 CI:
java/awt/dnd/DnDRemoveFocusOwnerCrashTest.java
Here's a snippet from the log file:
#section:main
----------messages:(9/356)----------
command: main DnDRemoveFocusOwnerCrashTest
reason: User specified action: run main DnDRemoveFocusOwnerCrashTest
started: Fri Oct 11 04:55:22 UTC 2024
Mode: othervm
Additional options from @modules: --add-modules java.desktop
Timeout information:
--- Timeout information end.
finished: Fri Oct 11 05:00:39 UTC 2024
elapsed time (seconds): 316.686
----------configuration:(3/43)----------
Boot Layer
add modules: java.desktop
----------System.out:(1/37)----------
Timeout signalled after 240 seconds
----------System.err:(1/16)----------
STATUS:Passed.
----------rerun:(46/5301)*----------
result: Error. Program `c:\ade\mesos\work_dir\jib-master\install\jdk-24+20-2248\windows-x64.jdk\jdk-24\bin\java' timed out (timeout set to 240000ms, elapsed time including timeout handling was 316670ms).
The test did pass while the timeout handler was running.
OS: windows

-----
Title: [JDK-8342075] HttpClient: improve HTTP/2 flow control checks
Priority: P4
Type: Bug
Component: core-libs
Description: The HttpClient should report flow control issues to the server as FLOW_CONTROL_ERROR.

-----
Title: [JDK-8342376] More reliable OOM handling in ExceptionDuringDumpAtObjectsInitPhase test
Priority: P4
Type: Bug
Component: hotspot
Description: Found a test bug while testing JDK-8341913 with Shenandoah. The allocation that follows OOM almost always succeeds with Shenandoah. Actually, it succeeds with other GCs as well, it just so happens that other GCs throw OOM with "GC overhead limit exceeded".

-----
Title: [JDK-8342524] Use latch in AbstractButton/bug6298940.java instead of delay
Priority: P5
Type: Bug
Component: client-libs
Description: Use a CountDownLatch in javax/swing/AbstractButton/6298940/bug6298940.java instead of delay.
The latch provides a direct way to synchronise EDT and main thread, and the test will finish quicker.

-----
Title: [JDK-8342633] javax/management/security/HashedPasswordFileTest.java creates tmp file in src dir
Priority: P3
Type: Bug
Component: core-svc
Description: javax/management/security/HashedPasswordFileTest.java fails if the test source tree is read-only as it tries to create a temporary file there instead of in the provided jtreg scratch dir.
Stacktrace:
test HashedPasswordFileTest.testClearTextPasswordFile(): failure
java.io.IOException: Permission denied
at java.base/java.io.UnixFileSystem.createFileExclusively0(Native Method)
at java.base/java.io.UnixFileSystem.createFileExclusively(UnixFileSystem.java:218)
at java.base/java.io.File.createNewFile(File.java:1057)
at HashedPasswordFileTest.createNewPasswordFile(HashedPasswordFileTest.java:123)
at HashedPasswordFileTest.generateClearTextPasswordFile(HashedPasswordFileTest.java:128)
at HashedPasswordFileTest.testClearTextPasswordFile(HashedPasswordFileTest.java:214)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:573)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:102)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:58)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:573)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1576)

-----
Title: [JDK-8342958] Use jvmArgs consistently in microbenchmarks
Priority: P4
Type: Enhancement
Component: performance
Description: Currently in the OpenJDK corpus of JMH microbenchmarks all different @Fork(jvmArgs/-Append/-Prepend = ) options are used.
143 uses of jvmArgsAppend
59 uses of jvmArgsPrepend
18 uses of jvmArgs
This makes for some surprises and makes it easy to override configured flags when setting up and running chunks of microbenchmarks.
I propose we consolidate on @Fork(jvmArgs = ..) as the preferred option in microbenchmarks, leaving `-jvmArgsAppend` and `-jvmArgsPrepend` free for use by ops.

-----
Title: [JDK-8343019] Primitive caches must use boxed instances from the archive
Priority: P3
Type: Bug
Component: core-libs
Description: This is forked from JDK-8342642 and filed as a general issue for archived boxed Integer cache when it's recreated at runtime. In short, current code drops the entire primitive cache when the CDS archived version of the cache is too short. This poses a problem with code that uses CDS archived cache instances, since the boxed equality would break when comparing the CDS-archived value and the Integer cached value recreated at runtime.
https://github.com/openjdk/jdk/pull/21672#issuecomment-2434359711 discusses a possible fix for the Integer cache. JDK-8342642 has additional details.

-----
Title: [JDK-8343037] Missing @since tag on JColorChooser.showDialog overload
Priority: P4
Type: Bug
Component: client-libs
Description: A DESCRIPTION OF THE PROBLEM :
With JDK-8051548 in Java 9, we got a new overload of `JColorChooser.showDialog` to specify whether color transparency controls be shown. The overload should specify the `@since 9` tag.
https://docs.oracle.com/javase/9/docs/api/javax/swing/JColorChooser.html#showDialog-java.awt.Component-java.lang.String-java.awt.Color-boolean-
OS: generic

-----
Title: [JDK-8343103] Enable debug logging for vmTestbase/nsk/jvmti/scenarios/sampling/SP05/sp05t003/TestDescription.java
Priority: P4
Type: Sub-task
Component: hotspot
Description: Enable debug logging in the test to get more details about test failures (JDK-8305010)
OS: generic

-----
Title: [JDK-8343124] Tests fails with java.lang.IllegalAccessException: class com.sun.javatest.regtest.agent.MainWrapper$MainTask cannot access
Priority: P4
Type: Bug
Component: client-libs
Description: Following two test fails with
open/test/jdk/java/awt/print/Dialog/PrintDlgPageable.java
open/test/jdk/javax/print/StreamPrintingOrientation.java
test/jdk/javax/print/URLGIFPrinting.java
----------System.err:(11/874)----------
java.lang.IllegalAccessException: class com.sun.javatest.regtest.agent.MainWrapper$MainTask cannot access a member of class PrintDlgPageable with modifiers "public static"
at java.base/jdk.internal.reflect.Reflection.newIllegalAccessException(Reflection.java:401)
at java.base/java.lang.reflect.AccessibleObject.checkAccess(AccessibleObject.java:692)
at java.base/java.lang.reflect.Method.invoke(Method.java:563)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1491)
This two tests is not a public class & when I added public the test passes
OS: generic

-----
Title: [JDK-8343144] UpcallLinker::on_entry racingly clears pending exception with GC safepoints
Priority: P4
Type: Bug
Component: core-libs
Description: In UpcallLinker::on_entry we clear_pending_exception() right before transitioning from native to Java. This clears an oop on the thread that might be concurrently scanned by the GC. The GC may read the oop and update its address to a new location, without using any atomics at all (because we are in a safepoint and nobody should be messing around with it concurrently). The lack of atomics means that the following interleaving is possible:
GCThread: old_oop = JT1-_pending_exception
JT1: clear_pending_exception()
GCThread: JT1-_pending_exception = new_addr(old_oop);
Other interesting things can happen as well. But it's safe to say we shouldn't be messing around with oops in_native concurrently to GC safepoints.

-----
Title: [JDK-8343170] java/awt/Cursor/JPanelCursorTest/JPanelCursorTest.java does not show the default cursor
Priority: P4
Type: Bug
Component: client-libs
Description: java/awt/Cursor/JPanelCursorTest/JPanelCursorTest.java does not show the default cursor instead it shows the move cursor on OL-9-3 & windows-x64-11
Step to reproduce
------------------------
1) Run java/awt/Cursor/JPanelCursorTest/JPanelCursorTest.java
2) When the frame is visible, move the mouse pointer to the left side of the frame ( Default component). If you dn't see the default cursor then the bug is reproduced

-----
Title: [JDK-8343224] print/Dialog/PaperSizeError.java fails with MediaSizeName is not A4: A4
Priority: P3
Type: Bug
Component: client-libs
Description: open/test/jdk/java/awt/print/Dialog/PaperSizeError.java fails with the following
----------System.out:(8/289)----------
This test assumes and requires that you have a printer installed
Two page dialogs will appear. You must press 'OK' on both.
If the test fails, it will throw an Exception.
Units = 1/72" size=595.0x842.0
Units = 1/72" new size=595.0x842.0
Units = MM new size=209.90277x297.03888
Media = A4
----------System.err:(12/693)----------
java.lang.RuntimeException: MediaSizeName is not A4: A4
at PaperSizeError.verifyPaper(PaperSizeError.java:112)
at PaperSizeError.main(PaperSizeError.java:78)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:573)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1576)
Tested on MacOs 14.6 & linux-aarch64-OL-9-3

-----
Title: [JDK-8343342] java/io/File/GetXSpace.java fails on Windows with CD-ROM drive
Priority: P4
Type: Bug
Component: core-libs
Description: On Windows Server 2019, if the drive retrieved by File.listRoots() is assigned as a CD-ROM drive and the disk is not mounted, GetXSpace.java fails with the following stack and the message "The device is not ready":
----------System.err:(23/1555)----------
WARNING: A restricted method in java.lang.System has been called
WARNING: java.lang.System::loadLibrary has been called by GetXSpace in an unnamed module (file:/C:/work/kurashige/GetXSpace/JTwork/classes/java/io/File/GetXSpace.d/)
WARNING: Use --enable-native-access=ALL-UNNAMED to avoid a warning for callers in this module
WARNING: Restricted methods will be blocked in a future release unless native access is enabled
WARNING: A terminally deprecated method in java.lang.System has been called
WARNING: System::setSecurityManager has been called by GetXSpace (file:/C:/work/kurashige/GetXSpace/JTwork/classes/java/io/File/GetXSpace.d/)
WARNING: Please consider reporting this to the maintainers of GetXSpace
WARNING: System::setSecurityManager will be removed in a future release
java.lang.RuntimeException: The device is not ready
at GetXSpace.getSpace0(Native Method)
at GetXSpace$Space.(GetXSpace.java:112)
at GetXSpace.testVolumes(GetXSpace.java:431)
at GetXSpace.main(GetXSpace.java:469)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:573)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1576)
In addition, if the disk is mounted, GetXSpace.java fails with the following stack and the message "The parameter is incorrect":
----------System.err:(23/1564)----------
WARNING: A restricted method in java.lang.System has been called
WARNING: java.lang.System::loadLibrary has been called by GetXSpace in an unnamed module (file:/C:/work/kurashige/GetXSpace/JTwork/classes/java/io/File/GetXSpace.d/)
WARNING: Use --enable-native-access=ALL-UNNAMED to avoid a warning for callers in this module
WARNING: Restricted methods will be blocked in a future release unless native access is enabled
WARNING: A terminally deprecated method in java.lang.System has been called
WARNING: System::setSecurityManager has been called by GetXSpace (file:/C:/work/kurashige/GetXSpace/JTwork/classes/java/io/File/GetXSpace.d/)
WARNING: Please consider reporting this to the maintainers of GetXSpace
WARNING: System::setSecurityManager will be removed in a future release
java.lang.RuntimeException: The parameter is incorrect
at GetXSpace.getSpace0(Native Method)
at GetXSpace$Space.(GetXSpace.java:112)
at GetXSpace.testVolumes(GetXSpace.java:431)
at GetXSpace.main(GetXSpace.java:469)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:573)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1576)
This happens because GetDiskSpaceInformationW function in libGetXSpace.c fails to get information about the size of the drive to which a CD-ROM drive is assigned.
Above errors have also been reported at https://github.com/openjdk/jdk/pull/12397#issuecomment-1705164515 but have not been resolved.
GetXSpace.java is a test for File.get-X-Space methods. These methods can get information about the size of the CD-ROM drive.  Therefore, if the target drive for the test is a CD-ROM drive, the test should be run without the above errors.
OS: windows

-----
Title: [JDK-8343345] Use -jvmArgsPrepend when running microbenchmarks in RunTests.gmk
Priority: P4
Type: Enhancement
Component: performance
Description: https://bugs.openjdk.org/browse/JDK-8342958 / https://github.com/openjdk/jdk/pull/21683 changed microbenchmarks to configure innate VM flags with @Fork(jvmArgs). This updates the RunTests.gmk runner (used when running with `make TEST=micro:foo`) to use -jvmArgsPrepend to separate this.
(This should have been updated as part of JDK-8342958)

-----
Title: [JDK-8343529] serviceability/sa/ClhsdbWhere.java fails AssertionFailure: Corrupted constant pool
Priority: P4
Type: Bug
Component: hotspot
Description: Error: sun.jvm.hotspot.utilities.AssertionFailure: Corrupted constant pool: 108 ConstantTag:1
sun.jvm.hotspot.utilities.AssertionFailure: Corrupted constant pool: 108 ConstantTag:1
at jdk.hotspot.agent/sun.jvm.hotspot.utilities.Assert.that(Assert.java:32)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.ConstantPool.getNameAndTypeAt(ConstantPool.java:280)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.ConstantPool.getSignatureRefIndexAt(ConstantPool.java:391)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.ConstantPool.getSignatureRefAt(ConstantPool.java:300)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.GenerateOopMap.doMethod(GenerateOopMap.java:1730)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.GenerateOopMap.interp1(GenerateOopMap.java:1385)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.GenerateOopMap.interpBB(GenerateOopMap.java:802)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.GenerateOopMap.interpAll(GenerateOopMap.java:1108)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.GenerateOopMap.doInterpretation(GenerateOopMap.java:981)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.GenerateOopMap.computeMap(GenerateOopMap.java:2198)
at jdk.hotspot.agent/sun.jvm.hotspot.interpreter.OopMapForCacheEntry.computeMap(OopMapForCacheEntry.java:80)
at jdk.hotspot.agent/sun.jvm.hotspot.interpreter.OopMapCacheEntry.fill(OopMapCacheEntry.java:53)
at jdk.hotspot.agent/sun.jvm.hotspot.oops.Method.getMaskFor(Method.java:265)
at jdk.hotspot.agent/sun.jvm.hotspot.runtime.InterpretedVFrame.getLocals(InterpretedVFrame.java:53)
at jdk.hotspot.agent/sun.jvm.hotspot.ui.classbrowser.HTMLGenerator.genHTMLForJavaStackTrace(HTMLGenerator.java:1936)
at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor$45.doit(CommandProcessor.java:1678)
at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.executeCommand(CommandProcessor.java:2230)
at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.executeCommand(CommandProcessor.java:2200)
at jdk.hotspot.agent/sun.jvm.hotspot.CommandProcessor.run(CommandProcessor.java:2071)
at jdk.hotspot.agent/sun.jvm.hotspot.CLHSDB.run(CLHSDB.java:112)
at jdk.hotspot.agent/sun.jvm.hotspot.CLHSDB.main(CLHSDB.java:44)
at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.runCLHSDB(SALauncher.java:285)
at jdk.hotspot.agent/sun.jvm.hotspot.SALauncher.main(SALauncher.java:507)
OS: linux

-----
Title: [JDK-8343754] Problemlist jdk/jfr/event/oldobject/TestShenandoah.java after JDK-8279016
Priority: P4
Type: Bug
Component: hotspot
Description: See comment in JDK-8279016. I overlooked the case when we just run with Shenandoah without explicitly specifying -XX:+UseShenandoahGC. The test should be disabled in that mode as well.

-----
Title: [JDK-8343855] HTTP/2 ConnectionWindowUpdateSender may miss some unprocessed DataFrames from closed streams
Priority: P3
Type: Bug
Component: core-libs
Description: JDK-8342075 has introduced more flow controls checks, but also introduced a race condition where DataFrames for closed streams may fail to be discounted from the connection window.
The consequence is that WINDOW_UPDATE frames for the connection window may not be sent when they should, preventing the server from making progress and stalling the connection.
This can be shown by modifying the StreamFlowControlTest to send less but bigger frames (e.g. chunks of 1600 bytes instead of chunks of 12 bytes). With such a modification the test can be seen failing intermittently, when sameClient=true.

-----
Title: [JDK-8343891] Test javax/swing/JTabbedPane/TestJTabbedPaneBackgroundColor.java failed
Priority: P4
Type: Bug
Component: client-libs
Description: ----------System.out:(4/64)----------
Testing: Metal
Testing: Nimbus
Testing: CDE/Motif
Testing: GTK+
----------System.err:(11/642)----------
java.lang.RuntimeException: [GTK+ opaque=true]
at TestJTabbedPaneBackgroundColor.main(TestJTabbedPaneBackgroundColor.java:91)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:567)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1576)

-----
Title: [JDK-8343936] Adjust timeout in test javax/management/monitor/DerivedGaugeMonitorTest.java
Priority: P4
Type: Bug
Component: core-svc
Description: This is a very long-standing, problem-listed failure.
All failures are with -Xcomp.
The test does have a timing sensitivity, a 1 second wait:
test/jdk/javax/management/monitor/DerivedGaugeMonitorTest.java:
242             my.cdl.await(1000, TimeUnit.MILLISECONDS);
This should be increased to cope with delays caused by -Xcomp compilation.

-----
Title: [JDK-8344316] security/auth/callback/TextCallbackHandler/Password.java make runnable with JTReg and add the UI
Priority: P4
Type: Bug
Component: security-libs
Description: Change security/auth/callback/TextCallbackHandler/Password.java to run with JTReg and show the ui with instructions and generated run command

-----
Title: [JDK-8344346] java/net/httpclient/ShutdownNow.java fails with java.lang.AssertionError: client was still running, but exited after further delay: timeout should be adjusted
Priority: P4
Type: Bug
Component: core-libs
Description: test ShutdownNow.testConcurrent("https://127.0.0.1:56968/https2/exec/retry"): failure
java.lang.AssertionError: client was still running, but exited after further delay: timeout should be adjusted
at ShutdownNow.testConcurrent(ShutdownNow.java:221)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:102)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:58)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1447)
OS: windows

-----
Title: [JDK-8344361] Restore null return for invalid services from legacy providers
Priority: P3
Type: Bug
Component: security-libs
Description: A DESCRIPTION OF THE PROBLEM :
In Provider.java around line 1285, the following code exists.
Service s = serviceMap.get(key);
if (s == null) {
s = legacyMap.get(key);
if (s != null && !s.isValid()) {
legacyMap.remove(key, s);
}
}
There needs to be a "s = null;" after legacyMap.remove() as otherwise a service which fails  the isValid() test will be returned as is resulting in a failure later.
Unfortunately this appears to happen with providers using the legacy format which results in NullPointerException further down the track when the JCA tries to create an object using a Service with a null class name. It's not immediately clear how legacy parsing is resulting in the invalid services, but they are created with a null class name. For what it's worth this has only started happening with Java 21.
REGRESSION : Last worked in version 17.0.13
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
Requesting an algorithm which does not exist will cause this to happen (sometimes). It also seems to get triggered when attempts are made to match keys to signature providers which we think is why it shows up with the PKCS11 provider.
The code is incorrect by inspection though, if s.isValid() is false s should be getting returned as null, not as an invalid service class.
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
Request for a service which cannot be fully constructed should result in a NoSuchAlgorithmException not a NullPointerException.
ACTUAL -
NullPointerException
CUSTOMER SUBMITTED WORKAROUND :
Catching NullPointerException and hoping it can be treated like NoSuchAlgorithmException.
FREQUENCY : always
OS: generic

-----
Title: [JDK-8344414] ZGC: Another division by zero in rule_major_allocation_rate
Priority: P4
Type: Bug
Component: hotspot
Description: We are still running into this issue (ubsan is enabled in the build) :
test compiler/uncommontrap/TestDeoptOOM.java#Z  shows this on Linux x86_64
jdk/src/hotspot/share/gc/z/zDirector.cpp:490:78: runtime error: division by zero
#0 0x7fac474e0493 in rule_major_allocation_rate src/hotspot/share/gc/z/zDirector.cpp:490
#1 0x7fac474e0493 in start_gc src/hotspot/share/gc/z/zDirector.cpp:836
#2 0x7fac474e0493 in ZDirector::run_thread() src/hotspot/share/gc/z/zDirector.cpp:926
#3 0x7fac4b04b698 in ZThread::run_service() src/hotspot/share/gc/z/zThread.cpp:29
#4 0x7fac48707249 in ConcurrentGCThread::run() src/hotspot/share/gc/shared/concurrentGCThread.cpp:48
#5 0x7fac4ab58bea in Thread::call_run() src/hotspot/share/runtime/thread.cpp:232
#6 0x7fac4a17fd22 in thread_native_entry src/hotspot/os/linux/os_linux.cpp:858
#7 0x7fac4f7dc6e9 in start_thread (/lib64/libpthread.so.0+0xa6e9) (BuildId: 938e42b7e407d175ee3ef9a89c038168101d330c)
#8 0x7fac4ed0f58e in clone (/lib64/libc.so.6+0x11858e) (BuildId: 74f77bf013a66413c77197c121955e029c32d259)

-----
Title: [JDK-8344925] translet-name ignored when package-name is also set
Priority: P4
Type: Bug
Component: xml
Description: Background
GraalVM native executables do not allow loading classes at runtime due to the closed world assumption. To make XSLT work with them, we generate XSLT Translet classes at build time and let native-image compile them into the native executable. For that to work reliably, we need to be able to set the name of the generated class so that we are then able to find the class and pass it to the native compiler.
Steps to reproduce
To generate a Translet class for a given XSL file, we perform steps similar to the following:
```
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stream.StreamSource;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Comparator;
public class Main {
public static void main(String[] args) throws Exception {
TransformerFactory tf = TransformerFactory.newInstance();
tf.setAttribute("generate-translet", true);
tf.setAttribute("translet-name", "MyTranslet");
tf.setAttribute("package-name", "org.acme");
tf.setAttribute("destination-directory", "test");
Path test = Path.of("test");
if (Files.exists(test)) {
Files.walk(test).sorted(Comparator.reverseOrder()).map(Path::toFile).forEach(File::delete);
}
File xslFile = new File(args[0]);
tf.newTemplates(new StreamSource(Files.newInputStream(xslFile.toPath())));
Files.list(Path.of("test/org/acme")).forEach(System.out::println);
}
}
```
When this program is compiled through javac Main.java and run via java Main test.xsl, where test.xsl is any simple XSL file, such as
```
http://www.w3.org/1999/XSL/Transform"
```
then, we expect to find the generated translet file under test/org/acme/MyTranslet.class. In reality, the generated translet is under test/org/acme/die_verwandlung.class.
Analysis
The execution flow goes via com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl.newTemplates(Source), where a new com.sun.org.apache.xalan.internal.xsltc.trax.XSLTC is created and its setClassName(String) and setPackageName(String) are called.
XSLTC.setClassName(String) does some sanitization of the passed className and if the _packageName field is set, it sets the _className field to _packageName + '.' + name.
Because XSLTC._packageName is initialized to "die.verwandlung", then, after the first call of setClassName("MyTranslet"), the value of _packageName is "die.verwandlung.MyTranslet".
The XSLTC.setPackageName("org.acme") called afterwards, first sets the _packageName field to the passed value and then, if _className != null, it calls setClassName(_className).
In our situation, it effectively means calling setClassName("die.verwandlung.MyTranslet").
The sanitization of the passed value done within this second setClassName() call transforms "die.verwandlung.MyTranslet" into "die_verwandlung".
Afterwards, the _className field is set to _packageName + '.' + name which is "org.acme" + '.' + "die_verwandlung" in our case.
Observation: the ASF Xalan does not initialize XSLTC._packageName to "die.verwandlung" and therefore the reproducer code works as expected there.
Possible solutions
A. In TransformerFactoryImpl.newTemplates(Source), call XSLTC.setPackageName(String) before XSLTC.setClassName(String).
B. In XSLTC.setPackageName(String), instead of calling setClassName(_className), pass only the simple class name extracted from the _className field to setClassName(String).
C. Make XSLTC.setClassName(String) throw an exception when it is called with a className containig ., / or \; document that it expects a simple name, document that it sets _className to a fully qualified name when _packageName is set; move all sanitization to callers of XSLTC.setClassName(String). (This implies solution B).

-----
Title: [JDK-8345133] Test sun/security/tools/jarsigner/TsacertOptionTest.java failed: Warning found in stdout
Priority: P4
Type: Bug
Component: security-libs
Description: stdout: [requesting a signature timestamp
TSA certificate: X.509, CN=TSA
Signature algorithm: SHA384withRSA, 2048-bit key
[trusted certificate]
updating: META-INF/MANIFEST.MF
adding: META-INF/SIGN_ALI.SF
adding: META-INF/SIGN_ALI.RSA
signing: TsacertOptionTest.txt
Signer
X.509, CN=Test
Signature algorithm: SHA384withRSA, 2048-bit key
[certificate is not valid until 11/27/24, 4:00?PM]
X.509, CN=CA
Signature algorithm: SHA384withRSA, 2048-bit key
[trusted certificate]
TSA
X.509, CN=TSA
Signature algorithm: SHA384withRSA, 2048-bit key
[trusted certificate]
jar signed.
Warning:
The signer certificate is not yet valid.
The signer certificate will expire on 2025-11-27.
];
stderr: []
exitValue = 0
java.lang.RuntimeException: 'Warning:' found in stdout
at jdk.test.lib.process.OutputAnalyzer.stdoutShouldNotContain(OutputAnalyzer.java:337)
at TsacertOptionTest.start(TsacertOptionTest.java:166)
at TsacertOptionTest.main(TsacertOptionTest.java:65)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.Thread.run(Thread.java:1447)

-----
Title: [JDK-8345134] Test sun/security/tools/jarsigner/ConciseJarsigner.java failed: unable to find valid certification path to requested target
Priority: P4
Type: Bug
Component: security-libs
Description: Error:
This jar contains unsigned entries which have not been integrity-checked.
This jar contains entries whose certificate chain is invalid. Reason: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
This jar contains entries whose signer certificate is self-signed.
Warning:
This jar contains signatures that do not include a timestamp. Without a timestamp, users may not be able to validate this jar after any of the signer certificates expire (as early as 2025-11-28).
Re-run with the -verbose and -certs options for more details.
sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
at java.base/sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:387)
at java.base/sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:270)
at java.base/sun.security.validator.Validator.validate(Validator.java:256)
at java.base/sun.security.validator.Validator.validate(Validator.java:223)
at jdk.jartool/sun.security.tools.jarsigner.Main.validateCertChain(Main.java:2506)
at jdk.jartool/sun.security.tools.jarsigner.Main.certsAndTSInfo(Main.java:2144)
at jdk.jartool/sun.security.tools.jarsigner.Main.signerInfo(Main.java:2100)
at jdk.jartool/sun.security.tools.jarsigner.Main.verifyJar(Main.java:881)
at jdk.jartool/sun.security.tools.jarsigner.Main.run(Main.java:304)
at jdk.jartool/sun.security.tools.jarsigner.Main.main(Main.java:138)
Caused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
at java.base/sun.security.provider.certpath.SunCertPathBuilder.build(SunCertPathBuilder.java:148)
at java.base/sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:129)
at java.base/java.security.cert.CertPathBuilder.build(CertPathBuilder.java:295)
at java.base/sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:382)
... 9 more
sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
at java.base/sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:387)
at java.base/sun.security.validator.PKIXValidator.engineValidate(PKIXValidator.java:270)
at java.base/sun.security.validator.Validator.validate(Validator.java:256)
at java.base/sun.security.validator.Validator.validate(Validator.java:223)
at jdk.jartool/sun.security.tools.jarsigner.Main.validateCertChain(Main.java:2506)
at jdk.jartool/sun.security.tools.jarsigner.Main.certsAndTSInfo(Main.java:2144)
at jdk.jartool/sun.security.tools.jarsigner.Main.signerInfo(Main.java:2100)
at jdk.jartool/sun.security.tools.jarsigner.Main.verifyJar(Main.java:881)
at jdk.jartool/sun.security.tools.jarsigner.Main.run(Main.java:304)
at jdk.jartool/sun.security.tools.jarsigner.Main.main(Main.java:138)
Caused by: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
at java.base/sun.security.provider.certpath.SunCertPathBuilder.build(SunCertPathBuilder.java:148)
at java.base/sun.security.provider.certpath.SunCertPathBuilder.engineBuild(SunCertPathBuilder.java:129)
at java.base/java.security.cert.CertPathBuilder.build(CertPathBuilder.java:295)
at java.base/sun.security.validator.PKIXValidator.doBuild(PKIXValidator.java:382)
... 9 more
Exit value: 20

-----
Title: [JDK-8345146] [PPC64] Make intrinsic conversions between bit representations of half precision values and floats
Priority: P3
Type: Enhancement
Component: hotspot
Description: JDK-8289552 should get ported to PPC64. Power9 has instructions for half precision float conversions.

-----
Title: [JDK-8345341] Fix incorrect log message in JDI stop002t test
Priority: P4
Type: Bug
Component: core-svc
Description: The following log message:
log.display("TEST #5: Caught expected exception while in loop: " + t);
is incorrect. It should be:
log.display("TEST #5: Caught expected exception while in sleep: " + t);
It's a copy-n-paste bug from another section of the test that dealt with loops.

-----
Title: [JDK-8345357] test/jdk/javax/swing/JRadioButton/8033699/bug8033699.java fails in ubuntu22.04
Priority: P4
Type: Bug
Component: client-libs
Description: test/jdk/javax/swing/JRadioButton/8033699/bug8033699.java fails in OCI system citing
Radio Button Group Go To Next Component through Tab Key failed
----------System.err:(30/2118)----------
java.lang.reflect.InvocationTargetException
at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1371)
at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1346)
at java.desktop/javax.swing.SwingUtilities.invokeAndWait(SwingUtilities.java:1480)
at bug8033699.runTest1(bug8033699.java:163)
at bug8033699.main(bug8033699.java:71)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:573)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1575)
Caused by: java.lang.RuntimeException: Focus is not on Radio Button Single as Expected
OS: linux

-----
Title: [JDK-8345447] test/jdk/javax/swing/JToolBar/4529206/bug4529206.java fails in ubuntu22.04
Priority: P4
Type: Bug
Component: client-libs
Description: test/jdk/javax/swing/JToolBar/4529206/bug4529206.java fails in OCI system citing
Caused by: java.lang.RuntimeException: setFloating does not work correctly
at bug4529206.lambda$main$3(bug4529206.java:90)
at java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:308)
OS: linux

-----
Title: [JDK-8345547] test/jdk/javax/swing/text/DefaultEditorKit/4278839/bug4278839.java fails in ubuntu22.04
Priority: P4
Type: Bug
Component: client-libs
Description: test/jdk/javax/swing/text/DefaultEditorKit/4278839/bug4278839.java fails in OCI citing
java.lang.RuntimeException: Test failed.
at bug4278839.main(bug4278839.java:92)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:567)
OS: linux

-----
Title: [JDK-8345598] Upgrade NSS binaries for interop tests
Priority: P4
Type: Bug
Component: security-libs
Description: Current version is 3.107 https://ftp.mozilla.org/pub/security/nss/releases/NSS_3_107_RTM/

-----
Title: [JDK-8345728] [Accessibility,macOS,Screen Magnifier]: JCheckbox unchecked state does not magnify but works for checked state
Priority: P3
Type: Bug
Component: client-libs
Description: Screen magnifier: JCheckbox unselect value does not its value change but works for selection. This is on MacOS 15
Step to reproduce
-------------------------
1) Enable Screen magnifier on theMac
System Preference - Accessibility - Zoom - Select ( Enable Hover Text) when "Command" button is pressed
2) Run the SwingSet2 with -Djavax.accessibility.screen_magnifier_present=true option
3) Once SwingSet2 Frame is visible select "Button Demo" and select "Check Boxes demo".
4) Press "Command" button to show the screen magnifier window on any checkbox ( One , Two , Three )
5) Select One checkbox , observe that item select in the in checkbox as well as screen magnifier also.
6) Release "Command" button and move mouse.
7) Repeat step (4) Observe that "One" check box is selected in Screen magnifier.
8) Click on the Once checkbox to deselect the value. Observe that checkbox is value is deselected but Screen magnifier is not selected If you see the same then the bug is reproduced.
OS: os_x

-----
Title: [JDK-8345838] Remove the appcds/javaldr/AnonVmClassesDuringDump.java test
Priority: P4
Type: Bug
Component: hotspot
Description: In cds/appcds/javaldr/AnonVmClassesDuringDump.java, the setting of dynamicMode is incorrect. It is always false.
public static final boolean dynamicMode =
Boolean.getBoolean(System.getProperty("test.dynamic.cds.archive", "false"));
The correct way should be:
Boolean.getBoolean("test.dynamic.cds.archive")
Or it could just be:
CDSTestUtils.DYNAMIC_DUMP
After correcting the setting, we noticed the behavior is the same regardless of dynamicMode, i.e. only the following check passed:
output - output.shouldNotMatch(pattern)
For the last test which checks the content of the archive, there are classes in the Shared Lambda Dictionary such as java.lang.module.ModuleFinder$2$$Lambda/0x800000023
so no point to run the test on the archive content.
Removing the entire test.

-----
Title: [JDK-8346049] jdk/test/lib/security/timestamp/TsaServer.java warnings
Priority: P4
Type: Bug
Component: security-libs
Description: The warning
* For target support_test_lib_test-lib_classes__the.BUILD_TEST_LIB_JAR_batch:
/home/lmesnik/ws/jdk-lib/open/test/lib/jdk/test/lib/security/timestamp/TsaServer.java:56: warning: [this-escape] possible 'this' escape before subclass is fully initialized
setHandler(handler);
And:
open/test/lib/jdk/test/lib/security/timestamp/TsaServer.java:42: warning: [try] auto-closeable resource TsaServer has a member method close() that could throw InterruptedException

-----
Title: [JDK-8346082] Output JVMTI agent information in hserr files
Priority: P4
Type: Enhancement
Component: hotspot
Description: We should output more information about the JVMTI agents in the hserr file.
OS: generic

-----
Title: [JDK-8346264] "Total compile time" counter should include time spent in failing/bailout compiles
Priority: P4
Type: Enhancement
Component: hotspot
Description: Noticed this when looking through JMH compiler profiler results.
Current `CompilerBroker` counters that are fed into `CompilationMXBean.getTotalCompilationTime()` and JFR `CompilerStatistics` only records the time for successful compilations. If we take a while in compilation and then fail/bail, that time would not be accounted for.
While this seems to be a long-standing behavior, there are problems with this:
1. This is not what "total" means.
2. This gives us a blind spot in measuring time taken in failing/bailing compilations.
3. It does not match well the Javadoc for the bean: "Returns the approximate accumulated elapsed time (in milliseconds) spent in compilation." -- since the time spent in failing/bailing compilation is still time spent in compilation.

-----
Title: [JDK-8346581] JRadioButton/ButtonGroupFocusTest.java fails in CI on Linux
Priority: P4
Type: Bug
Component: client-libs
Description: The javax/swing/JRadioButton/ButtonGroupFocus/ButtonGroupFocusTest.java test fails on Linux:
----------System.out:(0/0)----------
----------System.err:(25/1755)----------
java.lang.reflect.InvocationTargetException
at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1312)
at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1287)
at java.desktop/javax.swing.SwingUtilities.invokeAndWait(SwingUtilities.java:1474)
at ButtonGroupFocusTest.main(ButtonGroupFocusTest.java:95)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1447)
Caused by: java.lang.RuntimeException: Button 4 should get focus
at ButtonGroupFocusTest.lambda$main$2(ButtonGroupFocusTest.java:98)
at java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:308)
at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:723)
at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:702)
at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)
OS: linux

-----
Title: [JDK-8346888] [ubsan] block.cpp:1617:30: runtime error: 9.97582e+36 is outside the range of representable values of type 'int'
Priority: P4
Type: Bug
Component: hotspot
Description: When running jtreg tests on macOS aarch64 with ubsanized binaries, in the test
java/foreign/TestHandshake
this error/warning is reported :
jdk/src/hotspot/share/opto/block.cpp:1617:30: runtime error: 9.97582e+36 is outside the range of representable values of type 'int'
UndefinedBehaviorSanitizer:DEADLYSIGNAL
UndefinedBehaviorSanitizer: nested bug in the same thread, aborting.
seems it happens in this calculation (float value does not fit into an int)  :  int to_pct = (int) ((100 * freq) / target-_freq);
OS: os_x

-----
Title: [JDK-8347000] Bug in com/sun/net/httpserver/bugs/B6361557.java test
Priority: P4
Type: Bug
Component: core-libs
Description: (From a mail on net-dev mailing list https://mail.openjdk.org/pipermail/net-dev/2025-January/025297.html)
The jdk test B6361557 here https://github.com/openjdk/jdk23u/blob/9101cc14972ce6bdeb966e67bcacc8b693c37d0a/test/jdk/com/sun/net/httpserver/bugs/B6361557.java#L68
sends an invalid http request according to the specification here https://datatracker.ietf.org/doc/html/rfc2616#section-4.4
specifically "When a Content-Length is given in a message where a message-body is
allowed, its field value MUST exactly match the number of OCTETs in
the message-body. HTTP/1.1 user agents MUST notify the user when an
invalid length is received and detected."
The code in this test case sends a request with Content-length set to 0, but due to a bug, it sends extra octets after the request header (14 zero to be exact).
The cause is that the buffer is allocated to 64, and filled with a string that is shorter, but the entire buffer is sent.
This is fixed by changing line 68 to
final static ByteBuffer requestBuf = ByteBuffer.wrap(request.getBytes());
It currently passes, only because the server is not fully implementing the http specification.

-----
Title: [JDK-8347019] Test javax/swing/JRadioButton/8033699/bug8033699.java  still fails:  Focus is not on Radio Button Single as Expected
Priority: P4
Type: Bug
Component: client-libs
Description: ----------System.out:(2/134)----------
[The Java(tm) Look and Feel - javax.swing.plaf.metal.MetalLookAndFeel]
Radio Button Group Go To Next Component through Tab Key failed
----------System.err:(26/1787)----------
java.lang.reflect.InvocationTargetException
at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1312)
at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1287)
at java.desktop/javax.swing.SwingUtilities.invokeAndWait(SwingUtilities.java:1474)
at bug8033699.runTest1(bug8033699.java:172)
at bug8033699.main(bug8033699.java:71)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1447)
Caused by: java.lang.RuntimeException: Focus is not on Radio Button Single as Expected
at bug8033699.lambda$runTest1$0(bug8033699.java:175)
at java.desktop/java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:308)
at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:723)
at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:702)
at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)
OS: linux

-----
Title: [JDK-8347083] Incomplete logging in nsk/jvmti/ResourceExhausted/resexhausted00* tests
Priority: P4
Type: Bug
Component: hotspot
Description: Tests in nsk/jvmti/ResourceExhausted namely resexhausted001, resexhausted002, resexhausted003 have the same logging statement
Creating threads...
Can't reproduce OOME due to a limit on iterations/execution time. Test was useless.
when they are unable to reproduce OOME.
This is not a problem when the tests are run individually. However, when resexhausted004, which in turn runs all the 3 tests, is run we are not able to distinguish which test is logging the message.

-----
Title: [JDK-8347126] gc/stress/TestStressG1Uncommit.java gets OOM-killed
Priority: P4
Type: Bug
Component: hotspot
Description: Caught this on one of the testing nodes, that runs VM tests with normal parallelism:
```
0s: Using 13 workers, each allocating: ~989M
0s: Interation: 1
[1.398s][info ][gc            ] GC(0) Pause Young (Normal) (G1 Evacuation Pause) 49M-47M(1016M) 342.489ms
[2.237s][info ][gc            ] GC(1) Pause Young (Normal) (G1 Evacuation Pause) 279M-279M(1016M) 429.191ms
[2.520s][info ][gc            ] GC(2) Pause Young (Normal) (G1 Evacuation Pause) 375M-391M(1016M) 240.384ms
[2.765s][info ][gc            ] GC(3) Pause Young (Normal) (G1 Evacuation Pause) 511M-520M(1016M) 204.557ms
[3.052s][debug][gc,heap,region] GC(4) Activate regions [126, 380)
[3.052s][info ][gc            ] GC(4) Pause Young (Concurrent Start) (G1 Evacuation Pause) 648M-663M(3048M) 264.355ms
[3.052s][info ][gc            ] GC(5) Concurrent Mark Cycle
[3.497s][info ][gc            ] GC(6) Pause Young (Normal) (G1 Evacuation Pause) 807M-815M(3048M) 336.914ms
[3.783s][info ][gc            ] GC(7) Pause Young (Normal) (G1 Evacuation Pause) 983M-998M(3048M) 166.598ms
[4.024s][info ][gc            ] GC(8) Pause Young (Normal) (G1 Evacuation Pause) 1190M-1208M(3048M) 211.513ms
[4.334s][debug][gc,heap,region] GC(9) Activate regions [380, 1032)
[4.334s][info ][gc            ] GC(9) Pause Young (Normal) (G1 Evacuation Pause) 1400M-1422M(8264M) 273.668ms
[4.913s][info ][gc            ] GC(10) Pause Young (Normal) (G1 Evacuation Pause) 1798M-1827M(8264M) 413.163ms
[5.509s][info ][gc            ] GC(11) Pause Young (Normal) (G1 Evacuation Pause) 2179M-2216M(8264M) 545.249ms
[5.579s][debug][gc,heap,region] GC(5) Deactivate regions [988, 1030)
[5.579s][debug][gc,heap,region] GC(5) Deactivate regions [978, 985)
[5.579s][debug][gc,heap,region] GC(5) Deactivate regions [917, 974)
[5.580s][info ][gc            ] GC(5) Pause Remark 2226M-2226M(7416M) 67.115ms
[5.580s][debug][gc,heap,region] Uncommit regions [917, 933)
[5.632s][debug][gc,heap,region] Uncommit regions [933, 949)
[5.696s][debug][gc,heap,region] Uncommit regions [949, 965)
[5.732s][debug][gc,heap,region] Uncommit regions [965, 974)
[5.764s][debug][gc,heap,region] Uncommit regions [978, 985)
[5.856s][debug][gc,heap,region] Uncommit regions [988, 1004)
[5.872s][info ][gc            ] GC(5) Pause Cleanup 2472M-2472M(7416M) 0.384ms
[5.956s][debug][gc,heap,region] Uncommit regions [1004, 1020)
[6.026s][debug][gc,heap,region] Uncommit regions [1020, 1030)
[6.415s][info ][gc            ] GC(12) Pause Young (Prepare Mixed) (G1 Evacuation Pause) 2568M-2606M(7416M) 387.162ms
[6.866s][info ][gc            ] GC(13) Pause Young (Mixed) (G1 Evacuation Pause) 2918M-2957M(7416M) 342.671ms
[6.872s][info ][gc            ] GC(5) Concurrent Mark Cycle 3819.934ms
[7.255s][debug][gc,heap,region] GC(14) Activate regions [917, 974)
[7.255s][debug][gc,heap,region] GC(14) Activate regions [978, 985)
[7.255s][debug][gc,heap,region] GC(14) Activate regions [988, 1030)
[7.285s][debug][gc,heap,region] GC(14) Activate regions [1032, 1360)
[7.285s][info ][gc            ] GC(14) Pause Young (Mixed) (G1 Evacuation Pause) 3277M-3319M(10888M) 364.049ms
[8.022s][info ][gc            ] GC(15) Pause Young (Normal) (G1 Evacuation Pause) 3815M-3847M(10888M) 511.744ms
[8.643s][info ][gc            ] GC(16) Pause Young (Normal) (G1 Evacuation Pause) 4319M-4367M(10888M) 557.194ms
[9.334s][info ][gc            ] GC(17) Pause Young (Normal) (G1 Evacuation Pause) 4839M-4877M(10888M) 622.493ms
[10.010s][debug][gc,heap,region] GC(18) Activate regions [1360, 1620)
[10.010s][info ][gc            ] GC(18) Pause Young (Normal) (G1 Evacuation Pause) 5349M-5389M(12968M) 634.508ms
];
stderr: []
exitValue = 137
java.lang.RuntimeException: Expected to get exit value of [0], exit value is: [137]
at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:522)
at gc.stress.TestStressG1Uncommit.main(TestStressG1Uncommit.java:63)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.Thread.run(Thread.java:1447)
```
exit code 137 means oom-killed. I think the test is a memory hog: in this configuration, it allocates 13GB on live data. This is well beyond the usual footprint for a single test VM (~2GB), and so it runs into a high chance of being OOM killed.
I think we can make the test a bit more frugal.

-----
Title: [JDK-8347173] java/net/DatagramSocket/InterruptibleDatagramSocket.java fails with virtual thread factory
Priority: P4
Type: Bug
Component: core-libs
Description: Test
java/net/DatagramSocket/InterruptibleDatagramSocket.java fails with virtual thread factory
The log
Testing interrupt of DatagramSocket receive on endpoint /[0:0:0:0:0:0:0:0]:38751
----------System.err:(14/866)----------
java.net.SocketException: Closed by interrupt
at java.base/sun.nio.ch.DatagramSocketAdaptor.receive(DatagramSocketAdaptor.java:199)
at java.base/java.net.DatagramSocket.receive(DatagramSocket.java:638)
at InterruptibleDatagramSocket.test0(InterruptibleDatagramSocket.java:63)
at InterruptibleDatagramSocket.test(InterruptibleDatagramSocket.java:76)
at InterruptibleDatagramSocket.main(InterruptibleDatagramSocket.java:103)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:333)
at java.base/java.lang.VirtualThread.run(VirtualThread.java:466)
JavaTest Message: Test threw exception: java.net.SocketException
JavaTest Message: shutting down test
result: Failed. Execution failed: `main' threw exception: java.net.SocketException: Closed by interrupt
test result: Failed. Execution failed: `main' threw exception: java.net.SocketException: Closed by interrupt

-----
Title: [JDK-8347286] (fs) Remove some extensions from java/nio/file/Files/probeContentType/Basic.java
Priority: P4
Type: Enhancement
Component: core-libs
Description: Content type variation on Windows has caused issues in the past, e.g., JDK-8320943 and JDK-8346671. If the set of content types tested were reduced to a few stable extensions, then future maintenance work could be lessened if not eliminated.

-----
Title: [JDK-8347296] WinInstallerUiTest fails in local test runs if the path to test work directory is longer that regular
Priority: P4
Type: Bug
Component: tools
Description: WinInstallerUiTest produces several msi packages, some of which have very long names, making msi.exe fail to unpack them.
This is a known issue with the msi.exe, which can't handle paths longer than 260 characters.
If the path to the test work dir is long enough, some of the test cases from the WinInstallerUiTest test start failing.
OS: windows

-----
Title: [JDK-8347373] HTTP/2 flow control checks may count unprocessed data twice
Priority: P4
Type: Bug
Component: core-libs
Description: The HTTP/2 flow control logic has a potential race condition where some of the  unprocessed data may be counted twice for the connection window.
A protocol exception may be raised incorrectly if there are several concurrent streams producing data and the connection window is close from being exhausted.

-----
Title: [JDK-8347506] Compatible OCSP readtimeout property with OCSP timeout
Priority: P3
Type: Bug
Component: security-libs
Description: A new set of timeout values and enhancements to existing OCSP timeout values was first introduced in JDK-21 via JDK-8179502.  The backport to JDK-17 introduced a small change to the default setting for the `com.sun.security.ocsp.readtimeout` property.  This issue carries this default change for the property forward.  The change simply makes the default for the aforementioned property the same as whatever the value of the `com.sun.security.ocsp.timeout` System property is, rather than a 15000ms default in the original fix.
Refer to the CSRs:   https://bugs.openjdk.org/browse/JDK-8337407 and the withdrawn CSR https://bugs.openjdk.org/browse/JDK-8345114 (the withdrawn CSR has additional discussions in the comment section)

-----
Title: [JDK-8347596] Update HSS/LMS public key encoding
Priority: P3
Type: Bug
Component: security-libs
Description: https://www.rfc-editor.org/rfc/rfc9708.html#name-changes-since-rfc-8708:
The pk-HSS-LMS-HashSig definition is updated to reflect no ASN.1 wrapping for the public key.
We still have the wrapping.

-----
Title: [JDK-8347629] Test FailOverDirectExecutionControlTest.java fails with -Xcomp
Priority: P4
Type: Bug
Component: tools
Description: Test jdk/jshell/FailOverDirectExecutionControlTest.java fails with JVM options -Xcomp.
Reproduce command:
jtreg -ea -esa -Xcomp -jdk:build/linux-x86_64-server-release/images/jdk/ test/langtools/jdk/jshell/FailOverDirectExecutionControlTest.java
STDOUT:
config FailOverDirectExecutionControlTest.setUp(): success
test ExecutionControlTestBase.test(): failure
java.lang.NullPointerException: Cannot invoke "java.util.List.size()" because the return value of "java.util.Map.get(Object)" is null
at FailOverDirectExecutionControlTest.variables(FailOverDirectExecutionControlTest.java:148)
at ExecutionControlTestBase.test(ExecutionControlTestBase.java:40)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1604)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:102)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:58)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1447)
config FailOverDirectExecutionControlTest.tearDown(): success
config FailOverDirectExecutionControlTest.setUp(): success
test FailOverDirectExecutionControlTest.variables(): success
config FailOverDirectExecutionControlTest.tearDown(): success
===============================================
jdk/jshell/FailOverDirectExecutionControlTest.java
Total tests run: 2, Passes: 1, Failures: 1, Skips: 0
===============================================
STDERR:
Jan 14, 2025 2:36:16 AM jdk.jshell.execution.FailOverExecutionControlProvider generate
WARNING: FailOverExecutionControlProvider: Failure failover -- 0 = alwaysFailing -- java.lang.UnsupportedOperationException: This operation intentionally broken.
Jan 14, 2025 2:36:16 AM jdk.jshell.execution.FailOverExecutionControlProvider generate
WARNING: FailOverExecutionControlProvider: Failure failover -- 1 = alwaysFailing -- java.lang.UnsupportedOperationException: This operation intentionally broken.
java.lang.Exception: failures: 1
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:104)
at com.sun.javatest.regtest.agent.TestNGRunner.main(TestNGRunner.java:58)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1447)
OS: linux

-----
Title: [JDK-8347995] Race condition in jdk/java/net/httpclient/offline/FixedResponseHttpClient.java
Priority: P4
Type: Bug
Component: core-libs
Description: The jdk/java/net/httpclient/offline/FixedResponseHttpClient.java test class makes unreasonable assumptions on BodyPublisher implementation. There's no guarantee that all buffers will be available until the subscriber is completed.

-----
Title: [JDK-8348107] test/jdk/java/net/httpclient/HttpsTunnelAuthTest.java fails intermittently
Priority: P4
Type: Bug
Component: core-libs
Description: The test/jdk/java/net/httpclient/HttpsTunnelAuthTest.java has been observed failing at least once. The suspicion is that it may be due to the client URI using "localhost" instead of a literal IP.

-----
Title: [JDK-8348110] Update LCMS to 2.17
Priority: P3
Type: Bug
Component: client-libs
Description: LittleCMS (aka LCMS) 2.17 released on February 9, 2025
We should upgrade JDK 25 to use this.

-----
Title: [JDK-8348299] Update List/ItemEventTest/ItemEventTest.java
Priority: P4
Type: Bug
Component: client-libs
Description: I found a few problems when I looked at the java/awt/List/ItemEventTest/ItemEventTest.java test to see what's going on in JDK-8204221.
1. The java/awt/List/ItemEventTest/ItemEventTest.java test uses StringBuilder to store the string which keeps track of selecting and deselecting items in the list.
The object of StringBuilder is used across two threads, which is not thread-safe.
2. The java/awt/List/ItemEventTest/ItemEventTest.java test fails in CI on some hosts, JDK-8204221, therefore adding logging and screenshots could help identify the root cause.

-----
Title: [JDK-8348323] Corrupted timezone string in JVM crash log
Priority: P4
Type: Bug
Component: hotspot
Description: The timezone string printed by `os::print_date_and_time` is corrupted for some locales when `wcstombs` fails, as shown below.
Host: AMD Ryzen 5 2600 Six-Core Processor            , 12 cores, 15G,  Windows 11 , 64 bit Build 22621 (10.0.22621.3958)
Time: Tue Dec 10 16:32:49 2024 K��-eur󰡩 t鬩 idBuild 22621 (10.0.22621.3958) elapsed time: 1272.020845 seconds (0d 0h 21m 12s)
Typically, the timezone is replaced with random junk, followed by leftovers of the OS version string. Interestingly, the junk remains consistent across multiple machines.
OS: windows

-----
Title: [JDK-8348596] Update FreeType to 2.13.3
Priority: P3
Type: Bug
Component: client-libs
Description: Freetype 2.13.3 was released on Aug 12, 2024

-----
Title: [JDK-8348597] Update HarfBuzz to 10.4.0
Priority: P3
Type: Bug
Component: client-libs
Description: v 10.4.0 released on Feb 28, 2025

-----
Title: [JDK-8348598] Update Libpng to 1.6.47
Priority: P3
Type: Bug
Component: client-libs
Description: Need to upgrade libpng from 1.6.43 to 1.6.47 (released on  Feb 18, 2025)

-----
Title: [JDK-8348600] Update PipeWire to 1.3.81
Priority: P3
Type: Bug
Component: client-libs
Description: upgrade PipeWire to latest, 1.3.81 released on Jan 23, 2025

-----
Title: [JDK-8348865] JButton/bug4796987.java never runs because Windows XP is unavailable
Priority: P4
Type: Bug
Component: client-libs
Description: The javax/swing/JButton/4796987/bug4796987.java test is designed to be run specifically on Windows XP:
OSVersion.current().equals(OSVersion.WINDOWS_XP)
Windows XP is obsolete for a long time. The test requires visual style that were introduced in Windows XP. At the time time, the test is relevant for any version of Windows after Windows XP. This is especially true now where visual styles are always enabled, the classic theme isn't supported since Windows 8.
OS: windows

-----
Title: [JDK-8348936] [Accessibility,macOS,VoiceOver] VoiceOver doesn't announce untick on toggling the checkbox with "space" key on macOS
Priority: P3
Type: Bug
Component: client-libs
Description: Test Type: Accessibility
Tested With: SwingSet2.jar
Products Tested: jdk-8u451 b02, jdk-11.0.27 b01, jdk-17.0.9 b09, jdk-21.0.7 b03, 24.0.1 b02, JDK 25 b07
Steps to reproduce:
1. Run SwingSet2.jar
2. Go to checkbox demo
3. Turn on VoiceOver.
4. Navigate the focus on checkbox using tab key.
5. Press only "space" key: It will also tick or untick the checkbox, but VoiceOver announces the tick only, and it does NOT announce the untick.
Expectation: VoiceOver should announce both tick and untick.
Also tested the native macOS checkbox: on toggling the native checkbox using space key it announces both tick and untick, Java checkbox should also announce the same.
Note: Only with jdk-17.0.9 b09 it announces both tick and untick, for rest all the releases it announces tick only.

-----
Title: [JDK-8349200] [JMH] time.format.ZonedDateTimeFormatterBenchmark fails
Priority: P4
Type: Bug
Component: core-libs
Description: JMH test org.openjdk.bench.java.time.format.ZonedDateTimeFormatterBenchmark.parse fails "java.time.format.DateTimeParseException: Text '2015:03:10:12:13:ECT' could not be parsed at index 17".
The reproduce command:
./build/linux-x86_64-server-release/images/jdk/bin/java -Djmh.ignoreLock=true -Djava.library.path=$PWD/build/linux-x86_64-server-release/images/test/micro/native --add-opens=java.base/java.io=ALL-UNNAMED --enable-native-access=ALL-UNNAMED --add-opens=java.base/jdk.internal.misc=ALL-UNNAMED --add-opens java.base/sun.security.provider=ALL-UNNAMED -jar $PWD/build/linux-x86_64-server-release/images/test/micro/benchmarks.jar -jvmArgsAppend "-Djava.library.path=$PWD/build/linux-x86_64-server-release/images/test/micro/native " -t 1 -f 1 -wi 2 org.openjdk.bench.java.time.format.ZonedDateTimeFormatterBenchmark.parse
or:
make test TEST="micro:org.openjdk.bench.java.time.format.ZonedDateTimeFormatterBenchmark.parse" MICRO="FORK=1;WARMUP_ITER=2" CONF=release
The test log snippet:
java.time.format.DateTimeParseException: Text '2015:03:10:12:13:ECT' could not be parsed at index 17
at java.base/java.time.format.DateTimeFormatter.parseResolved0(DateTimeFormatter.java:2108)
at java.base/java.time.format.DateTimeFormatter.parse(DateTimeFormatter.java:2010)
at java.base/java.time.ZonedDateTime.parse(ZonedDateTime.java:600)
at org.openjdk.bench.java.time.format.ZonedDateTimeFormatterBenchmark.setUp(ZonedDateTimeFormatterBenchmark.java:47)
at org.openjdk.bench.java.time.format.jmh_generated.ZonedDateTimeFormatterBenchmark_parse_jmhTest._jmh_tryInit_f_zoneddatetimeformatterbenchmark0_0(ZonedDateTimeFormatterBenchmark_parse_jmhTest.java:340)
at org.openjdk.bench.java.time.format.jmh_generated.ZonedDateTimeFormatterBenchmark_parse_jmhTest.parse_AverageTime(ZonedDateTimeFormatterBenchmark_parse_jmhTest.java:140)
OS: generic

-----
Title: [JDK-8349348] Refactor ClassLoaderDeadlock.sh and Deadlock.sh to run fully in java
Priority: P4
Type: Sub-task
Component: security-libs
Description: test/java/security//Security/ClassLoaderDeadlock/ClassLoaderDeadlock.sh
test/java/security//Security/ClassLoaderDeadlock/Deadlock.sh

-----
Title: [JDK-8349358] [JMH] Cannot access class jdk.internal.vm.ContinuationScope
Priority: P4
Type: Bug
Component: core-libs
Description: The JMH test org.openjdk.bench.loom.obsolete.FreezeAndThaw.yieldAndContinue fails "java.lang.IllegalAccessError: superclass access check failed: class org.openjdk.bench.loom.obsolete.FreezeAndThaw$1 (in unnamed module @0x4459eb14) cannot access class jdk.internal.vm.ContinuationScope (in module java.base) because module java.base does not export jdk.internal.vm to unnamed module @0x4459eb14"
Affected tests list:
org.openjdk.bench.loom.obsolete.FreezeAndThaw.yieldAndContinue
org.openjdk.bench.loom.obsolete.OneShot.noYield
org.openjdk.bench.loom.obsolete.FreezeAndThaw.baseline
org.openjdk.bench.loom.obsolete.OneShot.yieldAfterEachCall
org.openjdk.bench.loom.obsolete.OneShot.yieldThenContinue
org.openjdk.bench.loom.obsolete.OneShot.yieldBeforeAndAfterEachCall
org.openjdk.bench.loom.obsolete.OneShot.yieldBeforeEachCall
org.openjdk.bench.loom.obsolete.Oscillation.oscillate
org.openjdk.bench.loom.obsolete.OneShot.yield
The test log snippet:
java.lang.IllegalAccessError: superclass access check failed: class org.openjdk.bench.loom.obsolete.FreezeAndThaw$1 (in unnamed module @0x4459eb14) cannot access class jdk.internal.vm.ContinuationScope (in module java.base) because module java.base does not export jdk.internal.vm to unnamed module @0x4459eb14
at java.base/java.lang.ClassLoader.defineClass1(Native Method)
at java.base/java.lang.ClassLoader.defineClass(ClassLoader.java:962)
at java.base/java.security.SecureClassLoader.defineClass(SecureClassLoader.java:132)
at java.base/jdk.internal.loader.BuiltinClassLoader.defineClass(BuiltinClassLoader.java:776)
at java.base/jdk.internal.loader.BuiltinClassLoader.findClassOnClassPathOrNull(BuiltinClassLoader.java:691)
at java.base/jdk.internal.loader.BuiltinClassLoader.loadClassOrNull(BuiltinClassLoader.java:620)
at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:578)
at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:490)
at org.openjdk.bench.loom.obsolete.jmh_generated.FreezeAndThaw_yieldAndContinue_jmhTest._jmh_tryInit_f_freezeandthaw0_0(FreezeAndThaw_yieldAndContinue_jmhTest.java:357)
at org.openjdk.bench.loom.obsolete.jmh_generated.FreezeAndThaw_yieldAndContinue_jmhTest.yieldAndContinue_AverageTime(FreezeAndThaw_yieldAndContinue_jmhTest.java:145)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:527)
at org.openjdk.jmh.runner.BenchmarkHandler$BenchmarkTask.call(BenchmarkHandler.java:504)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:328)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:545)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:328)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1095)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:619)
at java.base/java.lang.Thread.run(Thread.java:1447)
OS: generic

-----
Title: [JDK-8349492] Update sun/security/pkcs12/KeytoolOpensslInteropTest.java to use a recent Openssl version
Priority: P4
Type: Enhancement
Component: security-libs
Description: The test sun/security/pkcs12/KeytoolOpensslInteropTest.java is currently using 1.1.1g openssl, it should be updated to use the current LTS version (3.0 series)

-----
Title: [JDK-8349501] Relocate supporting classes in security/testlibrary to test/lib/jdk tree
Priority: P4
Type: Bug
Component: security-libs
Description: There are 5 support classes for tests that exist in open/test/jdk/java/security/testlibrary that should be relocated to open/test/lib/jdk/test/lib/security where many other support classes already exist.  The following classes will be moved:
- CertificateBuilder
- HumanInputStream
- Providers
- ProvidersSnapshot
- SimpleOCSPServer
In addition, where classes were part of the unnamed package they should be moved into the jdk.test.lib.security package to conform to the other classes there.  It is also useful to do for the Providers class to help distinguish it from the sun.security.jca.Providers class.

-----
Title: [JDK-8349623] [ASAN] Gtest os_linux.glibc_mallinfo_wrapper_vm fails
Priority: P4
Type: Bug
Component: hotspot
Description: Standalone reproduce command:
build/linux-x86_64-server-slowdebug/images/test/hotspot/gtest/server/gtestLauncher -jdk build/linux-x86_64-server-slowdebug/images/jdk --gtest_output=xml:test_result.xml --gtest_catch_exceptions=0 --gtest_filter=NMT*:os* -XX:NativeMemoryTracking=detail
The test output snippet:
[ RUN      ] os_linux.glibc_mallinfo_wrapper_vm
test/hotspot/gtest/runtime/test_os_linux.cpp:458: Failure
Expected: ((mi.uordblks + mi.hblkhd)) = (2 * K), actual: 0 vs 2048
[  FAILED  ] os_linux.glibc_mallinfo_wrapper_vm (0 ms)
OS: linux

-----
Title: [JDK-8349637] Integer.numberOfLeadingZeros outputs incorrectly in certain cases
Priority: P2
Type: Bug
Component: hotspot
Description: ADDITIONAL SYSTEM INFORMATION :
Windows 11 [Version 10.0.26100.2894]
JDK 21.0.6, 23.0.2, 24-ea+35, 25-ea+8
A DESCRIPTION OF THE PROBLEM :
Use numberOfLeadingZeros inside a short loop.
Use arrays for input, output, or both.
Access arrays sequentially.
Do not use branching statements such as if statements within the loop.
A certain number of loops (hundreds of thousands of times?).
Under these conditions, it may return a number that is 1 less at the boundary where the value changes.
Could the Intrinsic of Integer.numberOfLeadingZeros be causing the problem?
0x01FFFFFF: expected=7, actual=6
0x03FFFFFE-0x03FFFFFF: expected=6, actual=5
0x07FFFFFC-0x07FFFFFF: expected=5, actual=4
0x0FFFFFF8-0x0FFFFFFF: expected=4, actual=3
0x1FFFFFF0-0x1FFFFFFF: expected=3, actual=2
0x3FFFFFE0-0x3FFFFFFF: expected=2, actual=1
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
var out = new int[0x2000004];
for (int i = 0; i  i);
var input = new int[size];
java.util.Arrays.setAll(input, i - -1  i);
int actual = 0;
for (int i = 0; i
OS: generic

-----
Title: [JDK-8349751] AIX build failure after upgrade pipewire to 1.3.81
Priority: P4
Type: Bug
Component: client-libs
Description: Filed as separate issue to keep the upgrade PR clean of it.
Fix is the same as in the src/java.desktop/unix/native/libpipewire/include/spa/param/audio/raw.h part of the JDK-8309703
--- a/src/java.desktop/unix/native/libpipewire/include/spa/param/audio/raw.h
+++ b/src/java.desktop/unix/native/libpipewire/include/spa/param/audio/raw.h
@@ -11,7 +11,15 @@ extern "C" {
#include
-#include
+#if !defined(__FreeBSD__) && !defined(__MidnightBSD__) && !defined(AIX)
+#include
+#endif
+
+#if defined(AIX)
+#include
+#define __BIG_ENDIAN      BIG_ENDIAN
+#define __BYTE_ORDER      BIG_ENDIAN
+#endif
/**
* \addtogroup spa_param

-----
Title: [JDK-8350201] Out of bounds access on Linux aarch64 in os::print_register_info
Priority: P3
Type: Bug
Component: hotspot
Description: When running jtreg test  VendorInfoPluginsTest  we noticed the following issue  (ubsanized binaries were used)
jdk/src/hotspot/os_cpu/linux_aarch64/os_linux_aarch64.cpp:369:46: runtime error: index 31 out of bounds for type 'long long unsigned int [31]'
#0 0xffff84380470 in os::print_register_info(outputStream*, void const*, int&) (/jtreg_jdk_tier2_work/JTwork/scratch/10/images/vendorinfo.image/lib/server/libjvm.so+0x4d80470)
#1 0xffff84bf566c in VMError::report(outputStream*, bool) (/jtreg_jdk_tier2_work/JTwork/scratch/10/images/vendorinfo.image/lib/server/libjvm.so+0x55f566c)
#2 0xffff84bf812c in VMError::report_and_die(int, char const*, char const*, std::__va_list, Thread*, unsigned char*, void const*, void const*, char const*, int, unsigned long) (/jtreg_jdk_tier2_work/JTwork/scratch/10/images/vendorinfo.image/lib/server/libjvm.so+0x55f812c)
#3 0xffff84bf90b4 in VMError::report_and_die(Thread*, unsigned int, unsigned char*, void const*, void const*, char const*, ...) (/jtreg_jdk_tier2_work/JTwork/scratch/10/images/vendorinfo.image/lib/server/libjvm.so+0x55f90b4)
#4 0xffff84bf9138 in VMError::report_and_die(Thread*, unsigned int, unsigned char*, void const*, void const*) (/jtreg_jdk_tier2_work/JTwork/scratch/10/images/vendorinfo.image/lib/server/libjvm.so+0x55f9138)
#5 0xffff8489ede8 in JVM_handle_linux_signal (/jtreg_jdk_tier2_work/JTwork/scratch/10/images/vendorinfo.image/lib/server/libjvm.so+0x529ede8)
Looks like we have registers 0 - 30 according to  sys/ucontext.h  on Linux aarch64
typedef struct
{
unsigned long long int __ctx(fault_address);
unsigned long long int __ctx(regs)[31];
....
} mcontext_t;
and according to the  arm developer documentation
https://developer.arm.com/documentation/100069/0606/Overview-of-AArch64-state/Registers-in-AArch64-state#:~:text=In%20AArch64%20state%2C%20the%20following,are%20accessible%20as%20W0%2DW30.
Thirty-one 64-bit general-purpose registers X0-X30, the bottom halves of which are accessible as W0-W30.
OS: linux

-----
Title: [JDK-8350211] CTW: Attempt to preload all classes in constant pool
Priority: P4
Type: Enhancement
Component: hotspot
Description: CTW runners do preloading for constant pools ahead of time. I believe this is done to expose more loaded classes to the compilations, so to extend the compilation scope.
Unfortunately, current code catches the first exception when loading the constant pool and stops preloading. This routinely happens when CTW runner processes a 3rd party JAR, where dependencies might normally be in other JARs.
I believe we should attempt to resolve all constant pool entries when preloading is requested. This would likely expand the scope of CTW testing.

-----
Title: [JDK-8350224] Test javax/swing/JComboBox/TestComboBoxComponentRendering.java fails in ubuntu 23.x and later
Priority: P4
Type: Bug
Component: client-libs
Description: Test is failing in ubuntu 23.x and beyond with expected red pixel not being picked up
Increase in fontsize increase the possibility of font red pixel being picked up.
OS: linux

-----
Title: [JDK-8350260] Improve HTML instruction formatting in PassFailJFrame
Priority: P4
Type: Bug
Component: client-libs
Description: When instructions are long, the formatting in PassFailJFrame looks off:
1. When the instructions are displayed on the screen, the HTML is scrolled to the bottom, which isn't convenient;
2. Numbers above 10 in the list are clipped on the left;
3. No border around the HTML text.
These problems were found while converting the instructions for test/jdk/javax/accessibility/TestJCheckBoxToggleAccessibility.java in code review [1][2] for JDK-8348936 and JDK-8345728.
[1] https://github.com/openjdk/jdk/pull/23436
[2] https://github.com/openjdk/jdk/pull/23436#discussion_r1953131477

-----
Title: [JDK-8350313] Include timings for leaving safepoint in safepoint logging
Priority: P4
Type: Enhancement
Component: hotspot
Description: We have a production use case where leaving the safepoint introduced a significant latency, mostly due to VMThread getting de-scheduled. There are mitigations for this, see JDK-8350324. This issue is about capturing such an event in safepoint logging more comprehensively.
In those cases we would see something like:
[3.664s][info][gc       ] GC(7) Pause Young (Allocation Failure) 277M-3M(989M) 5.145ms
[3.694s][info][safepoint] Safepoint "SerialCollectForAllocation", Time since last: 374870126 ns, Reaching safepoint: 271019 ns, At safepoint: 35859436 ns, Total: 36130455 ns
...which is extremely confusing: the GC itself took ~5ms, yet "At safepoint" mentions 35ms! All that time is actually spent disarming the WaitBarrier, and eating the de/re-scheduling for VMThread at the same time.
I think a "Leaving safepoint" counter would be good to have. It comes with the symmetry advantage with "Reaching safepoint" counter. "Leaving safepoint" measures the time spent in safepoint machinery from the "finishing side". And, it more clearly captures the transitional state where some threads might be still at safepoint, and some have already unparked, like "Reaching safepoint".
So the hypothetical log for the excerpt above would look something like:
[3.664s][info][gc       ] GC(7) Pause Young (Allocation Failure) 277M-3M(989M) 5.145ms
[3.694s][info][safepoint] Safepoint "SerialCollectForAllocation", Time since last: 374870126 ns, Reaching safepoint: 271019 ns, At safepoint: 5859436 ns, Leaving safepoint: 30000000 ns, Total: 36130455 ns

-----
Title: [JDK-8350383] Test: add more test case for string compare (UL case)
Priority: P4
Type: Enhancement
Component: hotspot

-----
Title: [JDK-8350386] Test TestCodeCacheFull.java fails with option -XX:-UseCodeCacheFlushing
Priority: P4
Type: Bug
Component: hotspot
Description: Test jdk/jfr/event/compiler/TestCodeCacheFull.java fails with option -XX:-UseCodeCacheFlushing.
The test log snippet:
STDERR:
OpenJDK 64-Bit Server VM warning: CodeHeap 'non-profiled nmethods' is full. Compiler has been disabled.
OpenJDK 64-Bit Server VM warning: Try increasing the code heap size using -XX:NonProfiledCodeHeapSize=
OpenJDK 64-Bit Server VM warning: C1 initialization failed. Shutting down all compilers
java.lang.RuntimeException: No events: expected false, was true
at jdk.test.lib.Asserts.fail(Asserts.java:715)
at jdk.test.lib.Asserts.assertFalse(Asserts.java:520)
at jdk.test.lib.jfr.Events.hasEvents(Events.java:159)
at jdk.jfr.event.compiler.TestCodeCacheFull.testWithBlobType(TestCodeCacheFull.java:69)
at jdk.jfr.event.compiler.TestCodeCacheFull.main(TestCodeCacheFull.java:57)
OS: linux

-----
Title: [JDK-8350412] [21u] AArch64: Ambiguous frame layout leads to incorrect traces in JFR
Priority: P4
Type: Bug
Component: hotspot
Description: It was previously pointed https://bugs.openjdk.org/browse/JDK-8323755?focusedId=14640270&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14640270 that "When doing a runtime call from compiled code, JVM puts two words onto the stack: ... This breaks the invariant the stack walker relies on: the size of the compiled frame is constant".
As a result JFR recordings from a simple program from JDK-8323755 do contain wrong samples, e.g. see duplicated timeLoop() entry
jdk.ExecutionSample {
startTime = 21:33:04.331 (2025-02-19)
sampledThread = "timeLoop" (javaThreadId = 39)
state = "STATE_RUNNABLE"
stackTrace = [
Test.time() line: 29
Test.wrapper() line: 25
Test.timeLoop() line: 15
Test.timeLoop() line: 20
]
}
Other diagnostic tools are affected too.
Current code in 21u that is responsible for that is https://github.com/openjdk/jdk21u-dev/blob/990859cc32776e2d794de539190c9ccced1dfcd9/src/hotspot/cpu/aarch64/aarch64.ad#L3779
It's the same for other update releases.
In mainline jdk the issue has been fixed in JDK 24 as a part of JEP 491: Synchronize Virtual Threads without Pinning (JDK-8338383).
The fix is in the aarch64.ad changes:
https://github.com/openjdk/jdk/commit/78b80150e009745b8f28d36c3836f18ad0ca921f#diff-018aa61d1a7aafcf70a535fcd40a318a4bd6511fd40ac39ce4be90cc52216749R1651

-----
Title: [JDK-8350483] AArch64: turn on signum intrinsics by default on Ampere CPUs
Priority: P4
Type: Enhancement
Component: hotspot
Description: JMH microbenchmarks vm.compiler.signum.* produce problematic scores because fmov is used to transmit data between GPRs and FPRs, the time cost is significant, same as mentioned by JDK-8251525.
Particularly, Signum._1_signumFloatTest performance can be improved much by setting -XX:+UnlockDiagnosticVMOptions -XX:+UseSignumIntrinsic, which generates facgt/ushr/bsl pairs for the unrolling code snippet of the hot for-loop of the test case. Verified on Ampere-1A and found the score of patched became 40x better than base (thrpt, ops/s). This JBS is to turn the option ON by default for all Ampere CPUs.
OS: generic

-----
Title: [JDK-8350498] Remove two Camerfirma root CA certificates
Priority: P4
Type: Enhancement
Component: security-libs
Description: Camerfirma has confirmed that the following root CA certificates are terminated and are no longer active:
1. CN=Chambers of Commerce Root, OU=http://www.chambersign.org, O=AC Camerfirma SA CIF A82743287, C=EU
2. CN=Global Chambersign Root - 2008, O=AC Camerfirma S.A., SERIALNUMBER=A82743287, L=Madrid (see current address at www.camerfirma.com/address), C=EU

-----
Title: [JDK-8350546] Several java/net/InetAddress tests fails UnknownHostException
Priority: P4
Type: Bug
Component: core-libs
Description: Below 2 java/net/InetAddress tests fails "java.net.UnknownHostException" on some special machines:
java/net/InetAddress/IsReachableViaLoopbackTest.java
java/net/InetAddress/getOriginalHostName.java
The test log snippet:
java.lang.RuntimeException: Unexpected exception:java.net.UnknownHostException: bugs.openjdk.org: Temporary failure in name resolution
at IsReachableViaLoopbackTest.main(IsReachableViaLoopbackTest.java:59)
OS: linux

-----
Title: [JDK-8350616] Skip ValidateHazardPtrsClosure in non-debug builds
Priority: P4
Type: Enhancement
Component: hotspot
Description: The ValidateHazardPtrsClosure closure is effectively a no-op in a non-debug build, but ThreadsSMRSupport::free_list stills applies it in a linear-scan of all threads, unnecessarily. The assert was originally a guarantee and this optimisation was missed when it was changed over by JDK-8264624

-----
Title: [JDK-8350650] Bump update version for OpenJDK: jdk-21.0.8
Priority: P4
Type: Enhancement
Component: infrastructure
Description: Development of update 21.0.8 starts in repository jdk21u-dev on Wednesday February 26th, 2025. The first change should be to bump the version.
Release of 21.0.8 is planned for Tuesday July 15th, 2025.
For the date, see also https://wiki.openjdk.org/display/JDKUpdates/JDK%2021u or https://www.oracle.com/security-alerts/

-----
Title: [JDK-8350682] [JMH] vector.IndexInRangeBenchmark failed with IndexOutOfBoundsException for size=1024
Priority: P4
Type: Enhancement
Component: core-libs
Description: The test vector.IndexInRangeBenchmark failed with message:
java.lang.IndexOutOfBoundsException: Index 512 out of bounds for length 481
at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:100)
at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:106)
at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:302)
at java.base/java.util.Objects.checkIndex(Objects.java:365)
at jdk.incubator.vector/jdk.incubator.vector.VectorIntrinsics.checkFromIndexSize(VectorIntrinsics.java:58)
at jdk.incubator.vector/jdk.incubator.vector.AbstractMask.intoArray(AbstractMask.java:74)
at org.openjdk.bench.jdk.incubator.vector.IndexInRangeBenchmark.shortIndexInRange(IndexInRangeBenchmark.java:66)
for runs with specified parameters.
The test array size are hardcoded as:
public void Setup() {
mask = new boolean[512];
}
and should be updated to
public void Setup() {
mask = new boolean[size];
}

-----
Title: [JDK-8350786] Some java/lang jtreg tests miss requires vm.hasJFR
Priority: P4
Type: Bug
Component: core-libs
Description: While testing a bit with a minimal JVM, it has been noticed that some java/lang jtreg tests use jfr but do not declare it with a  "requires vm.hasJFR" ; that leads to test errors in a JVM setup with no JFR .

-----
Title: [JDK-8350924] javax/swing/JMenu/4213634/bug4213634.java fails
Priority: P4
Type: Bug
Component: client-libs
Description: javax/swing/JMenu/4213634/bug4213634.java is failing in CI with below exception:
java.lang.RuntimeException: Failed: Mnemonic activated
at bug4213634$3.actionPerformed(bug4213634.java:115)
at java.desktop/javax.swing.AbstractButton.fireActionPerformed(AbstractButton.java:1972)
at java.desktop/javax.swing.AbstractButton$Handler.actionPerformed(AbstractButton.java:2314)
at java.desktop/javax.swing.DefaultButtonModel.fireActionPerformed(DefaultButtonModel.java:407)
at java.desktop/javax.swing.DefaultButtonModel.setPressed(DefaultButtonModel.java:262)
at java.desktop/javax.swing.AbstractButton.doClick(AbstractButton.java:374)
at java.desktop/javax.swing.AbstractButton.doClick(AbstractButton.java:354)
at java.desktop/javax.swing.plaf.basic.BasicPopupMenuUI$BasicMenuKeyListener.menuKeyPressed(BasicPopupMenuUI.java:382)
at java.desktop/javax.swing.JPopupMenu.fireMenuKeyPressed(JPopupMenu.java:1470)
at java.desktop/javax.swing.JPopupMenu.processMenuKeyEvent(JPopupMenu.java:1449)
at java.desktop/javax.swing.JPopupMenu.processKeyEvent(JPopupMenu.java:1433)
at java.desktop/javax.swing.MenuSelectionManager.processKeyEvent(MenuSelectionManager.java:480)
at java.desktop/javax.swing.plaf.basic.BasicPopupMenuUI$MenuKeyboardHelper.keyPressed(BasicPopupMenuUI.java:1224)
at java.desktop/java.awt.Component.processKeyEvent(Component.java:6534)
at java.desktop/javax.swing.JComponent.processKeyEvent(JComponent.java:2911)
at java.desktop/java.awt.Component.processEvent(Component.java:6353)
at java.desktop/java.awt.Container.processEvent(Container.java:2260)
at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:4958)
at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2318)
at java.desktop/java.awt.Component.dispatchEvent(Component.java:4790)
at java.desktop/java.awt.KeyboardFocusManager.redispatchEvent(KeyboardFocusManager.java:1829)
at java.desktop/java.awt.DefaultKeyboardFocusManager.dispatchKeyEvent(DefaultKeyboardFocusManager.java:874)
at java.desktop/java.awt.DefaultKeyboardFocusManager.preDispatchKeyEvent(DefaultKeyboardFocusManager.java:1136)
at java.desktop/java.awt.DefaultKeyboardFocusManager.pumpApprovedKeyEvents(DefaultKeyboardFocusManager.java:960)
at java.desktop/java.awt.DefaultKeyboardFocusManager.typeAheadAssertions(DefaultKeyboardFocusManager.java:1057)
at java.desktop/java.awt.DefaultKeyboardFocusManager.dispatchEvent(DefaultKeyboardFocusManager.java:678)
at java.desktop/java.awt.Component.dispatchEventImpl(Component.java:4839)
at java.desktop/java.awt.Container.dispatchEventImpl(Container.java:2318)
at java.desktop/java.awt.Component.dispatchEvent(Component.java:4790)
at java.desktop/java.awt.EventQueue.dispatchEventImpl(EventQueue.java:725)
at java.desktop/java.awt.EventQueue.dispatchEvent(EventQueue.java:702)
at java.desktop/java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:203)
at java.desktop/java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:124)
at java.desktop/java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:113)
at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:109)
at java.desktop/java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
at java.desktop/java.awt.EventDispatchThread.run(EventDispatchThread.java:90)
STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Failed: Mnemonic activated
OS: linux_ubuntu

-----
Title: [JDK-8351086] (fc) Make java/nio/channels/FileChannel/BlockDeviceSize.java test manual
Priority: P4
Type: Bug
Component: core-libs
Description: Convert the test to manual. This might changed late ron when a solution to JDK-8350708 is identified.
OS: linux

-----
Title: [JDK-8351500] G1: NUMA migrations cause crashes in region allocation
Priority: P3
Type: Bug
Component: hotspot
Description: (Note: This bug manifests on JDK 21 and 17; we don't see crashes or asserts on mainline JDK. but I argue that the underlying root issue is also in mainline JDK and would best be fixed there).
One of our customers found that NUMA migrations (more precisely, the OS task getting scheduled to a different NUMA node) can cause G1 to crash if they happen at exactly the wrong moment.
JVM runs with +UseNUMA +UseNUMAInterleaving, G1GC and 4TB heap, two or four NUMA nodes, about 5000 application threads and 159 GC worker threads. JVM crashes (rarely, about once every four hours or so).
Call stacks wildly different, e.g.:
```
28 Stack: [0x00007e506733f000,0x00007e5067540000],  sp=0x00007e506753cf10,  free space=2039k
29 Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
30 V  [libjvm.so+0xf32422]  Symbol::as_klass_external_name() const+0x12  (symbol.hpp:140)
31 V  [libjvm.so+0xda71ff]  SharedRuntime::generate_class_cast_message(Klass*, Klass*, Symbol*)+0x1f  (sharedRuntime.cpp:2179)
32 V  [libjvm.so+0xda99c4]  SharedRuntime::generate_class_cast_message(JavaThread*, Klass*)+0xd4  (sharedRuntime.cpp:2171)
33 V  [libjvm.so+0x578e2c]  Runtime1::throw_class_cast_exception(JavaThread*, oopDesc*)+0x13c  (c1_Runtime1.cpp:735)
```
in some crashes, it looks like we load a zero from the heap where no zero should be (eg. as narrow Klass ID from an oop header).
However, if you run a debug JVM, you usually see an assert either in G1Allocator or in CollectedHeap, for example
```
27 Current thread (0x00007fb770087b70):  JavaThread "Thread-33"        [_thread_in_vm, id=123345, stack(0x00007fb7a86d7000,0x00007fb7a87d8000) (1028K)]
28
29 Stack: [0x00007fb7a86d7000,0x00007fb7a87d8000],  sp=0x00007fb7a87d62f0,  free space=1020k
30 Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
31 V  [libjvm.so+0x9fdd6b]  CollectedHeap::fill_with_object_impl(HeapWordImpl**, unsigned long, bool) [clone .part.0]+0x2b  (collectedHeap.cpp:470)
32 V  [libjvm.so+0x9fff1d]  CollectedHeap::fill_with_object(HeapWordImpl**, unsigned long, bool)+0x39d  (arrayOop.hpp:58)
33 V  [libjvm.so+0xc5009f]  G1AllocRegion::fill_up_remaining_space(HeapRegion*)+0x1ef  (g1AllocRegion.cpp:79)
34 V  [libjvm.so+0xc5027c]  G1AllocRegion::retire_internal(HeapRegion*, bool)+0x6c  (g1AllocRegion.cpp:106)
35 V  [libjvm.so+0xc51347]  MutatorAllocRegion::retire(bool)+0xb7  (g1AllocRegion.cpp:300)
36 V  [libjvm.so+0xc50ed9]  G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool)+0x59  (g1AllocRegion.cpp:139)
37 V  [libjvm.so+0xc9b140]  G1CollectedHeap::attempt_allocation_slow(unsigned long)+0x6d0  (g1AllocRegion.inline.hpp:120)
38 V  [libjvm.so+0xc9e4ff]  G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*)+0x39f  (g1CollectedHeap.cpp:643)
39 V  [libjvm.so+0xc9bd4f]  G1CollectedHeap::mem_allocate(unsigned long, bool*)+0x5f  (g1CollectedHeap.cpp:401)
40 V  [libjvm.so+0x13b9b6d]  MemAllocator::mem_allocate_slow(MemAllocator::Allocation&) const+0x5d  (memAllocator.cpp:240)
41 V  [libjvm.so+0x13b9ca1]  MemAllocator::allocate() const+0xa1  (memAllocator.cpp:357)
```
The problem is in `G1Allocator`. `G1AllocRegion` objects tied to NUMA nodes. For most actions involving the `G1Allocator`, we determine the `G1AllocRegion` of the current thread, then redirect the action toward that alloc region. However, due to OS scheduling the NUMA-to-thread-association can change arbitrarily. That means calls to `G1Allocator` are not guaranteed to hit the same `G1AllocRegion` object as last time.
Now, we have control flows that assume that we work with the same `G1AllocRegion` object over their duration, since we build up state in `G1AllocRegion`. The JDK 21 control flow affected is:
```
- `G1CollectedHeap::attempt_allocation_slow`
- `G1Allocator::attempt_allocation_locked`                 (A)
- `G1AllocRegion::attempt_allocation_locked`
- `G1AllocRegion::attempt_allocation`                  (try again allocating from HeapRegion under lock protection); failing that:
- `G1AllocRegion::attempt_allocation_using_new_region`
- `G1AllocRegion::retire`                            (retires current allocation region; may keep it as retained region)
- `G1AllocRegion::new_alloc_region_and_allocate`     (allocate new HeapRegion and set it; failing that, sets dummy region), failing that:
- `G1Allocator::attempt_allocation_force`                  (B)
- `G1AllocRegion::attempt_allocation_force`
- `G1AllocRegion::new_alloc_region_and_allocate`
```
Here, if we change NUMA node from (A) to (B), we will address different `G1AllocRegion` objects. But `G1AllocRegion::attempt_allocation_force` assumes that the current allocation region for this object is retired, which is done by the preceding `G1AllocRegion::attempt_allocation_locked`, but for a different region.
This causes us to abandon the current allocation region; it won't be added to the collection set. On debug JVMs, we hit one of two asserts. We either complain about the current allocation region being not dummy at the entrance of new_alloc_region_and_allocate; In JDK 17, we assert when retire the wrong region, and it is more empty than expected. The effect of this can be delayed, happening on the next retire, since it can affect the retained region.
----
Reproduction and Regression testing
Reproducing the bug is difficult. I did not have a NUMA machine, and even if I had one, NUMA task-node migrations are very rare. Therefore, I build something like a "FakeNUMA" mode which essentially interposes OS NUMA calls and fakes a NUMA system of 8 nodes. I also added a "FakeNUMAStressMigrations" mode mimicking frequent node migrations. With these simple tools, I could reproduce the customer problem (with gc/TestJNICriticalStressTest, slightly modified to increase the number of JNICritical threads). I plan to bring the FakeNUMA mode upstream, but have no time atm to polish it up.
OS: linux

-----
Title: [JDK-8351665] Remove unused UseNUMA in os_aix.cpp
Priority: P4
Type: Enhancement
Component: hotspot
Description: We have some UseNUMA related coding in os_aix.cpp that is not needed.
OS: aix

-----
Title: [JDK-8351933] Inaccurate masking of TC subfield decrement in ForkJoinPool
Priority: P4
Type: Bug
Component: core-libs
Description: When a decrement of TC subfield of ctl (Number of total workers [minus target parallelism in older versions], 16 bit at shift 32) is masked with UMASK (upper bits) mask, it may lead to corruption of RC subfield  (Number of total workers [minus target parallelism], 16 bit at shift 48).
Current mainline code is like
https://github.com/openjdk/jdk/blob/e43960a0170bf29b28ff4733e1c8c927947fb0bb/src/java.base/share/classes/java/util/concurrent/ForkJoinPool.java#L2080
The FJP can stop executing tasks. E.g. JDK-8330017
OS: generic

-----
Title: [JDK-8352076] [21u] Problem list tests that fail in 21 and would be fixed by 8309622
Priority: P4
Type: Sub-task
Component: core-libs
Description: We regularly but seldom see tests
gc/shenandoah/TestAllocIntArrays.java#aggressive
gc/shenandoah/TestAllocIntArrays.java#iu-aggressive
gc/stress/gcold/TestGCOldWithShenandoah.java#iu-aggressive
fail in SAP nighly tests.
No occurances of the failures since we added 8309622 to our tests of 21.
As we don't want to backport JDK-8309622 add them to the problem list.

-----
Title: [JDK-8352109] java/awt/Desktop/MailTest.java fails in platforms where Action.MAIL is not supported
Priority: P4
Type: Bug
Component: client-libs
Description: OS: Linux
Environments: OEL 9/8 Any Kernel aarch64
Failed on Release/Build: JDK_24 - 24.0. 1 7
Is it a Regression in JDK 24 release: N/A
Is it a platform-specific issue: No
General description of the problem:
Test "java/awt/Desktop/MailTest.java": Test case auto fails
Steps to reproduce:
- Run test cases: java/awt/Desktop/MailTest.java
Expected behavior:
The test case should be executed correctly
Actual behavior:
Test case failed automatically
Any non-default VM flags
java.lang.reflect.InvocationTargetException
at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1371)
at java.desktop/java.awt.EventQueue.invokeAndWait(EventQueue.java:1346)
at java.desktop/javax.swing.SwingUtilities.invokeAndWait(SwingUtilities.java:1480)
at PassFailJFrame.invokeOnEDT(PassFailJFrame.java:595)
at PassFailJFrame.(PassFailJFrame.java:532)
at PassFailJFrame$Builder.build(PassFailJFrame.java:1831)
at MailTest.main(MailTest.java:113)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:572)
at com.sun.javatest.regtest.agent.MainWrapper$MainTask.run(MainWrapper.java:138)
at java.base/java.lang.Thread.run(Thread.java:1491)
Caused by: java.lang.UnsupportedOperationException: The MAIL action is not supported on the current platform!
at java.desktop/java.awt.Desktop.checkActionSupport(Desktop.java:378)
at java.desktop/java.awt.Desktop.mail(Desktop.java:517)
at MailTest.(MailTest.java:67)
at PassFailJFrame.createUI(PassFailJFrame.java:649)
JavaTest Message: Test threw exception: java.lang.reflect.InvocationTargetException
JavaTest Message: shutting down test
Issue
java/awt/Desktop/MailTest.java fails in platforms where Action.MAIL is not supported
Reason
In MailTest.java, there is a condition check(if (!desktop.isSupported(Desktop.Action.MAIL))) which will force pass the test if the corresponding 'Action' is not supported by the platform. But, apparently, this is not working good and the code flow went past this and fails in desktop.mail() method with an UnsupportedOperationException.
Fix
Even though we are calling PassFailJFrame.forcePass() if the 'Action.MAIL' is unsupported, the PassFailJFrame just count downs a latch and the actual action will be taken later only(in awaitAndCheck()). But at the meantime, the desktop.mail() call gets executed in the constructor of MailTest() and it will result in an UnsupportedOperationException. So, the fix is to return from the constructor immediately if the operation is 'unsupported'.
Testing
This is a manual test, so it is tested locally and found to be working fine.
OS: generic

-----
Title: [JDK-8352302] Test sun/security/tools/jarsigner/TimestampCheck.java is failing
Priority: P4
Type: Bug
Component: security-libs
Description: ...
Warning:
The input uses a 512-bit RSA key which is considered a security risk and is disabled.
Certificate reply was installed in keystore
Certificate reply was installed in keystore
Certificate reply was installed in keystore
stdout: [
s k       57 Wed Mar 19 01:23:20 GMT 2025 META-INF/MANIFEST.MF
243 Wed Mar 19 01:23:20 GMT 2025 META-INF/PRE2019S.SF
4350 Wed Mar 19 01:23:20 GMT 2025 META-INF/PRE2019S.RSA
smk        1 Wed Mar 19 01:22:52 GMT 2025 A
s = signature was verified
m = entry is listed in manifest
k = at least one certificate was found in keystore
- Signed by "CN=pre2019signer"
Digest algorithm: SHA-1 (weak)
Signature algorithm: SHA384withRSA, 3072-bit RSA key
Timestamped by "CN=tsbefore2019" on Sat Aug 18 19:04:58 UTC 2018
Timestamp digest algorithm: SHA-384
Timestamp signature algorithm: SHA256withRSA, 3072-bit RSA key
jar verified.
Warning:
The SHA-1 digest algorithm is considered a security risk. This algorithm will be disabled in a future update.
The timestamp will expire within one year on 2026-03-20.
Re-run with the -verbose and -certs options for more details.
];
stderr: []
exitValue = 0
java.lang.RuntimeException: 'signer certificate expired on .*. However, the JAR will be valid' missing from stdout/stderr
at jdk.test.lib.process.OutputAnalyzer.shouldMatch(OutputAnalyzer.java:372)
at TimestampCheck.main(TimestampCheck.java:242)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:565)
at com.sun.javatest.regtest.agent.MainActionHelper$AgentVMRunnable.run(MainActionHelper.java:335)
at java.base/java.lang.Thread.run(Thread.java:1447)
Failing test case:
239:                 verify("tsbefore2019.jar", "-verbose")
240:                         .shouldHaveExitValue(0)
241:                         .shouldMatch("Digest.*SHA-1.*(weak)")
242:                         .shouldMatch("signer certificate expired on .*. "
243:                                 + "However, the JAR will be valid");
So, the test expects a warning like
The signer certificate expired on 2019-06-01. However, the JAR will be valid until the timestamp expires on 2026-03-20.
but instead sees
The timestamp will expire within one year on 2026-03-20.
This is because the tsbefore2019 cert is created with a start date of 2018/1/1 and 3000 valid days, and it will expire in a year.

-----
Title: [JDK-8352512] TestVectorZeroCount: counter not reset between iterations
Priority: P4
Type: Bug
Component: hotspot
Description: The test uses counters with this initialization:
private static int intCounter = Integer.MIN_VALUE;
private static int longIterations = 100_000_000;
It uses 2 iterations, but misses a counter reset between them.
Timeouts were observed on PPC64.

-----
Title: [JDK-8352676] Opensource JMenu tests - series1
Priority: P4
Type: Bug
Component: client-libs
Description: Few closed JMenu tests are to be opensourced

-----
Title: [JDK-8352680] Opensource few misc swing tests
Priority: P4
Type: Bug
Component: client-libs
Description: Few misc swing tests are to be opensourced

-----
Title: [JDK-8352684] Opensource JInternalFrame tests - series1
Priority: P4
Type: Bug
Component: client-libs
Description: Few JInternalFrame tests are to be opensourced

-----
Title: [JDK-8352706] httpclient HeadTest does not run on HTTP2
Priority: P4
Type: Bug
Component: core-libs
Description: HeadTest verifies that the client does not expect any content in HEAD response and in HTTP 304 response, even if the Content-Length or the Transfer-Encoding headers are present. Due to a test bug, the test is currently only running on HTTP1. It should be run on HTTP2 as well.

-----
Title: [JDK-8352716] (tz) Update Timezone Data to 2025b
Priority: P3
Type: Enhancement
Component: core-libs
Description: This release contains the following changes:
Briefly:
New zone for Aysén Region in Chile which moves from -04/-03 to -03.
Changes to future timestamps
Chile's Aysén Region moves from -04/-03 to -03 year-round, joining
Magallanes Region.  The region will not change its clocks on
2025-04-05 at 24:00, diverging from America/Santiago and creating a
new zone America/Coyhaique.  (Thanks to Yonathan Dossow.)  Model
this as a change to standard offset effective 2025-03-20.
Changes to past timestamps
Iran switched from +04 to +0330 on 1978-11-10 at 24:00, not at
year end.  (Thanks to Roozbeh Pournader.)
Changes to code
'zic -l TIMEZONE -d . -l /some/other/file/system' no longer
attempts to create an incorrect symlink, and no longer has a
read buffer underflow.  (Problem reported by Evgeniy Gorbanev.)
Here are links to the release files:
https://www.iana.org/time-zones/repository/releases/tzcode2025b.tar.gz
https://www.iana.org/time-zones/repository/releases/tzdata2025b.tar.gz
https://www.iana.org/time-zones/repository/releases/tzdb-2025b.tar.lz
The following convenience links are also available, although they may
point to the previous release until the relevant caches are refreshed:
https://www.iana.org/time-zones/repository/tzcode-latest.tar.gz
https://www.iana.org/time-zones/repository/tzdata-latest.tar.gz
https://www.iana.org/time-zones/repository/tzdb-latest.tar.lz
Links are also available via plain HTTP, and via FTP from
ftp://ftp.iana.org/tz/releases with the same basenames as above.
Each release file has a GPG signature, which can be retrieved by
appending ".asc" to the above URLs. Copies of these signatures are
appended to this message.
This release corresponds to commit
7e1145bfdb9630c127841dc8ce808a937a300938 dated 2025-03-22 13:40:46 -0700
and tagged '2025b' in the development GitHub repository at
https://github.com/eggert/tz.
OS: generic

-----
Title: [JDK-8352908] Open source several swing tests batch1
Priority: P4
Type: Bug
Component: client-libs
Description: Open-sourcing and standardizing several tests (JSplitPane JApplet JToolBar)

-----
Title: [JDK-8352942] jdk/jfr/startupargs/TestMemoryOptions.java fails with 32-bit build
Priority: P4
Type: Bug
Component: hotspot
Description: jdk/jfr/startupargs/TestMemoryOptions.java fails with 32-bit Server VM.
```
stdout: [Started recording 1. No limit specified, using maxsize=250MB as default.
Use jcmd 8912 JFR.dump name=1 filename=FILEPATH to copy recording data to file.
# [ timer expired, abort... ]
];
stderr: []
exitValue = -1
java.lang.RuntimeException: Expected to get exit value of [0]
at jdk.test.lib.process.OutputAnalyzer.shouldHaveExitValue(OutputAnalyzer.java:396)
at jdk.jfr.startupargs.TestMemoryOptions$Driver.launchTestVM(TestMemoryOptions.java:515)
at jdk.jfr.startupargs.TestMemoryOptions$Driver.runTestCase(TestMemoryOptions.java:523)
at jdk.jfr.startupargs.TestMemoryOptions.main(TestMemoryOptions.java:658)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at com.sun.javatest.regtest.agent.MainWrapper$MainThread.run(MainWrapper.java:127)
at java.lang.Thread.run(Thread.java:750)
JavaTest Message: Test threw exception: java.lang.RuntimeException: Expected to get exit value of [0]
JavaTest Message: shutting down test
STATUS:Failed.`main' threw exception: java.lang.RuntimeException: Expected to get exit value of [0]
```
This test validates several combinations of memory options for JFR. All test cases pass with 64bit builds and 32bit Client VM. However, one test case fails with 32-bit Server VM.
failed case JFR Options: -XX:FlightRecorderOptions=threadbuffersize=30m
The cause is an inability to allocate memory, which is easily reproduced with "jave -version."
```
$ java -server -XX:FlightRecorderOptions=threadbuffersize=30m -XX:StartFlightRecording -version
Started recording 1. No limit specified, using maxsize=250MB as default.
Use jcmd 8764 JFR.dump name=1 filename=FILEPATH to copy recording data to file.
openjdk version "1.8.0_442"
OpenJDK Runtime Environment (Temurin)(build 1.8.0_442-b06)
OpenJDK Server VM (Temurin)(build 25.442-b06, mixed mode)
# [ timer expired, abort... ]
```
This test case probably does not assume memory usage including heap space  on 32-bit build.

-----
Title: [JDK-8353070] Clean up and open source couple AWT Graphics related tests (Part 1)
Priority: P4
Type: Bug
Component: client-libs
Description: Clean up and open source couple of AWT Graphics component related tests.

-----
Title: [JDK-8353138] Screen capture for test TaskbarPositionTest.java, failure case
Priority: P4
Type: Sub-task
Component: client-libs
Description: Since the failure is intermittent and root cause is unknown, screen capture of the application area will help for further investigation.
OS: generic

-----
Title: [JDK-8353190] Use "/native" Run Option for TestAvailableProcessors Execution
Priority: P4
Type: Enhancement
Component: hotspot
Description: Created for asilichenko in https://github.com/openjdk/jdk/pull/23803
Currently, the test executes the program using test.nativepath, but it relies on path resolution. I propose following standard conventions in this case and running the test with the /native option instead.
With this change:
Path resolution is no longer required.
If nativepath is not specified at runtime, a standard error message will be printed to the console.
This improves consistency and simplifies the test execution process.
OS: windows

-----
Title: [JDK-8353237] [AArch64] Incorrect result of VectorizedHashCode intrinsic on Cortex-A53
Priority: P2
Type: Bug
Component: hotspot
Description: ADDITIONAL SYSTEM INFORMATION :
Hardware: Raspberry PI 3B
OS: Linux raspberrypi 6.6.74+rpt-rpi-v8 #1 SMP PREEMPT Debian 1:6.6.74-1+rpt1 (2025-01-27) aarch64 GNU/Linux
Java: openjdk 24 2025-03-18
OpenJDK Runtime Environment (build 24+36-3646)
OpenJDK 64-Bit Server VM (build 24+36-3646, mixed mode, sharing)
A DESCRIPTION OF THE PROBLEM :
Running a simple Spring Boot jar application on JDK 24 (Linux/AArch64) fails with a ClassNotFoundException.
* The same application runs fine on JDK 23.0.2
* The same application runs fine on JDK 24 on Windows/x64
The application consists of the demo application downloaded from https://start.spring.io/ and packaged as a jar by Maven.
REGRESSION : Last worked in version 23.0.2
STEPS TO FOLLOW TO REPRODUCE THE PROBLEM :
* Download a project from https://start.spring.io/ with the settings: Maven build, Java language, Spring Boot 3.4.4 (also tried 3.5.0-M3), jar packaging, Java 21 (also tried 24), no extra dependencies
* Extract the project to a directory
* Build the project using:
mvn package
* Unpack the jar:
java -Djarmode=tools -jar demo-0.0.1-SNAPSHOT.jar extract
* Run the app:
java -jar demo-0.0.1-SNAPSHOT/demo-0.0.1-SNAPSHOT.jar
(I also found that running -Djarmode=tools in JDK 24 on Linux/AArch64 failed with a ClassNotFoundException, albeit with a different class and stacktrace).
EXPECTED VERSUS ACTUAL BEHAVIOR :
EXPECTED -
App runs and outputs something like:
.   ____          _            __ _ _
/\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
\\/  ___)| |_)| | | | | || (_| |  ) ) ) )
'  |____| .__|_| |_|_| |_\__, | / / / /
=========|_|==============|___/=/_/_/_/
:: Spring Boot ::                (v3.4.4)
2025-03-29T13:38:32.829+11:00  INFO 58508 --- [demo] [           main] com.example.demo.DemoApplication         : Starting DemoApplication v0.0.1-SNAPSHOT using Java 23.0.2 with PID 58508 (/home/pi/demo-0.0.1-SNAPSHOT/demo-0.0.1-SNAPSHOT.jar started by pi in /home/pi)
2025-03-29T13:38:32.852+11:00  INFO 58508 --- [demo] [           main] com.example.demo.DemoApplication         : No active profile set, falling back to 1 default profile: "default"
2025-03-29T13:38:36.894+11:00  INFO 58508 --- [demo] [           main] com.example.demo.DemoApplication         : Started DemoApplication in 7.276 seconds (process running for 9.302)
ACTUAL -
Exception in thread "main" java.lang.NoClassDefFoundError: org/apache/commons/logging/LogFactory
at org.springframework.boot.SpringApplication.(SpringApplication.java:202)
at com.example.demo.DemoApplication.main(DemoApplication.java:11)
Caused by: java.lang.ClassNotFoundException: org.apache.commons.logging.LogFactory
at java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:580)
at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:490)
---------- BEGIN SOURCE ----------
As described above.
---------- END SOURCE ----------
OS: linux

-----
Title: [JDK-8353320] Open source more Swing text tests
Priority: P4
Type: Bug
Component: client-libs
Description: Open source some more Swing text tests

-----
Title: [JDK-8353446] Open source several AWT Menu tests - Batch 2
Priority: P4
Type: Bug
Component: client-libs
Description: Open source these AWT Menu tests:
java/awt/Menu/OnFlyRepaintMenuTest/OnFlyRepaintMenuTest.java
java/awt/Menu/DestroyMenuTest/DestroyMenuTest.java
java/awt/Menu/MenuAddRemoveCrash/MenuAddRemoveCrash.java
java/awt/Menu/MenuZOrderTest/MenuZOrderTest.java
Remove the following test since it is platform specific (Solaris)
java/awt/Menu/MenuTearOff/MenuTearOffCrashTest.java
OS: generic

-----
Title: [JDK-8353475] Open source two Swing DefaultCaret tests
Priority: P4
Type: Bug
Component: client-libs
Description: Open source two Swing DefaultCaret tests

-----
Title: [JDK-8353685] Open some JComboBox bugs 4
Priority: P4
Type: Bug
Component: client-libs
Description: Updating and opening some tests

-----
Title: [JDK-8353709] Debug symbols bundle should contain full debug files when building --with-external-symbols-in-bundles=public
Priority: P3
Type: Bug
Component: infrastructure
Description: Currently, when building with --with-external-symbols-in-bundles=public, the debug symbols bundle contains the stripped pdb files. It should better have the full pdb files since stripped pdbs are in the runtime image already.
OS: windows

-----
Title: [JDK-8353787] Increased number of SHA-384-Digest java.util.jar.Attributes$Name instances leading to higher memory footprint
Priority: P3
Type: Bug
Component: core-libs
Description: When parsing the manifest file of a JAR file the JDK constructs a java.util.jar.Manifest instance. The Manifest instance consists of java.util.jar.Attributes instances which correspond to the attributes of the manfiest file. An Attributes instance is a name-value mapping and the name is represented by the Attributes$Name class.
Several attribute names that appear in a manifest file are standard names and many of those names may be repeated. For example, when a JAR file is signed (using the jarsigner tool), the each entry in the JAR file will have a digest recorded in the manifest file as an attribute name:
Name: foo.txt
SHA-256-Digest: ...
Name: bar.txt
SHA-256-Digest: ...
Each of these "Name" and "SHA-256-Digest" attribute names thus translate to a Attributes$Name instance, when parsed.
JAR file instances are typically cached by the internal implementation of the JDK and as a result the Manifest instance and the Attributes instance too are cached. Several releases back it was noticed that these Attributes instances can contribute to increased memory footprint of the runtime. In https://bugs.openjdk.org/browse/JDK-6805750 a performance improvement was implemented (RFR https://mail.openjdk.org/pipermail/core-libs-dev/2018-April/052697.html) to maintain an internal cache of some well-known attribtue names mapped to a single instance of Attributes$Name. That way, several occurences of "SHA-256-Digest" attribtue name would end up using a single instance of Attributes$Name for that name. This cache is maintained as a static field in java.util.jar.Attributes class.
Recently, in Java 19, the jarsigner tool was enhanced to use SHA-384 as the default digest algorithm instead of the previous SHA-256 algorithm. That was done in https://bugs.openjdk.org/browse/JDK-8283475. Since then, when jarsigner tool is used to sign the JAR, the manifest file generated in the signed JAR would now have:
Name: foo.txt
SHA-384-Digest: ...
Name: bar.txt
SHA-384-Digest: ...
The internal cache that's maintained in java.util.jar.Attributes doesn't know of this new attribute name so ends up creating separate instances of Attributes$Name for each occurence of the SHA-384-Digest attribute name.
A user reports in core-libs-dev that this now shows up as an increase in the memory footprint of the runtime https://mail.openjdk.org/pipermail/core-libs-dev/2025-April/142299.html.

-----
Title: [JDK-8353942] Open source Swing Tests - Set 5
Priority: P4
Type: Bug
Component: client-libs
Description: Open source Swing tests
OS: generic

-----
Title: [JDK-8354255] [jittester] Remove TempDir debug output
Priority: P4
Type: Bug
Component: hotspot
Description: JITTester's TempDir prints debug information about creation and deletion of a temporary folder, like this:
DBG: Temp folder created: '/tmp/java_tests8412639693749199985'
DBG: Temp folder deleted: '/tmp/java_tests8412639693749199985'
jittester is a library, TempDir can be used in other tools. Debug outputs mess up logs, confuse output comparison tools, etc. And do not give any valuable information (as temp folder with its contents is deleted after VM shutdown).
I suggest to remove those debug outputs.

-----
Title: [JDK-8354530] AIX: sporadic unexpected errno when calling setsockopt in Net.joinOrDrop
Priority: P4
Type: Bug
Component: core-libs
Description: In our automated test we see sporadic errors with this stack:
java.net.SocketException: Resource temporarily unavailable (setsockopt failed)
at java.base/sun.nio.ch.Net.joinOrDrop4(Native Method)
at java.base/sun.nio.ch.Net.join4(Net.java:654)
at java.base/sun.nio.ch.DatagramChannelImpl.innerJoin(DatagramChannelImpl.java:1568)
at java.base/sun.nio.ch.DatagramChannelImpl.join(DatagramChannelImpl.java:1586)
at java.base/sun.nio.ch.DatagramSocketAdaptor.joinGroup(DatagramSocketAdaptor.java:467)
at java.base/java.net.DatagramSocket.joinGroup(DatagramSocket.java:1199)
at java.base/java.net.MulticastSocket.joinGroup(MulticastSocket.java:331)
The native code calls setsockopt(fdval(env,fdo), IPPROTO_IP, opt, optval, optlen) and gets EAGAIN as errno - this is not defined on AIX as a valid return code but seem to happen anyway.
The idea is to simply retry as it is already done for ENOMEM on macOS.
OS: aix

-----
Title: [JDK-8354554] Open source several clipboard tests batch1
Priority: P4
Type: Bug
Component: client-libs

-----
Title: [JDK-8354802] MAX_SECS definition is unused in os_linux
Priority: P4
Type: Bug
Component: hotspot
Description: Seems the MAX_SECS definition in os_linux.cpp is not needed any more, related code was moved or deleted.
OS: linux

-----
Title: [JDK-8354893] [REDO BACKPORT] javac crashes while adding type annotations to the return type of a constructor (JDK-8320001)
Priority: P2
Type: Bug
Component: tools
Description: It's observed that some of the JCK tests related to Annotation processing are failing in JDK 22-b23 with "java.lang.AssertionError: Cannot add metadata to this type: VOID"
Possibly a regression caused by - https://bugs.openjdk.org/browse/JDK-8225377
The tests are passing with JDK22-b22.
Attaching the sample AnnotationProcessor with sample target class file (Tester)
Here is the observation :
====
With b-22 ( Tester class successfully parsed by Annotation Processor)
====
/scratch/jdk-cache/22/22/jdk-22/bin/javac -processor  AnnoProc Tester
init...
process...
annotations []
With b-23 ( java.lang.AssertionError: Cannot add metadata to this type: VOID )
====
/scratch/jdk-cache/22/23/jdk-22/bin/javac -processor  AnnoProc Tester
An exception has occurred in the compiler (22-ea). Please file a bug against the Java compiler via the Java bug reporting page (https://bugreport.java.com) after checking the Bug Database (https://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
java.lang.AssertionError: Cannot add metadata to this type: VOID
at jdk.compiler/com.sun.tools.javac.code.Type.cloneWithMetadata(Type.java:351)
at jdk.compiler/com.sun.tools.javac.code.Type.addMetadata(Type.java:390)
at jdk.compiler/com.sun.tools.javac.code.Type.annotatedType(Type.java:456)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationTypeMapping.reannotate(ClassReader.java:2548)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationTypeMapping.visitType(ClassReader.java:2568)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationTypeMapping.visitType(ClassReader.java:2523)
at jdk.compiler/com.sun.tools.javac.code.Type.accept(Type.java:223)
at jdk.compiler/com.sun.tools.javac.code.Types$DefaultTypeVisitor.visit(Types.java:4894)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationSymbolVisitor.addTypeAnnotations(ClassReader.java:2426)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationSymbolVisitor.addTypeAnnotations(ClassReader.java:2394)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationSymbolVisitor.visitMethodSymbol(ClassReader.java:2335)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationSymbolVisitor.visitMethodSymbol(ClassReader.java:2286)
at jdk.compiler/com.sun.tools.javac.code.Symbol$MethodSymbol.accept(Symbol.java:2271)
at jdk.compiler/com.sun.tools.javac.code.Types$DefaultSymbolVisitor.visit(Types.java:4921)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader.addTypeAnnotationsToSymbol(ClassReader.java:2283)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationCompleter.run(ClassReader.java:2266)
at jdk.compiler/com.sun.tools.javac.comp.Annotate.flush(Annotate.java:191)
at jdk.compiler/com.sun.tools.javac.code.ClassFinder.complete(ClassFinder.java:322)
at jdk.compiler/com.sun.tools.javac.code.Symbol.complete(Symbol.java:682)
at jdk.compiler/com.sun.tools.javac.code.Symbol$ClassSymbol.complete(Symbol.java:1418)
at jdk.compiler/com.sun.tools.javac.code.ClassFinder.loadClass(ClassFinder.java:446)
at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.resolveBinaryNameOrIdent(JavaCompiler.java:730)
at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.resolveBinaryNameOrIdent(JavaCompiler.java:719)
at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1239)
at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:946)
at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:319)
at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:178)
at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:66)
at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:52)

-----
Title: [JDK-8320001] javac crashes while adding type annotations to the return type of a constructor
Priority: P2
Type: Bug
Component: tools
Description: It's observed that some of the JCK tests related to Annotation processing are failing in JDK 22-b23 with "java.lang.AssertionError: Cannot add metadata to this type: VOID"
Possibly a regression caused by - https://bugs.openjdk.org/browse/JDK-8225377
The tests are passing with JDK22-b22.
Attaching the sample AnnotationProcessor with sample target class file (Tester)
Here is the observation :
====
With b-22 ( Tester class successfully parsed by Annotation Processor)
====
/scratch/jdk-cache/22/22/jdk-22/bin/javac -processor  AnnoProc Tester
init...
process...
annotations []
With b-23 ( java.lang.AssertionError: Cannot add metadata to this type: VOID )
====
/scratch/jdk-cache/22/23/jdk-22/bin/javac -processor  AnnoProc Tester
An exception has occurred in the compiler (22-ea). Please file a bug against the Java compiler via the Java bug reporting page (https://bugreport.java.com) after checking the Bug Database (https://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the Java compiler in your report. Thank you.
java.lang.AssertionError: Cannot add metadata to this type: VOID
at jdk.compiler/com.sun.tools.javac.code.Type.cloneWithMetadata(Type.java:351)
at jdk.compiler/com.sun.tools.javac.code.Type.addMetadata(Type.java:390)
at jdk.compiler/com.sun.tools.javac.code.Type.annotatedType(Type.java:456)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationTypeMapping.reannotate(ClassReader.java:2548)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationTypeMapping.visitType(ClassReader.java:2568)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationTypeMapping.visitType(ClassReader.java:2523)
at jdk.compiler/com.sun.tools.javac.code.Type.accept(Type.java:223)
at jdk.compiler/com.sun.tools.javac.code.Types$DefaultTypeVisitor.visit(Types.java:4894)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationSymbolVisitor.addTypeAnnotations(ClassReader.java:2426)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationSymbolVisitor.addTypeAnnotations(ClassReader.java:2394)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationSymbolVisitor.visitMethodSymbol(ClassReader.java:2335)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationSymbolVisitor.visitMethodSymbol(ClassReader.java:2286)
at jdk.compiler/com.sun.tools.javac.code.Symbol$MethodSymbol.accept(Symbol.java:2271)
at jdk.compiler/com.sun.tools.javac.code.Types$DefaultSymbolVisitor.visit(Types.java:4921)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader.addTypeAnnotationsToSymbol(ClassReader.java:2283)
at jdk.compiler/com.sun.tools.javac.jvm.ClassReader$TypeAnnotationCompleter.run(ClassReader.java:2266)
at jdk.compiler/com.sun.tools.javac.comp.Annotate.flush(Annotate.java:191)
at jdk.compiler/com.sun.tools.javac.code.ClassFinder.complete(ClassFinder.java:322)
at jdk.compiler/com.sun.tools.javac.code.Symbol.complete(Symbol.java:682)
at jdk.compiler/com.sun.tools.javac.code.Symbol$ClassSymbol.complete(Symbol.java:1418)
at jdk.compiler/com.sun.tools.javac.code.ClassFinder.loadClass(ClassFinder.java:446)
at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.resolveBinaryNameOrIdent(JavaCompiler.java:730)
at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.resolveBinaryNameOrIdent(JavaCompiler.java:719)
at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1239)
at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:946)
at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:319)
at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:178)
at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:66)
at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:52)

-----
Title: [JDK-8355498] [AIX] Adapt code for C++ VLA rule
Priority: P4
Type: Bug
Component: hotspot
Description: The declaration of Variable length array is causing compilation issues for 17.1.3 compiler.
1 error generated.
gmake[3]: *** [lib/CompileJvm.gmk:170: /home/jenkins/openjdk-suchi/jdk/build/aix-ppc64-server-fastdebug/hotspot/variant-server/libjvm/objs/os_perf_aix.o] Error 1
gmake[2]: *** [make/Main.gmk:245: hotspot-server-libs] Error 2
gmake[2]: *** Waiting for unfinished jobs....
ERROR: Build failed for target 'images' in configuration 'aix-ppc64-server-fastdebug' (exit code 2)
Stopping javac server
=== Output from failing command(s) repeated here ===
* For target hotspot_variant-server_libjvm_objs_os_perf_aix.o:
/home/jenkins/openjdk-suchi/jdk/src/hotspot/os/aix/os_perf_aix.cpp:79:12: error: variable length arrays in C++ are a Clang extension [-Werror,-Wvla-cxx-extension]
79 |   char buf[BUF_LENGTH];
|            ^~~~~~~~~~
/home/jenkins/openjdk-suchi/jdk/src/hotspot/os/aix/os_perf_aix.cpp:79:12: note: read of non-const variable 'BUF_LENGTH' is not allowed in a constant expression
/home/jenkins/openjdk-suchi/jdk/src/hotspot/os/aix/os_perf_aix.cpp:76:17: note: declared here
76 |   static size_t BUF_LENGTH = 32 + sizeof(u_longlong_t);
|                 ^

-----
Title: [JDK-8356053] Test java/awt/Toolkit/Headless/HeadlessToolkit.java fails by timeout
Priority: P4
Type: Bug
Component: client-libs
Description: Over the past year this test started failing due to a timeout. It hangs when attempting to access the following image: https://openjdk.org/images/openjdk.png
Upon investigation I found that the image could not be retrieved at the time of failure even using wget.
After consulting with the ops team, confirmed that a server configuration change had been made around that time. As a result, repeated web requests especially those with non-browser user-agent headers may be blocked after some period.
Similar issue reported here:
https://youtrack.jetbrains.com/issue/JBR-6550/java-awt-Toolkit-Headless-HeadlessToolkit.java-fails-by-time-out
OS: os_x

-----
Title: [JDK-8356096] ISO 4217 Amendment 179 Update
Priority: P3
Type: Bug
Component: core-libs
Description: 02 May 2025
ISO 4217 AMENDMENT NUMBER 179
”Effective from 12 May 2025, the following change will be made to “List one: Currency, fund and
precious metal codes” as well as to “List Two: Fund Codes Registered with Agency”:
Entity Currency Alphabetic
code
Numeric code Minor unit
Arab Monetary Fund Arab Accounting Dinar XAD 396 2
The Finance Department Arab Monetary Fund (AMF) is applying for new Fund currency code Arab
Accounting Dinar with Alphabetic Code XAD and Numeric Code 396.
The Arab Accounting Dinar is the official and reporting currency of the Arab Monetary Fund Reserve Asset.
The decimal for the currency is set to 1.00, which corresponds to a Minor Unit of 2.
OS: generic

-----
Title: [JDK-8356571] Re-enable -Wtype-limits for GCC in LCMS
Priority: P4
Type: Bug
Component: client-libs
Description: The -Wtype-limits warning was previously disabled in the OpenJDK build for LCMS 2.14+ due to upstream issues: https://github.com/openjdk/jdk/pull/11217
The issue was reported to the LCMS project: https://github.com/mm2/Little-CMS/issues/458
It has since been fixed in LCMS 2.17 and integrated into OpenJDK as part of JDK-8348110.
Now that the issue has been resolved, we can re-enable this warning.
OS: linux

-----
Title: [JDK-8357105] C2: compilation fails with "assert(false) failed: empty program detected during loop optimization"
Priority: P3
Type: Bug
Component: hotspot
Description: C2: compilation fails with "assert(false) failed: empty program detected during loop optimization" when compiling a program exhibiting stacked string concatenation optimizations, if the source code is compiled with -XDstringConcat=inline:
/bin/javac -XDstringConcat=inline TestStackedConcatsInline.java && /bin/java  TestStackedConcatsInline
Current CompileTask:
C2:103   35       4       TestStackedConcatsInline::f (53 bytes)
Stack: [0x00007f6d9462b000,0x00007f6d9472b000],  sp=0x00007f6d94725ca0,  free space=1003k
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)
V  [libjvm.so+0x14ef546]  PhaseIdealLoop::build_and_optimize()+0xb96  (loopnode.cpp:4652)
V  [libjvm.so+0xb24c63]  PhaseIdealLoop::optimize(PhaseIterGVN&, LoopOptsMode)+0x4f3
V  [libjvm.so+0xb1c096]  Compile::optimize_loops(PhaseIterGVN&, LoopOptsMode)+0xb6
V  [libjvm.so+0xb1eda1]  Compile::Optimize()+0xcc1
V  [libjvm.so+0xb21eeb]  Compile::Compile(ciEnv*, ciMethod*, int, Options, DirectiveSet*)+0x1f0b
V  [libjvm.so+0x951697]  C2Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0x467
V  [libjvm.so+0xb2fb28]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0xb58
V  [libjvm.so+0xb30cf8]  CompileBroker::compiler_thread_loop()+0x578
V  [libjvm.so+0x107bebb]  JavaThread::thread_main_inner()+0x13b
V  [libjvm.so+0x1aab6d6]  Thread::call_run()+0xb6
V  [libjvm.so+0x173a198]  thread_native_entry(Thread*)+0x128

-----
Title: [JDK-8357193] [VS 2022 17.14] Warning C5287 in debugInit.c: enum type mismatch during build
Priority: P3
Type: Bug
Component: core-svc
Description: * For target support_native_jdk.jdwp.agent_libjdwp_debugInit.obj:
debugInit.c
openjdk\jdk\src\jdk.jdwp.agent\share\native\libjdwp\debugInit.c(184): error C2220: the following warning is treated as an error
\openjdk\jdk\src\jdk.jdwp.agent\share\native\libjdwp\debugInit.c(184): warning C5287: operands are different enum types '' and ''; use an explicit cast to silence this warning
\openjdk\jdk\src\jdk.jdwp.agent\share\native\libjdwp\debugInit.c(184): note: to simplify migration, consider the temporary use of /Wv:18 flag with the version of the compiler with which you used to build without warnings
\openjdk\jdk\src\jdk.jdwp.agent\share\native\libjdwp\debugInit.c(186): warning C5287: operands are different enum types '' and ''; use an explicit cast to silence this warning
\openjdk\jdk\src\jdk.jdwp.agent\share\native\libjdwp\debugInit.c(186): note: to simplify migration, consider the temporary use of /Wv:18 flag with the version of the compiler with which you used to build without warnings
\openjdk\jdk\src\jdk.jdwp.agent\share\native\libjdwp\debugInit.c(188): warning C5287: operands are different enum types '' and ''; use an explicit cast to silence this warning
\openjdk\jdk\src\jdk.jdwp.agent\share\native\libjdwp\debugInit.c(188): note: to simplify migration, consider the temporary use of /Wv:18 flag with the version of the compiler with which you used to build without warnings
... (rest of output omitted)
OS: windows

-----
Title: [JDK-8359170] Add 2 TLS and 2 CS Sectigo roots
Priority: P2
Type: Enhancement
Component: security-libs
Description: CN=Sectigo Public Code Signing Root E46, O=Sectigo Limited, C=GB
Serial number: 50249ba2ef8ea6bf6c2c1f1a6385d4c3
SHA-256 Fingerprint: 8F:63:71:D8:CC:5A:A7:CA:14:96:67:A9:8B:54:96:39:89:51:E4:31:9F:7A:FB:CC:6A:66:0D:67:3E:43:8D:0B
Root certificate: https://crt.sh/?id=4256644597
Type: Code Signing – ECC Keys – EV and Non-EV Code Signing
Test URLs:
Valid: https://crt.sh/?id=12669436775
Revoked: https://crt.sh/?id=18829311964
CN=Sectigo Public Code Signing Root R46, O=Sectigo Limited, C=GB
Serial number: 4b2c3b01018bad2abc8c7b5b3eed9057
SHA-256 Fingerprint: 7E:76:26:0A:E6:9A:55:D3:F0:60:B0:FD:18:B2:A8:C0:14:43:C8:7B:60:79:10:30:C9:FA:0B:05:85:10:1A:38
Root certificate: https://crt.sh/?id=4256644598
Type: Code Signing – RSA Keys – EV and Non-EV Code Signing
Test URLs: This test certificate can be found here: https://crt.sh/?id=12087917599
Valid: https://crt.sh/?id=18829273880
Revoked: https://crt.sh/?id=18829297128
CN=Sectigo Public Server Authentication Root E46, O=Sectigo Limited, C=GB
Serial number: 42f2ccda1b6937445f15fe752810b8f4
SHA-256 Fingerprint: C9:0F:26:F0:FB:1B:40:18:B2:22:27:51:9B:5C:A2:B5:3E:2C:A5:B3:BE:5C:F1:8E:FE:1B:EF:47:38:0C:53:83
Root Certificate: https://crt.sh/?id=4256644603
Type: SSL/TLS Certificates – ECC Keys – DV, OV, EV and IV validation levels.
Test URLs:
Valid: https://sectigopublicserverauthenticationroote46-ev.sectigo.com/
Revoked: https://sectigopublicserverauthenticationroote46-ev.sectigo.com:444/
CN=Sectigo Public Server Authentication Root R46, O=Sectigo Limited, C=GB
Serial number: 758dfd8bae7c0700faa925a7e1c7ad14
SHA-256 Fingerprint: 7B:B6:47:A6:2A:EE:AC:88:BF:25:7A:A5:22:D0:1F:FE:A3:95:E0:AB:45:C7:3F:93:F6:56:54:EC:38:F2:5A:06
Root Certificate: https://crt.sh/?id=4256644734
Type: SSL/TLS Certificates – RSA Keys – DV, OV, EV and IV validation levels.
Test URLs:
Valid: https://sectigopublicserverauthenticationrootr46-ev.sectigo.com/
Revoked: https://sectigopublicserverauthenticationrootr46-ev.sectigo.com:444/

-----
Title: [JDK-8360406] [21u] Disable logic for attaching type annotations to class files until 8359336 is fixed
Priority: P2
Type: Bug
Component: tools
Description: See JDK-8359336 - the logic for attaching type annotations to class files backported in JDK-8341779 is implicated in that crash.
This issue tracks disabling that logic until JDK-8359336 is fixed.

-----
Title: [JDK-8361672] [21u] Remove designator DEFAULT_PROMOTED_VERSION_PRE=ea for release 21.0.8
Priority: P4
Type: Bug
Component: infrastructure
Description: As discussed in https://github.com/openjdk/jdk17u-dev/pull/307, we'd like to have DEFAULT_PROMOTED_VERSION_PRE set to 'ea' in dev source trees and remove it for GA tagged source levels.
