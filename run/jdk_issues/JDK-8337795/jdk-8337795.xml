<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Sat Sep 27 10:29:21 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8337795] Type annotation attached to incorrect type during class reading</title>
                <link>https://bugs.openjdk.org/browse/JDK-8337795</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>[As seen in &lt;a href=&quot;https://github.com/uber/NullAway/issues/1011&quot;&gt;https://github.com/uber/NullAway/issues/1011&lt;/a&gt; ]&lt;br/&gt;
&lt;br/&gt;
After the fix for &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8225377&quot; title=&quot;type annotations are not visible to javac plugins across compilation boundaries&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8225377&quot;&gt;&lt;strike&gt;JDK-8225377&lt;/strike&gt;&lt;/a&gt;, type annotations are sometimes incorrectly attached to the wrong contained type if the same type appears multiple times. For example given `Function&amp;lt;B, @N B&amp;gt;` below, the annotation is attached to the first occurrence of `B`, resulting in `Function&amp;lt;@N B, B&amp;gt;`.&lt;br/&gt;
&lt;br/&gt;
The fix for &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8225377&quot; title=&quot;type annotations are not visible to javac plugins across compilation boundaries&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8225377&quot;&gt;&lt;strike&gt;JDK-8225377&lt;/strike&gt;&lt;/a&gt; relies on the identity of `Type` instances to find the position of types with type annotations, and then to rewrite them: &lt;a href=&quot;https://github.com/openjdk/jdk/blob/8bd3cd51562ff9e76fa0e3d49d38e6e19210f878/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ClassReader.java#L2464-L2470&quot;&gt;https://github.com/openjdk/jdk/blob/8bd3cd51562ff9e76fa0e3d49d38e6e19210f878/src/jdk.compiler/share/classes/com/sun/tools/javac/jvm/ClassReader.java#L2464-L2470&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
This was done to share logic for rewriting types with TypeAnnotationTypeMapping, but relies on the incorrect assumption that the contained types will have unique identities.&lt;br/&gt;
&lt;br/&gt;
Demo:&lt;br/&gt;
&lt;br/&gt;
=== ./B.java&lt;br/&gt;
import java.lang.annotation.ElementType;&lt;br/&gt;
import java.lang.annotation.Retention;&lt;br/&gt;
import java.lang.annotation.RetentionPolicy;&lt;br/&gt;
import java.lang.annotation.Target;&lt;br/&gt;
import java.util.function.Function;&lt;br/&gt;
&lt;br/&gt;
public class B {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;@Target(ElementType.TYPE_USE)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;@Retention(RetentionPolicy.RUNTIME)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;@interface N {}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;void g(Function&amp;lt;B, @N B&amp;gt; f) {}&lt;br/&gt;
}&lt;br/&gt;
=== ./P.java&lt;br/&gt;
import java.util.Set;&lt;br/&gt;
import javax.annotation.processing.AbstractProcessor;&lt;br/&gt;
import javax.annotation.processing.RoundEnvironment;&lt;br/&gt;
import javax.annotation.processing.SupportedAnnotationTypes;&lt;br/&gt;
import javax.lang.model.SourceVersion;&lt;br/&gt;
import javax.lang.model.element.TypeElement;&lt;br/&gt;
import javax.lang.model.util.ElementFilter;&lt;br/&gt;
&lt;br/&gt;
@SupportedAnnotationTypes(&amp;quot;*&amp;quot;)&lt;br/&gt;
public class P extends AbstractProcessor {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;@Override&lt;br/&gt;
&amp;nbsp;&amp;nbsp;public SourceVersion getSupportedSourceVersion() {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return SourceVersion.latestSupported();&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;boolean first = true;&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;@Override&lt;br/&gt;
&amp;nbsp;&amp;nbsp;public boolean process(Set&amp;lt;? extends TypeElement&amp;gt; annotations, RoundEnvironment roundEnv) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;if (!first) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;first = false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;for (var m :&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;ElementFilter.methodsIn(&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;processingEnv.getElementUtils().getTypeElement(&amp;quot;B&amp;quot;).getEnclosedElements())) {&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;System.err.println(m);&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return false;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;}&lt;br/&gt;
}&lt;br/&gt;
&lt;br/&gt;
$ javac -fullversion&lt;br/&gt;
javac full version &amp;quot;23-ea+35-2364&amp;quot;&lt;br/&gt;
$ javac P.java&lt;br/&gt;
&lt;br/&gt;
Compiling B.java from source shows the annotation in the correct location on the second type argument:&lt;br/&gt;
&lt;br/&gt;
$ javac -processor P B.java&lt;br/&gt;
g(java.util.function.Function&amp;lt;B,@B.N B&amp;gt;)&lt;br/&gt;
&lt;br/&gt;
After reading B.class the annotation is incorrectly placed on the first type argument:&lt;br/&gt;
&lt;br/&gt;
$ javac -processor P B&lt;br/&gt;
g(java.util.function.Function&amp;lt;@B.N B,B&amp;gt;)</description>
                <environment></environment>
        <key id="5136021">JDK-8337795</key>
            <summary>Type annotation attached to incorrect type during class reading</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="cushon">Liam Miller-Cushon</assignee>
                                    <reporter username="cushon">Liam Miller-Cushon</reporter>
                        <labels>
                            <label>google-interest</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>jdk23u-fix-SQE-ok-next</label>
                            <label>jdk23u-fix-request</label>
                            <label>jdk23u-fix-yes</label>
                            <label>type-annotations</label>
                    </labels>
                <created>Sun, 4 Aug 2024 11:44:36 -0700</created>
                <updated>Thu, 17 Apr 2025 01:48:43 -0700</updated>
                            <resolved>Mon, 12 Aug 2024 10:17:04 -0700</resolved>
                                    <version>22</version>
                    <version>23</version>
                                    <fixVersion>24</fixVersion>
                                    <component>tools</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>4</watches>
                                                                                                                <comments>
                            <comment id="14764747" author="roboduke" created="Thu, 27 Mar 2025 09:27:13 -0700"  >[jdk21u-fix-request] Approval Request from Liam Miller-Cushon&lt;br/&gt;
for backport. This is a follow-on fix related to the backport of &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8341779&quot; title=&quot;[REDO BACKPORT] type annotations are not visible to javac plugins across compilation boundaries (JDK-8225377)&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8341779&quot;&gt;&lt;strike&gt;JDK-8341779&lt;/strike&gt;&lt;/a&gt; (allow accessing type-use annotations on types loaded from class files), if that backport is approved this change should also be backported. Tested with tier1.</comment>
                            <comment id="14733021" author="roboduke" created="Tue, 17 Dec 2024 14:33:41 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/1252&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/1252&lt;/a&gt;&lt;br/&gt;
Date: 2024-12-17 22:27:38 +0000</comment>
                            <comment id="14697982" author="roboduke" created="Tue, 13 Aug 2024 10:29:10 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk23u/pull/67&quot;&gt;https://git.openjdk.org/jdk23u/pull/67&lt;/a&gt;&lt;br/&gt;
Date: 2024-08-13 17:17:13 +0000</comment>
                            <comment id="14697978" author="roboduke" created="Tue, 13 Aug 2024 10:22:21 -0700"  >[jdk23u-fix-request] Approval Request from Liam Miller-Cushon&lt;br/&gt;
This change fixes a bug in javac&amp;#39;s handling of type annotations in bytecode, which was logic first added in JDK 22 as part of the fix for &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8225377&quot; title=&quot;type annotations are not visible to javac plugins across compilation boundaries&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8225377&quot;&gt;&lt;strike&gt;JDK-8225377&lt;/strike&gt;&lt;/a&gt;. The patch applies cleanly, and langtools tier1 passes.</comment>
                            <comment id="14697664" author="dukebot" created="Mon, 12 Aug 2024 10:17:01 -0700"  >Changeset: 8d083147&lt;br/&gt;
Branch: master&lt;br/&gt;
Author:    Liam Miller-Cushon &amp;lt;&lt;a href=&apos;mailto:cushon@openjdk.org&apos;&gt;cushon@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-08-12 17:15:39 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/8d0831478338e9b084b2c47f46eba9faae3a5eb6&quot;&gt;https://git.openjdk.org/jdk/commit/8d0831478338e9b084b2c47f46eba9faae3a5eb6&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14695654" author="roboduke" created="Sun, 4 Aug 2024 13:16:37 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/20460&quot;&gt;https://git.openjdk.org/jdk/pull/20460&lt;/a&gt;&lt;br/&gt;
Date: 2024-08-04 19:49:20 +0000</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5140189">JDK-8341114</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5156258">JDK-8354923</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i37fuj:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17311"><![CDATA[b11]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="212"><![CDATA[javac]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>