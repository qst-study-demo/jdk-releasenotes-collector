<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Sat Sep 27 09:23:19 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8340812] LambdaForm customization via MethodHandle::updateForm is not thread safe</title>
                <link>https://bugs.openjdk.org/browse/JDK-8340812</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>This issue originally manifested as intermittent NPEs in invokeBasic with an Oracle internal test:&lt;br/&gt;
&lt;br/&gt;
Stack: [0x0000ffff37606000,0x0000ffff37804000], sp=0x0000ffff37802330, free space=2032k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V [libjvm.so+0x677c28] Exceptions::debug_check_abort(char const*, char const*)+0xc8 (exceptions.cpp:569)&lt;br/&gt;
V [libjvm.so+0x677e80] Exceptions::debug_check_abort_helper(Handle, char const*)+0x9c (exceptions.cpp:591)&lt;br/&gt;
V [libjvm.so+0x678310] Exceptions::_throw(JavaThread*, char const*, int, Handle, char const*)+0xb0 (exceptions.cpp:579)&lt;br/&gt;
V [libjvm.so+0xc42d04] SharedRuntime::throw_NullPointerException_at_call(JavaThread*)+0x44 (sharedRuntime.cpp:853)&lt;br/&gt;
v ~RuntimeStub::NullPointerException at call throw_exception 0x0000ffff90096eb4&lt;br/&gt;
J 112 c2 MemAccessStressModule.test(Ljava/lang/invoke/VarHandle;Ljava/lang/Object;I)V (23 bytes) @ 0x0000ffff901164c8 [0x0000ffff90116400+0x00000000000000c8]&lt;br/&gt;
J 1098 c2 java.lang.Thread.run()V &lt;a href=&apos;mailto:java.base@24-ea&apos;&gt;java.base@24-ea&lt;/a&gt; (23 bytes) @ 0x0000ffff90258514 [0x0000ffff90258440+0x00000000000000d4]&lt;br/&gt;
v ~StubRoutines::call_stub 0x0000ffff9005a114&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;0x0000ffff901164a4: ; implicit exception: dispatches to 0x0000ffff90116fb0&lt;br/&gt;
&amp;nbsp;&amp;nbsp;0x0000ffff901164a4: 4b1d 40b9 | 8b07 0034 | f403 00f9 | ec0b 00f9 | 64fe 40d3 | e20f 40a9 | e10b 40f9 | e503 04aa&lt;br/&gt;
&amp;nbsp;&amp;nbsp;0x0000ffff901164c4: ; ImmutableOopMap {[0]=Oop [8]=Oop }&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;;*invokevirtual invokeBasic {reexecute=0 rethrow=0 return_oop=0}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;; - java.lang.invoke.LambdaForm$VH/0x0000000201006000::&lt;a href=&apos;mailto:invoke_MT@34&apos;&gt;invoke_MT@34&lt;/a&gt;&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;; - MemAccessStressModule::&lt;a href=&apos;mailto:test@8&apos;&gt;test@8&lt;/a&gt; (line 18)&lt;br/&gt;
&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;; {optimized virtual_call}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;0x0000ffff901164c4: 6fb9 ff97&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;&amp;nbsp;0x0000ffff901164c8: ; {post_call_nop}&lt;br/&gt;
&amp;nbsp;&amp;nbsp;0x0000ffff901164c8: 1f20 03d5 | 1f68 80f2 | 1f00 80f2 | f403 40f9&lt;br/&gt;
&lt;br/&gt;
Event: 14.595 Thread 0x0000ffff3c238600 NullPointerException in MH adapter 0x0000ffff90104a8c&lt;br/&gt;
Event: 14.595 Thread 0x0000ffff3c1cd5d0 NullPointerException in MH adapter 0x0000ffff90104a8c&lt;br/&gt;
Event: 14.595 Thread 0x0000ffff3c21efd0 NullPointerException in MH adapter 0x0000ffff90104a8c&lt;br/&gt;
&lt;br/&gt;
I&amp;#39;m starting to suspect that the VarHandle implementation is not thread safe on AArch64 and as a result some internal data structure is not completely initialized. -XX:+VerifyMethodHandles does not reveal anything though.&lt;br/&gt;
&lt;br/&gt;
I disabled the exception handler in SharedRuntime::continuation_for_implicit_exception to enforce an early crash and as expected we SIGSEGV here:&lt;br/&gt;
&lt;br/&gt;
Stack: [0x0000ffff34ec0000,0x0000ffff350be000], sp=0x0000ffff350bc2f0, free space=2032k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
J 54 java.lang.invoke.MethodHandle.invokeBasic(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V &lt;a href=&apos;mailto:java.base@24-internal&apos;&gt;java.base@24-internal&lt;/a&gt; (0 bytes) @ 0x0000ffffa0bbb88c [0x0000ffffa0bbb880+0x000000000000000c]&lt;br/&gt;
&lt;br/&gt;
siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x0000000000000024&lt;br/&gt;
&lt;br/&gt;
0x0000000000000000: 1F 20 03 D5 nop&lt;br/&gt;
0x0000000000000004: 2C 14 40 B9 ldr w12, [x1, #0x14]&lt;br/&gt;
0x0000000000000008: 8C 29 40 B9 ldr w12, [x12, #0x28]&lt;br/&gt;
0x000000000000000c: 8C 25 40 B9 ldr w12, [x12, #0x24] &amp;lt;--- We crash here&lt;br/&gt;
0x0000000000000010: 8C 09 40 F9 ldr x12, [x12, #0x10]&lt;br/&gt;
0x0000000000000014: 6C 00 00 B4 cbz x12, #0x20&lt;br/&gt;
0x0000000000000018: 88 21 40 F9 ldr x8, [x12, #0x40]&lt;br/&gt;
&lt;br/&gt;
R1 =0x000000008760f930 is an oop: java.lang.invoke.BoundMethodHandle$Species_LL&lt;br/&gt;
{0x000000008760f930} - klass: &amp;#39;java/lang/invoke/BoundMethodHandle$Species_LL&amp;#39; - flags:&lt;br/&gt;
&lt;br/&gt;
&amp;nbsp;- ---- fields (total size 5 words):&lt;br/&gt;
&amp;nbsp;- private &amp;#39;customizationCount&amp;#39; &amp;#39;B&amp;#39; @12 127 (0x7f)&lt;br/&gt;
&amp;nbsp;- private volatile &amp;#39;updateInProgress&amp;#39; &amp;#39;Z&amp;#39; @13 false (0x00)&lt;br/&gt;
&amp;nbsp;- private final &amp;#39;type&amp;#39; &amp;#39;Ljava/lang/invoke/MethodType;&amp;#39; @16 a &amp;#39;java/lang/invoke/MethodType&amp;#39;{0x0000000086e02940} = (Ljava/lang/invoke/VarHandle;Ljava/lang/Object;Ljava/lang/String;Ljava/lang/String;)V (0x86e02940)&lt;br/&gt;
&amp;nbsp;- final &amp;#39;form&amp;#39; &amp;#39;Ljava/lang/invoke/LambdaForm;&amp;#39; @20 a &amp;#39;java/lang/invoke/LambdaForm&amp;#39;{0x000000008760f900} =&amp;gt; a &amp;#39;java/lang/invoke/MemberName&amp;#39;{0x00000000a5323fd0} = {method} {0x0000ffff70905f18} &amp;#39;invoke&amp;#39; &amp;#39;(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V&amp;#39; in &amp;#39;java/lang/invoke/LambdaForm$MH+0x0000ffff70906068&amp;#39; (0x8760f900)&lt;br/&gt;
&amp;nbsp;- private &amp;#39;asTypeCache&amp;#39; &amp;#39;Ljava/lang/invoke/MethodHandle;&amp;#39; @24 null (0x00000000)&lt;br/&gt;
&amp;nbsp;- private &amp;#39;asTypeSoftCache&amp;#39; &amp;#39;Ljava/lang/ref/SoftReference;&amp;#39; @28 null (0x00000000)&lt;br/&gt;
&amp;nbsp;- final &amp;#39;argL0&amp;#39; &amp;#39;Ljava/lang/Object;&amp;#39; @32 a &amp;#39;java/lang/invoke/DirectMethodHandle&amp;#39;{0x000000008768f698} (0x8768f698)&lt;br/&gt;
&amp;nbsp;- final &amp;#39;argL1&amp;#39; &amp;#39;Ljava/lang/Object;&amp;#39; @36 a &amp;#39;java/lang/invoke/BoundMethodHandle$Species_LL&amp;#39;{0x000000008768f6c0} (0x8768f6c0)&lt;br/&gt;
&lt;br/&gt;
R12=0x0 is null&lt;br/&gt;
&lt;br/&gt;
So we read the &amp;#39;form&amp;#39; field from a &amp;#39;BoundMethodHandle$Species_LL&amp;#39; and then another field from that &amp;#39;LambdaForm&amp;#39; object at offset 0x28 which is unexpectedly null.&lt;br/&gt;
&lt;br/&gt;
This is code from MethodHandles::jump_to_lambda_form and the second read is from the java_lang_invoke_LambdaForm::vmentry_offset(). I verified this by adding a null check and it triggers.&lt;br/&gt;
&lt;br/&gt;
For some reason LambdaForm::vmentry is null. Maybe a race condition during initialization due to the weak memory model on AArch64.&lt;br/&gt;
&lt;br/&gt;
The vmentry field is not null anymore at the time the hs_err file is generated:&lt;br/&gt;
&amp;quot;a &amp;#39;java/lang/invoke/MemberName&amp;#39;{0x00000000a5323fd0} = {method} {0x0000ffff70905f18} &amp;#39;invoke&amp;#39; &amp;quot;&lt;br/&gt;
&lt;br/&gt;
Which suggests that this is indeed a race condition.&lt;br/&gt;
&lt;br/&gt;
After digging around in the MethodHandle implementation, I found this suspicious code in MethodHandle::updateForm:&lt;br/&gt;
&lt;br/&gt;
newForm.prepare(); // as in MethodHandle.&amp;lt;init&amp;gt;&lt;br/&gt;
UNSAFE.putReference(this, FORM_OFFSET, newForm);&lt;br/&gt;
UNSAFE.fullFence();&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&quot;https://github.com/openjdk/jdk/blob/36314a90c15e2ab2a9b32c2e471655c1b07d452c/src/java.base/share/classes/java/lang/invoke/MethodHandle.java#L1883&quot;&gt;https://github.com/openjdk/jdk/blob/36314a90c15e2ab2a9b32c2e471655c1b07d452c/src/java.base/share/classes/java/lang/invoke/MethodHandle.java#L1883&lt;/a&gt;&lt;br/&gt;
&lt;br/&gt;
The LambdaForm &amp;#39;newForm&amp;#39; can have &amp;#39;vmentry`set to null and the field is then set in &amp;#39;newForm.prepare()&amp;#39;. The LambdaForm is then published by the &amp;#39;UNSAFE.putReference&amp;#39; store but there is nothing that prevents another thread from observing a not fully initialized object. I.e., another thread can observe &amp;#39;vmentry == null&amp;#39;. Maybe the &amp;#39;UNSAFE.fullFence()&amp;#39; was supposed to fix this but then it&amp;#39;s at the wrong place. A &amp;#39;UNSAFE.storeStoreFence()&amp;#39; before publishing should be sufficient. Running more tests to confirm.</description>
                <environment></environment>
        <key id="5139836">JDK-8340812</key>
            <summary>LambdaForm customization via MethodHandle::updateForm is not thread safe</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="2" iconUrl="https://bugs.openjdk.org/images/jbsImages/p2.png">P2</priority>
                        <status id="6" iconUrl="https://bugs.openjdk.org/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="thartmann">Tobias Hartmann</assignee>
                                    <reporter username="thartmann">Tobias Hartmann</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>intermittent</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>jdk23u-fix-SQE-ok</label>
                            <label>jdk23u-fix-request</label>
                            <label>jdk23u-fix-yes</label>
                    </labels>
                <created>Tue, 24 Sep 2024 05:45:50 -0700</created>
                <updated>Thu, 23 Jan 2025 06:31:37 -0800</updated>
                            <resolved>Wed, 25 Sep 2024 23:07:45 -0700</resolved>
                                    <version>8</version>
                    <version>11</version>
                    <version>17</version>
                    <version>21</version>
                    <version>24</version>
                                    <fixVersion>24</fixVersion>
                                    <component>core-libs</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                                                                <comments>
                            <comment id="14718820" author="roboduke" created="Mon, 4 Nov 2024 01:01:34 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/3024&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/3024&lt;/a&gt;&lt;br/&gt;
Date: 2024-11-04 08:55:40 +0000</comment>
                            <comment id="14718818" author="roboduke" created="Mon, 4 Nov 2024 00:58:24 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/1119&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/1119&lt;/a&gt;&lt;br/&gt;
Date: 2024-11-04 08:52:44 +0000</comment>
                            <comment id="14718813" author="goetz" created="Mon, 4 Nov 2024 00:52:07 -0800"  >Fix request [17u,21u]&lt;br/&gt;
&lt;br/&gt;
I backport this for parity with 17.0.14-oracle,21.0.6-oracle.&lt;br/&gt;
Medium risk, changes to synchronization are always risky.&lt;br/&gt;
Clean backport to 21, resolved Copyright in 17, probably clean anyways.&lt;br/&gt;
Test passes, but also without the fix. Test times out with slowdebug. SAP nightly testing passed.</comment>
                            <comment id="14711767" author="roboduke" created="Wed, 9 Oct 2024 22:05:54 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk23u/pull/149&quot;&gt;https://git.openjdk.org/jdk23u/pull/149&lt;/a&gt;&lt;br/&gt;
Date: 2024-10-10 05:00:43 +0000</comment>
                            <comment id="14711765" author="thartmann" created="Wed, 9 Oct 2024 22:02:24 -0700"  >[jdk23u-fix-request]&lt;br/&gt;
Already backported to Oracle JDK 11u, 17u and 21u. Low risk, applies cleanly. Tier1-3 pass.</comment>
                            <comment id="14708023" author="dukebot" created="Wed, 25 Sep 2024 23:07:44 -0700"  >Changeset: 47c10694&lt;br/&gt;
Branch: master&lt;br/&gt;
Author:    Tobias Hartmann &amp;lt;&lt;a href=&apos;mailto:thartmann@openjdk.org&apos;&gt;thartmann@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-09-26 06:03:29 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/47c10694c66bc131c8a5e1572340415b8daaba08&quot;&gt;https://git.openjdk.org/jdk/commit/47c10694c66bc131c8a5e1572340415b8daaba08&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14707716" author="roboduke" created="Tue, 24 Sep 2024 23:27:08 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/21160&quot;&gt;https://git.openjdk.org/jdk/pull/21160&lt;/a&gt;&lt;br/&gt;
Date: 2024-09-24 14:18:58 +0000</comment>
                            <comment id="14707443" author="jrose" created="Tue, 24 Sep 2024 08:32:51 -0700"  >Good analysis Jorn.&lt;br/&gt;
&lt;br/&gt;
Background:  Originally, LFs supported mixed-mode execution, starting as interpreted and eventually warming up and compiling.  This was nice for one reason:  The interpreter (a single page of code) provided a clear formal semantics for LFs.  The dynamics of the mixed mode execution never panned out as a useful thing.&lt;br/&gt;
&lt;br/&gt;
But MHs also support mixed-mode execution, and this does seem to have useful dynamics.  A MH can be patched to upgrade to a specialized form.  This seems to be necessary for performance of MHs which are non-constant.  (Constant MHs get open-coded by the JIT regardless of how intensely their LF is optimized.)&lt;br/&gt;
&lt;br/&gt;
I suggest putting release fences in both places where these sensitive behavioral links are patched: Both after vmentry is set (and maybe before also), and after MH::form is reset (if/as we do this tricky bit).</comment>
                            <comment id="14707423" author="thartmann" created="Tue, 24 Sep 2024 07:22:03 -0700"  >Hi Jorn, thanks for your quick feedback and background! Please see my draft PR for some more details: &lt;a href=&quot;https://github.com/openjdk/jdk/pull/21160&quot;&gt;https://github.com/openjdk/jdk/pull/21160&lt;/a&gt;</comment>
                            <comment id="14707411" author="jvernee" created="Tue, 24 Sep 2024 07:01:10 -0700"  >Hey Tobias, nice find! Your analysis looks correct to me. I think this scenario can occur when one thread is customizing a MethodHandle, while another thread is executing the same MethodHandle. It seems possible for the second thread to see the partially initialized LambdaForm.&lt;br/&gt;
&lt;br/&gt;
We have a similar pattern in the constructor of MethodHandle, which also calls LF.prepare. But, since MH has final fields, I think we are saved by the barrier at the end of the constructor. But, I remember seeing some work to relax the barriers that are emitted at the end of the constructor on arm as well. I think for consistency we should put the store store barrier in LF.prepare after the vmentry field is written to.&lt;br/&gt;
&lt;br/&gt;
On a side note: I&amp;#39;ve been thinking that we should just eagerly initialize vmentry fields when constructing the lambda form, since that will prevent all these races (in some cases I&amp;#39;ve seen the LF being initialized up to 512 times, once per core, resulting in 511 discarded classes). The code was originally written so that a LF could be lazily compiled, and the vmentry could be switched part way through its execution, but that has been turned off for a long time. It also doesn&amp;#39;t play well with some of the JIT compilers (see e.g. &lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8300210&quot;&gt;https://bugs.openjdk.org/browse/JDK-8300210&lt;/a&gt; but Graal also has problems with that IIRC). I did some investigation with Claes to initialize LFs more lazily to improve startup, but it looks like leyden pre-generation of these classes is just better.</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5143123">JDK-8343612</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5143126">JDK-8343615</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5140489">JDK-8341383</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5140492">JDK-8341386</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5140496">JDK-8341390</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5141289">JDK-8342015</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10002">
                    <name>Duplicate</name>
                                            <outwardlinks description="duplicates">
                                                        </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5091462">JDK-8300210</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                                        </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i381nn:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17417"><![CDATA[b17]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="213"><![CDATA[java.lang.invoke]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10100" key="com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons">
                        <customfieldname>Verification</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17000"><![CDATA[Verified]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                </customfields>
    </item>
</channel>
</rss>