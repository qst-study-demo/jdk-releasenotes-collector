<!-- 
RSS generated by JIRA (9.12.27#9120027-sha1:edc4490121e366e9e7bd2213d532dbe7e028fc5d) at Sat Sep 27 10:27:42 UTC 2025

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>Java Bug System</title>
    <link>https://bugs.openjdk.org</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-us</language>    <build-info>
        <version>9.12.27</version>
        <build-number>9120027</build-number>
        <build-date>02-09-2025</build-date>
    </build-info>


<item>
            <title>[JDK-8335662] [AArch64] C1: guarantee(val &lt; (1ULL &lt;&lt; nbits)) failed: Field too big for insn</title>
                <link>https://bugs.openjdk.org/browse/JDK-8335662</link>
                <project id="10100" key="JDK">JDK</project>
                    <description>The ComplexLockingAndMultiThreading.class (encounters bug) has been produced by fuzzing the class-file, from the ComplexLockingAndMultiThreading.java (this runs just fine).&lt;br/&gt;
&lt;br/&gt;
Reproduces on JDK 22, 23, 24&lt;br/&gt;
Probably older versions are affected by the bug, but for JDK21 the class-file format is too new. See more info below.&lt;br/&gt;
&lt;br/&gt;
---------- Summary -------------&lt;br/&gt;
Most likely, the locals table exceeds a certain size, and that creates a much larger offset than expected, which the aarch64 backend is not ready to handle.&lt;br/&gt;
&lt;br/&gt;
The size of the table is 4100 = 0x1004. The offset is 32824 = 0x8038.&lt;br/&gt;
&lt;br/&gt;
Most likely, this is an issue in the aarch64 backend, and the encoding must be fixed.&lt;br/&gt;
A similar bug that I had found recently, and is fixed already:&lt;br/&gt;
&lt;a href=&quot;https://bugs.openjdk.org/browse/JDK-8319690&quot; title=&quot;[AArch64] C2 compilation hits offset_ok_for_immed: assert &amp;quot;c2 compiler bug&amp;quot;&quot; class=&quot;issue-link&quot; data-issue-key=&quot;JDK-8319690&quot;&gt;&lt;strike&gt;JDK-8319690&lt;/strike&gt;&lt;/a&gt;: [AArch64] C2 compilation hits offset_ok_for_immed: assert &amp;quot;c2 compiler bug&amp;quot;&lt;br/&gt;
&lt;br/&gt;
---------- Reproducing -------------&lt;br/&gt;
&lt;br/&gt;
java ComplexLockingAndMultiThreading&lt;br/&gt;
&lt;br/&gt;
debug:&lt;br/&gt;
#  Internal Error (/scratch/empeter/jdk-fork1/open/src/hotspot/cpu/aarch64/assembler_aarch64.hpp:548), pid=2672487, tid=2672502&lt;br/&gt;
#  assert(offset_ok_for_immed(offset(), size)) failed: must be, was: 32824, 3&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (23.0) (fastdebug build 23-internal-2024-05-22-1101113.empeter...)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (fastdebug 23-internal-2024-05-22-1101113.empeter..., mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)&lt;br/&gt;
&lt;br/&gt;
Current CompileTask:&lt;br/&gt;
C1:139   44 %s!   3       ComplexLockingAndMultiThreading::synchronizedMethod @ 23 (74 bytes)&lt;br/&gt;
&lt;br/&gt;
Stack: [0x0000fffd8cb70000,0x0000fffd8cd70000],  sp=0x0000fffd8cd6bae0,  free space=2030k&lt;br/&gt;
Native frames: (J=compiled Java code, j=interpreted, Vv=VM code, C=native code)&lt;br/&gt;
V  [libjvm.so+0x41d548]  Address::encode(Instruction_aarch64*) const+0x348  (assembler_aarch64.hpp:548)&lt;br/&gt;
V  [libjvm.so+0x41d988]  Assembler::ld_st2(Register, Address const&amp;amp;, int, int, int)+0x1b8&lt;br/&gt;
V  [libjvm.so+0x67ed1c]  LIR_Assembler::osr_entry()+0x2c8&lt;br/&gt;
V  [libjvm.so+0x672f08]  LIR_Assembler::emit_lir_list(LIR_List*)+0xf8&lt;br/&gt;
V  [libjvm.so+0x6737b0]  LIR_Assembler::emit_code(BlockList*)+0x270&lt;br/&gt;
V  [libjvm.so+0x61b280]  Compilation::emit_code_body()+0x130&lt;br/&gt;
V  [libjvm.so+0x61b880]  Compilation::compile_java_method()+0x370&lt;br/&gt;
V  [libjvm.so+0x61c18c]  Compilation::compile_method()+0x1f8&lt;br/&gt;
V  [libjvm.so+0x61c7bc]  Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, bool, DirectiveSet*)+0x27c&lt;br/&gt;
V  [libjvm.so+0x61e568]  Compiler::compile_method(ciEnv*, ciMethod*, int, bool, DirectiveSet*)+0xa4&lt;br/&gt;
V  [libjvm.so+0x8d1b34]  CompileBroker::invoke_compiler_on_method(CompileTask*)+0x7d4&lt;br/&gt;
V  [libjvm.so+0x8d2674]  CompileBroker::compiler_thread_loop()+0x510&lt;br/&gt;
V  [libjvm.so+0xd36900]  JavaThread::thread_main_inner()+0xcc&lt;br/&gt;
V  [libjvm.so+0x159dae0]  Thread::call_run()+0xac&lt;br/&gt;
&lt;br/&gt;
product:&lt;br/&gt;
#  Internal Error (assembler_aarch64.hpp:246), pid=2673045, tid=2673064&lt;br/&gt;
#  guarantee(val &amp;lt; (1ULL &amp;lt;&amp;lt; nbits)) failed: Field too big for insn&lt;br/&gt;
#&lt;br/&gt;
# JRE version: Java(TM) SE Runtime Environment (23.0) (build 23-internal-2024-05-22-1101275.empeter...)&lt;br/&gt;
# Java VM: Java HotSpot(TM) 64-Bit Server VM (23-internal-2024-05-22-1101275.empeter..., mixed mode, tiered, compressed oops, compressed class ptrs, g1 gc, linux-aarch64)&lt;br/&gt;
&lt;br/&gt;
Maybe older versions are affected, but for JDK21 the class-file format is too new.&lt;br/&gt;
If you fix this: try to find another reproducer that works further back.&lt;br/&gt;
&lt;br/&gt;
The only difference between the original and the fuzzed diff seems to be a bit that changes the locals number:&lt;br/&gt;
&lt;br/&gt;
&lt;a href=&apos;mailto:emanuel@emanuel-oracle&apos;&gt;emanuel@emanuel-oracle&lt;/a&gt;:xyz$ javap -c -v -p ComplexLockingAndMultiThreading.class &amp;gt; a.p&lt;br/&gt;
&lt;a href=&apos;mailto:emanuel@emanuel-oracle&apos;&gt;emanuel@emanuel-oracle&lt;/a&gt;:xyz$ vim a.p &lt;br/&gt;
&lt;a href=&apos;mailto:emanuel@emanuel-oracle&apos;&gt;emanuel@emanuel-oracle&lt;/a&gt;:xyz$ javap -c -v -p ComplexLockingAndMultiThreading.class.orig.class &amp;gt; b.p&lt;br/&gt;
&lt;a href=&apos;mailto:emanuel@emanuel-oracle&apos;&gt;emanuel@emanuel-oracle&lt;/a&gt;:xyz$ diff a.p b.p &lt;br/&gt;
1c1&lt;br/&gt;
&amp;lt; Classfile xyz/ComplexLockingAndMultiThreading.class&lt;br/&gt;
---&lt;br/&gt;
&amp;gt; Classfile xyz/ComplexLockingAndMultiThreading.class.orig.class&lt;br/&gt;
3c3&lt;br/&gt;
&amp;lt;   SHA-256 checksum dd5170690764b6c7e3624a232bfe9632836941aab678e78330ae3676ea5f238d&lt;br/&gt;
---&lt;br/&gt;
&amp;gt;   SHA-256 checksum 8a9e0c859d99f105e28b894cbb328b8ce29afc13f745ed5599045472c8aa7da7&lt;br/&gt;
220c220&lt;br/&gt;
&amp;lt;       stack=2, locals=4100, args_size=0&lt;br/&gt;
---&lt;br/&gt;
&amp;gt;       stack=2, locals=4, args_size=0&lt;br/&gt;
&lt;br/&gt;
----------------------------------------------------------------------------------&lt;br/&gt;
&lt;br/&gt;
A part of the task will be to extract a simpler JASM file that reproduces this bug, and to check if it reproduces on older JDK. I tried it quickly, like below, but it did not work:&lt;br/&gt;
&lt;br/&gt;
java -jar ~/Documents/asmtools-7.0-build/release/lib/asmtools.jar jdis ComplexLockingAndMultiThreading.class &amp;gt; X.jasm&lt;br/&gt;
(rename class to X)&lt;br/&gt;
java -jar ~/Documents/asmtools-7.0-build/release/lib/asmtools.jar jasm X.jasm &lt;br/&gt;
X.jasm (34:39) Error: Wrong tag: Either Method or InterfaceMethod expected.&lt;br/&gt;
			MethodHandle REF_invokeStatic:Method X.lambda$main$0:&amp;quot;()V&amp;quot;,&lt;br/&gt;
			                                    ^&lt;br/&gt;
1 error</description>
                <environment></environment>
        <key id="5133428">JDK-8335662</key>
            <summary>[AArch64] C1: guarantee(val &lt; (1ULL &lt;&lt; nbits)) failed: Field too big for insn</summary>
                <type id="1" iconUrl="https://bugs.openjdk.org/secure/viewavatar?size=xsmall&amp;avatarId=14703&amp;avatarType=issuetype">Bug</type>
                                            <priority id="3" iconUrl="https://bugs.openjdk.org/images/jbsImages/p3.png">P3</priority>
                        <status id="5" iconUrl="https://bugs.openjdk.org/images/icons/statuses/resolved.png" description="A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.">Resolved</status>
                    <statusCategory id="3" key="done" colorName="success"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="crakoczy">Chad Rakoczy</assignee>
                                    <reporter username="epeter">Emanuel Peter</reporter>
                        <labels>
                            <label>amazon-interest</label>
                            <label>c1</label>
                            <label>jdk17u-fix-request</label>
                            <label>jdk17u-fix-yes</label>
                            <label>jdk21u-fix-request</label>
                            <label>jdk21u-fix-yes</label>
                            <label>oracle-triage-24</label>
                            <label>starter</label>
                    </labels>
                <created>Wed, 3 Jul 2024 23:46:23 -0700</created>
                <updated>Mon, 24 Mar 2025 08:24:30 -0700</updated>
                            <resolved>Fri, 18 Oct 2024 15:53:31 -0700</resolved>
                                    <version>11</version>
                    <version>17</version>
                    <version>21</version>
                    <version>22</version>
                    <version>23</version>
                    <version>24</version>
                                    <fixVersion>24</fixVersion>
                                    <component>hotspot</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>7</watches>
                                                                                                                <comments>
                            <comment id="14762505" author="roboduke" created="Thu, 20 Mar 2025 05:52:31 -0700"  >[jdk17u-fix-request] Approval Request from Dmitry Chuyko&lt;br/&gt;
This small instruction encoding fix in C1 for aarch64 prevents possible assertion failures during OSR. The 17u backport is also clean.&lt;br/&gt;
&lt;br/&gt;
Testing: tier1,2 on linux-aarch64. The new test passes after patching.</comment>
                            <comment id="14762444" author="roboduke" created="Thu, 20 Mar 2025 02:49:09 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk17u-dev/pull/3390&quot;&gt;https://git.openjdk.org/jdk17u-dev/pull/3390&lt;/a&gt;&lt;br/&gt;
Date: 2025-03-20 09:32:23 +0000</comment>
                            <comment id="14759178" author="roboduke" created="Mon, 10 Mar 2025 04:10:53 -0700"  >[jdk21u-fix-request] Approval Request from Dmitry Chuyko&lt;br/&gt;
This a clean backport of a small instruction encoding fix in LIR_Assembler::osr_entry() for aarch64. Without the fix the JVM can fail during OSR in C1 (the path is common but the guarantee violation is rare). The bug was originally fixed in JDK 24 so I intend to integrate the backport only after JDK 24 is released. After jdk21u I&amp;#39;d like to proceed with jdk17u.&lt;br/&gt;
&lt;br/&gt;
Testing: tier1,2 on linux-aarch64. The new test fails on current jdk21u and passes after patching.</comment>
                            <comment id="14758541" author="roboduke" created="Thu, 6 Mar 2025 06:35:31 -0800"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk21u-dev/pull/1456&quot;&gt;https://git.openjdk.org/jdk21u-dev/pull/1456&lt;/a&gt;&lt;br/&gt;
Date: 2025-03-06 14:25:49 +0000</comment>
                            <comment id="14714925" author="dukebot" created="Fri, 18 Oct 2024 15:53:30 -0700"  >Changeset: 401d0d6b&lt;br/&gt;
Branch: master&lt;br/&gt;
Author:    Chad Rakoczy &amp;lt;&lt;a href=&apos;mailto:chadrako@amazon.com&apos;&gt;chadrako@amazon.com&lt;/a&gt;&amp;gt;&lt;br/&gt;
Committer: Paul Hohensee &amp;lt;&lt;a href=&apos;mailto:phh@openjdk.org&apos;&gt;phh@openjdk.org&lt;/a&gt;&amp;gt;&lt;br/&gt;
Date:      2024-10-18 22:52:40 +0000&lt;br/&gt;
URL:       &lt;a href=&quot;https://git.openjdk.org/jdk/commit/401d0d6b09ea422eacecda2900793a416097dc9b&quot;&gt;https://git.openjdk.org/jdk/commit/401d0d6b09ea422eacecda2900793a416097dc9b&lt;/a&gt;&lt;br/&gt;
</comment>
                            <comment id="14712734" author="roboduke" created="Mon, 14 Oct 2024 10:56:41 -0700"  >A pull request was submitted for review.&lt;br/&gt;
Branch: master&lt;br/&gt;
URL: &lt;a href=&quot;https://git.openjdk.org/jdk/pull/21473&quot;&gt;https://git.openjdk.org/jdk/pull/21473&lt;/a&gt;&lt;br/&gt;
Date: 2024-10-11 16:51:16 +0000</comment>
                            <comment id="14712239" author="JIRAUSER20915" created="Fri, 11 Oct 2024 09:41:09 -0700"  >Crash occurs in C1 during OSR when copying locks from interpreter frame to compiled frame. All loads used immediate offset regardless of offset size causing crash when it is over the max size for the instruction (32760). Fix is to check the size before preforming the load and storing the offset in a register if needed.</comment>
                            <comment id="14711900" author="eastigeevich" created="Thu, 10 Oct 2024 07:03:17 -0700"  >Assigned to [~crakoczy] who is learning C2 and ARM64.</comment>
                            <comment id="14687150" author="thartmann" created="Thu, 4 Jul 2024 07:38:14 -0700"  >ILW = Guarantee failure during C2 compilation, edge case; reproducible with fuzzer generated test on AArch64, disable compilation of affected method = HLM = P3</comment>
                    </comments>
                <issuelinks>
                            <issuelinktype id="10200">
                    <name>Backport</name>
                                            <outwardlinks description="backported by">
                                        <issuelink>
            <issuekey id="5153388">JDK-8352436</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5153795">JDK-8352736</issuekey>
        </issuelink>
                            </outwardlinks>
                                                        </issuelinktype>
                            <issuelinktype id="10003">
                    <name>Relates</name>
                                            <outwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5142366">JDK-8342962</issuekey>
        </issuelink>
                            </outwardlinks>
                                                                <inwardlinks description="relates to">
                                        <issuelink>
            <issuekey id="5142069">JDK-8342701</issuekey>
        </issuelink>
            <issuelink>
            <issuekey id="5142114">JDK-8342736</issuekey>
        </issuelink>
                            </inwardlinks>
                                    </issuelinktype>
                    </issuelinks>
                <attachments>
                            <attachment id="109949" name="ComplexLockingAndMultiThreading.class" size="2228" author="epeter" created="Wed, 3 Jul 2024 23:46:41 -0700"/>
                            <attachment id="109946" name="ComplexLockingAndMultiThreading.java" size="1300" author="epeter" created="Wed, 3 Jul 2024 23:42:32 -0700"/>
                            <attachment id="109948" name="hs_err_pid3970557.log" size="76008" author="epeter" created="Wed, 3 Jul 2024 23:40:24 -0700"/>
                            <attachment id="109947" name="replay_pid3970557.log" size="145808" author="epeter" created="Wed, 3 Jul 2024 23:40:24 -0700"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                <customfield id="customfield_10000" key="com.atlassian.jira.plugin.system.customfieldtypes:multiselect">
                        <customfieldname>CPU</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="19300"><![CDATA[aarch64]]></customfieldvalue>
    
                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11700" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10600" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-fixedBackportedCustomfield">
                        <customfieldname>Fixed</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                                                                                                    <customfield id="customfield_11100" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i370ff:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_11004" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>9223372036854775807</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10006" key="com.atlassian.jira.plugin.system.customfieldtypes:select">
                        <customfieldname>Resolved In Build</customfieldname>
                        <customfieldvalues>
                                <customfieldvalue key="17412"><![CDATA[b21]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                                            <customfield id="customfield_10008" key="com.oracle.jira.jira-subcomponent-plugin:oracle-subComponentField">
                        <customfieldname>Subcomponent</customfieldname>
                        <customfieldvalues>
                             <customfieldvalue key="208"><![CDATA[compiler]]></customfieldvalue> 
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_10601" key="com.oracle.jira.javabugsystem-jira-plugin:jbs-targetBackportedCustomfield">
                        <customfieldname>Targeted</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                    </customfields>
    </item>
</channel>
</rss>